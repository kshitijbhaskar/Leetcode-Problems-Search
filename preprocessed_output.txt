delete middle node linked list given head linked list delete middle node and return head modified linked list middle node linked list size n th node from start using based indexing where x denotes largest integer less than or equal and middle nodes and respectively example input head output explanation above figure represents given linked list indices nodes written below since node value middle node which marked red return new list after removing this node example input head output explanation above figure represents given linked list node value middle node which marked red example input head output explanation above figure represents given linked list node value middle node which marked red node value only node remaining after removing node constraints number nodes list range nodeval
minimum difference between largest and smallest value three moves given integer array nums one move can choose one element nums and change any value return minimum difference between largest and smallest value nums after performing most three moves example input nums output explanation can make most moves first move change nums becomes second move change nums becomes third move change nums becomes after performing moves difference between minimum and maximum example input nums output explanation can make most moves first move change nums becomes second move change nums becomes third move change nums becomes after performing moves difference between minimum and maximum can be shown that there no way make difference moves example input nums output explanation can make most moves first move change nums becomes second move change nums becomes third move change nums becomes after performing moves difference between minimum and maximum constraints numslength numsi
minimum number frogs croaking given string croakoffrogs which represents combination string croak from different frogs that multiple frogs can croak same time so multiple croak mixed return minimum number different frogs finish all croaks given string valid croak means frog printing five letters and sequentially frogs have print all five letters finish croak if given string not combination valid croak return example input croakoffrogs croakcroak output explanation one frog yelling croak twice example input croakoffrogs crcoakroak output explanation minimum number frogs two first frog could yell crcoakroak second frog could yell later crcoakroak example input croakoffrogs croakcrook output explanation given string invalid combination croak from different frogs constraints croakoffrogslength croakoffrogs either or
replace words english have concept called root which can be followed some other word form another longer word lets call this word successor example when root followed successor word other can form new word another given dictionary consisting many roots and sentence consisting words separated spaces replace all successors sentence root forming if successor can be replaced more than one root replace root that has shortest length return sentence after replacement example input dictionary catbatrat sentence cattle rattled battery output cat rat bat example input dictionary abc sentence aadsfasf absbs bbab cadsfafs output constraints dictionarylength dictionaryilength dictionaryi consists only lowercase letters sentencelength sentence consists only lowercase letters and spaces number words sentence range length each word sentence range every two consecutive words sentence will be separated exactly one space sentence does not have leading or trailing spaces
remove all adjacent duplicates string ii given string and integer duplicate removal consists choosing adjacent and equal letters from and removing them causing left and right side deleted substring concatenate together repeatedly make duplicate removals until no longer can return final string after all such duplicate removals have been made guaranteed that answer unique example input abcd output abcd explanation theres nothing delete example input deeedbbcccbdaa output aa explanation first delete eee and ccc get ddbbbdaa then delete bbb get dddaa finally delete ddd get aa example input pbbcggttciiippooaais output ps constraints slength only contains lowercase english letters
longest path different adjacent characters given tree ie connected undirected graph that has no cycles rooted node consisting nodes numbered from tree represented indexed array parent size where parenti parent node since node root parent also given string length where si character assigned node return length longest path tree such that no pair adjacent nodes path have same character assigned them example input parent abacbe output explanation longest path where each two adjacent nodes have different characters tree path length this path so returned can be proven that there no longer path that satisfies conditions example input parent aabc output explanation longest path where each two adjacent nodes have different characters path length this path so returned constraints parentlength slength parenti all parent parent represents valid tree consists only lowercase english letters
roman integer roman numerals represented seven different symbols and symbol value example written as ii roman numeral just two ones added together written as xii which simply ii number written as xxvii which xx ii roman numerals usually written largest smallest from left right however numeral four not iiii instead number four written as iv because one before five subtract making four same principle applies number nine which written as ix there six instances where subtraction used can be placed before and make and can be placed before and make and can be placed before and make and given roman numeral convert integer example input iii output explanation iii example input lviii output explanation iii example input mcmxciv output explanation cm xc and iv constraints slength contains only characters guaranteed that valid roman numeral range
smallest value rearranged number given integer num rearrange digits num such that its value minimized and does not contain any leading zeros return rearranged number minimal value note that sign number does not change after rearranging digits example input num output explanation possible arrangements digits arrangement smallest value that does not contain any leading zeros example input num output explanation some possible arrangements digits arrangement smallest value that does not contain any leading zeros constraints num
contains duplicate given integer array nums return true if any value appears least twice array and return false if every element distinct example input nums output true example input nums output false example input nums output true constraints numslength numsi
minimum swaps make strings equal given two strings and equal length consisting letters and only your task make these two strings equal each other can swap any two characters that belong different strings which means swap si and sj return minimum number swaps required make and equal or return if impossible do so example input xx yy output explanation swap and yx yx example input xy yx output explanation swap and yy xx swap and xy xy note that cannot swap and make equal yx cause can only swap chars different strings example input xx xy output constraints slength slength slength slength only contain or
longest common subsequence given two strings text and text return length their longest common subsequence if there no common subsequence return subsequence string new string generated from original string some characters can be none deleted without changing relative order remaining characters example ace subsequence abcde common subsequence two strings subsequence that common both strings example input text abcde text ace output explanation longest common subsequence ace and its length example input text abc text abc output explanation longest common subsequence abc and its length example input text abc text def output explanation there no such common subsequence so result constraints textlength textlength text and text consist only lowercase english characters
strange printer ii there strange printer following two special requirements each turn printer will print solid rectangular pattern single color grid this will cover up existing colors rectangle once printer has used color above operation same color cannot be used again given matrix targetgrid where targetgridrowcol color position row col grid return true if possible print matrix targetgrid otherwise return false example input targetgrid output true example input targetgrid output true example input targetgrid output false explanation impossible form targetgrid because not allowed print same color different turns constraints targetgridlength targetgridilength targetgridrowcol
maximum ice cream bars sweltering summer day and boy wants buy some ice cream bars store there ice cream bars given array costs length where costsi price ith ice cream bar coins boy initially has coins coins spend and wants buy as many ice cream bars as possible note boy can buy ice cream bars any order return maximum number ice cream bars boy can buy coins coins must solve problem counting sort example input costs coins output explanation boy can buy ice cream bars indices total price example input costs coins output explanation boy cannot afford any ice cream bars example input costs coins output explanation boy can buy all ice cream bars total price constraints costslength costsi coins
linked list binary tree given binary tree root and linked list head as first node return true if all elements linked list starting from head correspond some downward path connected binary tree otherwise return false this context downward path means path that starts some node and goes downwards example input head root nullnullnullnullnullnullnull output true explanation nodes blue form subpath binary tree example input head root nullnullnullnullnullnullnull output true example input head root nullnullnullnullnullnullnull output false explanation there no path binary tree that contains all elements linked list from head constraints number nodes tree will be range number nodes list will be range nodeval each node linked list and binary tree
find student that will replace chalk there students class numbered from teacher will give each student problem starting student number then student number and so until teacher reaches student number after that teacher will restart process starting student number again given indexed integer array chalk and integer there initially pieces chalk when student number given problem solve will use chalki pieces chalk solve that problem however if current number chalk pieces strictly less than chalki then student number will be asked replace chalk return index student that will replace chalk pieces example input chalk output explanation students go turns as follows student number uses chalk so student number uses chalk so student number uses chalk so student number uses chalk so student number uses chalk so student number uses chalk so student number does not have enough chalk so will have replace example input chalk output explanation students go turns as follows student number uses chalk so student number uses chalk so student number uses chalk so student number uses chalk so student number uses chalk so student number uses chalk so student number uses chalk so student number uses chalk so student number uses chalk so student number does not have enough chalk so will have replace constraints chalklength chalki
median two sorted arrays given two sorted arrays nums and nums size and respectively return median two sorted arrays overall run time complexity should be olog mn example input nums nums output explanation merged array and median example input nums nums output explanation merged array and median constraints numslength numslength numsi numsi
decode ways message containing letters from az can be encoded into numbers using following mapping decode encoded message all digits must be grouped then mapped back into letters using reverse mapping above there may be multiple ways example can be mapped into aajf grouping kjf grouping note that grouping invalid because cannot be mapped into since different from given string containing only digits return number ways decode test cases generated so that answer fits bit integer example input output explanation could be decoded as ab or example input output explanation could be decoded as bz vf or bbf example input output explanation cannot be mapped because leading zero different from constraints slength contains only digits and may contain leading zeros
rotate image given matrix representing image rotate image degrees clockwise have rotate image inplace which means have modify input matrix directly do not allocate another matrix and do rotation example input matrix output example input matrix output constraints matrixlength matrixilength matrixij
find and replace pattern given list strings words and string pattern return list wordsi that match pattern may return answer any order word matches pattern if there exists permutation letters so that after replacing every letter pattern px get desired word recall that permutation letters bijection from letters letters every letter maps another letter and no two letters map same letter example input words abcdeqmeeaqqdkdccc pattern abb output meeaqq explanation mee matches pattern because there permutation ccc does not match pattern because not permutation since and map same letter example input words abc pattern output abc constraints patternlength wordslength wordsilength patternlength pattern and wordsi lowercase english letters
time needed buy tickets there people line queuing buy tickets where th person front line and th person back line given indexed integer array tickets length where number tickets that ith person would like buy ticketsi each person takes exactly second buy ticket person can only buy ticket time and has go back end line which happens instantaneously order buy more tickets if person does not have any tickets left buy person will leave line return time taken person position indexed finish buying tickets example input tickets output explanation first pass everyone line buys ticket and line becomes second pass everyone line buys ticket and line becomes person position has successfully bought tickets and took seconds example input tickets output explanation first pass everyone line buys ticket and line becomes next passes only person position buying tickets person position has successfully bought tickets and took seconds constraints ticketslength ticketsi
pairs songs total durations divisible given list songs where ith song has duration timei seconds return number pairs songs which their total duration seconds divisible formally want number indices such that timei timej example input time output explanation three pairs have total duration divisible time time total duration time time total duration time time total duration example input time output explanation all three pairs have total duration which divisible constraints timelength timei
longest repeating character replacement given string and integer can choose any character string and change any other uppercase english character can perform this operation most times return length longest substring containing same letter can get after performing above operations example input abab output explanation replace two as two bs or vice versa example input aababba output explanation replace one middle and form aabbbba substring bbbb has longest repeating letters which there may exists other ways achive this answer too constraints slength consists only uppercase english letters slength
check if original string exists given two encoded strings original string consisting lowercase english letters can be encoded following steps arbitrarily split into sequence some number nonempty substrings arbitrarily choose some elements possibly none sequence and replace each its length as numeric string concatenate sequence as encoded string example one way encode original string abcdefghijklmnop might be split as sequence ab cdefghijklmn choose second and third elements be replaced their lengths respectively sequence becomes ab concatenate elements sequence get encoded string abp given two encoded strings and consisting lowercase english letters and digits inclusive return true if there exists original string that could be encoded as both and otherwise return false note test cases generated such that number consecutive digits and does not exceed example input internationalization output true explanation possible that internationalization original string internationalization split internationalization do not replace any element concatenate internationalization which internationalization split nternationalizatio replace concatenate which example input le output true explanation possible that leetcode original string leetcode split et cod replace concatenate le which leetcode split leet code replace concatenate which example input ab cb output false explanation impossible original string encoded as must start letter original string encoded as must start letter constraints slength slength and consist digits inclusive and lowercase english letters only number consecutive digits and does not exceed
add two numbers ii given two nonempty linked lists representing two nonnegative integers most significant digit comes first and each their nodes contains single digit add two numbers and return sum as linked list may assume two numbers do not contain any leading zero except number itself example input output example input output example input output constraints number nodes each linked list range nodeval guaranteed that list represents number that does not have leading zeros follow up could solve without reversing input lists
construct quad tree given matrix grid and only want represent grid quadtree return root quadtree representing grid quadtree tree data structure which each internal node has exactly four children besides each node has two attributes val true if node represents grid or false if node represents grid notice that can assign val true or false when isleaf false and both accepted answer isleaf true if node leaf node tree or false if node has four children class node public boolean val public boolean isleaf public node topleft public node topright public node bottomleft public node bottomright can construct quadtree from twodimensional area using following steps if current grid has same value ie all or all set isleaf true and set val value grid and set four children null and stop if current grid has different values set isleaf false and set val any value and divide current grid into four subgrids as shown photo recurse each children proper subgrid if want know more about quadtree can refer wiki quadtree format dont need read this section solving problem this only if want understand output format here output represents serialized format quadtree using level order traversal where null signifies path terminator where no node exists below very similar serialization binary tree only difference that node represented as list isleaf val if value isleaf or val true represent as list isleaf val and if value isleaf or val false represent as example input grid output explanation explanation this example shown below notice that represnts false and represents true photo representing quadtree example input grid output nullnullnullnull explanation all values grid not same divide grid into four subgrids topleft bottomleft and bottomright each has same value topright have different values so divide into subgrids where each has same value explanation shown photo below constraints gridlength gridilength where
minimum window substring given two strings and lengths and respectively return minimum window substring such that every character including duplicates included window if there no such substring return empty string testcases will be generated such that answer unique example input adobecodebanc abc output banc explanation minimum window substring banc includes and from string example input output explanation entire string minimum window example input aa output explanation both as from must be included window since largest window only has one return empty string constraints slength tlength and consist uppercase and lowercase english letters follow up could find algorithm that runs om time
maximum height stacking cuboids given cuboids where dimensions ith cuboid cuboidsi widthi lengthi heighti indexed choose subset cuboids and place them each other can place cuboid cuboid if widthi widthj and lengthi lengthj and heighti heightj can rearrange any cuboids dimensions rotating put another cuboid return maximum height stacked cuboids example input cuboids output explanation cuboid placed bottom side facing down height cuboid placed next side facing down height cuboid placed next side facing down height total height example input cuboids output explanation cant place any cuboids other choose cuboid and rotate so that side facing down and its height example input cuboids output explanation after rearranging cuboids can see that all cuboids have same dimension can place side down all cuboids so their heights maximum height stacked cuboids constraints cuboidslength widthi lengthi heighti
palindrome partitioning given string partition such that every substring partition palindrome return all possible palindrome partitioning example input aab output aabaab example input output constraints slength contains only lowercase english letters
sum digits string after convert given string consisting lowercase english letters and integer first convert into integer replacing each letter its position alphabet ie replace then transform integer replacing sum its digits repeat transform operation times total example if zbax and then resulting integer would be following operations convert zbax transform transform return resulting integer after performing operations described above example input iiii output explanation operations as follows convert iiii transform thus resulting integer example input leetcode output explanation operations as follows convert leetcode transform transform thus resulting integer example input zbax output constraints slength consists lowercase english letters
cells odd values matrix there matrix that initialized all there also array indices where each indicesi ri ci represents indexed location perform some increment operations matrix each location indicesi do both following increment all cells row ri increment all cells column ci given and indices return number oddvalued cells matrix after applying increment all locations indices example input indices output explanation initial matrix after applying first increment becomes final matrix which contains odd numbers example input indices output explanation final matrix there no odd numbers final matrix constraints indiceslength ri ci follow up could solve this indiceslength time only extra space
minimum genetic mutation gene string can be represented character long string choices from and suppose need investigate mutation from gene string startgene gene string endgene where one mutation defined as one single character changed gene string example aaccggtt aaccggta one mutation there also gene bank bank that records all valid gene mutations gene must be bank make valid gene string given two gene strings startgene and endgene and gene bank bank return minimum number mutations needed mutate from startgene endgene if there no such mutation return note that starting point assumed be valid so might not be included bank example input startgene aaccggtt endgene aaccggta bank aaccggta output example input startgene aaccggtt endgene aaacggta bank aaccggtaaaccgctaaaacggta output constraints banklength startgenelength endgenelength bankilength startgene endgene and banki consist only characters
closest room there hotel rooms rooms represented integer array rooms where roomsi roomidi sizei denotes that there room room number roomidi and size equal sizei each roomidi guaranteed be unique also given queries array queries where queriesj preferredj minsizej answer jth query room number id room such that room has size least minsizej and absid preferredj minimized where absx absolute value if there tie absolute difference then use room smallest such id if there no such room answer return array answer length where answerj contains answer jth query example input rooms queries output explanation answers queries as follows query room number closest as abs and its size least answer query there no rooms size least so answer query room number closest as abs and its size least answer example input rooms queries output explanation answers queries as follows query room number closest as abs and its size least answer query room numbers and both have sizes least answer since smaller query room number only room size least answer constraints roomslength querieslength roomidi preferredj sizei minsizej
combine two tables sql schema table person column name type personid int lastname varchar firstname varchar personid primary key column this table this table contains information about id some persons and their first and last names table address column name type addressid int personid int city varchar state varchar addressid primary key column this table each row this table contains information about city and state one person id personid write sql query report first name last name city and state each person person table if address personid not present address table report null instead return result table any order query result format following example example input person table personid lastname firstname wang allen alice bob address table addressid personid city state new york city new york leetcode california output firstname lastname city state allen wang null null bob alice new york city new york explanation there no address address table personid so return null their city and state addressid contains information about address personid
largest number least twice others given integer array nums where largest integer unique determine whether largest element array least twice as much as every other number array if return index largest element or return otherwise example input nums output explanation largest integer every other number array least twice as big as index value so return example input nums output explanation less than twice value so return constraints numslength numsi largest element nums unique
kth smallest product two sorted arrays given two sorted indexed integer arrays nums and nums as well as integer return kth based smallest product numsi numsj where numslength and numslength example input nums nums output explanation smallest products nums nums nums nums nd smallest product example input nums nums output explanation smallest products nums nums nums nums nums nums nums nums nums nums nums nums th smallest product example input nums nums output explanation smallest products nums nums nums nums nums nums rd smallest product constraints numslength numslength numsi numsj numslength numslength nums and nums sorted
vertical order traversal binary tree given root binary tree calculate vertical order traversal binary tree each node position row col its left and right children will be positions row col and row col respectively root tree vertical order traversal binary tree list toptobottom orderings each column index starting from leftmost column and ending rightmost column there may be multiple nodes same row and same column such case sort these nodes their values return vertical order traversal binary tree example input root nullnull output explanation column only node this column column nodes and this column that order from top bottom column only node this column column only node this column example input root output explanation column only node this column column only node this column column nodes and this column top so comes first and same position so order them their value before column only node this column column only node this column example input root output explanation this case exact same as example but nodes and swapped note that solution remains same since and same location and should be ordered their values constraints number nodes tree range nodeval
last day where can still cross there based binary matrix where represents land and represents water given integers row and col representing number rows and columns matrix respectively initially day entire matrix land however each day new cell becomes flooded water given based array cells where cellsi ri ci represents that ith day cell rith row and cith column based coordinates will be covered water ie changed want find last day that possible walk from top bottom only walking land cells can start from any cell top row and end any cell bottom row can only travel four cardinal directions left right up and down return last day where possible walk from top bottom only walking land cells example input row col cells output explanation above image depicts how matrix changes each day starting from day last day where possible cross from top bottom day example input row col cells output explanation above image depicts how matrix changes each day starting from day last day where possible cross from top bottom day example input row col cells output explanation above image depicts how matrix changes each day starting from day last day where possible cross from top bottom day constraints row col row col cellslength row col ri row ci col all values cells unique
classes more than students sql schema table courses column name type student varchar class varchar student class primary key column this table each row this table indicates name student and class which enrolled write sql query report all classes that have least five students return result table any order query result format following example example input courses table student class math english math biology math computer math math math output class math explanation math has students so include english has student so do not include biology has student so do not include computer has student so do not include
coloring border given integer matrix grid and three integers row col and color each value grid represents color grid square that location two squares belong same connected component if have same color and next each other any directions border connected component all squares connected component that either directionally adjacent square not component or boundary grid first or last row or column should color border connected component that contains square gridrowcol color return final grid example input grid row col color output example input grid row col color output example input grid row col color output constraints gridlength gridilength gridij color row col
count number homogenous substrings given string return number homogenous substrings since answer may be too large return modulo string homogenous if all characters string same substring contiguous sequence characters within string example input abbcccaa output explanation homogenous substrings listed as below appears times aa appears time appears times bb appears time appears times cc appears times ccc appears time example input xy output explanation homogenous substrings and example input zzzzz output constraints slength consists lowercase letters
first bad version product manager and currently leading team develop new product unfortunately latest version your product fails quality check since each version developed based previous version all versions after bad version also bad suppose have versions and want find out first bad one which causes all following ones be bad given api bool isbadversionversion which returns whether version bad implement function find first bad version should minimize number calls api example input bad output explanation call isbadversion false call isbadversion true call isbadversion true then first bad version example input bad output constraints bad
valid perfect square given positive integer num return true if num perfect square or false otherwise perfect square integer that square integer other words product some integer itself must not use any builtin library function such as sqrt example input num output true explanation return true because and integer example input num output false explanation return false because and not integer constraints num
special positions binary matrix given binary matrix mat return number special positions mat position called special if matij and all other elements row and column rows and columns indexed example input mat output explanation special position because mat and all other elements row and column example input mat output explanation and special positions constraints matlength matilength matij either or
items maximum sum there bag that consists items each item has number or written given four nonnegative integers numones numzeros numnegones and bag initially contains numones items written them numzeroes items written them numnegones items written them want pick exactly items among available items return maximum possible sum numbers written items example input numones numzeros numnegones output explanation have bag items numbers written them take items written them and get sum total can be proven that maximum possible sum example input numones numzeros numnegones output explanation have bag items numbers written them take items written them and item written and get sum total can be proven that maximum possible sum constraints numones numzeros numnegones numones numzeros numnegones
make two arrays equal reversing subarrays given two integer arrays equal length target and arr one step can select any nonempty subarray arr and reverse allowed make any number steps return true if can make arr equal target or false otherwise example input target arr output true explanation can follow next steps convert arr target reverse subarray arr becomes reverse subarray arr becomes reverse subarray arr becomes there multiple ways convert arr target this not only way do so example input target arr output true explanation arr equal target without any reverses example input target arr output false explanation arr does not have value and can never be converted target constraints targetlength arrlength targetlength targeti arri
minimum cost buying candies discount shop selling candies discount every two candies sold shop gives third candy free customer can choose any candy take away free as long as cost chosen candy less than or equal minimum cost two candies bought example if there candies costs and and customer buys candies costs and can take candy cost free but not candy cost given indexed integer array cost where costi denotes cost ith candy return minimum cost buying all candies example input cost output explanation buy candies costs and and take candy cost free total cost buying all candies this only way can buy candies note that cannot buy candies costs and and then take candy cost free cost free candy has be less than or equal minimum cost purchased candies example input cost output explanation way which can get minimum cost described below buy candies costs and take candy cost free buy candies costs and take last remaining candy cost free hence minimum cost buy all candies example input cost output explanation since there only candies buy both them there not third candy can take free hence minimum cost buy all candies constraints costlength costi
construct rectangle web developer needs know how design web pages size so given specific rectangular web pages area your job now design rectangular web page whose length and width satisfy following requirements area rectangular web page designed must equal given target area width should not be larger than length which means difference between length and width should be as small as possible return array where and length and width web page designed sequence example input area output explanation target area and all possible ways construct but according requirement illegal according requirement not optimal compared so length and width example input area output example input area output constraints area
number sets nonoverlapping line segments given points plane where ith point from find number ways can draw exactly nonoverlapping line segments such that each segment covers two or more points endpoints each segment must have integral coordinates line segments do not have cover all points and allowed share endpoints return number ways can draw nonoverlapping line segments since this number can be huge return modulo example input output explanation two line segments shown red and blue image above shows different ways example input output explanation ways example input output explanation total number possible ways draw line segments taking this number modulo gives us constraints
circular array loop playing game involving circular array nonzero integers nums each numsi denotes number indices forwardbackward must move if located index if numsi positive move numsi steps forward and if numsi negative move numsi steps backward since array circular may assume that moving forward from last element puts first element and moving backwards from first element puts last element cycle array consists sequence indices seq length where following movement rules above results repeating index sequence seq seq seqk seq every numsseqj either all positive or all negative return true if there cycle nums or false otherwise example input nums output true explanation graph shows how indices connected white nodes jumping forward while red jumping backward can see cycle and all its nodes white jumping same direction example input nums output false explanation graph shows how indices connected white nodes jumping forward while red jumping backward only cycle size so return false example input nums output true explanation graph shows how indices connected white nodes jumping forward while red jumping backward can see cycle and while size has node jumping forward and node jumping backward so not cycle can see cycle and all its nodes white jumping same direction constraints numslength numsi numsi follow up could solve time complexity and extra space complexity
minimum recolors get consecutive black blocks given indexed string blocks length where blocksi either or representing color ith block characters and denote colors white and black respectively also given integer which desired number consecutive black blocks one operation can recolor white block such that becomes black block return minimum number operations needed such that there least one occurrence consecutive black blocks example input blocks wbbwwbbwbw output explanation one way achieve consecutive black blocks recolor th rd and th blocks so that blocks bbbbbbbwbw can be shown that there no way achieve consecutive black blocks less than operations therefore return example input blocks wbwbbbw output explanation no changes need be made since consecutive black blocks already exist therefore return constraints blockslength blocksi either or
best time buy and sell stock given array prices where pricesi price given stock ith day want maximize your profit choosing single day buy one stock and choosing different day future sell that stock return maximum profit can achieve from this transaction if cannot achieve any profit return example input prices output explanation buy day price and sell day price profit note that buying day and selling day not allowed because must buy before sell example input prices output explanation this case no transactions done and max profit constraints priceslength pricesi
greatest sum divisible three given integer array nums return maximum possible sum elements array such that divisible three example input nums output explanation pick numbers and their sum maximum sum divisible example input nums output explanation since not divisible do not pick any number example input nums output explanation pick numbers and their sum maximum sum divisible constraints numslength numsi
remove digit from number maximize result given string number representing positive integer and character digit return resulting string after removing exactly one occurrence digit from number such that value resulting string decimal form maximized test cases generated such that digit occurs least once number example input number digit output explanation there only one after removing result example input number digit output explanation can remove first get or remove second get since return example input number digit output explanation can remove either first or second from both result string constraints numberlength number consists digits from digit digit from digit occurs least once number
check if number sum powers three given integer return true if possible represent as sum distinct powers three otherwise return false integer power three if there exists integer such that example input output true explanation example input output true explanation example input output false constraints
uncrossed lines given two integer arrays nums and nums write integers nums and nums order given two separate horizontal lines may draw connecting lines straight line connecting two numbers numsi and numsj such that numsi numsj and line draw does not intersect any other connecting nonhorizontal line note that connecting line cannot intersect even endpoints ie each number can only belong one connecting line return maximum number connecting lines can draw this way example input nums nums output explanation can draw uncrossed lines as diagram cannot draw uncrossed lines because line from nums nums will intersect line from nums nums example input nums nums output example input nums nums output constraints numslength numslength numsi numsj
path sum ii given root binary tree and integer targetsum return all roottoleaf paths where sum node values path equals targetsum each path should be returned as list node values not node references roottoleaf path path starting from root and ending any leaf node leaf node no children example input root nullnullnull targetsum output explanation there two paths whose sum equals targetsum example input root targetsum output example input root targetsum output constraints number nodes tree range nodeval targetsum
search matrix given integer matrix matrix following two properties each row sorted nondecreasing order first integer each row greater than last integer previous row given integer target return true if target matrix or false otherwise must write solution ologm time complexity example input matrix target output true example input matrix target output false constraints matrixlength matrixilength matrixij target
prime diagonal given indexed twodimensional integer array nums return largest prime number that lies least one diagonals nums case no prime present any diagonals return note that integer prime if greater than and has no positive integer divisors other than and itself integer val one diagonals nums if there exists integer which numsii val or which numsinumslength val above diagram one diagonal and another diagonal example input nums output explanation numbers and only numbers present least one diagonals since largest prime return example input nums output explanation numbers and all present least one diagonals largest prime so return constraints numslength numslength numsilength numsij
second minimum node binary tree given nonempty special binary tree consisting nodes nonnegative value where each node this tree has exactly two or zero subnode if node has two subnodes then this nodes value smaller value among its two subnodes more formally property rootval minrootleftval rootrightval always holds given such binary tree need output second minimum value set made all nodes value whole tree if no such second minimum value exists output instead example input root nullnull output explanation smallest value second smallest value example input root output explanation smallest value but there isnt any second smallest value constraints number nodes tree range nodeval rootval minrootleftval rootrightval each internal node tree
nonoverlapping intervals given array intervals intervals where intervalsi starti endi return minimum number intervals need remove make rest intervals nonoverlapping example input intervals output explanation can be removed and rest intervals nonoverlapping example input intervals output explanation need remove two make rest intervals nonoverlapping example input intervals output explanation dont need remove any intervals since theyre already nonoverlapping constraints intervalslength intervalsilength starti endi
freedom trail video game fallout quest road freedom requires players reach metal dial called freedom trail ring and use dial spell specific keyword open door given string ring that represents code engraved outer ring and another string key that represents keyword that needs be spelled return minimum number steps spell all characters keyword initially first character ring aligned direction should spell all characters key one one rotating ring clockwise or anticlockwise make each character string key aligned direction and then pressing center button stage rotating ring spell key character keyi can rotate ring clockwise or anticlockwise one place which counts as one step final purpose rotation align one rings characters direction where this character must equal keyi if character keyi has been aligned direction press center button spell which also counts as one step after pressing could begin spell next character key next stage otherwise have finished all spelling example input ring godding key gd output explanation first key character since already place just need step spell this character second key character need rotate ring godding anticlockwise two steps make become ddinggo also need more step spelling so final output example input ring godding key godding output constraints ringlength keylength ring and key consist only lower case english letters guaranteed that key could always be spelled rotating ring
super palindromes lets say positive integer superpalindrome if palindrome and also square palindrome given two positive integers left and right represented as strings return number superpalindromes integers inclusive range left right example input left right output explanation and superpalindromes note that not superpalindrome but not palindrome example input left right output constraints leftlength rightlength left and right consist only digits left and right cannot have leading zeros left and right represent integers range left less than or equal right
course schedule iii there different online courses numbered from given array courses where coursesi durationi lastdayi indicate that ith course should be taken continuously durationi days and must be finished before or lastdayi will start st day and cannot take two or more courses simultaneously return maximum number courses that can take example input courses output explanation there totally courses but can take courses most first take st course costs days so will finish th day and ready take next course st day second take rd course costs days so will finish th day and ready take next course st day third take nd course costs days so will finish th day th course cannot be taken now since will finish th day which exceeds closed date example input courses output example input courses output constraints courseslength durationi lastdayi
teemo attacking our hero teemo attacking enemy ashe poison attacks when teemo attacks ashe ashe gets poisoned exactly duration seconds more formally attack second will mean ashe poisoned during inclusive time interval duration if teemo attacks again before poison effect ends timer reset and poison effect will end duration seconds after new attack given nondecreasing integer array timeseries where timeseriesi denotes that teemo attacks ashe second timeseriesi and integer duration return total number seconds that ashe poisoned example input timeseries duration output explanation teemos attacks ashe go as follows second teemo attacks and ashe poisoned seconds and second teemo attacks and ashe poisoned seconds and ashe poisoned seconds and which seconds total example input timeseries duration output explanation teemos attacks ashe go as follows second teemo attacks and ashe poisoned seconds and second however teemo attacks again and resets poison timer ashe poisoned seconds and ashe poisoned seconds and which seconds total constraints timeserieslength timeseriesi duration timeseries sorted nondecreasing order
determine if two events have conflict given two arrays strings that represent two inclusive events that happened same day event and event where event starttime endtime and event starttime endtime event times valid hours format form hhmm conflict happens when two events have some nonempty intersection ie some moment common both events return true if there conflict between two events otherwise return false example input event event output true explanation two events intersect time example input event event output true explanation two events intersect starting from example input event event output false explanation two events do not intersect constraints evnetlength eventlength eventilength eventilength starttime endtime starttime endtime all event times follow hhmm format
calculate digit sum string given string consisting digits and integer round can be completed if length greater than one round do following divide into consecutive groups size such that first characters first group next characters second group and so note that size last group can be smaller than replace each group string representing sum all its digits example replaced because merge consecutive groups together form new string if length string greater than repeat from step return after all rounds have been completed example input output explanation first round divide into groups size and then calculate digit sum each group and so becomes after first round second round divide into and then calculate digit sum each group so becomes after second round now slength so return as answer example input output explanation divide into and then calculate digit sum each group and becomes whose length equal so return constraints slength consists digits only
consecutive numbers sum given integer return number ways can write as sum consecutive positive integers example input output explanation example input output explanation example input output explanation constraints
reorder data log files given array logs each log spacedelimited string words where first word identifier there two types logs letterlogs all words except identifier consist lowercase english letters digitlogs all words except identifier consist digits reorder these logs so that letterlogs come before all digitlogs letterlogs sorted lexicographically their contents if their contents same then sort them lexicographically their identifiers digitlogs maintain their relative ordering return final order logs example input logs dig let art candig let own kit diglet art zero output let art canlet art zerolet own kit digdig dig explanation letterlog contents all different so their ordering art can art zero own kit dig digitlogs have relative order dig dig example input logs act carzo ab off key doga act zoo output act cara act zooab off key doga zo constraints logslength logsilength all tokens logsi separated single space logsi guaranteed have identifier and least one word after identifier
investments sql schema table insurance column name type pid int tiv float tiv float lat float lon float pid primary key column this table each row this table contains information about one policy where pid policyholders policy id tiv total investment value and tiv total investment value lat latitude policy holders city its guaranteed that lat not null lon longitude policy holders city its guaranteed that lon not null write sql query report sum all total investment values tiv all policyholders who have same tiv value as one or more other policyholders and not located same city like any other policyholder ie lat lon attribute pairs must be unique round tiv two decimal places query result format following example example input insurance table pid tiv tiv lat lon output tiv explanation first record table like last record meets both two criteria tiv value same as third and fourth records and its location unique second record does not meet any two criteria its tiv not like any other policyholders and its location same as third record which makes third record fail too so result sum tiv first and last record which
display table food orders restaurant given array orders which represents orders that customers have done restaurant more specifically ordersicustomernameitablenumberifooditemi where customernamei name customer tablenumberi table customer sit and fooditemi item customer orders return restaurants display table display table table whose row entries denote how many each food item each table ordered first column table number and remaining columns correspond each food item alphabetical order first row should be header whose first column table followed names food items note that customer names not part table additionally rows should be sorted numerically increasing order example input orders davidcevichecorinabeef burritodavidfried chickencarlawatercarlacevicherousceviche output tablebeef burritocevichefried chickenwater explanation displaying table looks like tablebeef burritocevichefried chickenwater table david orders ceviche and fried chicken and rous orders ceviche table carla orders water and ceviche table corina orders beef burrito example input orders jamesfried chickenrateshfried chickenamadeusfried chickenadamcanadian wafflesbriannacanadian waffles output tablecanadian wafflesfried chicken explanation table adam and brianna order canadian waffles table james ratesh and amadeus order fried chicken example input orders laurabean burritojhonbeef burritomelissasoda output tablebean burritobeef burritosoda constraints orderslength ordersilength customernameilength fooditemilength customernamei and fooditemi consist lowercase and uppercase english letters and space character tablenumberi valid integer between and
burst balloons given balloons indexed from each balloon painted number represented array nums asked burst all balloons if burst ith balloon will get numsi numsi numsi coins if or goes out bounds array then treat as if there balloon painted return maximum coins can collect bursting balloons wisely example input nums output explanation nums coins example input nums output constraints numslength numsi
design underground system underground railway system keeping track customer travel times between different stations using this data calculate average time takes travel from one station another implement undergroundsystem class void checkinint id string stationname int customer card id equal id checks station stationname time customer can only be checked into one place time void checkoutint id string stationname int customer card id equal id checks out from station stationname time double getaveragetimestring startstation string endstation returns average time takes travel from startstation endstation average time computed from all previous traveling times from startstation endstation that happened directly meaning check startstation followed check out from endstation time takes travel from startstation endstation may be different from time takes travel from endstation startstation there will be least one customer that has traveled from startstation endstation before getaveragetime called may assume all calls checkin and checkout methods consistent if customer checks time then checks out time then all events happen chronological order example input undergroundsystemcheckincheckincheckincheckoutcheckoutcheckoutgetaveragetimegetaveragetimecheckingetaveragetimecheckoutgetaveragetime leytonparadiseleytonwaterloowaterloocambridgeparadisecambridgeleytonwaterlooleytonleytonwaterloowaterlooleytonwaterloo output nullnullnullnullnullnullnullnullnull explanation undergroundsystem undergroundsystem new undergroundsystem undergroundsystemcheckin leyton undergroundsystemcheckin paradise undergroundsystemcheckin leyton undergroundsystemcheckout waterloo customer leyton waterloo undergroundsystemcheckout waterloo customer leyton waterloo undergroundsystemcheckout cambridge customer paradise cambridge undergroundsystemgetaveragetimeparadise cambridge return one trip paradise cambridge undergroundsystemgetaveragetimeleyton waterloo return two trips leyton waterloo undergroundsystemcheckin leyton undergroundsystemgetaveragetimeleyton waterloo return undergroundsystemcheckout waterloo customer leyton waterloo undergroundsystemgetaveragetimeleyton waterloo return three trips leyton waterloo example input undergroundsystemcheckincheckoutgetaveragetimecheckincheckoutgetaveragetimecheckincheckoutgetaveragetime leytonparadiseleytonparadiseleytonparadiseleytonparadiseleytonparadiseleytonparadise output nullnullnullnullnullnullnull explanation undergroundsystem undergroundsystem new undergroundsystem undergroundsystemcheckin leyton undergroundsystemcheckout paradise customer leyton paradise undergroundsystemgetaveragetimeleyton paradise return undergroundsystemcheckin leyton undergroundsystemcheckout paradise customer leyton paradise undergroundsystemgetaveragetimeleyton paradise return undergroundsystemcheckin leyton undergroundsystemcheckout paradise customer leyton paradise undergroundsystemgetaveragetimeleyton paradise return constraints id stationnamelength startstationlength endstationlength all strings consist uppercase and lowercase english letters and digits there will be most calls total checkin checkout and getaveragetime answers within actual value will be accepted
smallest good base given integer represented as string return smallest good base call good base if all digits base example input output explanation base example input output explanation base example input output explanation base constraints integer range does not contain any leading zeros
count number teams there soldiers standing line each soldier assigned unique rating value have form team soldiers amongst them under following rules choose soldiers index rating ratingi ratingj ratingk team valid if ratingi ratingj ratingk or ratingi ratingj ratingk where return number teams can form given conditions soldiers can be part multiple teams example input rating output explanation can form three teams given conditions example input rating output explanation cant form any team given conditions example input rating output constraints ratinglength ratingi all integers rating unique
employee importance have data structure employee information including employees unique id importance value and direct subordinates ids given array employees employees where employeesiid id ith employee employeesiimportance importance value ith employee employeesisubordinates list ids direct subordinates ith employee given integer id that represents employees id return total importance value this employee and all their direct and indirect subordinates example input employees id output explanation employee has importance value and has two direct subordinates employee and employee both have importance value thus total importance value employee example input employees id output explanation employee has importance value and has no direct subordinates thus total importance value employee constraints employeeslength employeesiid all employeesiid unique employeesiimportance one employee has most one direct leader and may have several subordinates ids employeesisubordinates valid ids
calculate amount paid taxes given indexed integer array brackets where bracketsi upperi percenti means that ith tax bracket has upper bound upperi and taxed rate percenti brackets sorted upper bound ie upperi upperi bracketslength tax calculated as follows first upper dollars earned taxed rate percent next upper upper dollars earned taxed rate percent next upper upper dollars earned taxed rate percent and so given integer income representing amount money earned return amount money that have pay taxes answers within actual answer will be accepted example input brackets income output explanation based your income have dollars st tax bracket dollars nd tax bracket and dollars rd tax bracket tax rate three tax brackets and respectively total pay taxes example input brackets income output explanation based your income have dollar st tax bracket and dollar nd tax bracket tax rate two tax brackets and respectively total pay taxes example input brackets income output explanation have no income tax so have pay total taxes constraints bracketslength upperi percenti income upperi sorted ascending order all values upperi unique upper bound last tax bracket greater than or equal income
airplane seat assignment probability passengers board airplane exactly seats first passenger has lost ticket and picks seat randomly but after that rest passengers will take their own seat if still available and pick other seats randomly when find their seat occupied return probability that nth person gets his own seat example input output explanation first person can only get first seat example input output explanation second person has probability get second seat when first person gets first seat constraints
closest nodes queries binary search tree given root binary search tree and array queries size consisting positive integers find array answer size where answeri mini maxi mini largest value tree that smaller than or equal queriesi if such value does not exist add instead maxi smallest value tree that greater than or equal queriesi if such value does not exist add instead return array answer example input root nullnullnullnullnullnull queries output explanation answer queries following way largest number that smaller or equal than tree and smallest number that greater or equal than still so answer first query largest number that smaller or equal than tree and smallest number that greater or equal than so answer second query largest number that smaller or equal than tree and smallest number that greater or equal than does not exist so answer third query example input root null queries output explanation largest number that smaller or equal tree does not exist and smallest number that greater or equal so answer query constraints number nodes tree range nodeval querieslength queriesi
distribute money maximum children given integer money denoting amount money dollars that have and another integer children denoting number children that must distribute money have distribute money according following rules all money must be distributed everyone must receive least dollar nobody receives dollars return maximum number children who may receive exactly dollars if distribute money according aforementioned rules if there no way distribute money return example input money children output explanation maximum number children dollars will be one ways distribute money dollars first child dollars second child dollars third child can be proven that no distribution exists such that number children getting dollars greater than example input money children output explanation each child can be given dollars constraints money children
insertion sort list given head singly linked list sort list using insertion sort and return sorted lists head steps insertion sort algorithm insertion sort iterates consuming one input element each repetition and growing sorted output list each iteration insertion sort removes one element from input data finds location belongs within sorted list and inserts there repeats until no input elements remain following graphical example insertion sort algorithm partially sorted list black initially contains only first element list one element red removed from input data and inserted inplace into sorted list each iteration example input head output example input head output constraints number nodes list range nodeval
number longest increasing subsequence given integer array nums return number longest increasing subsequences notice that sequence has be strictly increasing example input nums output explanation two longest increasing subsequences and example input nums output explanation length longest increasing subsequence and there increasing subsequences length so output constraints numslength numsi
query kth smallest trimmed number given indexed array strings nums where each string equal length and consists only digits also given indexed integer array queries where queriesi ki trimi each queriesi need trim each number nums its rightmost trimi digits determine index kith smallest trimmed number nums if two trimmed numbers equal number lower index considered be smaller reset each number nums its original length return array answer same length as queries where answeri answer ith query note trim rightmost digits means keep removing leftmost digit until only digits remain strings nums may contain leading zeros example input nums queries output explanation after trimming last digit nums smallest number index trimmed last digits nums unchanged nd smallest number index trimmed last digits nums th smallest number trimmed last digits smallest number index note that trimmed number evaluated as example input nums queries output explanation trimmed last digit nums nd smallest number index there two occurrences but one index considered smaller than one index trimmed last digits nums unchanged nd smallest number constraints numslength numsilength numsi consists only digits all numsilength equal querieslength queriesilength ki numslength trimi numsilength follow up could use radix sort algorithm solve this problem what will be complexity that solution
plates between candles there long table line plates and candles arranged top given indexed string consisting characters and only where represents plate and represents candle also given indexed integer array queries where queriesi lefti righti denotes substring sleftirighti inclusive each query need find number plates between candles that substring plate considered between candles if there least one candle its left and least one candle its right substring example and query denotes substring number plates between candles this substring as each two plates has least one candle substring its left and right return integer array answer where answeri answer ith query example input queries output explanation queries has two plates between candles queries has three plates between candles example input queries output explanation queries has nine plates between candles other queries have zero plates between candles constraints slength consists and characters querieslength queriesilength lefti righti slength
find peak element ii peak element grid element that strictly greater than all its adjacent neighbors left right top and bottom given indexed matrix mat where no two adjacent cells equal find any peak element matij and return length array ij may assume that entire matrix surrounded outer perimeter value each cell must write algorithm that runs om logn or logm time example input mat output explanation both and peak elements so and both acceptable answers example input mat output explanation both and peak elements so and both acceptable answers constraints matlength matilength matij no two adjacent cells equal
number ways reorder array get same bst given array nums that represents permutation integers from going construct binary search tree bst inserting elements nums order into initially empty bst find number different ways reorder nums so that constructed bst identical that formed from original array nums example given nums will have as root as left child and as right child array also yields same bst but yields different bst return number ways reorder nums such that bst formed identical original bst formed from nums since answer may be very large return modulo example input nums output explanation can reorder nums be which will yield same bst there no other ways reorder nums which will yield same bst example input nums output explanation following arrays will yield same bst example input nums output explanation there no other orderings nums that will yield same bst constraints numslength numsi numslength all integers nums distinct
split linked list parts given head singly linked list and integer split linked list into consecutive linked list parts length each part should be as equal as possible no two parts should have size differing more than one this may lead some parts being null parts should be order occurrence input list and parts occurring earlier should always have size greater than or equal parts occurring later return array parts example input head output explanation first element output has outputval outputnext null last element output null but its string representation as listnode example input head output explanation input has been split into consecutive parts size difference most and earlier parts larger size than later parts constraints number nodes list range nodeval
permutations given array nums distinct integers return all possible permutations can return answer any order example input nums output example input nums output example input nums output constraints numslength numsi all integers nums unique
intersection multiple arrays given integer array nums where numsi nonempty array distinct positive integers return list integers that present each array nums sorted ascending order example input nums output explanation only integers present each nums nums and nums and so return example input nums output explanation there does not exist any integer present both nums and nums so return empty list constraints numslength sumnumsilength numsij all values numsi unique
minimum possible integer after most adjacent swaps digits given string num representing digits very large integer and integer allowed swap any two adjacent digits integer most times return minimum integer can obtain also as string example input num output explanation steps obtain minimum integer from adjacent swaps shown example input num output explanation its ok output have leading zeros but input guaranteed not have any leading zeros example input num output explanation can keep number without any swaps constraints numlength num consists only digits and does not contain leading zeros
lowest common ancestor binary search tree given binary search tree bst find lowest common ancestor lca node two given nodes bst according definition lca wikipedia the lowest common ancestor defined between two nodes and as lowest node that has both and as descendants where allow node be descendant itself example input root nullnull output explanation lca nodes and example input root nullnull output explanation lca nodes and since node can be descendant itself according lca definition example input root output constraints number nodes tree range nodeval all nodeval unique and will exist bst
count number beautiful subarrays given indexed integer array nums one operation can choose two different indices and such that numslength choose nonnegative integer such that kth bit indexed binary representation numsi and numsj subtract from numsi and numsj subarray beautiful if possible make all its elements equal after applying above operation any number times return number beautiful subarrays array nums subarray contiguous nonempty sequence elements within array example input nums output explanation there beautiful subarrays nums and can make all elements subarray equal following way choose and subtract from both numbers subarray becomes choose and subtract from both numbers subarray becomes can make all elements subarray equal following way choose and subtract from both numbers subarray becomes choose and subtract from both numbers subarray becomes choose and subtract from both numbers subarray becomes example input nums output explanation there no beautiful subarrays nums constraints numslength numsi
array doubled pairs given integer array even length arr return true if possible reorder arr such that arr arr every lenarr or false otherwise example input arr output false example input arr output false example input arr output true explanation can take two groups and form or constraints arrlength arrlength even arri
encrypt and decrypt strings given character array keys containing unique characters and string array values containing strings length also given another string array dictionary that contains all permitted original strings after decryption should implement data structure that can encrypt or decrypt indexed string string encrypted following process each character string find index satisfying keysi keys replace valuesi string note that case character string not present keys encryption process cannot be carried out and empty string returned string decrypted following process each substring length occurring even index string find such that valuesi if there multiple valid choose any one them this means string could have multiple possible strings can decrypt replace keysi string implement encrypter class encrypterchar keys string values string dictionary initializes encrypter class keys values and dictionary string encryptstring word encrypts word encryption process described above and returns encrypted string int decryptstring word returns number possible strings word could decrypt that also appear dictionary example input encrypter encrypt decrypt ei zf ei abcd acbd adbc badc dacb cadb cbda abad abcd eizfeiam output null eizfeiam explanation encrypter encrypter new encryptera ei zf ei abcd acbd adbc badc dacb cadb cbda abad encrypterencryptabcd return eizfeiam maps ei maps zf maps ei and maps encrypterdecrypteizfeiam return ei can map or zf maps and maps thus possible strings after decryption abad cbad abcd and cbcd those strings abad and abcd appear dictionary so answer constraints keyslength valueslength valuesilength dictionarylength dictionaryilength all keysi and dictionaryi unique wordlength wordlength all wordi appear keys wordlength even keys valuesi dictionaryi word and word only contain lowercase english letters most calls will be made encrypt and decrypt total
time cross bridge there workers who want move boxes from old warehouse new one given two integers and and integer array time size where timei lefttorighti pickoldi righttolefti putnewi warehouses separated river and connected bridge old warehouse right bank river and new warehouse left bank river initially all workers waiting left side bridge move boxes ith worker indexed can cross bridge from left bank new warehouse right bank old warehouse lefttorighti minutes pick box from old warehouse and return bridge pickoldi minutes different workers can pick up their boxes simultaneously cross bridge from right bank old warehouse left bank new warehouse righttolefti minutes put box new warehouse and return bridge putnewi minutes different workers can put their boxes simultaneously worker less efficient than worker if either condition met lefttorighti righttolefti lefttorightj righttoleftj lefttorighti righttolefti lefttorightj righttoleftj and following rules regulate movement workers through bridge if worker reaches bridge while another worker crossing bridge waits their side bridge if bridge free worker waiting right side bridge gets cross bridge if more than one worker waiting right side one lowest efficiency crosses first if bridge free and no worker waiting right side and least one box remains old warehouse worker left side river gets cross bridge if more than one worker waiting left side one lowest efficiency crosses first return instance time which last worker reaches left bank river after all boxes have been put new warehouse example input time output explanation from worker crosses bridge from left bank right bank from worker picks up box from old warehouse from worker crosses bridge from right bank left bank from worker puts box new warehouse whole process ends after minutes return because problem asks instance time which last worker reaches left bank example input time output explanation from worker crosses bridge from left bank right bank from worker picks up box from old warehouse from worker crosses bridge from left bank right bank from worker picks up box from old warehouse from worker crosses bridge from right bank left bank from worker puts box new warehouse from worker crosses bridge from right bank left bank from worker puts box new warehouse from worker crosses bridge from left bank right bank from worker picks up box from old warehouse from worker crosses bridge from right bank left bank from worker puts box new warehouse whole process ends after minutes return because problem asks instance time which last worker reaches left bank constraints timelength timeilength lefttorighti pickoldi righttolefti putnewi
reach number standing position infinite number line there destination position target can make some number moves nummoves so that each move can either go left or right during ith move starting from nummoves take steps chosen direction given integer target return minimum number moves required ie minimum nummoves reach destination example input target output explanation st move step from step nd move step from steps rd move step from steps example input target output explanation st move step from step nd move step from steps constraints target target
latest time catch bus given indexed integer array buses length where busesi represents departure time ith bus also given indexed integer array passengers length where passengersj represents arrival time jth passenger all bus departure times unique all passenger arrival times unique given integer capacity which represents maximum number passengers that can get each bus when passenger arrives will wait line next available bus can get bus that departs minutes if arrive minutes where and bus not full passengers earliest arrival times get bus first more formally when bus arrives either if capacity or fewer passengers waiting bus will all get bus or capacity passengers earliest arrival times will get bus return latest time may arrive bus station catch bus cannot arrive same time as another passenger note arrays buses and passengers not necessarily sorted example input buses passengers capacity output explanation suppose arrive time time first bus departs th passenger time second bus departs and st passenger note that may not arrive same time as another passenger which why must arrive before st passenger catch bus example input buses passengers capacity output explanation suppose arrive time time first bus departs rd passenger time second bus departs th and st passengers time third bus departs th passenger and notice if had arrived any later then th passenger would have taken your seat third bus constraints buseslength passengerslength capacity busesi passengersi each element buses unique each element passengers unique
maximum sum exactly elements given indexed integer array nums and integer your task perform following operation exactly times order maximize your score select element from nums remove selected element from array add new element value array increase your score return maximum score can achieve after performing operation exactly times example input nums output explanation need choose exactly elements from nums maximize sum first iteration choose then sum and nums second iteration choose then sum and nums third iteration choose then sum and nums so will return can be proven that maximum answer that can achieve example input nums output explanation need choose exactly elements from nums maximize sum first iteration choose then sum and nums second iteration choose then sum and nums so will return can be proven that maximum answer that can achieve constraints numslength numsi
sort integers power value power integer defined as number steps needed transform into using following steps if even then if odd then example power because needs steps become given three integers lo hi and task sort all integers interval lo hi power value ascending order if two or more integers have same power value sort them ascending order return kth integer range lo hi sorted power value notice that any integer lo hi guaranteed that will transform into using these steps and that power will fit bit signed integer example input lo hi output explanation power power power power interval sorted power value answer second element which notice that and have same power value and sorted them ascending order same and example input lo hi output explanation power array corresponding interval interval sorted power fourth number sorted array constraints lo hi hi lo
maximum tastiness candy basket given array positive integers price where pricei denotes price ith candy and positive integer store sells baskets distinct candies tastiness candy basket smallest absolute difference prices any two candies basket return maximum tastiness candy basket example input price output explanation choose candies prices tastiness candy basket min min can be proven that maximum tastiness that can be achieved example input price output explanation choose candies prices tastiness candy basket min min can be proven that maximum tastiness that can be achieved example input price output explanation choosing any two distinct candies from candies have will result tastiness constraints pricelength pricei
rectangle overlap axisaligned rectangle represented as list where coordinate its bottomleft corner and coordinate its topright corner its top and bottom edges parallel xaxis and its left and right edges parallel yaxis two rectangles overlap if area their intersection positive be clear two rectangles that only touch corner or edges do not overlap given two axisaligned rectangles rec and rec return true if overlap otherwise return false example input rec rec output true example input rec rec output false example input rec rec output false constraints reclength reclength reci reci rec and rec represent valid rectangle nonzero area
self crossing given array integers distance start point xy plane and move distance meters north then distance meters west distance meters south distance meters east and so other words after each move your direction changes counterclockwise return true if your path crosses itself or false if does not example input distance output true explanation path crosses itself point example input distance output false explanation path does not cross itself any point example input distance output true explanation path crosses itself point constraints distancelength distancei
allocate mailboxes given array houses where housesi location ith house along street and integer allocate mailboxes street return minimum total distance between each house and its nearest mailbox test cases generated so that answer fits bit integer example input houses output explanation allocate mailboxes position and minimum total distance from each houses nearest mailboxes example input houses output explanation allocate mailboxes position and minimum total distance from each houses nearest mailboxes constraints houseslength housesi all integers houses unique
stone game viii alice and bob take turns playing game alice starting first there stones arranged row each players turn while number stones more than one will do following choose integer and remove leftmost stones from row add sum removed stones values players score place new stone whose value equal that sum left side row game stops when only one stone left row score difference between alice and bob alices score bobs score alices goal maximize score difference and bobs goal minimize score difference given integer array stones length where stonesi represents value ith stone from left return score difference between alice and bob if both play optimally example input stones output explanation alice removes first stones adds her score and places stone value left stones bob removes first stones adds his score and places stone value left stones difference between their scores example input stones output explanation alice removes all stones adds her score and places stone value left stones difference between their scores example input stones output explanation alice can only make one move which remove both stones adds her score and places stone value left stones difference between their scores constraints stoneslength stonesi
employees earning more than their managers sql schema table employee column name type id int name varchar salary int managerid int id primary key column this table each row this table indicates id employee their name salary and id their manager write sql query find employees who earn more than their managers return result table any order query result format following example example input employee table id name salary managerid joe henry sam null max null output employee joe explanation joe only employee who earns more than his manager
maximize confusion exam teacher writing test truefalse questions denoting true and denoting false wants confuse students maximizing number consecutive questions same answer multiple trues or multiple falses row given string answerkey where answerkeyi original answer ith question addition given integer maximum number times may perform following operation change answer key any question or ie set answerkeyi or return maximum number consecutive ts or fs answer key after performing operation most times example input answerkey ttff output explanation can replace both fs ts make answerkey tttt there four consecutive ts example input answerkey tfft output explanation can replace first make answerkey ffft alternatively can replace second make answerkey tfff both cases there three consecutive fs example input answerkey ttfttftt output explanation can replace first make answerkey tttttftt alternatively can replace second make answerkey ttfttttt both cases there five consecutive ts constraints answerkeylength answerkeyi either or
percentage letter string given string and character letter return percentage characters that equal letter rounded down nearest whole percent example input foobar letter output explanation percentage characters that equal letter when rounded down so return example input jjjj letter output explanation percentage characters that equal letter so return constraints slength consists lowercase english letters letter lowercase english letter
open lock have lock front circular wheels each wheel has slots wheels can rotate freely and wrap around example can turn be or be each move consists turning one wheel one slot lock initially starts string representing state wheels given list deadends dead ends meaning if lock displays any these codes wheels lock will stop turning and will be unable open given target representing value wheels that will unlock lock return minimum total number turns required open lock or if impossible example input deadends target output explanation sequence valid moves would be note that sequence like would be invalid because wheels lock become stuck after display becomes dead end example input deadends target output explanation can turn last wheel reverse move from example input deadends target output explanation cannot reach target without getting stuck constraints deadendslength deadendsilength targetlength target will not be list deadends target and deadendsi consist digits only
remove stones minimize total given indexed integer array piles where pilesi represents number stones ith pile and integer should apply following operation exactly times choose any pilesi and remove floorpilesi stones from notice that can apply operation same pile more than once return minimum possible total number stones remaining after applying operations floorx greatest integer that smaller than or equal ie rounds down example input piles output explanation steps possible scenario apply operation pile resulting piles apply operation pile resulting piles total number stones example input piles output explanation steps possible scenario apply operation pile resulting piles apply operation pile resulting piles apply operation pile resulting piles total number stones constraints pileslength pilesi
maximum frequency stack design stacklike data structure push elements stack and pop most frequent element from stack implement freqstack class freqstack constructs empty frequency stack void pushint val pushes integer val onto top stack int pop removes and returns most frequent element stack if there tie most frequent element element closest stacks top removed and returned example input freqstack push push push push push push pop pop pop pop output null null null null null null null explanation freqstack freqstack new freqstack freqstackpush stack freqstackpush stack freqstackpush stack freqstackpush stack freqstackpush stack freqstackpush stack freqstackpop return as most frequent stack becomes freqstackpop return as and most frequent but closest top stack becomes freqstackpop return as most frequent stack becomes freqstackpop return as and most frequent but closest top stack becomes constraints val most calls will be made push and pop guaranteed that there will be least one element stack before calling pop
finding digit even numbers given integer array digits where each element digit array may contain duplicates need find all unique integers that follow given requirements integer consists concatenation three elements from digits any arbitrary order integer does not have leading zeros integer even example if given digits integers and follow requirements return sorted array unique integers example input digits output explanation all possible integers that follow requirements output array notice that there no odd integers or integers leading zeros example input digits output explanation same digit can be used as many times as appears digits this example digit used twice each time and example input digits output explanation no even integers can be formed using given digits constraints digitslength digitsi
get maximum generated array given integer indexed integer array nums length generated following way nums nums nums numsi when nums numsi numsi when return maximum integer array nums example input output explanation according given rules nums nums nums nums nums nums nums nums nums nums nums nums nums nums nums nums nums hence nums and maximum max example input output explanation according given rules nums maximum max example input output explanation according given rules nums maximum max constraints
partition list given head linked list and value partition such that all nodes less than come before nodes greater than or equal should preserve original relative order nodes each two partitions example input head output example input head output constraints number nodes list range nodeval
array partition given integer array nums integers group these integers into pairs bn such that sum minai bi all maximized return maximized sum example input nums output explanation all possible pairings ignoring ordering elements min min min min min min so maximum possible sum example input nums output explanation optimal pairing min min min constraints numslength numsi
triangle given triangle array return minimum path sum from top bottom each step may move adjacent number row below more formally if index current row may move either index or index next row example input triangle output explanation triangle looks like minimum path sum from top bottom underlined above example input triangle output constraints trianglelength trianglelength triangleilength trianglei length triangleij follow up could do this using only extra space where total number rows triangle
get equal substrings within budget given two strings and same length and integer maxcost want change changing ith character ith character costs si ti ie absolute difference between ascii values characters return maximum length substring that can be changed be same as corresponding substring cost less than or equal maxcost if there no substring from that can be changed its corresponding substring from return example input abcd bcdf maxcost output explanation abc can change bcd that costs so maximum length example input abcd cdef maxcost output explanation each character costs change character so maximum length example input abcd acde maxcost output explanation cannot make any change so maximum length constraints slength tlength slength maxcost and consist only lowercase english letters
same tree given roots two binary trees and write function check if same or not two binary trees considered same if structurally identical and nodes have same value example input output true example input null output false example input output false constraints number nodes both trees range nodeval
minimized maximum products distributed any store given integer indicating there specialty retail stores there product types varying amounts which given as indexed integer array quantities where quantitiesi represents number products ith product type need distribute all products retail stores following these rules store can only be given most one product type but can be given any amount after distribution each store will have been given some number products possibly let represent maximum number products given any store want be as small as possible ie want minimize maximum number products that given any store return minimum possible example input quantities output explanation one optimal way products type distributed first four stores these amounts products type distributed other two stores these amounts maximum number products given any store max example input quantities output explanation one optimal way products type distributed first three stores these amounts products type distributed next two stores these amounts products type distributed last two stores these amounts maximum number products given any store max example input quantities output explanation only optimal way products type distributed only store maximum number products given any store max constraints quantitieslength quantitiesi
all divisions highest score binary array given indexed binary array nums length nums can be divided index where into two arrays possibly empty numsleft and numsright numsleft has all elements nums between index and inclusive while numsright has all elements nums between index and inclusive if numsleft empty while numsright has all elements nums if numsleft has all elements nums while numsright empty division score index sum number numsleft and number numsright return all distinct indices that have highest possible division score may return answer any order example input nums output explanation division index numsleft numsright score numsleft numsright score numsleft numsright score numsleft numsright score numsleft numsright score indices and both have highest possible division score note answer would also be accepted example input nums output explanation division index numsleft numsright score numsleft numsright score numsleft numsright score numsleft numsright score only index has highest possible division score example input nums output explanation division index numsleft numsright score numsleft numsright score numsleft numsright score only index has highest possible division score constraints numslength numsi either or
number distinct roll sequences given integer roll fair sided dice times determine total number distinct sequences rolls possible such that following conditions satisfied greatest common divisor any adjacent values sequence equal there least gap rolls between equal valued rolls more formally if value ith roll equal value jth roll then absi return total number distinct sequences possible since answer may be very large return modulo two sequences considered distinct if least one element different example input output explanation some possible sequences etc some invalid sequences invalid since first and third roll have equal value and abs and indexed invalid since greatest common divisor and there total distinct sequences possible so return example input output explanation some possible sequences some invalid sequences since greatest common divisor not equal there total distinct sequences possible so return constraints
find all good indices given indexed integer array nums size and positive integer call index range good if following conditions satisfied elements that just before index nonincreasing order elements that just after index nondecreasing order return array all good indices sorted increasing order example input nums output explanation there two good indices array index subarray nonincreasing order and subarray nondecreasing order index subarray nonincreasing order and subarray nondecreasing order note that index not good because not nondecreasing example input nums output explanation there no good indices this array constraints numslength numsi
stock price fluctuation given stream records about particular stock each record contains timestamp and corresponding price stock that timestamp unfortunately due volatile nature stock market records do not come order even worse some records may be incorrect another record same timestamp may appear later stream correcting price previous wrong record design algorithm that updates price stock particular timestamp correcting price from any previous records timestamp finds latest price stock based current records latest price price latest timestamp recorded finds maximum price stock has been based current records finds minimum price stock has been based current records implement stockprice class stockprice initializes object no price records void updateint timestamp int price updates price stock given timestamp int current returns latest price stock int maximum returns maximum price stock int minimum returns minimum price stock example input stockprice update update current maximum update maximum update minimum output null null null null null explanation stockprice stockprice new stockprice stockpriceupdate timestamps corresponding prices stockpriceupdate timestamps corresponding prices stockpricecurrent return latest timestamp price being stockpricemaximum return maximum price timestamp stockpriceupdate previous timestamp had wrong price so updated timestamps corresponding prices stockpricemaximum return maximum price after correction stockpriceupdate timestamps corresponding prices stockpriceminimum return minimum price timestamp constraints timestamp price most calls will be made total update current maximum and minimum current maximum and minimum will be called only after update has been called least once
sliding subarray beauty given integer array nums containing integers find beauty each subarray size beauty subarray xth smallest integer subarray if negative or if there fewer than negative integers return integer array containing integers which denote beauty subarrays order from first index array subarray contiguous nonempty sequence elements within array example input nums output explanation there subarrays size first subarray and nd smallest negative integer second subarray and nd smallest negative integer third subarray and nd smallest negative integer example input nums output explanation there subarrays size nd smallest negative integer nd smallest negative integer nd smallest negative integer nd smallest negative integer example input nums output explanation there subarrays size st smallest negative integer there no negative integer so beauty st smallest negative integer st smallest negative integer st smallest negative integer constraints numslength numsi
check if string can break another string given two strings and same size check if some permutation string can break some permutation string or viceversa other words can break or viceversa string can break string both size if xi yi alphabetical order all between and example input abc xya output true explanation ayx permutation sxya which can break string abc which permutation sabc example input abe acd output false explanation all permutations sabe abe aeb bae bea eab and eba and all permutation sacd acd adc cad cda dac and dca however there not any permutation from which can break some permutation from and viceversa example input leetcodee interview output true constraints slength slength all strings consist lowercase english letters
average time process per machine sql schema table activity column name type machineid int processid int activitytype enum timestamp float table shows user activities factory website machineid processid activitytype primary key this table machineid id machine processid id process running machine id machineid activitytype enum type start end timestamp float representing current time seconds start means machine starts process given timestamp and end means machine ends process given timestamp start timestamp will always be before end timestamp every machineid processid pair there factory website that has several machines each running same number processes write sql query find average time each machine takes complete process time complete process end timestamp minus start timestamp average time calculated total time complete every process machine divided number processes that run resulting table should have machineid along average time as processingtime which should be rounded decimal places return result table any order query result format following example example input activity table machineid processid activitytype timestamp start end start end start end start end start end start end output machineid processingtime explanation there machines running processes each machine average time machine average time machine average time
integer english words convert nonnegative integer num its english words representation example input num output one hundred twenty three example input num output twelve thousand three hundred forty five example input num output one million two hundred thirty four thousand five hundred sixty seven constraints num
count number good subarrays given integer array nums and integer return number good subarrays nums subarray arr good if there least pairs indices such that and arri arrj subarray contiguous nonempty sequence elements within array example input nums output explanation only good subarray array nums itself example input nums output explanation there different good subarrays that has pairs that has pairs that has pairs that has pairs constraints numslength numsi
find all lonely numbers array given integer array nums number lonely when appears only once and no adjacent numbers ie and appear array return all lonely numbers nums may return answer any order example input nums output explanation lonely number since appears exactly once and and does not appear nums lonely number since appears exactly once and and does not appear nums not lonely number since appears nums and vice versa hence lonely numbers nums note that may also be returned example input nums output explanation lonely number since appears exactly once and and does not appear nums lonely number since appears exactly once and and does not appear nums not lonely number since appears twice hence lonely numbers nums note that may also be returned constraints numslength numsi
spiral matrix iii start cell rstart cstart rows cols grid facing east northwest corner first row and column grid and southeast corner last row and column will walk clockwise spiral shape visit every position this grid whenever move outside grids boundary continue our walk outside grid but may return grid boundary later eventually reach all rows cols spaces grid return array coordinates representing positions grid order visited them example input rows cols rstart cstart output example input rows cols rstart cstart output constraints rows cols rstart rows cstart cols
jump game vi given indexed integer array nums and integer initially standing index one move can jump most steps forward without going outside boundaries array that can jump from index any index range minn inclusive want reach last index array index your score sum all numsj each index visited array return maximum score can get example input nums output explanation can choose your jumps forming subsequence underlined above sum example input nums output explanation can choose your jumps forming subsequence underlined above sum example input nums output constraints numslength numsi
minimum adjacent swaps consecutive ones given integer array nums and integer nums comprises only and one move can choose two adjacent indices and swap their values return minimum number moves required so that nums has consecutive example input nums output explanation move nums could be and have consecutive example input nums output explanation moves leftmost can be shifted right until nums example input nums output explanation nums already has consecutive constraints numslength numsi or sumnums
rank transform matrix given matrix return new matrix answer where answerrowcol rank matrixrowcol rank integer that represents how large element compared other elements calculated using following rules rank integer starting from if two elements and same row or column then if then rankp rankq if then rankp rankq if then rankp rankq rank should be as small as possible test cases generated so that answer unique under given rules example input matrix output explanation rank matrix because smallest integer its row and column rank matrix because matrix matrix and matrix rank rank matrix because matrix matrix and matrix rank rank matrix because matrix matrix matrix matrix and both matrix and matrix rank example input matrix output example input matrix output constraints matrixlength matrixilength matrixrowcol
patients condition sql schema table patients column name type patientid int patientname varchar conditions varchar patientid primary key this table conditions contains or more code separated spaces this table contains information patients hospital write sql query report patientid patientname and conditions patients who have type diabetes type diabetes always starts diab prefix return result table any order query result format following example example input patients table patientid patientname conditions daniel yfev cough alice bob diab myop george acne diab alain diab output patientid patientname conditions bob diab myop george acne diab explanation bob and george both have condition that starts diab
special binary string special binary strings binary strings following two properties number equal number every prefix binary string has least as many as given special binary string move consists choosing two consecutive nonempty special substrings and swapping them two strings consecutive if last character first string exactly one index before first character second string return lexicographically largest resulting string possible after applying mentioned operations string example input output explanation strings occuring and swapped this lexicographically largest string possible after some number swaps example input output constraints slength si either or special binary string
minimum time visiting all points plane there points integer coordinates pointsi xi yi return minimum time seconds visit all points order given points can move according these rules second can either move vertically one unit move horizontally one unit or move diagonally sqrt units other words move one unit vertically then one unit horizontally second have visit points same order as appear array allowed pass through points that appear later order but these do not count as visits example input points output explanation one optimal path time from seconds time from seconds total time seconds example input points output constraints pointslength pointsilength pointsi pointsi
managers least direct reports sql schema table employee column name type id int name varchar department varchar managerid int id primary key column this table each row this table indicates name employee their department and id their manager if managerid null then employee does not have manager no employee will be manager themself write sql query report managers least five direct reports return result table any order query result format following example example input employee table id name department managerid john none dan james amy anne ron output name john
minimum average difference given indexed integer array nums length average difference index absolute difference between average first elements nums and average last elements both averages should be rounded down nearest integer return index minimum average difference if there multiple such indices return smallest one note absolute difference two numbers absolute value their difference average elements sum elements divided integer division average elements considered be example input nums output explanation average difference index average difference index average difference index average difference index average difference index average difference index average difference index minimum average difference so return example input nums output explanation only index so return average difference index constraints numslength numsi
set mismatch have set integers which originally contains all numbers from unfortunately due some error one numbers got duplicated another number set which results repetition one number and loss another number given integer array nums representing data status this set after error find number that occurs twice and number that missing and return them form array example input nums output example input nums output constraints numslength numsi
swapping nodes linked list given head linked list and integer return head linked list after swapping values kth node from beginning and kth node from end list indexed example input head output example input head output constraints number nodes list nodeval
design graph shortest path calculator there directed weighted graph that consists nodes numbered from edges graph initially represented given array edges where edgesi fromi toi edgecosti meaning that there edge from fromi toi cost edgecosti implement graph class graphint int edges initializes object nodes and given edges addedgeint edge adds edge list edges where edge from edgecost guaranteed that there no edge between two nodes before adding this one int shortestpathint node int node returns minimum cost path from node node if no path exists return cost path sum costs edges path example input graph shortestpath shortestpath addedge shortestpath output null null explanation graph new graph gshortestpath return shortest path from first diagram above total cost gshortestpath return there no path from gaddedge add edge from node node and get second diagram above gshortestpath return shortest path from now total cost constraints edgeslength edgesilength edgelength fromi toi from node node edgecosti edgecost there no repeated edges and no selfloops graph any point most calls will be made addedge most calls will be made shortestpath
decode message given strings key and message which represent cipher key and secret message respectively steps decode message as follows use first appearance all lowercase english letters key as order substitution table align substitution table regular english alphabet each letter message then substituted using table spaces transformed themselves example given key happy boy actual key would have least one instance each letter alphabet have partial substitution table return decoded message example input key quick brown fox jumps over lazy dog message vkbs bs suepuv output this secret explanation diagram above shows substitution table obtained taking first appearance each letter quick brown fox jumps over lazy dog example input key eljuxhpwnyrdgtqkviszcfmabo message zwx hnfx lqantp mnoeius ycgk vcnjrdb output five boxing wizards jump quickly explanation diagram above shows substitution table obtained taking first appearance each letter eljuxhpwnyrdgtqkviszcfmabo constraints keylength key consists lowercase english letters and key contains every letter english alphabet least once messagelength message consists lowercase english letters and
shortest cycle graph there bidirectional graph vertices where each vertex labeled from edges graph represented given integer array edges where edgesi ui vi denotes edge between vertex ui and vertex vi every vertex pair connected most one edge and no vertex has edge itself return length shortest cycle graph if no cycle exists return cycle path that starts and ends same node and each edge path used only once example input edges output explanation cycle smallest length example input edges output explanation there no cycles this graph constraints edgeslength edgesilength ui vi ui vi there no repeated edges
binary tree coloring game two players play turn based game binary tree given root this binary tree and number nodes tree odd and each node has distinct value from initially first player names value and second player names value and first player colors node value red and second player colors node value blue then players take turns starting first player each turn that player chooses node their color red if player blue if player and colors uncolored neighbor chosen node either left child right child or parent chosen node if and only if player cannot choose such node this way must pass their turn if both players pass their turn game ends and winner player that colored more nodes second player if possible choose such ensure win game return true if not possible return false example input root output true explanation second player can choose node value example input root output false constraints number nodes tree odd nodeval all values tree unique
distribute candies people distribute some number candies row numpeople people following way then give candy first person candies second person and so until give candies last person then go back start row giving candies first person candies second person and so until give candies last person this process repeats us giving one more candy each time and moving start row after reach end until run out candies last person will receive all our remaining candies not necessarily one more than previous gift return array length numpeople and sum candies that represents final distribution candies example input candies numpeople output explanation first turn ans and array second turn ans and array third turn ans and array fourth turn ans because there only one candy left and final array example input candies numpeople output explanation first turn ans and array second turn ans and array third turn ans and array fourth turn ans and final array constraints candies numpeople
scramble string can scramble string get string using following algorithm if length string stop if length string do following split string into two nonempty substrings random index ie if string divide and where randomly decide swap two substrings or keep them same order ie after this step may become or apply step recursively each two substrings and given two strings and same length return true if scrambled string otherwise return false example input great rgeat output true explanation one possible scenario applied great great divide random index great great random decision not swap two substrings and keep them order great gr eat apply same algorithm recursively both substrings divide random index each them gr eat rg eat random decision swap first substring and keep second substring same order rg eat rg again apply algorithm recursively divide rg rg random decision keep both substrings same order algorithm stops now and result string rgeat which as one possible scenario led be scrambled return true example input abcde caebd output false example input output true constraints slength slength slength and consist lowercase english letters
sort jumbled numbers given indexed integer array mapping which represents mapping rule shuffled decimal system mappingi means digit should be mapped digit this system mapped value integer new integer obtained replacing each occurrence digit integer mappingi all also given another integer array nums return array nums sorted nondecreasing order based mapped values its elements notes elements same mapped values should appear same relative order as input elements nums should only be sorted based their mapped values and not be replaced them example input mapping nums output explanation map number as follows mapping so all occurrences digit will become mapping so all occurrences digit will become therefore mapped value maps or after removing leading zeros maps which also after removing leading zeros since and share same mapped value should remain same relative order so comes before thus sorted array example input mapping nums output explanation maps maps and maps thus sorted array constraints mappinglength mappingi all values mappingi unique numslength numsi
find minimum rotated sorted array ii suppose array length sorted ascending order rotated between and times example array nums might become if rotated times if rotated times notice that rotating array time results array given sorted rotated array nums that may contain duplicates return minimum element this array must decrease overall operation steps as much as possible example input nums output example input nums output constraints numslength numsi nums sorted and rotated between and times follow up this problem similar find minimum rotated sorted array but nums may contain duplicates would this affect runtime complexity how and why
split string balanced strings balanced strings those that have equal quantity and characters given balanced string split into some number substrings such that each substring balanced return maximum number balanced strings can obtain example input rlrrllrlrl output explanation can be split into rl rrll rl rl each substring contains same number and example input rlrrrllrll output explanation can be split into rl rrrllrll each substring contains same number and note that cannot be split into rl rr rl lr ll because nd and th substrings not balanced example input llllrrrr output explanation can be split into llllrrrr constraints slength si either or balanced string
range sum query mutable given integer array nums handle multiple queries following types update value element nums calculate sum elements nums between indices left and right inclusive where left right implement numarray class numarrayint nums initializes object integer array nums void updateint index int val updates value numsindex be val int sumrangeint left int right returns sum elements nums between indices left and right inclusive ie numsleft numsleft numsright example input numarray sumrange update sumrange output null null explanation numarray numarray new numarray numarraysumrange return numarrayupdate nums numarraysumrange return constraints numslength numsi index numslength val left right numslength most calls will be made update and sumrange
recyclable and low fat products sql schema table products column name type productid int lowfats enum recyclable enum productid primary key this table lowfats enum type where means this product low fat and means not recyclable enum types where means this product recyclable and means not write sql query find ids products that both low fat and recyclable return result table any order query result format following example example input products table productid lowfats recyclable output productid explanation only products and both low fat and recyclable
running sum array given array nums define running sum array as runningsumi sumnumsnumsi return running sum nums example input nums output explanation running sum obtained as follows example input nums output explanation running sum obtained as follows example input nums output constraints numslength numsi
customers who never order sql schema table customers column name type id int name varchar id primary key column this table each row this table indicates id and name customer table orders column name type id int customerid int id primary key column this table customerid foreign key id from customers table each row this table indicates id order and id customer who ordered write sql query report all customers who never order anything return result table any order query result format following example example input customers table id name joe henry sam max orders table id customerid output customers henry max
patching array given sorted integer array nums and integer addpatch elements array such that any number range inclusive can be formed sum some elements array return minimum number patches required example input nums output explanation combinations nums which form possible sums now if addpatch nums combinations possible sums which now covers range so only need patch example input nums output explanation two patches can be example input nums output constraints numslength numsi nums sorted ascending order
find unique integers sum up zero given integer return any array containing unique integers such that add up example input output explanation these arrays also accepted example input output example input output constraints
implement rand using rand given api rand that generates uniform random integer range write function rand that generates uniform random integer range can only call api rand and shouldnt call any other api please do not use languages builtin random api each test case will have one internal argument number times that your implemented function rand will be called while testing note that this not argument passed rand example input output example input output example input output constraints follow up what expected value number calls rand function could minimize number calls rand
design text editor design text editor cursor that can do following add text where cursor delete text from where cursor simulating backspace key move cursor either left or right when deleting text only characters left cursor will be deleted cursor will also remain within actual text and cannot be moved beyond more formally have that cursorposition currenttextlength always holds implement texteditor class texteditor initializes object empty text void addtextstring text appends text where cursor cursor ends right text int deletetextint deletes characters left cursor returns number characters actually deleted string cursorleftint moves cursor left times returns last min len characters left cursor where len number characters left cursor string cursorrightint moves cursor right times returns last min len characters left cursor where len number characters left cursor example input texteditor addtext deletetext addtext cursorright cursorleft deletetext cursorleft cursorright leetcode practice output null null null etpractice leet practi explanation texteditor texteditor new texteditor current text character represents cursor texteditoraddtextleetcode current text leetcode texteditordeletetext return current text leet characters deleted texteditoraddtextpractice current text leetpractice texteditorcursorright return etpractice current text leetpractice cursor cannot be moved beyond actual text and thus did not move etpractice last characters left cursor texteditorcursorleft return leet current text leetpractice leet last min characters left cursor texteditordeletetext return current text practice only characters deleted texteditorcursorleft return current text practice cursor cannot be moved beyond actual text and thus did not move last min characters left cursor texteditorcursorright return practi current text practice practi last min characters left cursor constraints textlength text consists lowercase english letters most calls total will be made addtext deletetext cursorleft and cursorright followup could find solution time complexity ok per call
minimum number vertices reach all nodes given directed acyclic graph vertices numbered from and array edges where edgesi fromi toi represents directed edge from node fromi node toi find smallest set vertices from which all nodes graph reachable its guaranteed that unique solution exists notice that can return vertices any order example input edges output explanation its not possible reach all nodes from single vertex from can reach from can reach so output example input edges output explanation notice that vertices and not reachable from any other node so must include them also any these vertices can reach nodes and constraints edgeslength min edgesilength fromi toi all pairs fromi toi distinct
guess number higher or lower ii playing guessing game game will work as follows pick number between and guess number if guess right number win game if guess wrong number then will tell whether number picked higher or lower and will continue guessing every time guess wrong number will pay dollars if run out money lose game given particular return minimum amount money need guarantee win regardless what number pick example input output explanation winning strategy as follows range guess if this my number your total otherwise pay if my number higher range guess if this my number your total otherwise pay if my number higher must be guess your total if my number lower must be guess your total if my number lower range guess if this my number your total otherwise pay if my number higher range guess if this my number your total otherwise pay if my number higher must be guess your total if my number lower must be guess your total if my number lower range guess if this my number your total otherwise pay if my number higher must be guess your total worst case all these scenarios that pay hence only need guarantee win example input output explanation there only one possible number so can guess and not have pay anything example input output explanation there two possible numbers and guess if this my number your total otherwise pay if my number higher must be guess your total worst case that pay constraints
min stack design stack that supports push pop top and retrieving minimum element constant time implement minstack class minstack initializes stack object void pushint val pushes element val onto stack void pop removes element top stack int top gets top element stack int getmin retrieves minimum element stack must implement solution time complexity each function example input minstackpushpushpushgetminpoptopgetmin output nullnullnullnullnull explanation minstack minstack new minstack minstackpush minstackpush minstackpush minstackgetmin return minstackpop minstacktop return minstackgetmin return constraints val methods pop top and getmin operations will always be called nonempty stacks most calls will be made push pop top and getmin
number different integers string given string word that consists digits and lowercase english letters will replace every nondigit character space example abcdef will become notice that left some integers that separated least one space and return number different integers after performing replacement operations word two integers considered different if their decimal representations without any leading zeros different example input word abcdef output explanation three different integers and notice that only counted once example input word leetcode output example input word abc output explanation three integers and all represent same integer because leading zeros ignored when comparing their decimal values constraints wordlength word consists digits and lowercase english letters
maximum xor each query given sorted array nums nonnegative integers and integer maximumbit want perform following query times find nonnegative integer maximumbit such that nums xor nums xor xor numsnumslength xor maximized answer ith query remove last element from current array nums return array answer where answeri answer ith query example input nums maximumbit output explanation queries answered as follows st query nums since xor xor xor xor nd query nums since xor xor xor rd query nums since xor xor th query nums since xor example input nums maximumbit output explanation queries answered as follows st query nums since xor xor xor xor nd query nums since xor xor xor rd query nums since xor xor th query nums since xor example input nums maximumbit output constraints numslength maximumbit numsi maximumbit nums sorted ascending order
distinct subsequences ii given string return number distinct nonempty subsequences since answer may be very large return modulo subsequence string new string that formed from original string deleting some can be none characters without disturbing relative positions remaining characters ie ace subsequence abcde while aec not example input abc output explanation distinct subsequences ab ac bc and abc example input aba output explanation distinct subsequences ab aa ba and aba example input aaa output explanation distinct subsequences aa and aaa constraints slength consists lowercase english letters
divide string into groups size string can be partitioned into groups size using following procedure first group consists first characters string second group consists next characters string and so each character can be part exactly one group last group if string does not have characters remaining character fill used complete group note that partition done so that after removing fill character from last group if exists and concatenating all groups order resultant string should be given string size each group and character fill return string array denoting composition every group has been divided into using above procedure example input abcdefghi fill output abcdefghi explanation first characters abc form first group next characters def form second group last characters ghi form third group since all groups can be completely filled characters from string do not need use fill thus groups formed abc def and ghi example input abcdefghij fill output abcdefghijxx explanation similar previous example forming first three groups abc def and ghi last group can only use character from string complete this group add twice thus groups formed abc def ghi and jxx constraints slength consists lowercase english letters only fill lowercase english letter
sort matrix diagonally matrix diagonal diagonal line cells starting from some cell either topmost row or leftmost column and going bottomright direction until reaching matrixs end example matrix diagonal starting from mat where mat matrix includes cells mat mat and mat given matrix mat integers sort each matrix diagonal ascending order and return resulting matrix example input mat output example input mat output constraints matlength matilength matij
check if there valid partition array given indexed integer array nums have partition array into one or more contiguous subarrays call partition array valid if each obtained subarrays satisfies one following conditions subarray consists exactly equal elements example subarray good subarray consists exactly equal elements example subarray good subarray consists exactly consecutive increasing elements that difference between adjacent elements example subarray good but subarray not return true if array has least one valid partition otherwise return false example input nums output true explanation array can be partitioned into subarrays and this partition valid so return true example input nums output false explanation there no valid partition this array constraints numslength numsi
build array stack operations given integer array target and integer have empty stack two following operations push pushes integer top stack pop removes integer top stack also have stream integers range use two stack operations make numbers stack from bottom top equal target should follow following rules if stream integers not empty pick next integer from stream and push top stack if stack not empty pop integer top stack if any moment elements stack from bottom top equal target do not read new integers from stream and do not do more operations stack return stack operations needed build target following mentioned rules if there multiple valid answers return any them example input target output pushpushpoppush explanation initially stack empty last element top stack read from stream and push stack read from stream and push stack pop integer top stack read from stream and push stack example input target output pushpushpush explanation initially stack empty last element top stack read from stream and push stack read from stream and push stack read from stream and push stack example input target output pushpush explanation initially stack empty last element top stack read from stream and push stack read from stream and push stack since stack from bottom top equal target stop stack operations answers that read integer from stream not accepted constraints targetlength targeti target strictly increasing
find players zero or one losses given integer array matches where matchesi winneri loseri indicates that player winneri defeated player loseri match return list answer size where answer list all players that have not lost any matches answer list all players that have lost exactly one match values two lists should be returned increasing order note should only consider players that have played least one match testcases will be generated such that no two matches will have same outcome example input matches output explanation players and have not lost any matches players and each have lost one match players and each have lost two matches thus answer and answer example input matches output explanation players and have not lost any matches players and each have lost two matches thus answer and answer constraints matcheslength matchesilength winneri loseri winneri loseri all matchesi unique
design parking system design parking system parking lot parking lot has three kinds parking spaces big medium and small fixed number slots each size implement parkingsystem class parkingsystemint big int medium int small initializes object parkingsystem class number slots each parking space given as part constructor bool addcarint cartype checks whether there parking space cartype car that wants get into parking lot cartype can be three kinds big medium or small which represented and respectively car can only park parking space its cartype if there no space available return false else park car that size space and return true example input parkingsystem addcar addcar addcar addcar output null true true false false explanation parkingsystem parkingsystem new parkingsystem parkingsystemaddcar return true because there available slot big car parkingsystemaddcar return true because there available slot medium car parkingsystemaddcar return false because there no available slot small car parkingsystemaddcar return false because there no available slot big car already occupied constraints big medium small cartype or most calls will be made addcar
stone game alice and bob play game piles stones there even number piles arranged row and each pile has positive integer number stones pilesi objective game end most stones total number stones across all piles odd so there no ties alice and bob take turns alice starting first each turn player takes entire pile stones either from beginning or from end row this continues until there no more piles left which point person most stones wins assuming alice and bob play optimally return true if alice wins game or false if bob wins example input piles output true explanation alice starts first and can only take first or last say takes first so that row becomes if bob takes then board and alice takes win points if bob takes last then board and alice takes win points this demonstrated that taking first winning move alice so return true example input piles output true constraints pileslength pileslength even pilesi sumpilesi odd
valid parentheses given string containing just characters and determine if input string valid input string valid if open brackets must be closed same type brackets open brackets must be closed correct order every close bracket has corresponding open bracket same type example input output true example input output true example input output false constraints slength consists parentheses only
flipping image given binary matrix image flip image horizontally then invert and return resulting image flip image horizontally means that each row image reversed example flipping horizontally results invert image means that each replaced and each replaced example inverting results example input image output explanation first reverse each row then invert image example input image output explanation first reverse each row then invert image constraints imagelength imageilength imagesij either or
minimum operations reduce zero given integer array nums and integer one operation can either remove leftmost or rightmost element from array nums and subtract its value from note that this modifies array future operations return minimum number operations reduce exactly if possible otherwise return example input nums output explanation optimal solution remove last two elements reduce zero example input nums output example input nums output explanation optimal solution remove last three elements and first two elements operations total reduce zero constraints numslength numsi
adding two negabinary numbers given two numbers arr and arr base return result adding them together each number given array format as array and from most significant bit least significant bit example arr represents number number arr array format also guaranteed have no leading zeros either arr or arr return result adding arr and arr same format as array and no leading zeros example input arr arr output explanation arr represents arr represents output represents example input arr arr output example input arr arr output constraints arrlength arrlength arri and arri or arr and arr have no leading zeros
sentence similarity iii sentence list words that separated single space no leading or trailing spaces example hello world hello hello world hello world all sentences words consist only uppercase and lowercase english letters two sentences sentence and sentence similar if possible insert arbitrary sentence possibly empty inside one these sentences such that two sentences become equal example sentence hello my name jane and sentence hello jane can be made equal inserting my name between hello and jane sentence given two sentences sentence and sentence return true if sentence and sentence similar otherwise return false example input sentence my name haley sentence my haley output true explanation sentence can be turned sentence inserting name between my and haley example input sentence sentence lot words output false explanation no single sentence can be inserted inside one sentences make equal other example input sentence eating right now sentence eating output true explanation sentence can be turned sentence inserting right now end sentence constraints sentencelength sentencelength sentence and sentence consist lowercase and uppercase english letters and spaces words sentence and sentence separated single space
separate digits array given array positive integers nums return array answer that consists digits each integer nums after separating them same order appear nums separate digits integer get all digits has same order example integer separation its digits example input nums output explanation separation separation separation separation answer note that answer contains separations same order example input nums output explanation separation each integer nums itself answer constraints numslength numsi
triples bitwise and equal zero given integer array nums return number and triples and triple triple indices such that numslength numslength numslength numsi numsj numsk where represents bitwiseand operator example input nums output explanation could choose following triples example input nums output constraints numslength numsi
longest arithmetic subsequence given difference given integer array arr and integer difference return length longest subsequence arr which arithmetic sequence such that difference between adjacent elements subsequence equals difference subsequence sequence that can be derived from arr deleting some or no elements without changing order remaining elements example input arr difference output explanation longest arithmetic subsequence example input arr difference output explanation longest arithmetic subsequence any single element example input arr difference output explanation longest arithmetic subsequence constraints arrlength arri difference
print order suppose have class public class foo public void first printfirst public void second printsecond public void third printthird same instance foo will be passed three different threads thread will call first thread will call second and thread will call third design mechanism and modify program ensure that second executed after first and third executed after second note do not know how threads will be scheduled operating system even though numbers input seem imply ordering input format see mainly ensure our tests comprehensiveness example input nums output firstsecondthird explanation there three threads being fired asynchronously input means thread calls first thread calls second and thread calls third firstsecondthird correct output example input nums output firstsecondthird explanation input means thread calls first thread calls third and thread calls second firstsecondthird correct output constraints nums permutation
largest local values matrix given integer matrix grid generate integer matrix maxlocal size such that maxlocalij equal largest value matrix grid centered around row and column other words want find largest value every contiguous matrix grid return generated matrix example input grid output explanation diagram above shows original matrix and generated matrix notice that each value generated matrix corresponds largest value contiguous matrix grid example input grid output explanation notice that contained within every contiguous matrix grid constraints gridlength gridilength gridij
minimum moves move box their target location storekeeper game which player pushes boxes around warehouse trying get them target locations game represented grid characters grid where each element wall floor or box your task move box target position under following rules character represents player player can move up down left right grid if floor empty cell character represents floor which means free cell walk character represents wall which means obstacle impossible walk there there only one box and one target cell grid box can be moved adjacent free cell standing next box and then moving direction box this push player cannot walk through box return minimum number pushes move box target if there no way reach target return example input grid output explanation return only number times box pushed example input grid output example input grid output explanation push box down left left up and up constraints gridlength gridilength grid contains only characters or there only one character and grid
longest subsequence repeated times given string length and integer tasked find longest subsequence repeated times string subsequence string that can be derived from another string deleting some or no characters without changing order remaining characters subsequence seq repeated times string if seq subsequence where seq represents string constructed concatenating seq times example bba repeated times string bababcba because string bbabba constructed concatenating bba times subsequence string bababcba return longest subsequence repeated times string if multiple such subsequences found return lexicographically largest one if there no such subsequence return empty string example input letsleetcode output let explanation there two longest subsequences repeated times let and ete let lexicographically largest one example input bb output explanation longest subsequence repeated times example input ab output explanation there no subsequence repeated times empty string returned constraints slength consists lowercase english letters
path minimum effort hiker preparing upcoming hike given heights array size rows columns where heightsrowcol represents height cell row col situated topleft cell and hope travel bottomright cell rows columns ie indexed can move up down left or right and wish find route that requires minimum effort routes effort maximum absolute difference heights between two consecutive cells route return minimum effort required travel from topleft cell bottomright cell example input heights output explanation route has maximum absolute difference consecutive cells this better than route where maximum absolute difference example input heights output explanation route has maximum absolute difference consecutive cells which better than route example input heights output explanation this route does not require any effort constraints rows heightslength columns heightsilength rows columns heightsij
all ancestors node directed acyclic graph given positive integer representing number nodes directed acyclic graph dag nodes numbered from inclusive also given integer array edges where edgesi fromi toi denotes that there unidirectional edge from fromi toi graph return list answer where answeri list ancestors ith node sorted ascending order node ancestor another node if can reach via set edges example input edgelist output explanation above diagram represents input graph nodes and do not have any ancestors node has two ancestors and node has two ancestors and node has three ancestors and node has five ancestors and node has four ancestors and example input edgelist output explanation above diagram represents input graph node does not have any ancestor node has one ancestor node has two ancestors and node has three ancestors and node has four ancestors and constraints edgeslength min edgesilength fromi toi fromi toi there no duplicate edges graph directed and acyclic
magic squares grid magic square grid filled distinct numbers from such that each row column and both diagonals all have same sum given row col grid integers how many magic square subgrids there each subgrid contiguous example input grid output explanation following subgrid magic square while this one not total there only one magic square inside given grid example input grid output constraints row gridlength col gridilength row col gridij
maximum total importance roads
check if numbers ascending sentence sentence list tokens separated single space no leading or trailing spaces every token either positive number consisting digits no leading zeros or word consisting lowercase english letters example puppy has eyes legs sentence seven tokens and numbers and other tokens such as puppy words given string representing sentence need check if all numbers strictly increasing from left right ie other than last number each number strictly smaller than number its right return true if so or false otherwise example input box has blue red green and yellow marbles output true explanation numbers strictly increasing from left right example input hello world output false explanation numbers not strictly increasing example input sunset pm overnight lows will be low and output false explanation numbers not strictly increasing constraints slength consists lowercase english letters spaces and digits from inclusive number tokens between and inclusive tokens separated single space there least two numbers each number positive number less than no leading zeros contains no leading or trailing spaces
car pooling there car capacity empty seats vehicle only drives east ie cannot turn around and drive west given integer capacity and array trips where tripsi numpassengersi fromi toi indicates that ith trip has numpassengersi passengers and locations pick them up and drop them off fromi and toi respectively locations given as number kilometers due east from cars initial location return true if possible pick up and drop off all passengers all given trips or false otherwise example input trips capacity output false example input trips capacity output true constraints tripslength tripsilength numpassengersi fromi toi capacity
can place flowers have long flowerbed which some plots planted and some not however flowers cannot be planted adjacent plots given integer array flowerbed containing and where means empty and means not empty and integer return true if new flowers can be planted flowerbed without violating noadjacentflowers rule and false otherwise example input flowerbed output true example input flowerbed output false constraints flowerbedlength flowerbedi or there no two adjacent flowers flowerbed flowerbedlength
count fertile pyramids land farmer has rectangular grid land rows and columns that can be divided into unit cells each cell either fertile represented or barren represented all cells outside grid considered barren pyramidal plot land can be defined as set cells following criteria number cells set has be greater than and all cells must be fertile apex pyramid topmost cell pyramid height pyramid number rows covers let be apex pyramid and its height be then plot comprises cells where and inverse pyramidal plot land can be defined as set cells similar criteria number cells set has be greater than and all cells must be fertile apex inverse pyramid bottommost cell inverse pyramid height inverse pyramid number rows covers let be apex pyramid and its height be then plot comprises cells where and some examples valid and invalid pyramidal and inverse pyramidal plots shown below black cells indicate fertile cells given indexed binary matrix grid representing farmland return total number pyramidal and inverse pyramidal plots that can be found grid example input grid output explanation possible pyramidal plots shown blue and red respectively there no inverse pyramidal plots this grid hence total number pyramidal and inverse pyramidal plots example input grid output explanation pyramidal plot shown blue and inverse pyramidal plot shown red hence total number plots example input grid output explanation there pyramidal plots which shown nd and rd figures there inverse pyramidal plots which shown last figure total number plots constraints gridlength gridilength gridij either or
day week given date return corresponding day week that date input given as three integers representing day month and year respectively return answer as one following values sunday monday tuesday wednesday thursday friday saturday example input day month year output saturday example input day month year output sunday example input day month year output sunday constraints given dates valid dates between years and
word ladder ii transformation sequence from word beginword word endword using dictionary wordlist sequence words beginword sk such that every adjacent pair words differs single letter every si wordlist note that beginword does not need be wordlist sk endword given two words beginword and endword and dictionary wordlist return all shortest transformation sequences from beginword endword or empty list if no such sequence exists each sequence should be returned as list words beginword sk example input beginword hit endword cog wordlist hotdotdoglotlogcog output hithotdotdogcoghithotlotlogcog explanation there shortest transformation sequences hit hot dot dog cog hit hot lot log cog example input beginword hit endword cog wordlist hotdotdoglotlog output explanation endword cog not wordlist therefore there no valid transformation sequence constraints beginwordlength endwordlength beginwordlength wordlistlength wordlistilength beginwordlength beginword endword and wordlisti consist lowercase english letters beginword endword all words wordlist unique sum all shortest transformation sequences does not exceed
dota senate world dota there two parties radiant and dire dota senate consists senators coming from two parties now senate wants decide change dota game voting this change roundbased procedure each round each senator can exercise one two rights ban one senators right senator can make another senator lose all his rights this and all following rounds announce victory if this senator found senators who still have rights vote all from same party can announce victory and decide change game given string senate representing each senators party belonging character and represent radiant party and dire party then if there senators size given string will be roundbased procedure starts from first senator last senator given order this procedure will last until end voting all senators who have lost their rights will be skipped during procedure suppose every senator smart enough and will play best strategy his own party predict which party will finally announce victory and change dota game output should be radiant or dire example input senate rd output radiant explanation first senator comes from radiant and can just ban next senators right round and second senator cant exercise any rights anymore since his right has been banned and round first senator can just announce victory since only guy senate who can vote example input senate rdd output dire explanation first senator comes from radiant and can just ban next senators right round and second senator cant exercise any rights anymore since his right has been banned and third senator comes from dire and can ban first senators right round and round third senator can just announce victory since only guy senate who can vote constraints senatelength senatei either or
parallel courses ii given integer which indicates that there courses labeled from also given array relations where relationsi prevcoursei nextcoursei representing prerequisite relationship between course prevcoursei and course nextcoursei course prevcoursei has be taken before course nextcoursei also given integer one semester can take most courses as long as have taken all prerequisites previous semesters courses taking return minimum number semesters needed take all courses testcases will be generated such that possible take every course example input relations output explanation figure above represents given graph first semester can take courses and second semester can take course third semester can take course example input relations output explanation figure above represents given graph first semester can only take courses and since cannot take more than two per semester second semester can take course third semester can take course fourth semester can take course constraints relationslength relationsilength prevcoursei nextcoursei prevcoursei nextcoursei all pairs prevcoursei nextcoursei unique given graph directed acyclic graph
largest positive integer that exists its negative given integer array nums that does not contain any zeros find largest positive integer such that also exists array return positive integer if there no such integer return example input nums output explanation only valid can find array example input nums output explanation both and have their corresponding negative values array has larger value example input nums output explanation there no single valid return constraints numslength numsi numsi
find substring given hash value
maximal rectangle given rows cols binary matrix filled and find largest rectangle containing only and return its area example input matrix output explanation maximal rectangle shown above picture example input matrix output example input matrix output constraints rows matrixlength cols matrixilength row cols matrixij or
evaluate boolean binary tree given root full binary tree following properties leaf nodes have either value or where represents false and represents true nonleaf nodes have either value or where represents boolean or and represents boolean and evaluation node as follows if node leaf node evaluation value node ie true or false otherwise evaluate nodes two children and apply boolean operation its value childrens evaluations return boolean result evaluating root node full binary tree binary tree where each node has either or children leaf node node that has zero children example input root nullnull output true explanation above diagram illustrates evaluation process and node evaluates false and true false or node evaluates true or false true root node evaluates true so return true example input root output false explanation root node leaf node and evaluates false so return false constraints number nodes tree range nodeval every node has either or children leaf nodes have value or nonleaf nodes have value or
binary tree level order traversal ii given root binary tree return bottomup level order traversal its nodes values ie from left right level level from leaf root example input root nullnull output example input root output example input root output constraints number nodes tree range nodeval
verify preorder serialization binary tree one way serialize binary tree use preorder traversal when encounter nonnull node record nodes value if null node record using sentinel value such as example above binary tree can be serialized string where represents null node given string commaseparated values preorder return true if correct preorder traversal serialization binary tree guaranteed that each commaseparated value string must be either integer or character representing null pointer may assume that input format always valid example could never contain two consecutive commas such as note not allowed reconstruct tree example input preorder output true example input preorder output false example input preorder output false constraints preorderlength preorder consist integers range and separated commas
generate random point circle given radius and position center circle implement function randpoint which generates uniform random point inside circle implement solution class solutiondouble radius double xcenter double ycenter initializes object radius circle radius and position center xcenter ycenter randpoint returns random point inside circle point circumference circle considered be circle answer returned as array example input solution randpoint randpoint randpoint output null explanation solution solution new solution solutionrandpoint return solutionrandpoint return solutionrandpoint return constraints radius xcenter ycenter most calls will be made randpoint
minimum cost make array equal given two indexed arrays nums and cost consisting each positive integers can do following operation any number times increase or decrease any element array nums cost doing one operation ith element costi return minimum total cost such that all elements array nums become equal example input nums cost output explanation can make all elements equal following way increase th element one time cost decrease st element one time cost decrease nd element three times cost total cost can be shown that cannot make array equal smaller cost example input nums cost output explanation all elements already equal so no operations needed constraints numslength costlength numsi costi
wiggle subsequence wiggle sequence sequence where differences between successive numbers strictly alternate between positive and negative first difference if one exists may be either positive or negative sequence one element and sequence two nonequal elements trivially wiggle sequences example wiggle sequence because differences alternate between positive and negative contrast and not wiggle sequences first not because its first two differences positive and second not because its last difference zero subsequence obtained deleting some elements possibly zero from original sequence leaving remaining elements their original order given integer array nums return length longest wiggle subsequence nums example input nums output explanation entire sequence wiggle sequence differences example input nums output explanation there several subsequences that achieve this length one differences example input nums output constraints numslength numsi follow up could solve this time
number wonderful substrings wonderful string string where most one letter appears odd number times example ccjjc and abab wonderful but ab not given string word that consists first ten lowercase english letters through return number wonderful nonempty substrings word if same substring appears multiple times word then count each occurrence separately substring contiguous sequence characters string example input word aba output explanation four wonderful substrings underlined below aba aba aba aba aba example input word aabb output explanation nine wonderful substrings underlined below aabb aabb aa aabb aab aabb aabb aabb aabb abb aabb aabb bb aabb example input word output explanation two wonderful substrings underlined below constraints wordlength word consists lowercase english letters from
edit distance given two strings word and word return minimum number operations required convert word word have following three operations permitted word insert character delete character replace character example input word horse word ros output explanation horse rorse replace rorse rose remove rose ros remove example input word intention word execution output explanation intention inention remove inention enention replace enention exention replace exention exection replace exection execution insert constraints wordlength wordlength word and word consist lowercase english letters
monotone increasing digits integer has monotone increasing digits if and only if each pair adjacent digits and satisfy given integer return largest number that less than or equal monotone increasing digits example input output example input output example input output constraints
count days spent together alice and bob traveling rome separate business meetings given strings arrivealice leavealice arrivebob and leavebob alice will be city from dates arrivealice leavealice inclusive while bob will be city from dates arrivebob leavebob inclusive each will be character string format mmdd corresponding month and day date return total number days that alice and bob rome together can assume that all dates occur same calendar year which not leap year note that number days per month can be represented as example input arrivealice leavealice arrivebob leavebob output explanation alice will be rome from august august bob will be rome from august august both rome together august th th and th so answer example input arrivealice leavealice arrivebob leavebob output explanation there no day when alice and bob rome together so return constraints all dates provided format mmdd alice and bobs arrival dates earlier than or equal their leaving dates given dates valid dates nonleap year
di string match permutation perm integers all integers range can be represented as string length where si if permi permi and si if permi permi given string reconstruct permutation perm and return if there multiple valid permutations perm return any them example input idid output example input iii output example input ddi output constraints slength si either or
numbers repeated digits given integer return number positive integers range that have least one repeated digit example input output explanation only positive number least repeated digit example input output explanation positive numbers atleast repeated digit and example input output constraints
number unequal triplets array given indexed array positive integers nums find number triplets that meet following conditions numslength numsi numsj and numsk pairwise distinct other words numsi numsj numsi numsk and numsj numsk return number triplets that meet conditions example input nums output explanation following triplets meet conditions because because because since there triplets return note that not valid triplet because example input nums output explanation no triplets meet conditions so return constraints numslength numsi
minimum swaps make sequences increasing given two integer arrays same length nums and nums one operation allowed swap numsi numsi example if nums and nums can swap element obtain nums and nums return minimum number needed operations make nums and nums strictly increasing test cases generated so that given input always makes possible array arr strictly increasing if and only if arr arr arr arrarrlength example input nums nums output explanation swap nums and nums then sequences nums and nums which both strictly increasing example input nums nums output constraints numslength numslength numslength numsi numsi
minimum number operations reinitialize permutation given even integer initially have permutation perm size where permi indexed one operation will create new array arr and each if then arri permi if then arri permn will then assign arr perm return minimum nonzero number operations need perform perm return permutation its initial value example input output explanation perm initially after st operation perm so takes only operation example input output explanation perm initially after st operation perm after nd operation perm so takes only operations example input output constraints even
intersection two arrays ii given two integer arrays nums and nums return array their intersection each element result must appear as many times as shows both arrays and may return result any order example input nums nums output example input nums nums output explanation also accepted constraints numslength numslength numsi numsi follow up what if given array already sorted how would optimize your algorithm what if numss size small compared numss size which algorithm better what if elements nums stored disk and memory limited such that cannot load all elements into memory once
find difference two arrays given two indexed integer arrays nums and nums return list answer size where answer list all distinct integers nums which not present nums answer list all distinct integers nums which not present nums note that integers lists may be returned any order example input nums nums output explanation nums nums present index nums whereas nums and nums not present nums therefore answer nums nums present index nums whereas nums and nums not present nums therefore answer example input nums nums output explanation nums nums and nums not present nums since nums nums their value only included once and answer every integer nums present nums therefore answer constraints numslength numslength numsi numsi
subarray product less than given array integers nums and integer return number contiguous subarrays where product all elements subarray strictly less than example input nums output explanation subarrays that have product less than note that not included as product not strictly less than example input nums output constraints numslength numsi
flower planting no adjacent have gardens labeled from and array paths where pathsi xi yi describes bidirectional path between garden xi garden yi each garden want plant one types flowers all gardens have most paths coming into or leaving your task choose flower type each garden such that any two gardens connected path have different types flowers return any such choice as array answer where answeri type flower planted ith garden flower types denoted or guaranteed answer exists example input paths output explanation gardens and have different types gardens and have different types gardens and have different types hence valid answer other valid answers include and example input paths output example input paths output constraints pathslength pathsilength xi yi xi yi every garden has most paths coming into or leaving
maximum gap given integer array nums return maximum difference between two successive elements its sorted form if array contains less than two elements return must write algorithm that runs linear time and uses linear extra space example input nums output explanation sorted form array either or has maximum difference example input nums output explanation array contains less than elements therefore return constraints numslength numsi
maximum number ways partition array given indexed integer array nums length number ways partition nums number pivot indices that satisfy both conditions pivot nums nums numspivot numspivot numspivot numsn also given integer can choose change value one element nums or leave array unchanged return maximum possible number ways partition nums satisfy both conditions after changing most one element example input nums output explanation one optimal approach change nums array becomes there one way partition array pivot have partition example input nums output explanation optimal approach leave array unchanged there two ways partition array pivot have partition pivot have partition example input nums output explanation one optimal approach change nums array becomes there four ways partition array constraints numslength numsi
maximum score good subarray given array integers nums indexed and integer score subarray defined as minnumsi numsi numsj good subarray subarray where return maximum possible score good subarray example input nums output explanation optimal subarray score min example input nums output explanation optimal subarray score min constraints numslength numsi numslength
factorial trailing zeroes given integer return number trailing zeroes note that example input output explanation no trailing zero example input output explanation one trailing zero example input output constraints follow up could write solution that works logarithmic time complexity
increasing triplet subsequence given integer array nums return true if there exists triple indices such that and numsi numsj numsk if no such indices exists return false example input nums output true explanation any triplet where valid example input nums output false explanation no triplet exists example input nums output true explanation triplet valid because nums nums nums constraints numslength numsi follow up could implement solution that runs time complexity and space complexity
counting words given prefix given array strings words and string pref return number strings words that contain pref as prefix prefix string any leading contiguous substring example input words payattentionpracticeattend pref output explanation strings that contain as prefix attention and attend example input words leetcodewinloopssuccess pref code output explanation there no strings that contain code as prefix constraints wordslength wordsilength preflength wordsi and pref consist lowercase english letters
check if all as appears before all bs given string consisting only characters and return true if every appears before every string otherwise return false example input aaabbb output true explanation as indices and while bs indices and hence every appears before every and return true example input abab output false explanation there index and index hence not every appears before every and return false example input bbb output true explanation there no as hence every appears before every and return true constraints slength si either or
subarrays different integers given integer array nums and integer return number good subarrays nums good array array where number different integers that array exactly example has different integers and subarray contiguous part array example input nums output explanation subarrays formed exactly different integers example input nums output explanation subarrays formed exactly different integers constraints numslength numsi numslength
tweet counts per frequency social media company trying monitor activity their site analyzing number tweets that occur select periods time these periods can be partitioned into smaller time chunks based certain frequency every minute hour or day example period seconds would be partitioned into following time chunks these frequencies every minute second chunks every hour second chunks every day second chunks notice that last chunk may be shorter than specified frequencys chunk size and will always end end time period above example design and implement api help company their analysis implement tweetcounts class tweetcounts initializes tweetcounts object void recordtweetstring tweetname int time stores tweetname recorded time seconds listinteger gettweetcountsperfrequencystring freq string tweetname int starttime int endtime returns list integers representing number tweets tweetname each time chunk given period time starttime endtime seconds and frequency freq freq one minute hour or day representing frequency every minute hour or day respectively example input tweetcountsrecordtweetrecordtweetrecordtweetgettweetcountsperfrequencygettweetcountsperfrequencyrecordtweetgettweetcountsperfrequency tweettweettweetminutetweetminutetweettweethourtweet output nullnullnullnullnull explanation tweetcounts tweetcounts new tweetcounts tweetcountsrecordtweettweet new tweet tweet time tweetcountsrecordtweettweet new tweet tweet time tweetcountsrecordtweettweet new tweet tweet time tweetcountsgettweetcountsperfrequencyminute tweet return chunk had tweets tweetcountsgettweetcountsperfrequencyminute tweet return chunk had tweets chunk had tweet tweetcountsrecordtweettweet new tweet tweet time tweetcountsgettweetcountsperfrequencyhour tweet return chunk had tweets constraints time starttime endtime endtime starttime there will be most calls total recordtweet and gettweetcountsperfrequency
lucky numbers matrix given matrix distinct numbers return all lucky numbers matrix any order lucky number element matrix such that minimum element its row and maximum its column example input matrix output explanation only lucky number since minimum its row and maximum its column example input matrix output explanation only lucky number since minimum its row and maximum its column example input matrix output explanation only lucky number since minimum its row and maximum its column constraints matlength matilength matrixij all elements matrix distinct
water bottles there numbottles water bottles that initially full water can exchange numexchange empty water bottles from market one full water bottle operation drinking full water bottle turns into empty bottle given two integers numbottles and numexchange return maximum number water bottles can drink example input numbottles numexchange output explanation can exchange empty bottles get full water bottle number water bottles can drink example input numbottles numexchange output explanation can exchange empty bottles get full water bottle number water bottles can drink constraints numbottles numexchange
stream characters design algorithm that accepts stream characters and checks if suffix these characters string given array strings words example if words abc xyz and stream added four characters one one and your algorithm should detect that suffix xyz characters axyz matches xyz from words implement streamchecker class streamcheckerstring words initializes object strings array words boolean querychar letter accepts new character from stream and returns true if any nonempty suffix from stream forms word that words example input streamchecker query query query query query query query query query query query query cd kl output null false false false true false true false false false false false true explanation streamchecker streamchecker new streamcheckercd kl streamcheckerquerya return false streamcheckerqueryb return false streamcheckerqueryc return false streamcheckerqueryd return true because cd wordlist streamcheckerquerye return false streamcheckerqueryf return true because wordlist streamcheckerqueryg return false streamcheckerqueryh return false streamcheckerqueryi return false streamcheckerqueryj return false streamcheckerqueryk return false streamcheckerqueryl return true because kl wordlist constraints wordslength wordsilength wordsi consists lowercase english letters letter lowercase english letter most calls will be made query
repeated string match given two strings and return minimum number times should repeat string so that string substring if impossible be substring after repeating return notice string abc repeated times repeated time abc and repeated times abcabc example input abcd cdabcdab output explanation return because repeating three times abcdabcdabcd substring example input aa output constraints alength blength and consist lowercase english letters
best time buy and sell stock iv given integer array prices where pricesi price given stock ith day and integer find maximum profit can achieve may complete most transactions ie may buy most times and sell most times note may not engage multiple transactions simultaneously ie must sell stock before buy again example input prices output explanation buy day price and sell day price profit example input prices output explanation buy day price and sell day price profit then buy day price and sell day price profit constraints priceslength pricesi
reverse linked list given head singly linked list reverse list and return reversed list example input head output example input head output example input head output constraints number nodes list range nodeval follow up linked list can be reversed either iteratively or recursively could implement both
ugly number iii ugly number positive integer that divisible or given four integers and return nth ugly number example input output explanation ugly numbers rd example input output explanation ugly numbers th example input output explanation ugly numbers th constraints guaranteed that result will be range
find elements contaminated binary tree given binary tree following rules rootval if treenodeval and treenodeleft null then treenodeleftval if treenodeval and treenoderight null then treenoderightval now binary tree contaminated which means all treenodeval have been changed implement findelements class findelementstreenode root initializes object contaminated binary tree and recovers bool findint target returns true if target value exists recovered binary tree example input findelementsfindfind null output nullfalsetrue explanation findelements findelements new findelementsnull findelementsfind return false findelementsfind return true example input findelementsfindfindfind output nulltruetruefalse explanation findelements findelements new findelements findelementsfind return true findelementsfind return true findelementsfind return false example input findelementsfindfindfindfind nullnull output nulltruefalsefalsetrue explanation findelements findelements new findelementsnullnull findelementsfind return true findelementsfind return false findelementsfind return false findelementsfind return true constraints treenodeval height binary tree less than or equal total number nodes between total calls find between target
capital gainloss sql schema table stocks column name type stockname varchar operation enum operationday int price int stockname operationday primary key this table operation column enum type sell buy each row this table indicates that stock which has stockname had operation day operationday price guaranteed that each sell operation stock has corresponding buy operation previous day also guaranteed that each buy operation stock has corresponding sell operation upcoming day write sql query report capital gainloss each stock capital gainloss stock total gain or loss after buying and selling stock one or many times return result table any order query result format following example example input stocks table stockname operation operationday price leetcode buy corona masks buy leetcode sell handbags buy corona masks sell corona masks buy corona masks sell corona masks buy handbags sell corona masks sell output stockname capitalgainloss corona masks leetcode handbags explanation leetcode stock bought day and sold day capital gain handbags stock bought day and sold day capital loss corona masks stock bought day and sold day bought again day and sold day last bought day and sold day capital gainloss sum capital gainslosses each buy sell operation
cinema seat allocation cinema has rows seats numbered from and there ten seats each row labelled from as shown figure above given array reservedseats containing numbers seats already reserved example reservedseatsi means seat located row and labelled already reserved return maximum number fourperson groups can assign cinema seats fourperson group occupies four adjacent seats one single row seats across aisle such as and not considered be adjacent but there exceptional case which aisle split fourperson group that case aisle split fourperson group middle which means have two people each side example input reservedseats output explanation figure above shows optimal allocation four groups where seats mark blue already reserved and contiguous seats mark orange one group example input reservedseats output example input reservedseats output constraints reservedseatslength minn reservedseatsilength reservedseatsi reservedseatsi all reservedseatsi distinct
sliding puzzle board there five tiles labeled from and empty square represented move consists choosing and directionally adjacent number and swapping state board solved if and only if board given puzzle board board return least number moves required so that state board solved if impossible state board be solved return example input board output explanation swap and one move example input board output explanation no number moves will make board solved example input board output explanation smallest number moves that solves board example path after move after move after move after move after move after move constraints boardlength boardilength boardij each value boardij unique
longest word dictionary through deleting given string and string array dictionary return longest string dictionary that can be formed deleting some given string characters if there more than one possible result return longest word smallest lexicographical order if there no possible result return empty string example input abpcplea dictionary aleapplemonkeyplea output apple example input abpcplea dictionary abc output constraints slength dictionarylength dictionaryilength and dictionaryi consist lowercase english letters
snail traversal write code that enhances all arrays such that can call snailrowscount colscount method that transforms array into array organised pattern known as snail traversal order invalid input values should output empty array if rowscount colscount numslength input considered invalid snail traversal order starts top left cell first value current array then moves through entire first column from top bottom followed moving next column right and traversing from bottom top this pattern continues alternating direction traversal each column until entire current array covered example when given input array rowscount and colscount desired output matrix shown below note that iterating matrix following arrows corresponds order numbers original array example input nums rowscount colscount output example input nums rowscount colscount output example input nums rowscount colscount output explanation multiplied and original array has length therefore input invalid constraints numslength numsi rowscount colscount
univalued binary tree binary tree univalued if every node tree has same value given root binary tree return true if given tree univalued or false otherwise example input root null output true example input root output false constraints number nodes tree range nodeval
create components same value there undirected tree nodes labeled from given indexed integer array nums length where numsi represents value ith node also given integer array edges length where edgesi ai bi indicates that there edge between nodes ai and bi tree allowed delete some edges splitting tree into multiple connected components let value component be sum all numsi which node component return maximum number edges can delete such that every connected component tree has same value example input nums edges output explanation above figure shows how can delete edges and created components nodes and sum values each component equals can be proven that no better deletion exists so answer example input nums edges output explanation there no edges be deleted constraints numslength numsi edgeslength edgesilength edgesi edgesi edges represents valid tree
largest perimeter triangle given integer array nums return largest perimeter triangle nonzero area formed from three these lengths if impossible form any triangle nonzero area return example input nums output explanation can form triangle three side lengths and example input nums output explanation cannot use side lengths and form triangle cannot use side lengths and form triangle cannot use side lengths and form triangle as cannot use any three side lengths form triangle nonzero area return constraints numslength numsi
concatenated words given array strings words without duplicates return all concatenated words given list words concatenated word defined as string that comprised entirely least two shorter words not necesssarily distinct given array example input words catcatscatsdogcatsdogdogcatsdoghippopotamusesratratcatdogcat output catsdogcatsdogcatsdogratcatdogcat explanation catsdogcats can be concatenated cats dog and cats dogcatsdog can be concatenated dog cats and dog ratcatdogcat can be concatenated rat cat dog and cat example input words catdogcatdog output catdog constraints wordslength wordsilength wordsi consists only lowercase english letters all strings words unique sumwordsilength
shopping offers leetcode store there items sell each item has price however there some special offers and special offer consists one or more different kinds items sale price given integer array price where pricei price ith item and integer array needs where needsi number pieces ith item want buy also given array special where speciali size where specialij number pieces jth item ith offer and specialin ie last integer array price ith offer return lowest price have pay exactly certain items as given where could make optimal use special offers not allowed buy more items than want even if that would lower overall price could use any special offers as many times as want example input price special needs output explanation there two kinds items and their prices and respectively special offer can pay and special offer can pay and need buy and so may pay and special offer and example input price special needs output explanation price and may pay and and and need buy and so may pay and special offer and cannot add more items though only and constraints pricelength needslength pricei needsi speciallength specialilength specialij
maximum number achievable transfer requests have buildings numbered from each building has number employees its transfer season and some employees want change building reside given array requests where requestsi fromi toi represents employees request transfer from building fromi building toi all buildings full so list requests achievable only if each building net change employee transfers zero this means number employees leaving equal number employees moving example if and two employees leaving building one leaving building and one leaving building there should be two employees moving building one employee moving building and one employee moving building return maximum number achievable requests example input requests output explantion lets see requests from building have employees and and both want move building from building have employees and and want move buildings and respectively from building have employee and want move building from building have employee and want move building from building dont have any requests can achieve requests users and swapping their places can achieve requests users and swapping places buildings example input requests output explantion lets see requests from building have employee and want stay same building from building have employee and want move building from building have employee and want move building can achieve all requests example input requests output constraints requestslength requestsilength fromi toi
self dividing numbers selfdividing number number that divisible every digit contains example selfdividing number because and selfdividing number not allowed contain digit zero given two integers left and right return list all selfdividing numbers range left right example input left right output example input left right output constraints left right
check array formation through concatenation given array distinct integers arr and array integer arrays pieces where integers pieces distinct your goal form arr concatenating arrays pieces any order however not allowed reorder integers each array piecesi return true if possible form array arr from pieces otherwise return false example input arr pieces output true explanation concatenate then example input arr pieces output false explanation even though numbers match cannot reorder pieces example input arr pieces output true explanation concatenate then then constraints pieceslength arrlength sumpiecesilength arrlength piecesilength arrlength arri piecesij integers arr distinct integers pieces distinct ie if flatten pieces array all integers this array distinct
slowest key newly designed keypad tested where tester pressed sequence keys one time given string keyspressed length where keyspressedi ith key pressed testing sequence and sorted list releasetimes where releasetimesi time ith key released both arrays indexed th key pressed time and every subsequent key pressed exact time previous key released tester wants know key keypress that had longest duration ith keypress had duration releasetimesi releasetimesi and th keypress had duration releasetimes note that same key could have been pressed multiple times during test and these multiple presses same key may not have had same duration return key keypress that had longest duration if there multiple such keypresses return lexicographically largest key keypresses example input releasetimes keyspressed cbcd output explanation keypresses as follows keypress had duration pressed time and released time keypress had duration pressed time right after release previous character and released time keypress had duration pressed time right after release previous character and released time keypress had duration pressed time right after release previous character and released time longest these keypress and second keypress both duration lexicographically larger than so answer example input releasetimes keyspressed spuda output explanation keypresses as follows keypress had duration keypress had duration keypress had duration keypress had duration keypress had duration longest these keypress duration constraints releasetimeslength keyspressedlength releasetimesi releasetimesi releasetimesi keyspressed contains only lowercase english letters
number students doing homework given time given two integer arrays starttime and endtime and given integer querytime ith student started doing their homework time starttimei and finished time endtimei return number students doing their homework time querytime more formally return number students where querytime lays interval starttimei endtimei inclusive example input starttime endtime querytime output explanation have students where first student started doing homework time and finished time and wasnt doing anything time second student started doing homework time and finished time and also wasnt doing anything time third student started doing homework time and finished time and only student doing homework time example input starttime endtime querytime output explanation only student doing their homework querytime constraints starttimelength endtimelength starttimelength starttimei endtimei querytime
count vowel substrings string substring contiguous nonempty sequence characters within string vowel substring substring that only consists vowels and and has all five vowels present given string word return number vowel substrings word example input word aeiouu output explanation vowel substrings word as follows underlined aeiouu aeiouu example input word unicornarihan output explanation not all vowels present so there no vowel substrings example input word cuaieuouac output explanation vowel substrings word as follows underlined cuaieuouac cuaieuouac cuaieuouac cuaieuouac cuaieuouac cuaieuouac cuaieuouac constraints wordlength word consists lowercase english letters only
convert bst greater tree given root binary search tree bst convert greater tree such that every key original bst changed original key plus sum all keys greater than original key bst as reminder binary search tree tree that satisfies these constraints left subtree node contains only nodes keys less than nodes key right subtree node contains only nodes keys greater than nodes key both left and right subtrees must also be binary search trees example input root nullnullnullnullnullnull output nullnullnullnullnullnull example input root null output null constraints number nodes tree range nodeval all values tree unique root guaranteed be valid binary search tree note this question same as httpsleetcodecomproblemsbinarysearchtreetogreatersumtree
escape ghosts playing simplified pacman game infinite grid start point and given destination point target xtarget ytarget that trying get there several ghosts map their starting positions given as array ghosts where ghostsi xi yi represents starting position ith ghost all inputs integral coordinates each turn and all ghosts may independently choose either move unit any four cardinal directions north east south or west or stay still all actions happen simultaneously escape if and only if can reach target before any ghost reaches if reach any square including target same time as ghost does not count as escape return true if possible escape regardless how ghosts move otherwise return false example input ghosts target output true explanation can reach destination after turn while ghosts located and cannot catch up example input ghosts target output false explanation need reach destination but ghost lies between and destination example input ghosts target output false explanation ghost can reach target same time as constraints ghostslength ghostsilength xi yi there can be multiple ghosts same location targetlength xtarget ytarget
maximum length repeated subarray given two integer arrays nums and nums return maximum length subarray that appears both arrays example input nums nums output explanation repeated subarray maximum length example input nums nums output explanation repeated subarray maximum length constraints numslength numslength numsi numsi
letter combinations phone number given string containing digits from inclusive return all possible letter combinations that number could represent return answer any order mapping digits letters just like telephone buttons given below note that does not map any letters example input digits output adaeafbdbebfcdcecf example input digits output example input digits output abc constraints digitslength digitsi digit range
top frequent elements given integer array nums and integer return most frequent elements may return answer any order example input nums output example input nums output constraints numslength numsi range number unique elements array guaranteed that answer unique follow up your algorithms time complexity must be better than log where arrays size
shifting letters given string lowercase english letters and integer array shifts same length call shift letter next letter alphabet wrapping around so that becomes example shifta shiftt and shiftz now each shiftsi want shift first letters times return final string after all such shifts applied example input abc shifts output rpl explanation start abc after shifting first letters have dbc after shifting first letters have igc after shifting first letters have rpl answer example input aaa shifts output gfd constraints slength consists lowercase english letters shiftslength slength shiftsi
finding mk average given two integers and and stream integers tasked implement data structure that calculates mkaverage stream mkaverage can be calculated using these steps if number elements stream less than should consider mkaverage be otherwise copy last elements stream separate container remove smallest elements and largest elements from container calculate average value rest elements rounded down nearest integer implement mkaverage class mkaverageint int initializes mkaverage object empty stream and two integers and void addelementint num inserts new element num into stream int calculatemkaverage calculates and returns mkaverage current stream rounded down nearest integer example input mkaverage addelement addelement calculatemkaverage addelement calculatemkaverage addelement addelement addelement calculatemkaverage output null null null null null null null explanation mkaverage obj new mkaverage objaddelement current elements objaddelement current elements objcalculatemkaverage return because and only elements exist objaddelement current elements objcalculatemkaverage last elements after removing smallest and largest element container will be average equals return objaddelement current elements objaddelement current elements objaddelement current elements objcalculatemkaverage last elements after removing smallest and largest element container will be average equals return constraints num most calls will be made addelement and calculatemkaverage
diagonal traverse ii given integer array nums return all elements nums diagonal order as shown below images example input nums output example input nums output constraints numslength numsilength sumnumsilength numsij
remove duplicates from sorted list given head sorted linked list delete all duplicates such that each element appears only once return linked list sorted as well example input head output example input head output constraints number nodes list range nodeval list guaranteed be sorted ascending order
longest consecutive sequence given unsorted array integers nums return length longest consecutive elements sequence must write algorithm that runs time example input nums output explanation longest consecutive elements sequence therefore its length example input nums output constraints numslength numsi
find width columns grid given indexed integer matrix grid width column maximum length its integers example if grid width only column since length return integer array ans size where ansi width ith column length integer len digits equal len if nonnegative and len otherwise example input grid output explanation th column length example input grid output explanation th column only length st column all integers length nd column both and length constraints gridlength gridilength gridrc
data stream as disjoint intervals given data stream input nonnegative integers summarize numbers seen so far as list disjoint intervals implement summaryranges class summaryranges initializes object empty stream void addnumint value adds integer value stream int getintervals returns summary integers stream currently as list disjoint intervals starti endi answer should be sorted starti example input summaryranges addnum getintervals addnum getintervals addnum getintervals addnum getintervals addnum getintervals output null null null null null null explanation summaryranges summaryranges new summaryranges summaryrangesaddnum arr summaryrangesgetintervals return summaryrangesaddnum arr summaryrangesgetintervals return summaryrangesaddnum arr summaryrangesgetintervals return summaryrangesaddnum arr summaryrangesgetintervals return summaryrangesaddnum arr summaryrangesgetintervals return constraints value most calls will be made addnum and getintervals most calls will be made getintervals follow up what if there lots merges and number disjoint intervals small compared size data stream
time when network becomes idle there network servers labeled from given integer array edges where edgesi ui vi indicates there message channel between servers ui and vi and can pass any number messages each other directly one second also given indexed integer array patience length all servers connected ie message can be passed from one server any other servers directly or indirectly through message channels server labeled master server rest data servers each data server needs send its message master server processing and wait reply messages move between servers optimally so every message takes least amount time arrive master server master server will process all newly arrived messages instantly and send reply originating server via reversed path message had gone through beginning second each data server sends its message be processed starting from second beginning every second each data server will check if has received reply message sent including any newly arrived replies from master server if has not will resend message periodically data server will resend message every patiencei seconds ie data server will resend message if patiencei seconds have elapsed since last time message sent from this server otherwise no more resending will occur from this server network becomes idle when there no messages passing between servers or arriving servers return earliest second starting from which network becomes idle example input edges patience output explanation beginning second data server sends its message denoted master server data server sends its message denoted master server second message arrives master server master server processes message instantly and sends reply back server has not received any reply second patience elapsed since this server has sent message therefore does not resend message server has not received any reply second patience elapsed since this server has sent message therefore resends message denoted second reply arrives server no more resending will occur from server message arrives master server master server processes message instantly and sends reply back server resends message denoted second reply arrives server no more resending will occur from server second reply arrives server starting from beginning second there no messages passing between servers or arriving servers this time when network becomes idle example input edges patience output explanation data servers and receive reply back beginning second from beginning second network becomes idle constraints patiencelength patience patiencei edgeslength min edgesilength ui vi ui vi there no duplicate edges each server can directly or indirectly reach another server
linked list components given head linked list containing unique integer values and integer array nums that subset linked list values return number connected components nums where two values connected if appear consecutively linked list example input head nums output explanation and connected so and two connected components example input head nums output explanation and connected and connected so and two connected components constraints number nodes linked list nodeval all values nodeval unique numslength numsi all values nums unique
find array given subset sums given integer representing length unknown array that trying recover also given array sums containing values all subset sums unknown array no particular order return array ans length representing unknown array if multiple answers exist return any them array sub subset array arr if sub can be obtained from arr deleting some possibly zero or all elements arr sum elements sub one possible subset sum arr sum empty array considered be note test cases generated such that there will always be least one correct answer example input sums output explanation able achieve given subset sums sum sum sum sum sum sum sum sum note that any permutation and also any permutation will also be accepted example input sums output explanation only correct answer example input sums output explanation able achieve given subset sums constraints sumslength sumsi
container most water given integer array height length there vertical lines drawn such that two endpoints ith line and heighti find two lines that together xaxis form container such that container contains most water return maximum amount water container can store notice that may not slant container example input height output explanation above vertical lines represented array this case max area water blue section container can contain example input height output constraints heightlength heighti
contain virus virus spreading rapidly and your task quarantine infected area installing walls world modeled as binary grid isinfected where isinfectedij represents uninfected cells and isinfectedij represents cells contaminated virus wall and only one wall can be installed between any two directionally adjacent cells shared boundary every night virus spreads all neighboring cells all four directions unless blocked wall resources limited each day can install walls around only one region ie affected area continuous block infected cells that threatens most uninfected cells following night there will never be tie return number walls used quarantine all infected regions if world will become fully infected return number walls used example input isinfected output explanation there contaminated regions first day add walls quarantine viral region left board after virus spreads second day add walls quarantine viral region right virus fully contained example input isinfected output explanation even though there only one cell saved there walls built notice that walls only built shared boundary two different cells example input isinfected output explanation region left only builds two new walls constraints isinfectedlength isinfectedilength isinfectedij either or there always contiguous viral region throughout described process that will infect strictly more uncontaminated squares next round
reverse integer given signed bit integer return its digits reversed if reversing causes value go outside signed bit integer range then return assume environment does not allow store bit integers signed or unsigned example input output example input output example input output constraints
vowels all substrings given string word return sum number vowels and every substring word substring contiguous nonempty sequence characters within string note due large constraints answer may not fit signed bit integer please be careful during calculations example input word aba output explanation all possible substrings ab aba ba and has vowels ab ba and have vowel each aba has vowels hence total sum vowels example input word abc output explanation all possible substrings ab abc bc and ab and abc have vowel each bc and have vowels each hence total sum vowels example input word ltcd output explanation there no vowels any substring ltcd constraints wordlength word consists lowercase english letters
find divisibility array string given indexed string word length consisting digits and positive integer divisibility array div word integer array length such that divi if numeric value wordi divisible or divi otherwise return divisibility array word example input word output explanation there only prefixes that divisible and example input word output explanation there only prefixes that divisible and constraints wordlength word consists digits from
binary tree preorder traversal given root binary tree return preorder traversal its nodes values example input root null output example input root output example input root output constraints number nodes tree range nodeval follow up recursive solution trivial could do iteratively
similar string groups two strings and considered similar if either identical or can make them equivalent swapping most two letters distinct positions within string example tars and rats similar swapping positions and and rats and arts similar but star not similar tars rats or arts together these form two connected groups similarity tars rats arts and star notice that tars and arts same group even though not similar formally each group such that word group if and only if similar least one other word group given list strs strings where every string strs anagram every other string strs how many groups there example input strs tarsratsartsstar output example input strs omvovm output constraints strslength strsilength strsi consists lowercase letters only all words strs have same length and anagrams each other
number orders backlog given integer array orders where each ordersi pricei amounti ordertypei denotes that amounti orders have been placed type ordertypei price pricei ordertypei if batch buy orders or if batch sell orders note that ordersi represents batch amounti independent orders same price and order type all orders represented ordersi will be placed before all orders represented ordersi all valid there backlog that consists orders that have not been executed backlog initially empty when order placed following happens if order buy order look sell order smallest price backlog if that sell orders price smaller than or equal current buy orders price will match and be executed and that sell order will be removed from backlog else buy order added backlog vice versa if order sell order look buy order largest price backlog if that buy orders price larger than or equal current sell orders price will match and be executed and that buy order will be removed from backlog else sell order added backlog return total amount orders backlog after placing all orders from input since this number can be large return modulo example input orders output explanation here what happens orders orders type buy price placed there no sell orders so orders added backlog orders type sell price placed there no buy orders prices larger than or equal so orders added backlog order type sell price placed there no buy orders prices larger than or equal backlog so this order added backlog orders type buy price placed first orders matched sell orders least price which and these sell orders removed from backlog rd order matched sell order least price which and this sell order removed from backlog then there no more sell orders backlog so th order added backlog finally backlog has buy orders price and buy order price so total number orders backlog example input orders output explanation here what happens orders orders type sell price placed there no buy orders so orders added backlog orders type buy price placed matched sell orders least price which and those sell orders removed from backlog orders type buy price placed least price sell order so orders added backlog order type sell price placed matched buy order highest price which and that buy order removed from backlog finally backlog has sell orders price and buy orders price so total number orders which equal constraints orderslength ordersilength pricei amounti ordertypei either or
game play analysis sql schema table activity column name type playerid int deviceid int eventdate date gamesplayed int playerid eventdate primary key this table this table shows activity players some games each row record player who logged and played number games possibly before logging out someday using some device write sql query report first login date each player return result table any order query result format following example example input activity table playerid deviceid eventdate gamesplayed output playerid firstlogin
sequential digits integer has sequential digits if and only if each digit number one more than previous digit return sorted list all integers range low high inclusive that have sequential digits example input low high output example input low high output constraints low high
knight probability chessboard chessboard knight starts cell row column and attempts make exactly moves rows and columns indexed so topleft cell and bottomright cell chess knight has eight possible moves can make as illustrated below each move two cells cardinal direction then one cell orthogonal direction each time knight move chooses one eight possible moves uniformly random even if piece would go off chessboard and moves there knight continues moving until has made exactly moves or has moved off chessboard return probability that knight remains board after has stopped moving example input row column output explanation there two moves that will keep knight board from each those positions there also two moves that will keep knight board total probability knight stays board example input row column output constraints row column
check if string contains all binary codes size given binary string and integer return true if every binary code length substring otherwise return false example input output true explanation binary codes length and can be all found as substrings indices and respectively example input output true explanation binary codes length and clear that both exist as substring example input output false explanation binary code length and does not exist array constraints slength si either or
minimum number operations sort binary tree level given root binary tree unique values one operation can choose any two nodes same level and swap their values return minimum number operations needed make values each level sorted strictly increasing order level node number edges along path between and root node example input root nullnullnullnullnull output explanation swap and nd level becomes swap and rd level becomes swap and rd level becomes used operations so return can be proven that minimum number operations needed example input root output explanation swap and nd level becomes swap and rd level becomes swap and rd level becomes used operations so return can be proven that minimum number operations needed example input root output explanation each level already sorted increasing order so return constraints number nodes tree range nodeval all values tree unique
minimum number operations make string sorted given string indexed asked perform following operation until get sorted string find largest index such that slength and si si find largest index such that slength and sk si all possible values range inclusive swap two characters indices and reverse suffix starting index return number operations needed make string sorted since answer can be too large return modulo example input cba output explanation simulation goes as follows operation swap and get scab then reverse suffix starting now scab operation swap and get sbac then reverse suffix starting now sbca operation swap and get sbac then reverse suffix starting now sbac operation swap and get sabc then reverse suffix starting now sacb operation swap and get sabc then reverse suffix starting now sabc example input aabaa output explanation simulation goes as follows operation swap and get saaaab then reverse substring starting now saaaba operation swap and get saaaab then reverse substring starting now saaaab constraints slength consists only lowercase english letters
tree node sql schema table tree column name type id int pid int id primary key column this table each row this table contains information about id node and id its parent node tree given structure always valid tree each node tree can be one three types leaf if node leaf node root if node root tree inner if node neither leaf node nor root node write sql query report type each node tree return result table any order query result format following example example input tree table id pid null output id type root inner leaf leaf leaf explanation node root node because its parent node null and has child nodes and node inner node because has parent node and child node and nodes and leaf nodes because have parent nodes and do not have child nodes example input tree table id pid null output id type root explanation if there only one node tree only need output its root attributes
inverse pairs array integer array nums inverse pair pair integers where numslength and numsi numsj given two integers and return number different arrays consist numbers from such that there exactly inverse pairs since answer can be huge return modulo example input output explanation only array which consists numbers from has exactly inverse pairs example input output explanation array and have exactly inverse pair constraints
find duplicate file system given list paths directory info including directory path and all files contents this directory return all duplicate files file system terms their paths may return answer any order group duplicate files consists least two files that have same content single directory info string input list has following format rootdddm ftxtfcontent ftxtfcontent fntxtfncontent means there files ftxt ftxt fntxt content fcontent fcontent fncontent respectively directory rootdddm note that and if means directory just root directory output list groups duplicate file paths each group contains all file paths files that have same content file path string that has following format directorypathfilenametxt example input paths roota txtabcd txtefghrootc txtabcdrootcd txtefghroot txtefgh output rootatxtrootcdtxtroottxtrootatxtrootctxt example input paths roota txtabcd txtefghrootc txtabcdrootcd txtefgh output rootatxtrootcdtxtrootatxtrootctxt constraints pathslength pathsilength sumpathsilength pathsi consist english letters digits and may assume no files or directories share same name same directory may assume each given directory info represents unique directory single blank space separates directory path and file info follow up imagine given real file system how will search files dfs or bfs if file content very large gb level how will modify your solution if can only read file kb each time how will modify your solution what time complexity your modified solution what most timeconsuming part and memoryconsuming part how optimize how make sure duplicated files find not false positive
score students solving math expression given string that contains digits addition symbols and multiplication symbols only representing valid math expression single digit numbers eg this expression given elementary school students students instructed get answer expression following this order operations compute multiplication reading from left right then compute addition reading from left right given integer array answers length which submitted answers students no particular order asked grade answers following these rules if answer equals correct answer expression this student will be rewarded points otherwise if answer could be interpreted as if student applied operators wrong order but had correct arithmetic this student will be rewarded points otherwise this student will be rewarded points return sum points students example input answers output explanation as illustrated above correct answer expression therefore one student rewarded points student might have applied operators this wrong order therefore one student rewarded points points students sum points example input answers output explanation correct answer expression therefore three students rewarded points each student might have applied operators this wrong order therefore two students rewarded points points students sum points example input answers output explanation correct answer expression if student had incorrectly done answer would also be rules grading students will still be rewarded points as got correct answer not points points students sum points constraints slength represents valid expression that contains only digits and only all integer operands expression inclusive range count all operators and math expression test data generated such that correct answer expression range answerslength answersi
most stones removed same row or column plane place stones some integer coordinate points each coordinate point may have most one stone stone can be removed if shares either same row or same column as another stone that has not been removed given array stones length where stonesi xi yi represents location ith stone return largest possible number stones that can be removed example input stones output explanation one way remove stones as follows remove stone because shares same row as remove stone because shares same column as remove stone because shares same row as remove stone because shares same column as remove stone because shares same row as stone cannot be removed since does not share rowcolumn another stone still plane example input stones output explanation one way make moves as follows remove stone because shares same row as remove stone because shares same column as remove stone because shares same row as stones and cannot be removed since do not share rowcolumn another stone still plane example input stones output explanation only stone plane so cannot remove constraints stoneslength xi yi no two stones same coordinate point
integer roman roman numerals represented seven different symbols and symbol value example written as ii roman numeral just two ones added together written as xii which simply ii number written as xxvii which xx ii roman numerals usually written largest smallest from left right however numeral four not iiii instead number four written as iv because one before five subtract making four same principle applies number nine which written as ix there six instances where subtraction used can be placed before and make and can be placed before and make and can be placed before and make and given integer convert roman numeral example input num output iii explanation represented as ones example input num output lviii explanation iii example input num output mcmxciv explanation cm xc and iv constraints num
customer who visited but did not make any transactions sql schema table visits column name type visitid int customerid int visitid primary key this table this table contains information about customers who visited mall table transactions column name type transactionid int visitid int amount int transactionid primary key this table this table contains information about transactions made during visitid write sql query find ids users who visited without making any transactions and number times made these types visits return result table sorted any order query result format following example example input visits visitid customerid transactions transactionid visitid amount output customerid countnotrans explanation customer id visited mall once and made one transaction during visit id customer id visited mall once and made one transaction during visit id customer id visited mall once and did not make any transactions customer id visited mall three times during visits did not make any transactions and during one visit made transactions customer id visited mall once and did not make any transactions as can see users ids and visited mall one time without making any transactions also user visited mall twice and did not make any transactions
robot bounded circle infinite plane robot initially stands and faces north note that north direction positive direction yaxis south direction negative direction yaxis east direction positive direction xaxis west direction negative direction xaxis robot can receive one three instructions go straight unit turn degrees left ie anticlockwise direction turn degrees right ie clockwise direction robot performs instructions given order and repeats them forever return true if and only if there exists circle plane such that robot never leaves circle example input instructions ggllgg output true explanation robot initially facing north direction move one step position direction north move one step position direction north turn degrees anticlockwise position direction west turn degrees anticlockwise position direction south move one step position direction south move one step position direction south repeating instructions robot goes into cycle based that return true example input instructions gg output false explanation robot initially facing north direction move one step position direction north move one step position direction north repeating instructions keeps advancing north direction and does not go into cycles based that return false example input instructions gl output true explanation robot initially facing north direction move one step position direction north turn degrees anticlockwise position direction west move one step position direction west turn degrees anticlockwise position direction south move one step position direction south turn degrees anticlockwise position direction east move one step position direction east turn degrees anticlockwise position direction north repeating instructions robot goes into cycle based that return true constraints instructionslength instructionsi or
find distance value between two arrays given two integer arrays arr and arr and integer return distance value between two arrays distance value defined as number elements arri such that there not any element arrj where arriarrj example input arr arr output explanation arr have arr have arr have example input arr arr output example input arr arr output constraints arrlength arrlength arri arrj
maximum width binary tree given root binary tree return maximum width given tree maximum width tree maximum width among all levels width one level defined as length between endnodes leftmost and rightmost nonnull nodes where null nodes between endnodes that would be present complete binary tree extending down that level also counted into length calculation guaranteed that answer will range bit signed integer example input root null output explanation maximum width exists third level length null example input root nullnullnull output explanation maximum width exists fourth level length nullnullnullnullnull example input root output explanation maximum width exists second level length constraints number nodes tree range nodeval
design twitter design simplified version twitter where users can post tweets followunfollow another user and able see most recent tweets users news feed implement twitter class twitter initializes your twitter object void posttweetint userid int tweetid composes new tweet id tweetid user userid each call this function will be made unique tweetid listinteger getnewsfeedint userid retrieves most recent tweet ids users news feed each item news feed must be posted users who user followed or user themself tweets must be ordered from most recent least recent void followint followerid int followeeid user id followerid started following user id followeeid void unfollowint followerid int followeeid user id followerid started unfollowing user id followeeid example input twitter posttweet getnewsfeed follow posttweet getnewsfeed unfollow getnewsfeed output null null null null null explanation twitter twitter new twitter twitterposttweet user posts new tweet id twittergetnewsfeed user news feed should return list tweet id return twitterfollow user follows user twitterposttweet user posts new tweet id twittergetnewsfeed user news feed should return list tweet ids tweet id should precede tweet id because posted after tweet id twitterunfollow user unfollows user twittergetnewsfeed user news feed should return list tweet id since user no longer following user constraints userid followerid followeeid tweetid all tweets have unique ids most calls will be made posttweet getnewsfeed follow and unfollow
convert array into array given indexed dimensional integer array original and two integers and tasked creating dimensional array rows and columns using all elements from original elements from indices inclusive original should form first row constructed array elements from indices inclusive should form second row constructed array and so return array constructed according above procedure or empty array if impossible example input original output explanation constructed array should contain rows and columns first group elements original becomes first row constructed array second group elements original becomes second row constructed array example input original output explanation constructed array should contain row and columns put all three elements original into first row constructed array example input original output explanation there elements original impossible fit elements array so return empty array constraints originallength originali
utf validation given integer array data representing data return whether valid utf encoding ie translates sequence valid utf encoded characters character utf can be from bytes long subjected following rules byte character first bit followed its unicode code nbytes character first bits all ones bit followed bytes most significant bits being this how utf encoding would work number bytes utf octet sequence binary xxxxxxx xxxxx xxxxxx xxxx xxxxxx xxxxxx xxx xxxxxx xxxxxx xxxxxx denotes bit binary form byte that may be either or note input array integers only least significant bits each integer used store data this means each integer represents only byte data example input data output true explanation data represents octet sequence valid utf encoding bytes character followed byte character example input data output false explanation data represented octet sequence first bits all ones and th bit means bytes character next byte continuation byte which starts and thats correct but second continuation byte does not start so invalid constraints datalength datai
number flowers full bloom
count ways make array product given integer array queries each queriesi where queriesi ni ki find number different ways can place positive integers into array size ni such that product integers ki as number ways may be too large answer ith query number ways modulo return integer array answer where answerlength querieslength and answeri answer ith query example input queries output explanation each query independent there ways fill array size that multiply there way fill array size that multiply there ways fill array size that multiply modulo example input queries output constraints querieslength ni ki
backspace string compare given two strings and return true if equal when both typed into empty text editors means backspace character note that after backspacing empty text text will continue empty example input abc adc output true explanation both and become ac example input ab cd output true explanation both and become example input ac output false explanation becomes while becomes constraints slength tlength and only contain lowercase letters and characters follow up can solve time and space
check if string transformable substring sort operations given two strings and transform string into string using following operation any number times choose nonempty substring and sort place so characters ascending order example applying operation underlined substring results return true if possible transform into otherwise return false substring contiguous sequence characters within string example input output true explanation can transform into using following sort operations from index from index example input output true explanation can transform into using following sort operations example input output false constraints slength tlength slength and consist only digits
count all possible routes given array distinct positive integers locations where locationsi represents position city also given integers start finish and fuel representing starting city ending city and initial amount fuel have respectively each step if city can pick any city such that and locationslength and move city moving from city city reduces amount fuel have locationsi locationsj please notice that denotes absolute value notice that fuel cannot become negative any point time and that allowed visit any city more than once including start and finish return count all possible routes from start finish since answer may be too large return modulo example input locations start finish fuel output explanation following all possible routes each uses units fuel example input locations start finish fuel output explanation following all possible routes used fuel used fuel used fuel used fuel used fuel example input locations start finish fuel output explanation impossible get from using only units fuel since shortest route needs units fuel constraints locationslength locationsi all integers locations distinct start finish locationslength fuel
last stone weight ii given array integers stones where stonesi weight ith stone playing game stones each turn choose any two stones and smash them together suppose stones have weights and result this smash if both stones destroyed and if stone weight destroyed and stone weight has new weight end game there most one stone left return smallest possible weight left stone if there no stones left return example input stones output explanation can combine and get so array converts then can combine and get so array converts then can combine and get so array converts then can combine and get so array converts then thats optimal value example input stones output constraints stoneslength stonesi
divide nodes into maximum number groups given positive integer representing number nodes undirected graph nodes labeled from also given integer array edges where edgesi ai bi indicates that there bidirectional edge between nodes ai and bi notice that given graph may be disconnected divide nodes graph into groups indexed such that each node graph belongs exactly one group every pair nodes graph that connected edge ai bi if ai belongs group index and bi belongs group index then return maximum number groups ie maximum into which can divide nodes return if impossible group nodes given conditions example input edges output explanation as shown image add node first group add node second group add nodes and third group add nodes and fourth group can see that every edge satisfied can be shown that that if create fifth group and move any node from third or fourth group least edges will not be satisfied example input edges output explanation if add node first group node second group and node third group satisfy first two edges can see that third edge will not be satisfied can be shown that no grouping possible constraints edgeslength edgesilength ai bi ai bi there most one edge between any pair vertices
ugly number ii ugly number positive integer whose prime factors limited and given integer return nth ugly number example input output explanation sequence first ugly numbers example input output explanation has no prime factors therefore all its prime factors limited and constraints
detect pattern length repeated or more times given array positive integers arr find pattern length that repeated or more times pattern subarray consecutive subsequence that consists one or more values repeated multiple times consecutively without overlapping pattern defined its length and number repetitions return true if there exists pattern length that repeated or more times otherwise return false example input arr output true explanation pattern length repeated consecutive times notice that pattern can be repeated or more times but not less example input arr output true explanation pattern length repeated consecutive times another valid pattern also repeated times example input arr output false explanation pattern length but repeated only times there no pattern length that repeated or more times constraints arrlength arri
binary trees factors given array unique integers arr where each integer arri strictly greater than make binary tree using these integers and each number may be used any number times each nonleaf nodes value should be equal product values its children return number binary trees can make answer may be too large so return answer modulo example input arr output explanation can make these trees example input arr output explanation can make these trees constraints arrlength arri all values arr unique
minimum time finish race given indexed integer array tires where tiresi fi ri indicates that ith tire can finish its xth successive lap fi rix seconds example if fi and ri then tire would finish its st lap seconds its nd lap seconds its rd lap seconds etc also given integer changetime and integer numlaps race consists numlaps laps and may start race any tire have unlimited supply each tire and after every lap may change any given tire including current tire type if wait changetime seconds return minimum time finish race example input tires changetime numlaps output explanation lap start tire and finish lap seconds lap continue tire and finish lap seconds lap change tires new tire seconds and then finish lap another seconds lap continue tire and finish lap seconds total time seconds minimum time complete race seconds example input tires changetime numlaps output explanation lap start tire and finish lap seconds lap continue tire and finish lap seconds lap change tires new tire seconds and then finish lap another seconds lap continue tire and finish lap seconds lap change tires tire seconds then finish lap another second total time seconds minimum time complete race seconds constraints tireslength tiresilength fi changetime ri numlaps
second largest digit string given alphanumeric string return second largest numerical digit that appears or if does not exist alphanumeric string string consisting lowercase english letters and digits example input dfaafd output explanation digits that appear second largest digit example input abc output explanation digits that appear there no second largest digit constraints slength consists only lowercase english letters andor digits
most common word given string paragraph and string array banned words banned return most frequent word that not banned guaranteed there least one word that not banned and that answer unique words paragraph caseinsensitive and answer should be returned lowercase example input paragraph bob hit ball hit ball flew far after hit banned hit output ball explanation hit occurs times but banned word ball occurs twice and no other word does so most frequent nonbanned word paragraph note that words paragraph not case sensitive that punctuation ignored even if adjacent words such as ball and that hit isnt answer even though occurs more because banned example input paragraph banned output constraints paragraphlength paragraph consists english letters space or one symbols bannedlength bannedilength bannedi consists only lowercase english letters
complex number multiplication complex number can be represented as string form realimaginaryi where real real part and integer range imaginary imaginary part and integer range given two complex numbers num and num as strings return string complex number that represents their multiplications example input num num output explanation and need convert form example input num num output explanation and need convert form constraints num and num valid complex numbers
fair distribution cookies given integer array cookies where cookiesi denotes number cookies ith bag also given integer that denotes number children distribute all bags cookies all cookies same bag must go same child and cannot be split up unfairness distribution defined as maximum total cookies obtained single child distribution return minimum unfairness all distributions example input cookies output explanation one optimal distribution and st child receives which has total cookies nd child receives which has total cookies unfairness distribution max can be shown that there no distribution unfairness less than example input cookies output explanation one optimal distribution and st child receives which has total cookies nd child receives which has total cookies rd child receives which has total cookies unfairness distribution max can be shown that there no distribution unfairness less than constraints cookieslength cookiesi cookieslength
stamping sequence given two strings stamp and target initially there string length targetlength all si one turn can place stamp over and replace every letter corresponding letter from stamp example if stamp abc and target abcba then initially one turn can place stamp index obtain abc place stamp index obtain abc or place stamp index obtain abc note that stamp must be fully contained boundaries order stamp ie cannot place stamp index want convert target using most targetlength turns return array index leftmost letter being stamped each turn if cannot obtain target from within targetlength turns return empty array example input stamp abc target ababc output explanation initially place stamp index get abc place stamp index get ababc would also be accepted as answer as well as some other answers example input stamp abca target aabcaca output explanation initially place stamp index get abca place stamp index get abcabca place stamp index get aabcaca constraints stamplength targetlength stamp and target consist lowercase english letters
minimum add make parentheses valid parentheses string valid if and only if empty string can be written as ab concatenated where and valid strings or can be written as where valid string given parentheses string one move can insert parenthesis any position string example if can insert opening parenthesis be or closing parenthesis be return minimum number moves required make valid example input output example input output constraints slength si either or
remove invalid parentheses given string that contains parentheses and letters remove minimum number invalid parentheses make input string valid return list unique strings that valid minimum number removals may return answer any order example input output example input output aa example input output constraints slength consists lowercase english letters and parentheses and there will be most parentheses
not boring movies sql schema table cinema column name type id int movie varchar description varchar rating float id primary key this table each row contains information about name movie its genre and its rating rating decimal places float range write sql query report movies oddnumbered id and description that not boring return result table ordered rating descending order query result format following example example input cinema table id movie description rating war great science fiction irish boring ice song fantacy house card interesting output id movie description rating house card interesting war great explanation have three movies oddnumbered ids and movie id boring so do not include answer
binary tree tilt given root binary tree return sum every tree nodes tilt tilt tree node absolute difference between sum all left subtree node values and all right subtree node values if node does not have left child then sum left subtree node values treated as rule similar if node does not have right child example input root output explanation tilt node no children tilt node no children tilt node left subtree just left child so sum right subtree just right child so sum sum every tilt example input root null output explanation tilt node no children tilt node no children tilt node no children tilt node left subtree just left child so sum right subtree just right child so sum tilt node no left child so sum right subtree just right child so sum tilt node left subtree values and which sums right subtree values and which sums sum every tilt example input root output constraints number nodes tree range nodeval
count artifacts that can be extracted there indexed grid some artifacts buried given integer and indexed integer array artifacts describing positions rectangular artifacts where artifactsi ri ci ri ci denotes that ith artifact buried subgrid where ri ci coordinate topleft cell ith artifact and ri ci coordinate bottomright cell ith artifact will excavate some cells grid and remove all mud from them if cell has part artifact buried underneath will be uncovered if all parts artifact uncovered can extract given indexed integer array dig where digi ri ci indicates that will excavate cell ri ci return number artifacts that can extract test cases generated such that no two artifacts overlap each artifact only covers most cells entries dig unique example input artifacts dig output explanation different colors represent different artifacts excavated cells labeled grid there artifact that can be extracted namely red artifact blue artifact has one part cell which remains uncovered so cannot extract thus return example input artifacts dig output explanation both red and blue artifacts have all parts uncovered labeled and can be extracted so return constraints artifactslength diglength minn artifactsilength digilength ri ci ri ci ri ci ri ri ci ci no two artifacts will overlap number cells covered artifact most entries dig unique
number pairs interchangeable rectangles given rectangles represented indexed integer array rectangles where rectanglesi widthi heighti denotes width and height ith rectangle two rectangles and considered interchangeable if have same widthtoheight ratio more formally two rectangles interchangeable if widthiheighti widthjheightj using decimal division not integer division return number pairs interchangeable rectangles rectangles example input rectangles output explanation following interchangeable pairs rectangles index indexed rectangle rectangle rectangle rectangle rectangle rectangle rectangle rectangle rectangle rectangle rectangle rectangle example input rectangles output explanation there no interchangeable pairs rectangles constraints rectangleslength rectanglesilength widthi heighti
number students unable eat lunch school cafeteria offers circular and square sandwiches lunch break referred numbers and respectively all students stand queue each student either prefers square or circular sandwiches number sandwiches cafeteria equal number students sandwiches placed stack each step if student front queue prefers sandwich top stack will take and leave queue otherwise will leave and go queues end this continues until none queue students want take top sandwich and thus unable eat given two integer arrays students and sandwiches where sandwichesi type ith sandwich stack top stack and studentsj preference jth student initial queue front queue return number students that unable eat example input students sandwiches output explanation front student leaves top sandwich and returns end line making students front student leaves top sandwich and returns end line making students front student takes top sandwich and leaves line making students and sandwiches front student leaves top sandwich and returns end line making students front student takes top sandwich and leaves line making students and sandwiches front student leaves top sandwich and returns end line making students front student takes top sandwich and leaves line making students and sandwiches front student takes top sandwich and leaves line making students and sandwiches hence all students able eat example input students sandwiches output constraints studentslength sandwicheslength studentslength sandwicheslength sandwichesi or studentsi or
maximum width ramp ramp integer array nums pair which and numsi numsj width such ramp given integer array nums return maximum width ramp nums if there no ramp nums return example input nums output explanation maximum width ramp achieved nums and nums example input nums output explanation maximum width ramp achieved nums and nums constraints numslength numsi
find kth smallest sum matrix sorted rows given matrix mat that has its rows sorted nondecreasing order and integer allowed choose exactly one element from each row form array return kth smallest array sum among all possible arrays example input mat output explanation choosing one element from each row first smallest sum where th sum example input mat output example input mat output explanation choosing one element from each row first smallest sum where th sum constraints matlength matlengthi matij min nm mati nondecreasing array
maximum number removable characters given two strings and where subsequence also given distinct indexed integer array removable containing subset indices also indexed want choose integer removablelength such that after removing characters from using first indices removable still subsequence more formally will mark character sremovablei each then remove all marked characters and check if still subsequence return maximum can choose such that still subsequence after removals subsequence string new string generated from original string some characters can be none deleted without changing relative order remaining characters example input abcacb ab removable output explanation after removing characters indices and abcacb becomes accb ab subsequence accb if remove characters indices and abcacb becomes ccb and ab no longer subsequence hence maximum example input abcbddddd abcd removable output explanation after removing character index abcbddddd becomes abcddddd abcd subsequence abcddddd example input abcab abc removable output explanation if remove first index array removable abc no longer subsequence constraints plength slength removablelength slength removablei slength subsequence and both consist lowercase english letters elements removable distinct
valid mountain array given array integers arr return true if and only if valid mountain array recall that arr mountain array if and only if arrlength there exists some arrlength such that arr arr arri arri arri arri arrarrlength example input arr output false example input arr output false example input arr output true constraints arrlength arri
find town judge town there people labeled from there rumor that one these people secretly town judge if town judge exists then town judge trusts nobody everybody except town judge trusts town judge there exactly one person that satisfies properties and given array trust where trusti ai bi representing that person labeled ai trusts person labeled bi if trust relationship does not exist trust array then such trust relationship does not exist return label town judge if town judge exists and can be identified or return otherwise example input trust output example input trust output example input trust output constraints trustlength trustilength all pairs trust unique ai bi ai bi
minimum number days eat oranges there oranges kitchen and decided eat some these oranges every day as follows eat one orange if number remaining oranges divisible then can eat oranges if number remaining oranges divisible then can eat oranges can only choose one actions per day given integer return minimum number days eat oranges example input output explanation have oranges day eat orange day eat oranges since divisible day eat oranges day eat last orange need least days eat oranges example input output explanation have oranges day eat oranges since divisible day eat oranges since divisible day eat last orange need least days eat oranges constraints
path maximum gold gold mine grid size each cell this mine has integer representing amount gold that cell if empty return maximum amount gold can collect under conditions every time located cell will collect all gold that cell from your position can walk one step left right up or down cant visit same cell more than once never visit cell gold can start and stop collecting gold from any position grid that has some gold example input grid output explanation path get maximum gold example input grid output explanation path get maximum gold constraints gridlength gridilength gridij there most cells containing gold
count substrings that differ one character given two strings and find number ways can choose nonempty substring and replace single character different character such that resulting substring substring other words find number substrings that differ from some substring exactly one character example underlined substrings computer and computation only differ ea so this valid way return number substrings that satisfy condition above substring contiguous sequence characters within string example input aba baba output explanation following pairs substrings from and that differ exactly character aba baba aba baba aba baba aba baba aba baba aba baba underlined portions substrings that chosen from and example input ab bb output explanation following pairs substrings from and that differ character ab bb ab bb ab bb underlined portions substrings that chosen from and constraints slength tlength and consist lowercase english letters only
odd even jump given integer array arr from some starting index can make series jumps st rd th jumps series called oddnumbered jumps and nd th th jumps series called evennumbered jumps note that jumps numbered not indices may jump forward from index index following way during oddnumbered jumps ie jumps jump index such that arri arrj and arrj smallest possible value if there multiple such indices can only jump smallest such index during evennumbered jumps ie jumps jump index such that arri arrj and arrj largest possible value if there multiple such indices can only jump smallest such index may be case that some index there no legal jumps starting index good if starting from that index can reach end array index arrlength jumping some number times possibly or more than once return number good starting indices example input arr output explanation from starting index can make our st jump since arr smallest among arr arr arr arr that greater or equal arr then cannot jump any more from starting index and can make our st jump then cannot jump any more from starting index can make our st jump so have reached end from starting index have reached end already total there different starting indices and where can reach end some number jumps example input arr output explanation from starting index make jumps during our st jump oddnumbered first jump because arr smallest value arr arr arr arr that greater than or equal arr during our nd jump evennumbered jump from because arr largest value arr arr arr that less than or equal arr arr also largest value but smaller index so can only jump and not during our rd jump oddnumbered jump from because arr smallest value arr arr that greater than or equal arr cant jump from so starting index not good similar manner can deduce that from starting index jump so reach end from starting index jump and then cant jump anymore from starting index jump so reach end from starting index already end total there different starting indices and where can reach end some number jumps example input arr output explanation can reach end from starting indices and constraints arrlength arri
random pick blacklist given integer and array unique integers blacklist design algorithm pick random integer range that not blacklist any integer that mentioned range and not blacklist should be equally likely be returned optimize your algorithm such that minimizes number calls builtin random function your language implement solution class solutionint int blacklist initializes object integer and blacklisted integers blacklist int pick returns random integer range and not blacklist example input solution pick pick pick pick pick pick pick output null explanation solution solution new solution solutionpick return any integer from should be ok note that every call pick and must be equally likely be returned ie probability solutionpick return solutionpick return solutionpick return solutionpick return solutionpick return solutionpick return constraints blacklistlength min blacklisti all values blacklist unique most calls will be made pick
make sum divisible given array positive integers nums remove smallest subarray possibly empty such that sum remaining elements divisible not allowed remove whole array return length smallest subarray that need remove or if its impossible subarray defined as contiguous block elements array example input nums output explanation sum elements nums which not divisible can remove subarray and sum remaining elements which divisible example input nums output explanation cannot remove single element get sum divisible best way remove subarray leaving us sum example input nums output explanation here sum which already divisible thus do not need remove anything constraints numslength numsi
last person fit bus sql schema table queue column name type personid int personname varchar weight int turn int personid primary key column this table this table has information about all people waiting bus personid and turn columns will contain all numbers from where number rows table turn determines order which people will board bus where turn denotes first person board and turnn denotes last person board weight weight person kilograms there queue people waiting board bus however bus has weight limit kilograms so there may be some people who cannot board write sql query find personname last person that can fit bus without exceeding weight limit test cases generated such that first person does not exceed weight limit query result format following example example input queue table personid personname weight turn alice bob alex john cena winston marie output personname john cena explanation folowing table ordered turn simplicity turn id name weight total weight alice alex john cena last person board marie cannot board bob winston
iterator combination design combinationiterator class combinationiteratorstring characters int combinationlength initializes object string characters sorted distinct lowercase english letters and number combinationlength as arguments next returns next combination length combinationlength lexicographical order hasnext returns true if and only if there exists next combination example input combinationiterator next hasnext next hasnext next hasnext abc output null ab true ac true bc false explanation combinationiterator itr new combinationiteratorabc itrnext return ab itrhasnext return true itrnext return ac itrhasnext return true itrnext return bc itrhasnext return false constraints combinationlength characterslength all characters characters unique most calls will be made next and hasnext guaranteed that all calls function next valid
merge strings alternately given two strings word and word merge strings adding letters alternating order starting word if string longer than other append additional letters onto end merged string return merged string example input word abc word pqr output apbqcr explanation merged string will be merged as so word word merged example input word ab word pqrs output apbqrs explanation notice that as word longer rs appended end word word merged example input word abcd word pq output apbqcd explanation notice that as word longer cd appended end word word merged constraints wordlength wordlength word and word consist lowercase english letters
longest binary subsequence less than or equal given binary string and positive integer return length longest subsequence that makes up binary number less than or equal note subsequence can contain leading zeroes empty string considered be equal subsequence string that can be derived from another string deleting some or no characters without changing order remaining characters example input output explanation longest subsequence that makes up binary number less than or equal as this number equal decimal note that and also possible which equal and decimal respectively length this subsequence so returned example input output explanation longest subsequence that makes up binary number less than or equal as this number equal decimal length this subsequence so returned constraints slength si either or
minimum number operations make arrays similar given two positive integer arrays nums and target same length one operation can choose any two distinct indices and where numslength and set numsi numsi and set numsj numsj two arrays considered be similar if frequency each element same return minimum number operations required make nums similar target test cases generated such that nums can always be similar target example input nums target output explanation possible make nums similar target two operations choose and nums choose and nums can be shown that minimum number operations needed example input nums target output explanation can make nums similar target one operation choose and nums example input nums target output explanation array nums already similiar target constraints numslength targetlength numsi targeti possible make nums similar target
critical connections network there servers numbered from connected undirected servertoserver connections forming network where connectionsi ai bi represents connection between servers ai and bi any server can reach other servers directly or indirectly through network critical connection connection that if removed will make some servers unable reach some other server return all critical connections network any order example input connections output explanation also accepted example input connections output constraints connectionslength ai bi ai bi there no repeated connections
goat latin given string sentence that consist words separated spaces each word consists lowercase and uppercase letters only would like convert sentence goat latin madeup language similar pig latin rules goat latin as follows if word begins vowel or append ma end word example word apple becomes applema if word begins consonant ie not vowel remove first letter and append end then add ma example word goat becomes oatgma add one letter end each word per its word index sentence starting example first word gets added end second word gets aa added end and so return final sentence representing conversion from sentence goat latin example input sentence speak goat latin output imaa peaksmaaa oatgmaaaa atinlmaaaaa example input sentence quick brown fox jumped over lazy dog output hetmaa uickqmaaa rownbmaaaa oxfmaaaaa umpedjmaaaaaa overmaaaaaaa hetmaaaaaaaa azylmaaaaaaaaa ogdmaaaaaaaaaa constraints sentencelength sentence consists english letters and spaces sentence has no leading or trailing spaces all words sentence separated single space
number pairs satisfying inequality given two indexed integer arrays nums and nums each size and integer diff find number pairs such that and numsi numsj numsi numsj diff return number pairs that satisfy conditions example input nums nums diff output explanation there pairs that satisfy conditions since and this pair satisfies conditions since and this pair satisfies conditions since and this pair satisfies conditions therefore return example input nums nums diff output explanation since there does not exist any pair that satisfies conditions return constraints numslength numslength numsi numsi diff
number ways where square number equal product two numbers given two arrays integers nums and nums return number triplets formed type and type under following rules type triplet if numsi numsj numsk where numslength and numslength type triplet if numsi numsj numsk where numslength and numslength example input nums nums output explanation type nums nums nums example input nums nums output explanation all triplets valid because type numsi numsj numsk type numsi numsj numsk example input nums nums output explanation there valid triplets type nums nums nums type nums nums nums constraints numslength numslength numsi numsi
smallest range given integer array nums and integer one operation can choose any index where numslength and change numsi numsi where integer from range can apply this operation most once each index score nums difference between maximum and minimum elements nums return minimum score nums after applying mentioned operation most once each index example input nums output explanation score maxnums minnums example input nums output explanation change nums be score maxnums minnums example input nums output explanation change nums be score maxnums minnums constraints numslength numsi
wiggle sort ii given integer array nums reorder such that nums nums nums nums may assume input array always has valid answer example input nums output explanation also accepted example input nums output constraints numslength numsi guaranteed that there will be answer given input nums follow up can do time andor inplace extra space
jump game vii given indexed binary string and two integers minjump and maxjump beginning standing index which equal can move from index index if following conditions fulfilled minjump mini maxjump slength and sj return true if can reach index slength or false otherwise example input minjump maxjump output true explanation first step move from index index second step move from index index example input minjump maxjump output false constraints slength si either or minjump maxjump slength
student attendance record ii attendance record student can be represented as string where each character signifies whether student absent late or present that day record only contains following three characters absent late present any student eligible attendance award if meet both following criteria student absent strictly fewer than days total student never late or more consecutive days given integer return number possible attendance records length that make student eligible attendance award answer may be very large so return modulo example input output explanation there records length that eligible award pp ap pa lp pl al la ll only aa not eligible because there absences there need be fewer than example input output example input output constraints
find index first occurrence string given two strings needle and haystack return index first occurrence needle haystack or if needle not part haystack example input haystack sadbutsad needle sad output explanation sad occurs index and first occurrence index so return example input haystack leetcode needle leeto output explanation leeto did not occur leetcode so return constraints haystacklength needlelength haystack and needle consist only lowercase english characters
count primes given integer return number prime numbers that strictly less than example input output explanation there prime numbers less than example input output example input output constraints
contains duplicate iii given integer array nums and two integers indexdiff and valuediff find pair indices such that absi indexdiff absnumsi numsj valuediff and return true if such pair exists or false otherwise example input nums indexdiff valuediff output true explanation can choose satisfy three conditions absi indexdiff abs absnumsi numsj valuediff abs example input nums indexdiff valuediff output false explanation after trying all possible pairs cannot satisfy three conditions so return false constraints numslength numsi indexdiff numslength valuediff
reorder routes make all paths lead city zero there cities numbered from and roads such that there only one way travel between two different cities this network form tree last year ministry transport decided orient roads one direction because too narrow roads represented connections where connectionsi ai bi represents road from city ai city bi this year there will be big event capital city and many people want travel this city your task consists reorienting some roads such that each city can visit city return minimum number edges changed its guaranteed that each city can reach city after reorder example input connections output explanation change direction edges show red such that each node can reach node capital example input connections output explanation change direction edges show red such that each node can reach node capital example input connections output constraints connectionslength connectionsilength ai bi ai bi
smallest subtree all deepest nodes given root binary tree depth each node shortest distance root return smallest subtree such that contains all deepest nodes original tree node called deepest if has largest depth possible among any node entire tree subtree node tree consisting that node plus set all descendants that node example input root nullnull output explanation return node value colored yellow diagram nodes coloured blue deepest nodes tree notice that nodes and contain deepest nodes tree but node smallest subtree among them so return example input root output explanation root deepest node tree example input root null output explanation deepest node tree valid subtrees subtrees nodes and but subtree node smallest constraints number nodes tree will be range nodeval values nodes tree unique note this question same as httpsleetcodecomproblemslowestcommonancestorofdeepestleaves
minimum cost reach destination time there country cities numbered from where all cities connected bidirectional roads roads represented as integer array edges where edgesi xi yi timei denotes road between cities xi and yi that takes timei minutes travel there may be multiple roads differing travel times connecting same two cities but no road connects city itself each time pass through city must pay passing fee this represented as indexed integer array passingfees length where passingfeesj amount dollars must pay when pass through city beginning city and want reach city maxtime minutes or less cost your journey summation passing fees each city that passed through some moment your journey including source and destination cities given maxtime edges and passingfees return minimum cost complete your journey or if cannot complete within maxtime minutes example input maxtime edges passingfees output explanation path take which takes minutes and has worth passing fees example input maxtime edges passingfees output explanation path take which takes minutes and has worth passing fees cannot take path since would take too long example input maxtime edges passingfees output explanation there no way reach city from city within minutes constraints maxtime passingfeeslength edgeslength xi yi timei passingfeesj graph may contain multiple edges between two nodes graph does not contain self loops
replace noncoprime numbers array given array integers nums perform following steps find any two adjacent numbers nums that noncoprime if no such numbers found stop process otherwise delete two numbers and replace them their lcm least common multiple repeat this process as long as keep finding two adjacent noncoprime numbers return final modified array can be shown that replacing adjacent noncoprime numbers any arbitrary order will lead same result test cases generated such that values final array less than or equal two values and noncoprime if gcdx where gcdx greatest common divisor and example input nums output explanation noncoprime lcm now nums noncoprime lcm now nums noncoprime lcm now nums noncoprime lcm now nums there no more adjacent noncoprime numbers nums thus final modified array note that there other ways obtain same resultant array example input nums output explanation noncoprime lcm now nums noncoprime lcm now nums noncoprime lcm now nums there no more adjacent noncoprime numbers nums thus final modified array note that there other ways obtain same resultant array constraints numslength numsi test cases generated such that values final array less than or equal
palindrome partitioning iv given string return true if possible split string into three nonempty palindromic substrings otherwise return false string said be palindrome if same string when reversed example input abcbdd output true explanation abcbdd bcb dd and all three substrings palindromes example input bcbddxy output false explanation cannot be split into palindromes constraints slength consists only lowercase english letters
longest harmonious subsequence define harmonious array as array where difference between its maximum value and its minimum value exactly given integer array nums return length its longest harmonious subsequence among all its possible subsequences subsequence array sequence that can be derived from array deleting some or no elements without changing order remaining elements example input nums output explanation longest harmonious subsequence example input nums output example input nums output constraints numslength numsi
avoid flood city your country has infinite number lakes initially all lakes empty but when rains over nth lake nth lake becomes full water if rains over lake that full water there will be flood your goal avoid floods any lake given integer array rains where rainsi means there will be rains over rainsi lake rainsi means there no rains this day and can choose one lake this day and dry return array ans where anslength rainslength ansi if rainsi ansi lake choose dry ith day if rainsi if there multiple valid answers return any them if impossible avoid flood return empty array notice that if chose dry full lake becomes empty but if chose dry empty lake nothing changes example input rains output explanation after first day full lakes after second day full lakes after third day full lakes after fourth day full lakes theres no day dry any lake and there no flood any lake example input rains output explanation after first day full lakes after second day full lakes after third day dry lake full lakes after fourth day dry lake there no full lakes after fifth day full lakes after sixth day full lakes easy that this scenario floodfree another acceptable scenario example input rains output explanation after second day full lakes have dry one lake third day after that will rain over lakes its easy prove that no matter which lake choose dry rd day other one will flood constraints rainslength rainsi
minimum penalty shop given customer visit log shop represented indexed string customers consisting only characters and if ith character means that customers come ith hour whereas indicates that no customers come ith hour if shop closes jth hour penalty calculated as follows every hour when shop open and no customers come penalty increases every hour when shop closed and customers come penalty increases return earliest hour which shop must be closed incur minimum penalty note that if shop closes jth hour means shop closed hour example input customers yyny output explanation closing shop th hour incurs penalty closing shop st hour incurs penalty closing shop nd hour incurs penalty closing shop rd hour incurs penalty closing shop th hour incurs penalty closing shop nd or th hour gives minimum penalty since earlier optimal closing time example input customers nnnnn output explanation best close shop th hour as no customers arrive example input customers yyyy output explanation best close shop th hour as customers arrive each hour constraints customerslength customers consists only characters and
redundant connection ii this problem rooted tree directed graph such that there exactly one node root which all other nodes descendants this node plus every node has exactly one parent except root node which has no parents given input directed graph that started as rooted tree nodes distinct values from one additional directed edge added added edge has two different vertices chosen from and not edge that already existed resulting graph given as darray edges each element edges pair ui vi that represents directed edge connecting nodes ui and vi where ui parent child vi return edge that can be removed so that resulting graph rooted tree nodes if there multiple answers return answer that occurs last given darray example input edges output example input edges output constraints edgeslength edgesilength ui vi ui vi
watering plants want water plants your garden watering can plants arranged row and labeled from from left right where ith plant located there river that can refill your watering can each plant needs specific amount water will water plants following way water plants order from left right after watering current plant if do not have enough water completely water next plant return river fully refill watering can cannot refill watering can early initially river ie takes one step move one unit xaxis given indexed integer array plants integers where plantsi amount water ith plant needs and integer capacity representing watering can capacity return number steps needed water all plants example input plants capacity output explanation start river full watering can walk plant step and water watering can has units water walk plant step and water watering can has unit water since cannot completely water plant walk back river refill steps walk plant steps and water watering can has units water since cannot completely water plant walk back river refill steps walk plant steps and water steps needed example input plants capacity output explanation start river full watering can water plants and steps return river steps water plant steps return river steps water plant steps return river steps water plant steps steps needed example input plants capacity output explanation have refill before watering each plant steps needed constraints plantslength plantsi maxplantsi capacity
super ugly number super ugly number positive integer whose prime factors array primes given integer and array integers primes return nth super ugly number nth super ugly number guaranteed fit bit signed integer example input primes output explanation sequence first super ugly numbers given primes example input primes output explanation has no prime factors therefore all its prime factors array primes constraints primeslength primesi primesi guaranteed be prime number all values primes unique and sorted ascending order
short encoding words valid encoding array words any reference string and array indices indices such that wordslength indiceslength reference string ends character each index indicesi substring starting from indicesi and up but not including next character equal wordsi given array words return length shortest reference string possible any valid encoding words example input words time me bell output explanation valid encoding would be timebell and indices words time substring starting from indices next underlined timebell words me substring starting from indices next underlined timebell words bell substring starting from indices next underlined timebell example input words output explanation valid encoding would be and indices constraints wordslength wordsilength wordsi consists only lowercase letters
minimum number arrows burst balloons there some spherical balloons taped onto flat wall that represents xyplane balloons represented as integer array points where pointsi xstart xend denotes balloon whose horizontal diameter stretches between xstart and xend do not know exact ycoordinates balloons arrows can be shot up directly vertically positive ydirection from different points along xaxis balloon xstart and xend burst arrow shot if xstart xend there no limit number arrows that can be shot shot arrow keeps traveling up infinitely bursting any balloons its path given array points return minimum number arrows that must be shot burst all balloons example input points output explanation balloons can be burst arrows shoot arrow bursting balloons and shoot arrow bursting balloons and example input points output explanation one arrow needs be shot each balloon total arrows example input points output explanation balloons can be burst arrows shoot arrow bursting balloons and shoot arrow bursting balloons and constraints pointslength pointsilength xstart xend
first missing positive given unsorted integer array nums return smallest missing positive integer must implement algorithm that runs time and uses constant extra space example input nums output explanation numbers range all array example input nums output explanation array but missing example input nums output explanation smallest positive integer missing constraints numslength numsi
find longest awesome substring given string awesome substring nonempty substring such that can make any number swaps order make palindrome return length maximum length awesome substring example input output explanation longest awesome substring can form palindrome some swaps example input output example input output explanation longest awesome substring can form palindrome some swaps constraints slength consists only digits
number ways rearrange sticks sticks visible there uniquelysized sticks whose lengths integers from want arrange sticks such that exactly sticks visible from left stick visible from left if there no longer sticks left example if sticks arranged then sticks lengths and visible from left given and return number such arrangements since answer may be large return modulo example input output explanation and only arrangements such that exactly sticks visible visible sticks underlined example input output explanation only arrangement such that all sticks visible visible sticks underlined example input output explanation there mod ways rearrange sticks such that exactly sticks visible constraints
reachable nodes subdivided graph given undirected graph original graph nodes labeled from decide subdivide each edge graph into chain nodes number new nodes varying between each edge graph given as array edges where edgesi ui vi cnti indicates that there edge between nodes ui and vi original graph and cnti total number new nodes that will subdivide edge into note that cnti means will not subdivide edge subdivide edge ui vi replace cnti new edges and cnti new nodes new nodes xcnti and new edges ui xcnti xcnti xcnti vi this new graph want know how many nodes reachable from node where node reachable if distance maxmoves or less given original graph and maxmoves return number nodes that reachable from node new graph example input edges maxmoves output explanation edge subdivisions shown image above nodes that reachable highlighted yellow example input edges maxmoves output example input edges maxmoves output explanation node disconnected from rest graph so only node reachable constraints edgeslength minn edgesilength ui vi there no multiple edges graph cnti maxmoves
recover binary search tree given root binary search tree bst where values exactly two nodes tree swapped mistake recover tree without changing its structure example input root nullnull output nullnull explanation cannot be left child because swapping and makes bst valid example input root nullnull output nullnull explanation cannot be right subtree because swapping and makes bst valid constraints number nodes tree range nodeval follow up solution using space pretty straightforward could devise constant space solution
print words vertically given string return all words vertically same order which appear words returned as list strings complete spaces when necessary trailing spaces not allowed each word would be put only one column and that one column there will be only one word example input how output hayoroweu explanation each word printed vertically hay oro weu example input be or not be output tbontboerooe explanation trailing spaces not allowed tbontb oerooe example input contest coming output cicoson mt ie ns gt constraints slength contains only upper case english letters its guaranteed that there only one space between words
number ways split string given binary string can split into nonempty strings and where return number ways can be split such that number ones same and since answer may be too large return modulo example input output explanation there four ways split parts where each part contain same number letters example input output example input output explanation there three ways split parts constraints slength si either or
nqueens ii nqueens puzzle problem placing queens chessboard such that no two queens attack each other given integer return number distinct solutions nqueens puzzle example input output explanation there two distinct solutions queens puzzle as shown example input output constraints
largest bordered square given grid and return number elements largest square subgrid that has all its border or if such subgrid doesnt exist grid example input grid output example input grid output constraints gridlength gridlength gridij or
design hashset design hashset without using any builtin hash table libraries implement myhashset class void addkey inserts value key into hashset bool containskey returns whether value key exists hashset or not void removekey removes value key hashset if key does not exist hashset do nothing example input myhashset add add contains contains add contains remove contains output null null null true false null true null false explanation myhashset myhashset new myhashset myhashsetadd set myhashsetadd set myhashsetcontains return true myhashsetcontains return false not found myhashsetadd set myhashsetcontains return true myhashsetremove set myhashsetcontains return false already removed constraints key most calls will be made add remove and contains
most frequent subtree sum given root binary tree return most frequent subtree sum if there tie return all values highest frequency any order subtree sum node defined as sum all node values formed subtree rooted that node including node itself example input root output example input root output constraints number nodes tree range nodeval
apply bitwise operations make strings equal given two indexed binary strings and target same length can do following operation any number times choose two different indices and where simultaneously replace si si or sj and sj si xor sj example if can choose and then simultaneously replace or or and xor xor so will have return true if can make string equal target or false otherwise example input target output true explanation can do following operations choose and have now choose and have now since can make equal target return true example input target output false explanation not possible make equal target any number operations constraints slength targetlength and target consist only digits and
triangle judgement sql schema table triangle column name type int int int primary key column this table each row this table contains lengths three line segments write sql query report every three line segments whether can form triangle return result table any order query result format following example example input triangle table output triangle no yes
number good pairs given array integers nums return number good pairs pair called good if numsi numsj and example input nums output explanation there good pairs indexed example input nums output explanation each pair array good example input nums output constraints numslength numsi
check if parentheses string can be valid parentheses string nonempty string consisting only and valid if any following conditions true can be written as ab concatenated where and valid parentheses strings can be written as where valid parentheses string given parentheses string and string locked both length locked binary string consisting only and each index locked if lockedi cannot change si but if lockedi can change si either or return true if can make valid parentheses string otherwise return false example input locked output true explanation locked and locked so cannot change or change and while leaving and unchanged make valid example input locked output true explanation do not need make any changes because already valid example input locked output false explanation locked permits us change changing either or will not make valid constraints slength lockedlength si either or lockedi either or
sort list given head linked list return list after sorting ascending order example input head output example input head output example input head output constraints number nodes list range nodeval follow up can sort linked list logn time and memory ie constant space
count good meals good meal meal that contains exactly two different food items sum deliciousness equal power two can pick any two different foods make good meal given array integers deliciousness where deliciousnessi deliciousness ith item food return number different good meals can make from this list modulo note that items different indices considered different even if have same deliciousness value example input deliciousness output explanation good meals and their respective sums and all which powers example input deliciousness output explanation good meals ways ways and ways constraints deliciousnesslength deliciousnessi
maximum compatibility score sum there survey that consists questions where each questions answer either no or yes survey given students numbered from and mentors numbered from answers students represented integer array students where studentsi integer array that contains answers ith student indexed answers mentors represented integer array mentors where mentorsj integer array that contains answers jth mentor indexed each student will be assigned one mentor and each mentor will have one student assigned them compatibility score studentmentor pair number answers that same both student and mentor example if students answers and mentors answers then their compatibility score because only second and third answers same tasked finding optimal studentmentor pairings maximize sum compatibility scores given students and mentors return maximum compatibility score sum that can be achieved example input students mentors output explanation assign students mentors following way student mentor compatibility score student mentor compatibility score student mentor compatibility score compatibility score sum example input students mentors output explanation compatibility score any studentmentor pair constraints studentslength mentorslength studentsilength mentorsjlength studentsik either or mentorsjk either or
increment submatrices one given positive integer indicating that initially have indexed integer matrix mat filled zeroes also given integer array query each queryi rowi coli rowi coli should do following operation add every element submatrix top left corner rowi coli and bottom right corner rowi coli that add matxy all rowi rowi and coli coli return matrix mat after performing every query example input queries output explanation diagram above shows initial matrix matrix after first query and matrix after second query first query add every element submatrix top left corner and bottom right corner second query add every element submatrix top left corner and bottom right corner example input queries output explanation diagram above shows initial matrix and matrix after first query first query add every element matrix constraints querieslength rowi rowi coli coli
cat and mouse game undirected graph played two players mouse and cat who alternate turns graph given as follows grapha list all nodes such that ab edge graph mouse starts node and goes first cat starts node and goes second and there hole node during each players turn must travel along one edge graph that meets where example if mouse node must travel any node graph additionally not allowed cat travel hole node then game can end three ways if ever cat occupies same node as mouse cat wins if ever mouse reaches hole mouse wins if ever position repeated ie players same position as previous turn and same players turn move game draw given graph and assuming both players play optimally return if mouse wins game if cat wins game or if game draw example input graph output example input graph output constraints graphlength graphilength graphlength graphij graphlength graphij graphi unique mouse and cat can always move
create sorted array through instructions given integer array instructions asked create sorted array from elements instructions start empty container nums each element from left right instructions insert into nums cost each insertion minimum following number elements currently nums that strictly less than instructionsi number elements currently nums that strictly greater than instructionsi example if inserting element into nums cost insertion min elements and less than element greater than and nums will become return total cost insert all elements from instructions into nums since answer may be large return modulo example input instructions output explanation begin nums insert cost min now nums insert cost min now nums insert cost min now nums insert cost min now nums total cost example input instructions output explanation begin nums insert cost min now nums insert cost min now nums insert cost min now nums insert cost min now nums insert cost min now nums insert cost min now nums total cost example input instructions output explanation begin nums insert cost min now nums insert cost min now nums insert cost min now nums insert cost min now nums insert cost min now nums insert cost min now nums insert cost min now nums insert cost min now nums insert cost min now nums total cost constraints instructionslength instructionsi
frog jump ii given indexed integer array stones sorted strictly increasing order representing positions stones river frog initially first stone wants travel last stone and then return first stone however can jump any stone most once length jump absolute difference between position stone frog currently and position stone which frog jumps more formally if frog stonesi and jumping stonesj length jump stonesi stonesj cost path maximum length jump among all jumps path return minimum cost path frog example input stones output explanation above figure represents one optimal paths frog can take cost this path which maximum length jump since not possible achieve cost less than return example input stones output explanation frog can jump directly last stone and come back first stone this case length each jump will be cost path will be max can be shown that this minimum achievable cost constraints stoneslength stonesi stones stones sorted strictly increasing order
increasing decreasing string given string reorder string using following algorithm pick smallest character from and append result pick smallest character from which greater than last appended character result and append repeat step until cannot pick more characters pick largest character from and append result pick largest character from which smaller than last appended character result and append repeat step until cannot pick more characters repeat steps from until pick all characters from each step if smallest or largest character appears more than once can choose any occurrence and append result return result string after sorting this algorithm example input aaaabbbbcccc output abccbaabccba explanation after steps and first iteration result abc after steps and first iteration result abccba first iteration done now aabbcc and go back step after steps and second iteration result abccbaabc after steps and second iteration result abccbaabccba example input rat output art explanation word rat becomes art after reordering mentioned algorithm constraints slength consists only lowercase english letters
convert binary number linked list integer given head which reference node singlylinked list value each node linked list either or linked list holds binary representation number return decimal value number linked list most significant bit head linked list example input head output explanation base base example input head output constraints linked list not empty number nodes will not exceed each nodes value either or
find kth largest integer array given array strings nums and integer each string nums represents integer without leading zeros return string that represents kth largest integer nums note duplicate numbers should be counted distinctly example if nums first largest integer secondlargest integer and thirdlargest integer example input nums output explanation numbers nums sorted nondecreasing order th largest integer nums example input nums output explanation numbers nums sorted nondecreasing order rd largest integer nums example input nums output explanation numbers nums sorted nondecreasing order nd largest integer nums constraints numslength numsilength numsi consists only digits numsi will not have any leading zeros
reverse odd levels binary tree given root perfect binary tree reverse node values each odd level tree example suppose node values level then should become return root reversed tree binary tree perfect if all parent nodes have two children and all leaves same level level node number edges along path between and root node example input root output explanation tree has only one odd level nodes level respectively which reversed and become example input root output explanation nodes level which reversed and become example input root output explanation odd levels have nonzero values nodes level and after reversal nodes level and after reversal constraints number nodes tree range nodeval root perfect binary tree
minimum moves equal array elements ii given integer array nums size return minimum number moves required make all array elements equal one move can increment or decrement element array test cases designed so that answer will fit bit integer example input nums output explanation only two moves needed remember each move increments or decrements one element example input nums output constraints numslength numslength numsi
range module range module module that tracks ranges numbers design data structure track ranges represented as halfopen intervals and query about them halfopen interval left right denotes all real numbers where left right implement rangemodule class rangemodule initializes object data structure void addrangeint left int right adds halfopen interval left right tracking every real number that interval adding interval that partially overlaps currently tracked numbers should add any numbers interval left right that not already tracked boolean queryrangeint left int right returns true if every real number interval left right currently being tracked and false otherwise void removerangeint left int right stops tracking every real number currently being tracked halfopen interval left right example input rangemodule addrange removerange queryrange queryrange queryrange output null null null true false true explanation rangemodule rangemodule new rangemodule rangemoduleaddrange rangemoduleremoverange rangemodulequeryrange return trueevery number being tracked rangemodulequeryrange return falsenumbers like not being tracked rangemodulequeryrange return true number still being tracked despite remove operation constraints left right most calls will be made addrange queryrange and removerange
number laser beams bank antitheft security devices activated inside bank given indexed binary string array bank representing floor plan bank which matrix banki represents ith row consisting and means cell empty while means cell has security device there one laser beam between any two security devices if both conditions met two devices located two different rows and where each row where there no security devices ith row laser beams independent ie one beam does not interfere nor join another return total number laser beams bank example input bank output explanation between each following device pairs there one beam total there beams bank bank bank bank bank bank bank bank bank bank bank bank bank bank bank bank note that there no beam between any device th row any rd row this because nd row contains security devices which breaks second condition example input bank output explanation there does not exist two devices located two different rows constraints banklength bankilength bankij either or
substring xor queries given binary string and integer array queries where queriesi firsti secondi ith query find shortest substring whose decimal value val yields secondi when bitwise xored firsti other words val firsti secondi answer ith query endpoints indexed substring lefti righti or if no such substring exists if there multiple answers choose one minimum lefti return array ans where ansi lefti righti answer ith query substring contiguous nonempty sequence characters within string example input queries output explanation first query substring range which has decimal value and hence answer first query second query substring range and has decimal value and so returned second query example input queries output explanation this example there no substring that answers query hence returned example input queries output explanation this example substring range has decimal value and so answer constraints slength si either or querieslength firsti secondi
squares sorted array given integer array nums sorted nondecreasing order return array squares each number sorted nondecreasing order example input nums output explanation after squaring array becomes after sorting becomes example input nums output constraints numslength numsi nums sorted nondecreasing order follow up squaring each element and sorting new array very trivial could find solution using different approach
find all people secret given integer indicating there people numbered from also given indexed integer array meetings where meetingsi xi yi timei indicates that person xi and person yi have meeting timei person may attend multiple meetings same time finally given integer firstperson person has secret and initially shares secret person firstperson time this secret then shared every time meeting takes place person that has secret more formally every meeting if person xi has secret timei then will share secret person yi and vice versa secrets shared instantaneously that person may receive secret and share people other meetings within same time frame return list all people that have secret after all meetings have taken place may return answer any order example input meetings firstperson output explanation time person shares secret person time person shares secret person time person shares secret person time person shares secret person thus people and know secret after all meetings example input meetings firstperson output explanation time person shares secret person time neither person nor person know secret time person shares secret person and person thus people and know secret after all meetings example input meetings firstperson output explanation time person shares secret person time person shares secret person and person shares secret person note that person can share secret same time as receiving time person shares secret person thus people and know secret after all meetings constraints meetingslength meetingsilength xi yi xi yi timei firstperson
where will ball fall have grid size representing box and have balls box open top and bottom sides each cell box has diagonal board spanning two corners cell that can redirect ball right or left board that redirects ball right spans topleft corner bottomright corner and represented grid as board that redirects ball left spans topright corner bottomleft corner and represented grid as drop one ball top each column box each ball can get stuck box or fall out bottom ball gets stuck if hits shaped pattern between two boards or if board redirects ball into either wall box return array answer size where answeri column that ball falls out bottom after dropping ball from ith column top or if ball gets stuck box example input grid output explanation this example shown photo ball dropped column and falls out box column ball dropped column and will get stuck box between column and and row ball dropped column and will get stuck box between column and and row ball dropped column and will get stuck box between column and and row ball dropped column and will get stuck box between column and and row example input grid output explanation ball gets stuck against left wall example input grid output constraints gridlength gridilength gridij or
customers who bought all products sql schema table customer column name type customerid int productkey int there no primary key this table may contain duplicates customerid not null productkey foreign key product table table product column name type productkey int productkey primary key column this table write sql query report customer ids from customer table that bought all products product table return result table any order query result format following example example input customer table customerid productkey product table productkey output customerid explanation customers who bought all products and customers ids and
max difference can get from changing integer given integer num will apply following steps exactly two times pick digit pick another digit digit can be equal replace all occurrences decimal representation num new integer cannot have any leading zeros also new integer cannot be let and be results applying operations num first and second times respectively return max difference between and example input num output explanation first time pick and and store new integer second time pick and and store new integer have now and and max difference example input num output explanation first time pick and and store new integer second time pick and and store new integer have now and and max difference constraints num
minimum number increments subarrays form target array given integer array target have integer array initial same size as target all elements initially zeros one operation can choose any subarray from initial and increment each value one return minimum number operations form target array from initial test cases generated so that answer fits bit integer example input target output explanation need least operations form target array from initial array increment from index inclusive increment from index inclusive increment index target array formed example input target output explanation example input target output explanation constraints targetlength targeti
combination sum iii find all valid combinations numbers that sum up such that following conditions true only numbers through used each number used most once return list all possible valid combinations list must not contain same combination twice and combinations may be returned any order example input output explanation there no other valid combinations example input output explanation there no other valid combinations example input output explanation there no valid combinations using different numbers range smallest sum can get and since there no valid combination constraints
closest divisors given integer num find closest two integers absolute difference whose product equals num or num return two integers any order example input num output explanation num closest divisors num closest divisors hence chosen example input num output example input num output constraints num
arranging coins have coins and want build staircase these coins staircase consists rows where ith row has exactly coins last row staircase may be incomplete given integer return number complete rows staircase will build example input output explanation because rd row incomplete return example input output explanation because th row incomplete return constraints
design linked list design your implementation linked list can choose use singly or doubly linked list node singly linked list should have two attributes val and next val value current node and next pointerreference next node if want use doubly linked list will need one more attribute prev indicate previous node linked list assume all nodes linked list indexed implement mylinkedlist class mylinkedlist initializes mylinkedlist object int getint index get value indexth node linked list if index invalid return void addatheadint val add node value val before first element linked list after insertion new node will be first node linked list void addattailint val append node value val as last element linked list void addatindexint index int val add node value val before indexth node linked list if index equals length linked list node will be appended end linked list if index greater than length node will not be inserted void deleteatindexint index delete indexth node linked list if index valid example input mylinkedlist addathead addattail addatindex get deleteatindex get output null null null null null explanation mylinkedlist mylinkedlist new mylinkedlist mylinkedlistaddathead mylinkedlistaddattail mylinkedlistaddatindex linked list becomes mylinkedlistget return mylinkedlistdeleteatindex now linked list mylinkedlistget return constraints index val please do not use builtin linkedlist library most calls will be made get addathead addattail addatindex and deleteatindex
minimum distance type word using two fingers have keyboard layout as shown above xy plane where each english uppercase letter located some coordinate example letter located coordinate letter located coordinate letter located coordinate and letter located coordinate given string word return minimum total distance type such string using only two fingers distance between coordinates and note that initial positions your two fingers considered free so do not count towards your total distance also your two fingers do not have start first letter or first two letters example input word cake output explanation using two fingers one optimal way type cake finger letter cost finger letter cost distance from letter letter finger letter cost finger letter cost distance from letter letter total distance example input word happy output explanation using two fingers one optimal way type happy finger letter cost finger letter cost distance from letter letter finger letter cost finger letter cost distance from letter letter finger letter cost distance from letter letter total distance constraints wordlength word consists uppercase english letters
number ways form target string given dictionary given list strings same length words and string target your task form target using given words under following rules target should be formed from left right form ith character indexed target can choose kth character jth string words if targeti wordsjk once use kth character jth string words can no longer use xth character any string words where other words all characters left or index become unusuable every string repeat process until form string target notice that can use multiple characters from same string words provided conditions above met return number ways form target from words since answer may be too large return modulo example input words accabbbbcaca target aba output explanation there ways form target aba index acca index bbbb index caca aba index acca index bbbb index caca aba index acca index bbbb index acca aba index acca index bbbb index acca aba index caca index bbbb index acca aba index caca index bbbb index caca example input words abbabaab target bab output explanation there ways form target bab index baab index baab index abba bab index baab index baab index baab bab index baab index baab index baab bab index abba index baab index baab constraints wordslength wordsilength all strings words have same length targetlength wordsi and target contain only lowercase english letters
additive number additive number string whose digits can form additive sequence valid additive sequence should contain least three numbers except first two numbers each subsequent number sequence must be sum preceding two given string containing only digits return true if additive number or false otherwise note numbers additive sequence cannot have leading zeros so sequence or invalid example input output true explanation digits can form additive sequence example input output true explanation additive sequence constraints numlength num consists only digits follow up how would handle overflow very large input integers
maximum candies allocated children given indexed integer array candies each element array denotes pile candies size candiesi can divide each pile into any number sub piles but cannot merge two piles together also given integer should allocate piles candies children such that each child gets same number candies each child can take most one pile candies and some piles candies may go unused return maximum number candies each child can get example input candies output explanation can divide candies into piles size and and candies into piles size and now have five piles candies sizes and can allocate piles size children can be proven that each child cannot receive more than candies example input candies output explanation there children but only candies total so impossible ensure each child receives least one candy thus each child gets no candy and answer constraints candieslength candiesi
number segments string given string return number segments string segment defined be contiguous sequence nonspace characters example input hello my name john output explanation five segments hello my name john example input hello output constraints slength consists lowercase and uppercase english letters digits or one following characters only space character
number days between two dates write program count number days between two dates two dates given as strings their format yyyymmdd as shown examples example input date date output example input date date output constraints given dates valid dates between years and
maximum rows covered columns given indexed binary matrix matrix and integer numselect which denotes number distinct columns must select from matrix let us consider cnumselect as set columns selected row row covered if each cell matrixrowcol col where matrixrowcol col present or no cell row has value need choose numselect columns such that number rows that covered maximized return maximum number rows that can be covered set numselect columns example input matrix numselect output explanation one possible way cover rows shown diagram above choose row covered because has no occurrences row covered because columns value ie and present row not covered because matrix but not present row covered because matrix and present thus can cover three rows note that will also cover rows but can be shown that no more than three rows can be covered example input matrix numselect output explanation selecting only column will result both rows being covered since entire matrix selected therefore return constraints matrixlength matrixilength matrixij either or numselect
restore ip addresses valid ip address consists exactly four integers separated single dots each integer between and inclusive and cannot have leading zeros example and valid ip addresses but and invalid ip addresses given string containing only digits return all possible valid ip addresses that can be formed inserting dots into not allowed reorder or remove any digits may return valid ip addresses any order example input output example input output example input output constraints slength consists digits only
word search ii given board characters and list strings words return all words board each word must be constructed from letters sequentially adjacent cells where adjacent cells horizontally or vertically neighboring same letter cell may not be used more than once word example input board oaanetaeihkriflv words oathpeaeatrain output eatoath example input board abcd words abcb output constraints boardlength boardilength boardij lowercase english letter wordslength wordsilength wordsi consists lowercase english letters all strings words unique
binary tree postorder traversal given root binary tree return postorder traversal its nodes values example input root null output example input root output example input root output constraints number nodes tree range nodeval follow up recursive solution trivial could do iteratively
count good numbers digit string good if digits indexed even indices even and digits odd indices prime or example good because digits and even positions even and digits and odd positions prime however not good because even index but not even given integer return total number good digit strings length since answer may be large return modulo digit string string consisting digits through that may contain leading zeros example input output explanation good numbers length example input output example input output constraints
longest arithmetic subsequence given array nums integers return length longest arithmetic subsequence nums note that subsequence array that can be derived from another array deleting some or no elements without changing order remaining elements sequence seq arithmetic if seqi seqi all same value seqlength example input nums output explanation whole array arithmetic sequence steps length example input nums output explanation longest arithmetic subsequence example input nums output explanation longest arithmetic subsequence constraints numslength numsi
card flipping game given two indexed integer arrays fronts and backs length where ith card has positive integer frontsi printed front and backsi printed back initially each card placed table such that front number facing up and other facing down may flip over any number cards possibly zero after flipping cards integer considered good if facing down some card and not facing up any card return minimum possible good integer after flipping cards if there no good integers return example input fronts backs output explanation if flip second card face up numbers and face down minimum good integer as appears facing down but not facing up can be shown that minimum possible good integer obtainable after flipping some cards example input fronts backs output explanation there no good integers no matter how flip cards so return constraints frontslength backslength frontsi backsi
height binary tree after subtree removal queries given root binary tree nodes each node assigned unique value from also given array queries size have perform independent queries tree where ith query do following remove subtree rooted node value queriesi from tree guaranteed that queriesi will not be equal value root return array answer size where answeri height tree after performing ith query note queries independent so tree returns its initial state after each query height tree number edges longest simple path from root some node tree example input root nullnullnullnullnullnull queries output explanation diagram above shows tree after removing subtree rooted node value height tree path example input root queries output explanation have following queries removing subtree rooted node value height tree becomes path removing subtree rooted node value height tree becomes path removing subtree rooted node value height tree becomes path removing subtree rooted node value height tree becomes path constraints number nodes tree nodeval all values tree unique querieslength minn queriesi queriesi rootval
cells range excel sheet cell excel sheet represented as string colrow where col denotes column number cell represented alphabetical letters example st column denoted nd rd and so row row number cell rth row represented integer given string format colrowcolrow where col represents column row represents row col represents column and row represents row such that and return list cells such that and cells should be represented as strings format mentioned above and be sorted nondecreasing order first columns and then rows example input kl output kkll explanation above diagram shows cells which should be present list red arrows denote order which cells should be presented example input af output abcdef explanation above diagram shows cells which should be present list red arrow denotes order which cells should be presented constraints slength consists uppercase english letters digits and
largest number after mutating substring given string num which represents large integer also given indexed integer array change length that maps each digit another digit more formally digit maps digit changed may choose mutate single substring num mutate substring replace each digit numi digit maps change ie replace numi changenumi return string representing largest possible integer after mutating or choosing not single substring num substring contiguous sequence characters within string example input num change output explanation replace substring maps change thus becomes largest number that can be created so return example input num change output explanation replace substring maps change maps change maps change thus becomes largest number that can be created so return example input num change output explanation already largest number that can be created so return constraints numlength num consists only digits changelength changed
count number pairs absolute difference given integer array nums and integer return number pairs where such that numsi numsj value defined as if if example input nums output explanation pairs absolute difference example input nums output explanation there no pairs absolute difference example input nums output explanation pairs absolute difference constraints numslength numsi
smallest rotation highest score given array nums can rotate nonnegative integer so that array becomes numsk numsk numsnumslength nums nums numsk afterward any entries that less than or equal their index worth one point example if have nums and rotate becomes this worth points because no points no points one point one point one point return rotation index that corresponds highest score can achieve if rotated nums if there multiple answers return smallest such index example input nums output explanation scores each listed below nums score nums score nums score nums score nums score so should choose which has highest score example input nums output explanation nums will always have points no matter how shifts so will choose smallest which constraints numslength numsi numslength
check if array sorted and rotated given array nums return true if array originally sorted nondecreasing order then rotated some number positions including zero otherwise return false there may be duplicates original array note array rotated positions results array same length such that ai bix alength where modulo operation example input nums output true explanation original sorted array can rotate array positions begin element value example input nums output false explanation there no sorted array once rotated that can make nums example input nums output true explanation original sorted array can rotate array positions ie no rotation make nums constraints numslength numsi
break palindrome given palindromic string lowercase english letters palindrome replace exactly one character any lowercase english letter so that resulting string not palindrome and that lexicographically smallest one possible return resulting string if there no way replace character make not palindrome return empty string string lexicographically smaller than string same length if first position where and differ has character strictly smaller than corresponding character example abcc lexicographically smaller than abcd because first position differ fourth character and smaller than example input palindrome abccba output aaccba explanation there many ways make abccba not palindrome such as zbccba aaccba and abacba all ways aaccba lexicographically smallest example input palindrome output explanation there no way replace single character make not palindrome so return empty string constraints palindromelength palindrome consists only lowercase english letters
count number rectangles containing each point given integer array rectangles where rectanglesi li hi indicates that ith rectangle has length li and height hi also given integer array points where pointsj xj yj point coordinates xj yj ith rectangle has its bottomleft corner point coordinates and its topright corner point li hi return integer array count length pointslength where countj number rectangles that contain jth point ith rectangle contains jth point if xj li and yj hi note that points that lie edges rectangle also considered be contained that rectangle example input rectangles points output explanation first rectangle contains no points second rectangle contains only point third rectangle contains points and number rectangles that contain point number rectangles that contain point therefore return example input rectangles points output explanation first rectangle contains only point second rectangle contains only point third rectangle contains points and number rectangles that contain point number rectangles that contain point therefore return constraints rectangleslength pointslength rectanglesilength pointsjlength li xj hi yj all rectangles unique all points unique
stone game iv alice and bob take turns playing game alice starting first initially there stones pile each players turn that player makes move consisting removing any nonzero square number stones pile also if player cannot make move heshe loses game given positive integer return true if and only if alice wins game otherwise return false assuming both players play optimally example input output true explanation alice can remove stone winning game because bob doesnt have any moves example input output false explanation alice can only remove stone after that bob removes last one winning game example input output true explanation already perfect square alice can win one move removing stones constraints
prime number set bits binary representation given two integers left and right return count numbers inclusive range left right having prime number set bits their binary representation recall that number set bits integer has number present when written binary example written binary which has set bits example input left right output explanation set bits prime set bits prime set bit not prime set bits prime set bits prime numbers have prime number set bits example input left right output explanation set bits prime set bits prime set bits prime set bits prime set bits prime set bits not prime numbers have prime number set bits constraints left right right left
unique morse code words international morse code defines standard encoding where each letter mapped series dots and dashes as follows maps maps maps and so convenience full table letters english alphabet given below given array strings words where each word can be written as concatenation morse code each letter example cab can be written as which concatenation and will call such concatenation transformation word return number different transformations among all words have example input words ginzengigmsg output explanation transformation each word gin zen gig msg there different transformations and example input words output constraints wordslength wordsilength wordsi consists lowercase english letters
reverse nodes even length groups given head linked list nodes linked list sequentially assigned nonempty groups whose lengths form sequence natural numbers length group number nodes assigned other words st node assigned first group nd and rd nodes assigned second group th th and th nodes assigned third group and so note that length last group may be less than or equal length second last group reverse nodes each group even length and return head modified linked list example input head output explanation length first group which odd hence no reversal occurs length second group which even hence nodes reversed length third group which odd hence no reversal occurs length last group which even hence nodes reversed example input head output explanation length first group no reversal occurs length second group nodes reversed length last group no reversal occurs example input head output explanation length first group no reversal occurs length second group nodes reversed length last group nodes reversed constraints number nodes list range nodeval
sleep given positive integer millis write asyncronous function that sleeps millis milliseconds can resolve any value example input millis output explanation should return promise that resolves after ms let datenow sleepthen consolelogdatenow example input millis output explanation should return promise that resolves after ms constraints millis
maximum sum two nonoverlapping subarrays given integer array nums and two integers firstlen and secondlen return maximum sum elements two nonoverlapping subarrays lengths firstlen and secondlen array length firstlen could occur before or after array length secondlen but have be nonoverlapping subarray contiguous part array example input nums firstlen secondlen output explanation one choice subarrays length and length example input nums firstlen secondlen output explanation one choice subarrays length and length example input nums firstlen secondlen output explanation one choice subarrays length and length constraints firstlen secondlen firstlen secondlen firstlen secondlen numslength numsi
odd string difference given array equallength strings words assume that length each string each string wordsi can be converted into difference integer array differencei length where differenceij wordsij wordsij where note that difference between two letters difference between their positions alphabet ie position and example string acb difference integer array all strings words have same difference integer array except one should find that string return string words that has different difference integer array example input words adcwzyabc output abc explanation difference integer array adc difference integer array wzy difference integer array abc odd array out so return corresponding string abc example input words aaabobcccddd output bob explanation all integer arrays except bob which corresponds constraints wordslength wordsilength wordsi consists lowercase english letters
minimum number flips make binary string alternating given binary string allowed perform two types operations string any sequence type remove character start string and append end string type pick any character and flip its value ie if its value becomes and viceversa return minimum number type operations need perform such that becomes alternating string called alternating if no two adjacent characters equal example strings and alternating while string not example input output explanation use first operation two times make then use second operation third and sixth elements make example input output explanation string already alternating example input output explanation use second operation second element make constraints slength si either or
excel sheet column number given string columntitle that represents column title as appears excel sheet return its corresponding column number example aa ab example input columntitle output example input columntitle ab output example input columntitle zy output constraints columntitlelength columntitle consists only uppercase english letters columntitle range fxshrxw
rearrange spaces between words given string text words that placed among some number spaces each word consists one or more lowercase english letters and separated least one space its guaranteed that text contains least one word rearrange spaces so that there equal number spaces between every pair adjacent words and that number maximized if cannot redistribute all spaces equally place extra spaces end meaning returned string should be same length as text return string after rearranging spaces example input text this sentence output this sentence explanation there total spaces and words can evenly divide spaces between words spaces example input text practice makes perfect output practice makes perfect explanation there total spaces and words spaces plus extra space place this extra space end string constraints textlength text consists lowercase english letters and text contains least one word
largest combination bitwise and greater than zero bitwise and array nums bitwise and all integers nums example nums bitwise and equal also nums bitwise and given array positive integers candidates evaluate bitwise and every combination numbers candidates each number candidates may only be used once each combination return size largest combination candidates bitwise and greater than example input candidates output explanation combination has bitwise and size combination can be shown that no combination size greater than has bitwise and greater than note that more than one combination may have largest size example combination has bitwise and example input candidates output explanation largest combination has bitwise and size combination so return constraints candidateslength candidatesi
number visible people queue there people standing queue and numbered from left right order given array heights distinct integers where heightsi represents height ith person person can see another person their right queue if everybody between shorter than both them more formally ith person can see jth person if and minheightsi heightsj maxheightsi heightsi heightsj return array answer length where answeri number people ith person can see their right queue example input heights output explanation person can see person and person can see person person can see person and person can see person person can see person person can see no one since nobody right them example input heights output constraints heightslength heightsi all values heights unique
minimum cost merge stones there piles stones arranged row ith pile has stonesi stones move consists merging exactly consecutive piles into one pile and cost this move equal total number stones these piles return minimum cost merge all piles stones into one pile if impossible return example input stones output explanation start merge cost and left merge cost and left merge cost and left total cost and this minimum possible example input stones output explanation after any merge operation there piles left and cant merge anymore so task impossible example input stones output explanation start merge cost and left merge cost and left total cost and this minimum possible constraints stoneslength stonesi
maximum genetic difference query there rooted tree consisting nodes numbered each nodes number denotes its unique genetic value ie genetic value node genetic difference between two genetic values defined as bitwisexor their values given integer array parents where parentsi parent node if node root tree then parentsx also given array queries where queriesi nodei vali each query find maximum genetic difference between vali and pi where pi genetic value any node that path between nodei and root including nodei and root more formally want maximize vali xor pi return array ans where ansi answer ith query example input parents queries output explanation queries processed as follows node maximum genetic difference difference xor node maximum genetic difference difference xor node maximum genetic difference difference xor example input parents queries output explanation queries processed as follows node maximum genetic difference difference xor node maximum genetic difference difference xor node maximum genetic difference difference xor constraints parentslength parentsi parentslength every node that not root parentsroot querieslength nodei parentslength vali
rearrange words sentence given sentence text sentence string spaceseparated words following format first letter upper case each word text separated single space your task rearrange words text such that all words rearranged increasing order their lengths if two words have same length arrange them their original order return new text following format shown above example input text leetcode cool output cool leetcode explanation there words leetcode length length and cool length output ordered length and new first word starts capital letter example input text keep calm and code output and keep calm code explanation output ordered as follows letters and letters keep letters case tie order position original text calm letters code letters example input text be or not be output be or be not constraints text begins capital letter and then contains lowercase letters and single space between words textlength
closest prime numbers range given two positive integers left and right find two integers num and num such that left nums nums right nums and nums both prime numbers nums nums minimum amongst all other pairs satisfying above conditions return positive integer array ans nums nums if there multiple pairs satisfying these conditions return one minimum nums value or if such numbers do not exist number greater than called prime if only divisible and itself example input left right output explanation prime numbers between and and closest gap between any pair which can be achieved or since smaller than return first pair example input left right output explanation there exists only one prime number given range so conditions cannot be satisfied constraints left right
strange printer there strange printer following two special properties printer can only print sequence same character each time each turn printer can print new characters starting from and ending any place and will cover original existing characters given string return minimum number turns printer needed print example input aaabbb output explanation print aaa first and then print bbb example input aba output explanation print aaa first and then print from second place string which will cover existing character constraints slength consists lowercase english letters
count number complete components given integer there undirected graph vertices numbered from given integer array edges where edgesi ai bi denotes that there exists undirected edge connecting vertices ai and bi return number complete connected components graph connected component subgraph graph which there exists path between any two vertices and no vertex subgraph shares edge vertex outside subgraph connected component said be complete if there exists edge between every pair its vertices example input edges output explanation from picture above one can see that all components this graph complete example input edges output explanation component containing vertices and complete since there edge between every pair two vertices other hand component containing vertices and not complete since there no edge between vertices and thus number complete components this graph constraints edgeslength edgesilength ai bi ai bi there no repeated edges
minimum score triangulation polygon have convex nsided polygon where each vertex has integer value given integer array values where valuesi value ith vertex ie clockwise order will triangulate polygon into triangles each triangle value that triangle product values its vertices and total score triangulation sum these values over all triangles triangulation return smallest possible total score that can achieve some triangulation polygon example input values output explanation polygon already triangulated and score only triangle example input values output explanation there two triangulations possible scores or minimum score example input values output explanation minimum score triangulation has score constraints valueslength valuesi
equal rational numbers given two strings and each which represents nonnegative rational number return true if and only if represent same number strings may use parentheses denote repeating part rational number rational number can be represented using up three parts integerpart nonrepeatingpart and repeatingpart number will be represented one following three ways integerpart example and integerpartnonrepeatingpart example and integerpartnonrepeatingpartrepeatingpart example repeating portion decimal expansion conventionally denoted within pair round brackets example example input output true explanation because represents and represents strings represent same number example input output true example input output true explanation represents repeated forever which equals see this link explanation represents number which formed correctly integerpart and nonrepeatingpart constraints each part consists only digits integerpart does not have leading zeros except zero itself integerpartlength nonrepeatingpartlength repeatingpartlength
largest time given digits given array arr digits find latest hour time that can be made using each digit exactly once hour times formatted as hhmm where hh between and and mm between and earliest hour time and latest return latest hour time hhmm format if no valid time can be made return empty string example input arr output explanation valid hour times and these times latest example input arr output explanation there no valid hour times as not valid constraints arrlength arri
split array make coprime products given indexed integer array nums length split index where called valid if product first elements and product remaining elements coprime example if nums then split index valid because and coprime while split index not valid because and not coprime split index not valid because return smallest index which array can be split validly or if there no such split two values val and val coprime if gcdval val where gcdval val greatest common divisor val and val example input nums output explanation table above shows values product first elements remaining elements and their gcd each index only valid split index example input nums output explanation table above shows values product first elements remaining elements and their gcd each index there no valid split constraints numslength numsi
sliding window median median middle value ordered integer list if size list even there no middle value so median mean two middle values examples if arr median examples if arr median given integer array nums and integer there sliding window size which moving from very left array very right can only see numbers window each time sliding window moves right one position return median array each window original array answers within actual value will be accepted example input nums output explanation window position median example input nums output constraints numslength numsi
climbing stairs climbing staircase takes steps reach top each time can either climb or steps how many distinct ways can climb top example input output explanation there two ways climb top step step steps example input output explanation there three ways climb top step step step step steps steps step constraints
minimum total distance traveled there some robots and factories xaxis given integer array robot where roboti position ith robot also given integer array factory where factoryj positionj limitj indicates that positionj position jth factory and that jth factory can repair most limitj robots positions each robot unique positions each factory also unique note that robot can be same position as factory initially all robots initially broken keep moving one direction direction could be negative or positive direction xaxis when robot reaches factory that did not reach its limit factory repairs robot and stops moving any moment can set initial direction moving some robot your target minimize total distance traveled all robots return minimum total distance traveled all robots test cases generated such that all robots can be repaired note that all robots move same speed if two robots move same direction will never collide if two robots move opposite directions and meet some point do not collide cross each other if robot passes factory that reached its limits crosses as if does not exist if robot moved from position position distance moved example input robot factory output explanation as shown figure first robot position moves positive direction will be repaired first factory second robot position moves negative direction will be repaired first factory third robot position will be repaired second factory does not need move limit first factory and fixed robots limit second factory and fixed robot total distance can be shown that cannot achieve better total distance than example input robot factory output explanation as shown figure first robot position moves positive direction will be repaired second factory second robot position moves negative direction will be repaired first factory limit first factory and fixed robot limit second factory and fixed robot total distance can be shown that cannot achieve better total distance than constraints robotlength factorylength factoryjlength roboti positionj limitj robotlength input will be generated such that always possible repair every robot
find missing observations have observations sided dice rolls each face numbered from observations went missing and only have observations rolls fortunately have also calculated average value rolls given integer array rolls length where rollsi value ith observation also given two integers mean and return array length containing missing observations such that average value rolls exactly mean if there multiple valid answers return any them if no such array exists return empty array average value set numbers sum numbers divided note that mean integer so sum rolls should be divisible example input rolls mean output explanation mean all rolls example input rolls mean output explanation mean all rolls example input rolls mean output explanation impossible mean be no matter what missing rolls constraints rollslength rollsi mean
count digits that divide number given integer num return number digits num that divide num integer val divides nums if nums val example input num output explanation divides itself hence answer example input num output explanation divisible but not since occurs twice as digit return example input num output explanation divisible all its digits hence answer constraints num num does not contain as one its digits
collect coins tree there exists undirected and unrooted tree nodes indexed from given integer and integer array edges length where edgesi ai bi indicates that there edge between nodes ai and bi tree also given array coins size where coinsi can be either or where indicates presence coin vertex initially choose start any vertex tree then can perform following operations any number times collect all coins that distance most from current vertex or move any adjacent vertex tree find minimum number edges need go through collect all coins and go back initial vertex note that if pass edge several times need count into answer several times example input coins edges output explanation start vertex collect coin vertex move vertex collect coin vertex then move back vertex example input coins edges output explanation start vertex collect coins vertices and move vertex collect coin vertex then move back vertex constraints coinslength coinsi edgeslength edgesilength ai bi ai bi edges represents valid tree
concatenation array given integer array nums length want create array ans length where ansi numsi and ansi numsi indexed specifically ans concatenation two nums arrays return array ans example input nums output explanation array ans formed as follows ans numsnumsnumsnumsnumsnums ans example input nums output explanation array ans formed as follows ans numsnumsnumsnumsnumsnumsnumsnums ans constraints numslength numsi
check if all characters have equal number occurrences given string return true if good string or false otherwise string good if all characters that appear have same number occurrences ie same frequency example input abacbc output true explanation characters that appear and all characters occur times example input aaabb output false explanation characters that appear and occurs times while occurs times which not same number times constraints slength consists lowercase english letters
encode and decode tinyurl note this companion problem system design problem design tinyurl tinyurl url shortening service where enter url such as httpsleetcodecomproblemsdesigntinyurl and returns short url such as httptinyurlcomeiak design class encode url and decode tiny url there no restriction how your encodedecode algorithm should work just need ensure that url can be encoded tiny url and tiny url can be decoded original url implement solution class solution initializes object system string encodestring longurl returns tiny url given longurl string decodestring shorturl returns original long url given shorturl guaranteed that given shorturl encoded same object example input url httpsleetcodecomproblemsdesigntinyurl output httpsleetcodecomproblemsdesigntinyurl explanation solution obj new solution string tiny objencodeurl returns encoded tiny url string ans objdecodetiny returns original url after decoding constraints urllength url guranteed be valid url
binary prefix divisible given binary array nums indexed define xi as number whose binary representation subarray numsi from mostsignificantbit leastsignificantbit example if nums then and return array booleans answer where answeri true if xi divisible example input nums output truefalsefalse explanation input numbers binary which and base only first number divisible so answer true example input nums output falsefalsefalse constraints numslength numsi either or
minimum one bit operations make integers zero given integer must transform into using following operations any number times change rightmost th bit binary representation change ith bit binary representation if ith bit set and ith through th bits set return minimum number operations transform into example input output explanation binary representation nd operation since th bit st operation example input output explanation binary representation nd operation since st bit and th through th bits st operation nd operation since th bit st operation constraints
partition equal sum subsets given integer array nums and integer return true if possible divide this array into nonempty subsets whose sums all equal example input nums output true explanation possible divide into subsets equal sums example input nums output false constraints numslength numsi frequency each element range
snakes and ladders given integer matrix board where cells labeled from boustrophedon style starting from bottom left board ie boardn and alternating direction each row start square board each move starting from square curr do following choose destination square next label range curr mincurr this choice simulates result standard sided die roll ie there always most destinations regardless size board if next has snake or ladder must move destination that snake or ladder otherwise move next game ends when reach square board square row and column has snake or ladder if boardrc destination that snake or ladder boardrc squares and do not have snake or ladder note that only take snake or ladder most once per move if destination snake or ladder start another snake or ladder do not follow subsequent snake or ladder example suppose board and first move your destination square follow ladder square but do not follow subsequent ladder return least number moves required reach square if not possible reach square return example input board output explanation beginning start square row column decide move square and must take ladder square then decide move square and must take snake square then decide move square and must take ladder square then decide move square ending game this lowest possible number moves reach last square so return example input board output constraints boardlength boardilength boardij either or range squares labeled and do not have any ladders or snakes
equal sum arrays minimum number operations given two arrays integers nums and nums possibly different lengths values arrays between and inclusive one operation can change any integers value any arrays any value between and inclusive return minimum number operations required make sum values nums equal sum values nums return if not possible make sum two arrays equal example input nums nums output explanation can make sums nums and nums equal operations all indices indexed change nums nums nums change nums nums nums change nums nums nums example input nums nums output explanation there no way decrease sum nums or increase sum nums make them equal example input nums nums output explanation can make sums nums and nums equal operations all indices indexed change nums nums nums change nums nums nums change nums nums nums constraints numslength numslength numsi numsi
walking robot simulation robot infinite xyplane starts point facing north robot can receive sequence these three possible types commands turn left degrees turn right degrees move forward units one unit time some grid squares obstacles ith obstacle grid point obstaclesi xi yi if robot runs into obstacle then will instead stay its current location and move next command return maximum euclidean distance that robot ever gets from origin squared ie if distance return note north means direction east means direction south means direction west means direction example input commands obstacles output explanation robot starts move north units turn right move east units furthest point robot ever gets from origin which squared units away example input commands obstacles output explanation robot starts move north units turn right move east unit and get blocked obstacle robot turn left move north units furthest point robot ever gets from origin which squared units away example input commands obstacles output explanation robot starts move north units turn right turn right move south units furthest point robot ever gets from origin which squared units away constraints commandslength commandsi either or integer range obstacleslength xi yi answer guaranteed be less than
find middle index array given indexed integer array nums find leftmost middleindex ie smallest amongst all possible ones middleindex index where nums nums numsmiddleindex numsmiddleindex numsmiddleindex numsnumslength if middleindex left side sum considered be similarly if middleindex numslength right side sum considered be return leftmost middleindex that satisfies condition or if there no such index example input nums output explanation sum numbers before index sum numbers after index example input nums output explanation sum numbers before index sum numbers after index example input nums output explanation there no valid middleindex constraints numslength numsi note this question same as httpsleetcodecomproblemsfindpivotindex
optimal partition string given string partition string into one or more substrings such that characters each substring unique that no letter appears single substring more than once return minimum number substrings such partition note that each character should belong exactly one substring partition example input abacaba output explanation two possible partitions abacaba and abacaba can be shown that minimum number substrings needed example input ssssss output explanation only valid partition ssssss constraints slength consists only english lowercase letters
least operators express number given single positive integer will write expression form op op op where each operator op op etc either addition subtraction multiplication or division or example might write which value when writing such expression adhere following conventions division operator returns rational numbers there no parentheses placed anywhere use usual order operations multiplication and division happen before addition and subtraction not allowed use unary negation operator example valid expression as only uses subtraction but not because uses negation would like write expression least number operators such that expression equals given target return least number operators used example input target output explanation expression contains operations example input target output explanation expression contains operations example input target output explanation expression contains operations constraints target
merge sorted array given two integer arrays nums and nums sorted nondecreasing order and two integers and representing number elements nums and nums respectively merge nums and nums into single array sorted nondecreasing order final sorted array should not be returned function but instead be stored inside array nums accommodate this nums has length where first elements denote elements that should be merged and last elements set and should be ignored nums has length example input nums nums output explanation arrays merging and result merge underlined elements coming from nums example input nums nums output explanation arrays merging and result merge example input nums nums output explanation arrays merging and result merge note that because there no elements nums only there ensure merge result can fit nums constraints numslength numslength numsi numsj follow up can come up algorithm that runs om time
largest multiple three given array digits digits return largest multiple three that can be formed concatenating some given digits any order if there no answer return empty string since answer may not fit integer data type return answer as string note that returning answer must not contain unnecessary leading zeros example input digits output example input digits output example input digits output constraints digitslength digitsi
sell diminishingvalued colored balls have inventory different colored balls and there customer that wants orders balls any color customer weirdly values colored balls each colored balls value number balls that color currently have your inventory example if own yellow balls customer would pay first yellow ball after transaction there only yellow balls left so next yellow ball then valued ie value balls decreases as sell more customer given integer array inventory where inventoryi represents number balls ith color that initially own also given integer orders which represents total number balls that customer wants can sell balls any order return maximum total value that can attain after selling orders colored balls as answer may be too large return modulo example input inventory orders output explanation sell st color time and nd color times maximum total value example input inventory orders output explanation sell st color times and nd color times maximum total value constraints inventorylength inventoryi orders minsuminventoryi
put marbles bags have bags given indexed integer array weights where weightsi weight ith marble also given integer divide marbles into bags according following rules no bag empty if ith marble and jth marble bag then all marbles index between ith and jth indices should also be that same bag if bag consists all marbles index from inclusively then cost bag weightsi weightsj score after distributing marbles sum costs all bags return difference between maximum and minimum scores among marble distributions example input weights output explanation distribution results minimal score distribution results maximal score thus return their difference example input weights output explanation only distribution possible since both maximal and minimal score same return constraints weightslength weightsi
boats save people given array people where peoplei weight ith person and infinite number boats where each boat can carry maximum weight limit each boat carries most two people same time provided sum weight those people most limit return minimum number boats carry every given person example input people limit output explanation boat example input people limit output explanation boats and example input people limit output explanation boats constraints peoplelength peoplei limit
divide players into teams equal skill given positive integer array skill even length where skilli denotes skill ith player divide players into teams size such that total skill each team equal chemistry team equal product skills players that team return sum chemistry all teams or return if there no way divide players into teams such that total skill each team equal example input skill output explanation divide players into following teams where each team has total skill sum chemistry all teams example input skill output explanation two players form team total skill chemistry team example input skill output explanation there no way divide players into teams such that total skill each team equal constraints skilllength skilllength even skilli
sorting sentence sentence list words that separated single space no leading or trailing spaces each word consists lowercase and uppercase english letters sentence can be shuffled appending indexed word position each word then rearranging words sentence example sentence this sentence can be shuffled as sentence this or sentence this given shuffled sentence containing no more than words reconstruct and return original sentence example input sentence this output this sentence explanation sort words their original positions this sentence then remove numbers example input myself me and output me myself and explanation sort words their original positions me myself and then remove numbers constraints slength consists lowercase and uppercase english letters spaces and digits from number words between and words separated single space contains no leading or trailing spaces
move pieces obtain string given two strings start and target both length each string consists only characters and where characters and represent pieces where piece can move left only if there blank space directly its left and piece can move right only if there blank space directly its right character represents blank space that can be occupied any or pieces return true if possible obtain string target moving pieces string start any number times otherwise return false example input start lrr target lrr output true explanation can obtain string target from start doing following moves move first piece one step left start becomes equal lrr move last piece one step right start becomes equal lrr move second piece three steps right start becomes equal lrr since possible get string target from start return true example input start rl target lr output false explanation piece string start can move one step right obtain rl after that no pieces can move anymore so impossible obtain string target from start example input start target output false explanation piece string start can move only right so impossible obtain string target from start constraints startlength targetlength start and target consist characters and
string without aaa or bbb given two integers and return any string such that has length and contains exactly letters and exactly letters substring aaa does not occur and substring bbb does not occur example input output abb explanation abb bab and bba all correct answers example input output aabaa constraints guaranteed such exists given and
split array same average given integer array nums should move each element nums into one two arrays and such that and nonempty and averagea averageb return true if possible achieve that and false otherwise note that array arr averagearr sum all elements arr over length arr example input nums output true explanation can split array into and and both them have average example input nums output false constraints numslength numsi
soup servings there two types soup type and type initially have ml each type soup there four kinds operations serve ml soup and ml soup serve ml soup and ml soup serve ml soup and ml soup and serve ml soup and ml soup when serve some soup give someone and no longer have each turn will choose from four operations equal probability if remaining volume soup not enough complete operation will serve as much as possible stop once no longer have some quantity both types soup note that do not have operation where all mls soup used first return probability that soup will be empty first plus half probability that and become empty same time answers within actual answer will be accepted example input output explanation if choose first two operations will become empty first third operation and will become empty same time fourth operation will become empty first so total probability becoming empty first plus half probability that and become empty same time example input output constraints
stamping grid given binary matrix grid where each cell either empty or occupied then given stamps size stampheight stampwidth want fit stamps such that follow given restrictions and requirements cover all empty cells do not cover any occupied cells can put as many stamps as want stamps can overlap each other stamps not allowed be rotated stamps must stay completely inside grid return true if possible fit stamps while following given restrictions and requirements otherwise return false example input grid stampheight stampwidth output true explanation have two overlapping stamps labeled and image that able cover all empty cells example input grid stampheight stampwidth output false explanation there no way fit stamps onto all empty cells without stamps going outside grid constraints gridlength gridrlength gridrc either or stampheight stampwidth
maximum non negative product matrix given matrix grid initially located topleft corner and each step can only move right or down matrix among all possible paths starting from topleft corner and ending bottomright corner find path maximum nonnegative product product path product all integers grid cells visited along path return maximum nonnegative product modulo if maximum product negative return notice that modulo performed after getting maximum product example input grid output explanation not possible get nonnegative product path from so return example input grid output explanation maximum nonnegative product shown example input grid output explanation maximum nonnegative product shown constraints gridlength gridilength gridij
singlethreaded cpu given tasks labeled from represented integer array tasks where tasksi enqueuetimei processingtimei means that ith task will be available process enqueuetimei and will take processingtimei finish processing have singlethreaded cpu that can process most one task time and will act following way if cpu idle and there no available tasks process cpu remains idle if cpu idle and there available tasks cpu will choose one shortest processing time if multiple tasks have same shortest processing time will choose task smallest index once task started cpu will process entire task without stopping cpu can finish task then start new one instantly return order which cpu will process tasks example input tasks output explanation events go as follows time task available process available tasks also time idle cpu starts processing task available tasks time task available process available tasks time task available process available tasks also time cpu finishes task and starts processing task as shortest available tasks time task available process available tasks time cpu finishes task and starts processing task as shortest available tasks time cpu finishes task and starts processing task available tasks time cpu finishes task and becomes idle example input tasks output explanation events go as follows time all tasks become available available tasks also time idle cpu starts processing task available tasks time cpu finishes task and starts processing task available tasks time cpu finishes task and starts processing task available tasks time cpu finishes task and starts processing task available tasks time cpu finishes task and starts processing task available tasks time cpu finishes task and becomes idle constraints taskslength enqueuetimei processingtimei
candy there children standing line each child assigned rating value given integer array ratings giving candies these children subjected following requirements each child must have least one candy children higher rating get more candies than their neighbors return minimum number candies need have distribute candies children example input ratings output explanation can allocate first second and third child candies respectively example input ratings output explanation can allocate first second and third child candies respectively third child gets candy because satisfies above two conditions constraints ratingslength ratingsi
successful pairs spells and potions given two positive integer arrays spells and potions length and respectively where spellsi represents strength ith spell and potionsj represents strength jth potion also given integer success spell and potion pair considered successful if product their strengths least success return integer array pairs length where pairsi number potions that will form successful pair ith spell example input spells potions success output explanation th spell pairs successful st spell pairs successful nd spell pairs successful thus returned example input spells potions success output explanation th spell pairs successful st spell pairs successful nd spell pairs successful thus returned constraints spellslength potionslength spellsi potionsi success
sum multiples given positive integer find sum all integers range inclusive that divisible or return integer denoting sum all numbers given range satisfying constraint example input output explanation numbers range that divisible or sum these numbers example input output explanation numbers range that divisible or sum these numbers example input output explanation numbers range that divisible or sum these numbers constraints
minimum rounds complete all tasks given indexed integer array tasks where tasksi represents difficulty level task each round can complete either or tasks same difficulty level return minimum rounds required complete all tasks or if not possible complete all tasks example input tasks output explanation complete all tasks possible plan first round complete tasks difficulty level second round complete tasks difficulty level third round complete tasks difficulty level fourth round complete tasks difficulty level can be shown that all tasks cannot be completed fewer than rounds so answer example input tasks output explanation there only task difficulty level but each round can only complete either or tasks same difficulty level hence cannot complete all tasks and answer constraints taskslength tasksi
smallest missing nonnegative integer after operations given indexed integer array nums and integer value one operation can add or subtract value from any element nums example if nums and value can choose subtract value from nums make nums mex minimum excluded array smallest missing nonnegative integer example mex while mex return maximum mex nums after applying mentioned operation any number times example input nums value output explanation one can achieve this result applying following operations add value nums twice make nums subtract value from nums once make nums subtract value from nums twice make nums mex nums can be shown that maximum mex can achieve example input nums value output explanation one can achieve this result applying following operation subtract value from nums once make nums mex nums can be shown that maximum mex can achieve constraints numslength value numsi
champagne tower stack glasses pyramid where first row has glass second row has glasses and so until th row each glass holds one cup champagne then some champagne poured into first glass top when topmost glass full any excess liquid poured will fall equally glass immediately left and right when those glasses become full any excess champagne will fall equally left and right those glasses and so glass bottom row has its excess champagne fall floor example after one cup champagne poured top most glass full after two cups champagne poured two glasses second row half full after three cups champagne poured those two cups become full there full glasses total now after four cups champagne poured third row has middle glass half full and two outside glasses quarter full as pictured below now after pouring some nonnegative integer cups champagne return how full jth glass ith row both and indexed example input poured queryrow queryglass output explanation poured cup champange top glass tower which indexed as there will be no excess liquid so all glasses under top glass will remain empty example input poured queryrow queryglass output explanation poured cups champange top glass tower which indexed as there one cup excess liquid glass indexed as and glass indexed as will share excess liquid equally and each will get half cup champange example input poured queryrow queryglass output constraints poured queryglass queryrow
rearrange array maximize prefix score given indexed integer array nums can rearrange elements nums any order including given order let prefix be array containing prefix sums nums after rearranging other words prefixi sum elements from nums after rearranging score nums number positive integers array prefix return maximum score can achieve example input nums output explanation can rearrange array into nums prefix so score can be shown that maximum score can obtain example input nums output explanation any rearrangement array will result score constraints numslength numsi
solve equation solve given equation and return value form string xvalue equation contains only operation variable and its coefficient should return no solution if there no solution equation or infinite solutions if there infinite solutions equation if there exactly one solution equation ensure that value integer example input equation xxx output example input equation xx output infinite solutions example input equation xx output constraints equationlength equation has exactly one equation consists integers absolute value range without any leading zeros and variable
word pattern given pattern and string find if follows same pattern here follow means full match such that there bijection between letter pattern and nonempty word example input pattern abba dog cat cat dog output true example input pattern abba dog cat cat fish output false example input pattern aaaa dog cat cat dog output false constraints patternlength pattern contains only lowercase english letters slength contains only lowercase english letters and spaces does not contain any leading or trailing spaces all words separated single space
my calendar ii implementing program use as your calendar can add new event if adding event will not cause triple booking triple booking happens when three events have some nonempty intersection ie some moment common all three events event can be represented as pair integers start and end that represents booking halfopen interval start end range real numbers such that start end implement mycalendartwo class mycalendartwo initializes calendar object boolean bookint start int end returns true if event can be added calendar successfully without causing triple booking otherwise return false and do not add event calendar example input mycalendartwo book book book book book book output null true true true false true true explanation mycalendartwo mycalendartwo new mycalendartwo mycalendartwobook return true event can be booked mycalendartwobook return true event can be booked mycalendartwobook return true event can be double booked mycalendartwobook return false event cannot be booked because would result triple booking mycalendartwobook return true event can be booked as does not use time which already double booked mycalendartwobook return true event can be booked as time will be double booked third event time will be single booked and time will be double booked second event constraints start end most calls will be made book
sum kmirror numbers kmirror number positive integer without leading zeros that reads same both forward and backward base as well as basek example mirror number representation base and base and respectively which read same both forward and backward contrary not mirror number representation base which does not read same both forward and backward given base and number return sum smallest kmirror numbers example input output explanation smallest mirror numbers and their representations base listed as follows base base their sum example input output explanation smallest mirror numbers and their representations base listed as follows base base their sum example input output explanation smallest mirror numbers constraints
split string into max number unique substrings given string return maximum number unique substrings that given string can be split into can split string into any list nonempty substrings where concatenation substrings forms original string however must split substrings such that all them unique substring contiguous sequence characters within string example input ababccc output explanation one way split maximally ab cc splitting like cc not valid as have and multiple times example input aba output explanation one way split maximally ba example input aa output explanation impossible split string any further constraints slength contains only lower case english letters
trim binary search tree given root binary search tree and lowest and highest boundaries as low and high trim tree so that all its elements lies low high trimming tree should not change relative structure elements that will remain tree ie any nodes descendant should remain descendant can be proven that there unique answer return root trimmed binary search tree note that root may change depending given bounds example input root low high output null example input root nullnullnull low high output null constraints number nodes tree range nodeval value each node tree unique root guaranteed be valid binary search tree low high
minimum time type word using special typewriter there special typewriter lowercase english letters arranged circle pointer character can only be typed if pointer pointing that character pointer initially pointing character each second may perform one following operations move pointer one character counterclockwise or clockwise type character pointer currently given string word return minimum number seconds type out characters word example input word abc output explanation characters printed as follows type character second since pointer initially move pointer clockwise second type character second move pointer clockwise second type character second example input word bza output explanation characters printed as follows move pointer clockwise second type character second move pointer counterclockwise seconds type character second move pointer clockwise second type character second example input word zjpc output explanation characters printed as follows move pointer counterclockwise second type character second move pointer clockwise seconds type character second move pointer clockwise seconds type character second move pointer counterclockwise seconds type character second constraints wordlength word consists lowercase english letters
minimum number removals make mountain array may recall that array arr mountain array if and only if arrlength there exists some index indexed arrlength such that arr arr arri arri arri arri arrarrlength given integer array nums return minimum number elements remove make nums mountain array example input nums output explanation array itself mountain array so do not need remove any elements example input nums output explanation one solution remove elements indices and making array nums constraints numslength numsi guaranteed that can make mountain array out nums
substring largest variance variance string defined as largest difference between number occurrences any characters present string note two characters may or may not be same given string consisting lowercase english letters only return largest variance possible among all substrings substring contiguous sequence characters within string example input aababbb output explanation all possible variances along their respective substrings listed below variance substrings aa ab abab aababb ba bb and bbb variance substrings aab aba abb aabab ababb aababbb and bab variance substrings aaba ababbb abbb and babb variance substring babbb since largest possible variance return example input abcde output explanation no letter occurs more than once so variance every substring constraints slength consists lowercase english letters
keep multiplying found values two given array integers nums also given integer original which first number that needs be searched nums then do following steps if original found nums multiply two ie set original original otherwise stop process repeat this process new number as long as keep finding number return final value original example input nums original output explanation found nums multiplied obtain found nums multiplied obtain found nums multiplied obtain not found nums thus returned example input nums original output explanation not found nums thus returned constraints numslength numsi original
check if sentence pangram pangram sentence where every letter english alphabet appears least once given string sentence containing only lowercase english letters return true if sentence pangram or false otherwise example input sentence thequickbrownfoxjumpsoverthelazydog output true explanation sentence contains least one every letter english alphabet example input sentence leetcode output false constraints sentencelength sentence consists lowercase english letters
fizz buzz given integer return string array answer indexed where answeri fizzbuzz if divisible and answeri fizz if divisible answeri buzz if divisible answeri as string if none above conditions true example input output fizz example input output fizzbuzz example input output fizzbuzzfizzfizzbuzzfizzfizzbuzz constraints
unique binary search trees ii given integer return all structurally unique bsts binary search trees which has exactly nodes unique values from return answer any order example input output nullnullnullnullnullnull example input output constraints
number substrings only given binary string return number substrings all characters since answer may be too large return modulo example input output explanation there substring total only characters times times time example input output explanation substring shown times example input output explanation each substring contains only characters constraints slength si either or
smallest index equal value given indexed integer array nums return smallest index nums such that mod numsi or if such index does not exist mod denotes remainder when divided example input nums output explanation mod nums mod nums mod nums all indices have mod numsi so return smallest index example input nums output explanation mod nums mod nums mod nums mod nums only index which has mod numsi example input nums output explanation no index satisfies mod numsi constraints numslength numsi
bitwise and numbers range given two integers left and right that represent range left right return bitwise and all numbers this range inclusive example input left right output example input left right output example input left right output constraints left right
categorize box according criteria given four integers length width height and mass representing dimensions and mass box respectively return string representing category box box bulky if any dimensions box greater or equal or volume box greater or equal if mass box greater or equal heavy if box both bulky and heavy then its category both if box neither bulky nor heavy then its category neither if box bulky but not heavy then its category bulky if box heavy but not bulky then its category heavy note that volume box product its length width and height example input length width height mass output heavy explanation none dimensions box greater or equal its volume so cannot be categorized as bulky however mass so box heavy since box not bulky but heavy return heavy example input length width height mass output neither explanation none dimensions box greater or equal its volume so cannot be categorized as bulky its mass also less than so cannot be categorized as heavy either since its neither two above categories return neither constraints length width height mass
invert binary tree given root binary tree invert tree and return its root example input root output example input root output example input root output constraints number nodes tree range nodeval
longest univalue path given root binary tree return length longest path where each node path has same value this path may or may not pass through root length path between two nodes represented number edges between them example input root null output explanation shown image shows that longest path same value ie example input root null output explanation shown image shows that longest path same value ie constraints number nodes tree range nodeval depth tree will not exceed
array nesting given integer array nums length where nums permutation numbers range should build set sk numsk numsnumsk numsnumsnumsk subjected following rule first element sk starts selection element numsk index next element sk should be numsnumsk and then numsnumsnumsk and so stop adding right before duplicate element occurs sk return longest length set sk example input nums output explanation nums nums nums nums nums nums nums one longest sets sk nums nums nums nums example input nums output constraints numslength numsi numslength all values nums unique
maximum value after insertion given very large integer represented as string and integer digit digits and digit inclusive range and may represent negative number want maximize ns numerical value inserting anywhere decimal representation cannot insert left negative sign example if and would be best insert between and making if and would be best insert before first making return string representing maximum value after insertion example input output explanation result same regardless where insert example input output explanation can make one and largest those three constraints nlength digits range valid representation integer case negative will begin
largest odd number string given string num representing large integer return largestvalued odd integer as string that nonempty substring num or empty string if no odd integer exists substring contiguous sequence characters within string example input num output explanation only nonempty substrings and only odd number example input num output explanation there no odd numbers example input num output explanation already odd number constraints numlength num only consists digits and does not contain any leading zeros
combination sum iv
make number distinct characters equal given two indexed strings word and word move consists choosing two indices and such that wordlength and wordlength and swapping wordi wordj return true if possible get number distinct characters word and word be equal exactly one move return false otherwise example input word ac word output false explanation any pair swaps would yield two distinct characters first string and one second string example input word abcc word aab output true explanation swap index first string index second string resulting strings word abac and word cab which both have distinct characters example input word abcde word fghij output true explanation both resulting strings will have distinct characters regardless which indices swap constraints wordlength wordlength word and word consist only lowercase english letters
minimum absolute sum difference given two positive integer arrays nums and nums both length absolute sum difference arrays nums and nums defined as sum numsi numsi each indexed can replace most one element nums any other element nums minimize absolute sum difference return minimum absolute sum difference after replacing most one element array nums since answer may be large return modulo defined as if or if example input nums nums output explanation there two possible optimal solutions replace second element first or replace second element third both will yield absolute sum difference or example input nums nums output explanation nums equal nums so no replacement needed this will result absolute sum difference example input nums nums output explanation replace first element second this yields absolute sum difference constraints numslength numslength numsi numsi
sequentially ordinal rank tracker scenic location represented its name and attractiveness score where name unique string among all locations and score integer locations can be ranked from best worst higher score better location if scores two locations equal then location lexicographically smaller name better building system that tracks ranking locations system initially starting no locations supports adding scenic locations one time querying ith best location all locations already added where number times system has been queried including current query example when system queried th time returns th best location all locations already added note that test data generated so that any time number queries does not exceed number locations added system implement sortracker class sortracker initializes tracker system void addstring name int score adds scenic location name and score system string get queries and returns ith best location where number times this method has been invoked including this invocation example input sortracker add add get add get add get add get add get get bradford branford alps orland orlando alpine output null null null branford null alps null bradford null bradford null bradford orland explanation sortracker tracker new sortracker initialize tracker system trackeraddbradford add location namebradford and score system trackeraddbranford add location namebranford and score system trackerget sorted locations from best worst branford bradford note that branford precedes bradford due its higher score this st time get called so return best location branford trackeraddalps add location namealps and score system trackerget sorted locations branford alps bradford note that alps precedes bradford even though have same score this because alps lexicographically smaller than bradford return nd best location alps as nd time get called trackeraddorland add location nameorland and score system trackerget sorted locations branford alps bradford orland return bradford as rd time get called trackeraddorlando add location nameorlando and score system trackerget sorted locations branford orlando alps bradford orland return bradford trackeraddalpine add location namealpine and score system trackerget sorted locations branford orlando alpine alps bradford orland return bradford trackerget sorted locations branford orlando alpine alps bradford orland return orland constraints name consists lowercase english letters and unique among all locations namelength score any time number calls get does not exceed number calls add most calls total will be made add and get
count integers even digit sum given positive integer num return number positive integers less than or equal num whose digit sums even digit sum positive integer sum all its digits example input num output explanation only integers less than or equal whose digit sums even and example input num output explanation integers less than or equal whose digit sums even and constraints num
gas station there gas stations along circular route where amount gas ith station gasi have car unlimited gas tank and costs costi gas travel from ith station its next th station begin journey empty tank one gas stations given two integer arrays gas and cost return starting gas stations index if can travel around circuit once clockwise direction otherwise return if there exists solution guaranteed be unique example input gas cost output explanation start station index and fill up unit gas your tank travel station your tank travel station your tank travel station your tank travel station your tank travel station cost your gas just enough travel back station therefore return as starting index example input gas cost output explanation cant start station or as there not enough gas travel next station lets start station and fill up unit gas your tank travel station your tank travel station your tank cannot travel back station as requires unit gas but only have therefore cant travel around circuit once no matter where start constraints gaslength costlength gasi costi
bricks falling when hit given binary grid where each represents brick and represents empty space brick stable if directly connected top grid or least one other brick its four adjacent cells stable also given array hits which sequence erasures want apply each time want erase brick location hitsi rowi coli brick that location if exists will disappear some other bricks may no longer be stable because that erasure and will fall once brick falls immediately erased from grid ie does not land other stable bricks return array result where each resulti number bricks that will fall after ith erasure applied note that erasure may refer location no brick and if does no bricks drop example input grid hits output explanation starting grid erase underlined brick resulting grid two underlined bricks no longer stable as no longer connected top nor adjacent another stable brick so will fall resulting grid hence result example input grid hits output explanation starting grid erase underlined brick resulting grid all remaining bricks still stable so no bricks fall grid remains same next erase underlined brick resulting grid once again all remaining bricks still stable so no bricks fall hence result constraints gridlength gridilength gridij or hitslength hitsilength xi yi all xi yi unique
validate stack sequences given two integer arrays pushed and popped each distinct values return true if this could have been result sequence push and pop operations initially empty stack or false otherwise example input pushed popped output true explanation might do following sequence push push push push pop push pop pop pop pop example input pushed popped output false explanation cannot be popped before constraints pushedlength pushedi all elements pushed unique poppedlength pushedlength popped permutation pushed
lowest common ancestor deepest leaves given root binary tree return lowest common ancestor its deepest leaves recall that node binary tree leaf if and only if has no children depth root tree if depth node depth each its children lowest common ancestor set nodes node largest depth such that every node subtree root example input root nullnull output explanation return node value colored yellow diagram nodes coloured blue deepest leafnodes tree note that nodes and also leaf nodes but depth them but depth nodes and example input root output explanation root deepest node tree and its lca itself example input root null output explanation deepest leaf node tree lca one node itself constraints number nodes tree will be range nodeval values nodes tree unique note this question same as httpsleetcodecomproblemssmallestsubtreewithallthedeepestnodes
find difference given two strings and string generated random shuffling string and then add one more letter random position return letter that added example input abcd abcde output explanation letter that added example input output constraints slength tlength slength and consist lowercase english letters
asteroid collision given array asteroids integers representing asteroids row each asteroid absolute value represents its size and sign represents its direction positive meaning right negative meaning left each asteroid moves same speed find out state asteroids after all collisions if two asteroids meet smaller one will explode if both same size both will explode two asteroids moving same direction will never meet example input asteroids output explanation and collide resulting and never collide example input asteroids output explanation and collide exploding each other example input asteroids output explanation and collide resulting and collide resulting constraints asteroidslength asteroidsi asteroidsi
minimum operations reduce integer given positive integer can do following operation any number times add or subtract power from return minimum number operations make equal number power if where example input output explanation can do following operations add so now subtract from so now subtract from so now can be shown that minimum number operations need make equal example input output explanation can do following operations add so now add so now subtract from so now so minimum number operations constraints
permutation sequence set contains total unique permutations listing and labeling all permutations order get following sequence given and return kth permutation sequence example input output example input output example input output constraints
binary subarrays sum given binary array nums and integer goal return number nonempty subarrays sum goal subarray contiguous part array example input nums goal output explanation subarrays bolded and underlined below example input nums goal output constraints numslength numsi either or goal numslength
largest sum averages given integer array nums and integer can partition array into most nonempty adjacent subarrays score partition sum averages each subarray note that partition must use every integer nums and that score not necessarily integer return maximum score can achieve all possible partitions answers within actual answer will be accepted example input nums output explanation best choice partition nums into answer could have also partitioned nums into example that partition would lead score which worse example input nums output constraints numslength numsi numslength
search binary search tree given root binary search tree bst and integer val find node bst that nodes value equals val and return subtree rooted that node if such node does not exist return null example input root val output example input root val output constraints number nodes tree range nodeval root binary search tree val
russian doll envelopes given array integers envelopes where envelopesi wi hi represents width and height envelope one envelope can fit into another if and only if both width and height one envelope greater than other envelopes width and height return maximum number envelopes can russian doll ie put one inside other note cannot rotate envelope example input envelopes output explanation maximum number envelopes can russian doll example input envelopes output constraints envelopeslength envelopesilength wi hi
number distinct averages given indexed integer array nums even length as long as nums not empty must repetitively find minimum number nums and remove find maximum number nums and remove calculate average two removed numbers average two numbers and example average and return number distinct averages calculated using above process note that when there tie minimum or maximum number any can be removed example input nums output explanation remove and and average now nums remove and average and nums remove and and average since there distinct numbers among and return example input nums output explanation there only one average be calculated after removing and so return constraints numslength numslength even numsi
maximum number words found sentences sentence list words that separated single space no leading or trailing spaces given array strings sentences where each sentencesi represents single sentence return maximum number words that appear single sentence example input sentences alice and bob love leetcode think so too this great thanks very much output explanation first sentence alice and bob love leetcode has words total second sentence think so too has words total third sentence this great thanks very much has words total thus maximum number words single sentence comes from third sentence which has words example input sentences please wait continue fight continue win output explanation possible that multiple sentences contain same number words this example second and third sentences underlined have same number words constraints sentenceslength sentencesilength sentencesi consists only lowercase english letters and only sentencesi does not have leading or trailing spaces all words sentencesi separated single space
groups specialequivalent strings given array strings same length words one move can swap any two even indexed characters or any two odd indexed characters string wordsi two strings wordsi and wordsj specialequivalent if after any number moves wordsi wordsj example wordsi zzxy and wordsj xyzz specialequivalent because may make moves zzxy xzzy xyzz group specialequivalent strings from words nonempty subset words such that every pair strings group special equivalent and group largest size possible ie there not string wordsi not group such that wordsi specialequivalent every string group return number groups specialequivalent strings from words example input words abcdcdabcbadxyzzzzxyzzyx output explanation one group abcd cdab cbad since all pairwise special equivalent and none other strings all pairwise special equivalent these other two groups xyzz zzxy and zzyx note that particular zzxy not special equivalent zzyx example input words abcacbbacbcacabcba output constraints wordslength wordsilength wordsi consist lowercase english letters all strings same length
word ladder transformation sequence from word beginword word endword using dictionary wordlist sequence words beginword sk such that every adjacent pair words differs single letter every si wordlist note that beginword does not need be wordlist sk endword given two words beginword and endword and dictionary wordlist return number words shortest transformation sequence from beginword endword or if no such sequence exists example input beginword hit endword cog wordlist hotdotdoglotlogcog output explanation one shortest transformation sequence hit hot dot dog cog which words long example input beginword hit endword cog wordlist hotdotdoglotlog output explanation endword cog not wordlist therefore there no valid transformation sequence constraints beginwordlength endwordlength beginwordlength wordlistlength wordlistilength beginwordlength beginword endword and wordlisti consist lowercase english letters beginword endword all words wordlist unique
fair candy swap alice and bob have different total number candies given two integer arrays alicesizes and bobsizes where alicesizesi number candies ith box candy that alice has and bobsizesj number candies jth box candy that bob has since friends would like exchange one candy box each so that after exchange both have same total amount candy total amount candy person has sum number candies each box have return integer array answer where answer number candies box that alice must exchange and answer number candies box that bob must exchange if there multiple answers may return any one them guaranteed that least one answer exists example input alicesizes bobsizes output example input alicesizes bobsizes output example input alicesizes bobsizes output constraints alicesizeslength bobsizeslength alicesizesi bobsizesj alice and bob have different total number candies there will be least one valid answer given input
user activity past days sql schema table activity column name type userid int sessionid int activitydate date activitytype enum there no primary key this table may have duplicate rows activitytype column enum type opensession endsession scrolldown sendmessage table shows user activities social media website note that each session belongs exactly one user write sql query find daily active user count period days ending inclusively user active someday if made least one activity that day return result table any order query result format following example example input activity table userid sessionid activitydate activitytype opensession scrolldown endsession opensession sendmessage endsession opensession sendmessage endsession opensession endsession output day activeusers explanation note that do not care about days zero active users
sum multiplicity given integer array arr and integer target return number tuples such that and arri arrj arrk target as answer can be very large return modulo example input arr target output explanation enumerating values arri arrj arrk occurs times occurs times occurs times occurs times example input arr target output explanation arri arrj arrk occurs times choose one from ways and two from ways example input arr target output explanation occured one time array so return constraints arrlength arri target
find if path exists graph there bidirectional graph vertices where each vertex labeled from inclusive edges graph represented as integer array edges where each edgesi ui vi denotes bidirectional edge between vertex ui and vertex vi every vertex pair connected most one edge and no vertex has edge itself want determine if there valid path that exists from vertex source vertex destination given edges and integers source and destination return true if there valid path from source destination or false otherwise example input edges source destination output true explanation there two paths from vertex vertex example input edges source destination output false explanation there no path from vertex vertex constraints edgeslength edgesilength ui vi ui vi source destination there no duplicate edges there no self edges
minimum number food buckets feed hamsters given indexed string hamsters where hamstersi either indicating that there hamster index or indicating that index empty will add some number food buckets empty indices order feed hamsters hamster can be fed if there least one food bucket its left or its right more formally hamster index can be fed if place food bucket index andor index return minimum number food buckets should place empty indices feed all hamsters or if impossible feed all them example input hamsters hh output explanation place two food buckets indices and can be shown that if place only one food bucket one hamsters will not be fed example input hamsters hh output explanation place one food bucket index example input hamsters hhh output explanation if place food bucket every empty index as shown hamster index will not be able eat constraints hamsterslength hamstersi eitherh or
make xor all segments equal zero given array nums and integer xor segment left right where left right xor all elements indices between left and right inclusive numsleft xor numsleft xor xor numsright return minimum number elements change array such that xor all segments size equal zero example input nums output explanation modify array from from example input nums output explanation modify array from example input nums output explanation modify array from constraints numslength numsi
nth magical number positive integer magical if divisible either or given three integers and return nth magical number since answer may be very large return modulo example input output example input output constraints
sum square numbers given nonnegative integer decide whether therere two integers and such that example input output true explanation example input output false constraints
sum given array nums integers return array all unique quadruplets numsa numsb numsc numsd such that and distinct numsa numsb numsc numsd target may return answer any order example input nums target output example input nums target output constraints numslength numsi target
nearest exit from entrance maze given matrix maze indexed empty cells represented as and walls represented as also given entrance maze where entrance entrancerow entrancecol denotes row and column cell initially standing one step can move one cell up down left or right cannot step into cell wall and cannot step outside maze your goal find nearest exit from entrance exit defined as empty cell that border maze entrance does not count as exit return number steps shortest path from entrance nearest exit or if no such path exists example input maze entrance output explanation there exits this maze and initially entrance cell can reach moving steps left can reach moving step up impossible reach from entrance thus nearest exit which step away example input maze entrance output explanation there exit this maze does not count as exit since entrance cell initially entrance cell can reach moving steps right thus nearest exit which steps away example input maze entrance output explanation there no exits this maze constraints mazelength mazeilength mazeij either or entrancelength entrancerow entrancecol entrance will always be empty cell
distinct echo substrings return number distinct nonempty substrings text that can be written as concatenation some string itself ie can be written as where some string example input text abcabcabc output explanation substrings abcabc bcabca and cabcab example input text leetcodeleetcode output explanation substrings ee and leetcodeleetcode constraints textlength text has only lowercase english letters
distance between bus stops bus has stops numbered from that form circle know distance between all pairs neighboring stops where distancei distance between stops number and bus goes along both directions ie clockwise and counterclockwise return shortest distance between given start and destination stops example input distance start destination output explanation distance between and or minimum example input distance start destination output explanation distance between and or minimum example input distance start destination output explanation distance between and or minimum constraints distancelength start destination distancei
promise pool given array asyncronous functions functions and pool limit return asyncronous function promisepool should return promise that resolves when all input functions resolve pool limit defined as maximum number promises that can be pending once promisepool should begin execution as many functions as possible and continue executing new functions when old promises resolve promisepool should execute functionsi then functionsi then functionsi etc when last promise resolves promisepool should also resolve example if promisepool will execute one function time series however if first executes two functions when either two functions resolve rd function should be executed if available and so until there no functions left execute can assume all functions never reject acceptable promisepool return promise that resolves any value example input functions new promiseres settimeoutres new promiseres settimeoutres new promiseres settimeoutres output explanation three functions passed sleep ms ms and ms respectively resolve ms ms and ms respectively returned promise resolves ms first functions executed pool size limit reached st function resolves and rd function executed pool size nd function resolves there nothing left execute pool size rd function resolves pool size zero so returned promise also resolves example input functions new promiseres settimeoutres new promiseres settimeoutres new promiseres settimeoutres output explanation three input promises resolve ms ms and ms respectively returned promise resolves ms all functions executed pool limit never met rd function resolves pool size st function resolved pool size nd function resolves pool size so returned promise also resolves example input functions new promiseres settimeoutres new promiseres settimeoutres new promiseres settimeoutres output explanation three input promises resolve ms ms and ms respectively returned promise resolves ms st function executed pool size st function resolves and nd function executed pool size nd function resolves and rd function executed pool size rd function resolves pool size so returned promise resolves constraints functionslength
remove boxes given several boxes different colors represented different positive numbers may experience several rounds remove boxes until there no box left each time can choose some continuous boxes same color ie composed boxes remove them and get points return maximum points can get example input boxes output explanation points points points points example input boxes output example input boxes output constraints boxeslength boxesi
find kth largest xor coordinate value given matrix size consisting nonnegative integers also given integer value coordinate matrix xor all matrixij where and indexed find kth largest value indexed all coordinates matrix example input matrix output explanation value coordinate xor which largest value example input matrix output explanation value coordinate which nd largest value example input matrix output explanation value coordinate xor which rd largest value constraints matrixlength matrixilength matrixij
students and examinations sql schema table students column name type studentid int studentname varchar studentid primary key this table each row this table contains id and name one student school table subjects column name type subjectname varchar subjectname primary key this table each row this table contains name one subject school table examinations column name type studentid int subjectname varchar there no primary key this table may contain duplicates each student from students table takes every course from subjects table each row this table indicates that student id studentid attended exam subjectname write sql query find number times each student attended each exam return result table ordered studentid and subjectname query result format following example example input students table studentid studentname alice bob john alex subjects table subjectname math physics programming examinations table studentid subjectname math physics programming programming physics math math programming physics math math output studentid studentname subjectname attendedexams alice math alice physics alice programming bob math bob physics bob programming alex math alex physics alex programming john math john physics john programming explanation result table should contain all students and all subjects alice attended math exam times physics exam times and programming exam time bob attended math exam time programming exam time and did not attend physics exam alex did not attend any exams john attended math exam time physics exam time and programming exam time
construct target array multiple sums given array target integers from starting array arr consisting may perform following procedure let be sum all elements currently your array choose index such that and set value arr index may repeat this procedure as many times as needed return true if possible construct target array from arr otherwise return false example input target output true explanation start arr sum choose index sum choose index sum choose index done example input target output false explanation impossible create target array from example input target output true constraints targetlength targeti
pascals triangle ii given integer rowindex return rowindexth indexed row pascals triangle pascals triangle each number sum two numbers directly above as shown example input rowindex output example input rowindex output example input rowindex output constraints rowindex follow up could optimize your algorithm use only orowindex extra space
design food rating system design food rating system that can do following modify rating food item listed system return highestrated food item type cuisine system implement foodratings class foodratingsstring foods string cuisines int ratings initializes system food items described foods cuisines and ratings all which have length foodsi name ith food cuisinesi type cuisine ith food and ratingsi initial rating ith food void changeratingstring food int newrating changes rating food item name food string highestratedstring cuisine returns name food item that has highest rating given type cuisine if there tie return item lexicographically smaller name note that string lexicographically smaller than string if comes before dictionary order that either prefix or if first position such that xi yi then xi comes before yi alphabetic order example input foodratings highestrated highestrated changerating highestrated changerating highestrated kimchi miso sushi moussaka ramen bulgogi korean japanese japanese greek japanese korean korean japanese sushi japanese ramen japanese output null kimchi ramen null sushi null ramen explanation foodratings foodratings new foodratingskimchi miso sushi moussaka ramen bulgogi korean japanese japanese greek japanese korean foodratingshighestratedkorean return kimchi kimchi highest rated korean food rating foodratingshighestratedjapanese return ramen ramen highest rated japanese food rating foodratingschangeratingsushi sushi now has rating foodratingshighestratedjapanese return sushi sushi highest rated japanese food rating foodratingschangeratingramen ramen now has rating foodratingshighestratedjapanese return ramen both sushi and ramen have rating however ramen lexicographically smaller than sushi constraints foodslength cuisineslength ratingslength foodsilength cuisinesilength foodsi cuisinesi consist lowercase english letters ratingsi all strings foods distinct food will be name food item system across all calls changerating cuisine will be type cuisine least one food item system across all calls highestrated most calls total will be made changerating and highestrated
number complement complement integer integer get when flip all and all its binary representation example integer binary and its complement which integer given integer num return its complement example input num output explanation binary representation no leading zero bits and its complement so need output example input num output explanation binary representation no leading zero bits and its complement so need output constraints num note this question same as httpsleetcodecomproblemscomplementofbaseinteger
palindrome linked list given head singly linked list return true if palindrome or false otherwise example input head output true example input head output false constraints number nodes list range nodeval follow up could do time and space
smallest missing genetic value each subtree there family tree rooted consisting nodes numbered given indexed integer array parents where parentsi parent node since node root parents there genetic values each represented integer inclusive range given indexed integer array nums where numsi distinct genetic value node return array ans length where ansi smallest genetic value that missing from subtree rooted node subtree rooted node contains node and all its descendant nodes example input parents nums output explanation answer each subtree calculated as follows subtree contains nodes values smallest missing value subtree contains only node value smallest missing value subtree contains nodes values smallest missing value subtree contains only node value smallest missing value example input parents nums output explanation answer each subtree calculated as follows subtree contains nodes values smallest missing value subtree contains nodes values smallest missing value subtree contains only node value smallest missing value subtree contains nodes values smallest missing value subtree contains only node value smallest missing value subtree contains only node value smallest missing value example input parents nums output explanation value missing from all subtrees constraints parentslength numslength parentsi parents parents represents valid tree numsi each numsi distinct
design memory allocator given integer representing size indexed memory array all memory units initially free have memory allocator following functionalities allocate block size consecutive free memory units and assign id mid free all memory units given id mid note that multiple blocks can be allocated same mid should free all memory units mid even if allocated different blocks implement allocator class allocatorint initializes allocator object memory array size int allocateint size int mid find leftmost block size consecutive free memory units and allocate id mid return blocks first index if such block does not exist return int freeint mid free all memory units id mid return number memory units have freed example input allocator allocate allocate allocate free allocate allocate allocate free allocate free output null explanation allocator loc new allocator initialize memory array size all memory units initially free locallocate leftmost blocks first index memory array becomes return locallocate leftmost blocks first index memory array becomes return locallocate leftmost blocks first index memory array becomes return locfree free all memory units mid memory array becomes return since there only unit mid locallocate leftmost blocks first index memory array becomes return locallocate leftmost blocks first index memory array becomes return locallocate leftmost blocks first index memory array becomes return locfree free all memory units mid memory array becomes return since there units mid locallocate can not find any free block consecutive free memory units so return locfree free all memory units mid memory array remains same since there no memory unit mid return constraints size mid most calls will be made allocate and free
capitalize title given string title consisting one or more words separated single space where each word consists english letters capitalize string changing capitalization each word such that if length word or letters change all letters lowercase otherwise change first letter uppercase and remaining letters lowercase return capitalized title example input title capitalize title output capitalize title explanation since all words have length least first letter each word uppercase and remaining letters lowercase example input title first letter each word output first letter each word explanation word has length so all lowercase remaining words have length least so first letter each remaining word uppercase and remaining letters lowercase example input title love leetcode output love leetcode explanation word has length so lowercase remaining words have length least so first letter each remaining word uppercase and remaining letters lowercase constraints titlelength title consists words separated single space without any leading or trailing spaces each word consists uppercase and lowercase english letters and nonempty
valid permutations di sequence given string length where si either means decreasing or means increasing permutation perm integers all integers range called valid permutation if all valid if si then permi permi and if si then permi permi return number valid permutations perm since answer may be large return modulo example input did output explanation valid permutations example input output constraints slength si either or
kth factor given two positive integers and factor integer defined as integer where consider list all factors sorted ascending order return kth factor this list or return if has less than factors example input output explanation factors list rd factor example input output explanation factors list nd factor example input output explanation factors list there only factors should return constraints follow up could solve this problem less than complexity
booking concert tickets groups concert hall has rows numbered from each seats numbered from need design ticketing system that can allocate seats following cases if group spectators can sit together row if every member group spectators can get seat may or may not sit together note that spectators very picky hence will book seats only if each member their group can get seat row number less than or equal maxrow maxrow can vary from group group case there multiple rows choose from row smallest number chosen if there multiple seats choose same row seat smallest number chosen implement bookmyshow class bookmyshowint int initializes object as number rows and as number seats per row int gatherint int maxrow returns array length denoting row and seat number respectively first seat being allocated members group who must sit together other words returns smallest possible and such that all seats valid and empty row and maxrow returns case not possible allocate seats group boolean scatterint int maxrow returns true if all members group can be allocated seats rows maxrow who may or may not sit together if seats can be allocated allocates seats group smallest row numbers and smallest possible seat numbers each row otherwise returns false example input bookmyshow gather gather scatter scatter output null true false explanation bookmyshow bms new bookmyshow there rows seats each bmsgather return group books seats row bmsgather return there only seat left row so not possible book consecutive seats bmsscatter return true group books seat row and seats row bmsscatter return false there only one seat left hall constraints maxrow most calls total will be made gather and scatter
people whose list favorite companies not subset another list given array favoritecompanies where favoritecompaniesi list favorites companies ith person indexed from return indices people whose list favorite companies not subset any other list favorites companies must return indices increasing order example input favoritecompanies leetcodegooglefacebookgooglemicrosoftgooglefacebookgoogleamazon output explanation person index has favoritecompaniesgooglefacebook which subset favoritecompaniesleetcodegooglefacebook corresponding person index person index has favoritecompaniesgoogle which subset favoritecompaniesleetcodegooglefacebook and favoritecompaniesgooglemicrosoft other lists favorite companies not subset another list therefore answer example input favoritecompanies leetcodegooglefacebookleetcodeamazonfacebookgoogle output explanation this case favoritecompaniesfacebookgoogle subset favoritecompaniesleetcodegooglefacebook therefore answer example input favoritecompanies leetcodegooglefacebookamazon output constraints favoritecompanieslength favoritecompaniesilength favoritecompaniesijlength all strings favoritecompaniesi distinct all lists favorite companies distinct that if sort alphabetically each list then favoritecompaniesi favoritecompaniesj all strings consist lowercase english letters only
maximum white tiles covered carpet given integer array tiles where tilesi li ri represents that every tile range li ri colored white also given integer carpetlen length single carpet that can be placed anywhere return maximum number white tiles that can be covered carpet example input tiles carpetlen output explanation place carpet starting tile covers white tiles so return note that there may be other places where carpet covers white tiles can be shown that carpet cannot cover more than white tiles example input tiles carpetlen output explanation place carpet starting tile covers white tiles so return constraints tileslength tilesilength li ri carpetlen tiles nonoverlapping
different ways add parentheses given string expression numbers and operators return all possible results from computing all different possible ways group numbers and operators may return answer any order test cases generated such that output values fit bit integer and number different results does not exceed example input expression output explanation example input expression output explanation constraints expressionlength expression consists digits and operator and all integer values input expression range
super washing machines have super washing machines line initially each washing machine has some dresses or empty each move could choose any washing machines and pass one dress each washing machine one its adjacent washing machines same time given integer array machines representing number dresses each washing machine from left right line return minimum number moves make all washing machines have same number dresses if not possible do return example input machines output explanation st move nd move rd move example input machines output explanation st move nd move example input machines output explanation its impossible make all three washing machines have same number dresses constraints machineslength machinesi
count ways build good strings given integers zero one low and high can construct string starting empty string and then each step perform either following append character zero times append character one times this can be performed any number times good string string constructed above process having length between low and high inclusive return number different good strings that can be constructed satisfying these properties since answer can be large return modulo example input low high zero one output explanation one possible valid good string can be constructed as follows all binary strings from good strings this example example input low high zero one output explanation good strings and constraints low high zero one low
masking personal information given personal information string representing either email address or phone number return masked personal information using below rules email address email address name consisting uppercase and lowercase english letters followed symbol followed domain consisting uppercase and lowercase english letters dot somewhere middle not first or last character mask email uppercase letters name and domain must be converted lowercase letters middle letters name ie all but first and last letters must be replaced asterisks phone number phone number formatted as follows phone number contains digits last digits make up local number remaining digits beginning make up country code separation characters from set separate above digits some way mask phone number remove all separation characters masked phone number should have form xxxx if country code has digits xxxx if country code has digit xxxx if country code has digits xxxx if country code has digits xxxx last digits local number example input leetcodeleetcodecom output leleetcodecom explanation email address name and domain converted lowercase and middle name replaced asterisks example input abqqcom output abqqcom explanation email address name and domain converted lowercase and middle name replaced asterisks note that even though ab characters still must have asterisks middle example input output explanation phone number there digits so local number digits and country code digits thus resulting masked number constraints either valid email or phone number if email slength consists uppercase and lowercase english letters and exactly one symbol and symbol if phone number slength consists digits spaces and symbols and
strong password checker password considered strong if below conditions all met has least characters and most characters contains least one lowercase letter least one uppercase letter and least one digit does not contain three repeating characters row ie baaabb weak but baaba strong given string password return minimum number steps required make password strong if password already strong return one step can insert one character password delete one character from password or replace one character password another character example input password output example input password aa output example input password cd output constraints passwordlength password consists letters digits dot or exclamation mark
two best nonoverlapping events given indexed integer array events where eventsi starttimei endtimei valuei ith event starts starttimei and ends endtimei and if attend this event will receive value valuei can choose most two nonoverlapping events attend such that sum their values maximized return this maximum sum note that start time and end time inclusive that cannot attend two events where one them starts and other ends same time more specifically if attend event end time next event must start or after example input events output explanation choose green events and sum example input events output explanation choose event sum example input events output explanation choose events and sum constraints eventslength eventsilength starttimei endtimei valuei
combination sum given array distinct integers candidates and target integer target return list all unique combinations candidates where chosen numbers sum target may return combinations any order same number may be chosen from candidates unlimited number times two combinations unique if frequency least one chosen numbers different test cases generated such that number unique combinations that sum up target less than combinations given input example input candidates target output explanation and candidates and note that can be used multiple times candidate and these only two combinations example input candidates target output example input candidates target output constraints candidateslength candidatesi all elements candidates distinct target
minimum money required before transactions given indexed integer array transactions where transactionsi costi cashbacki array describes transactions where each transaction must be completed exactly once some order any given moment have certain amount money order complete transaction money costi must hold true after performing transaction money becomes money costi cashbacki return minimum amount money required before any transaction so that all transactions can be completed regardless order transactions example input transactions output explanation starting money transactions can be performed any order can be shown that starting money will fail complete all transactions some order example input transactions output explanation if transactions order minimum money required complete transactions if transactions order minimum money required complete transactions thus starting money transactions can be performed any order constraints transactionslength transactionsilength costi cashbacki
minimum difference between highest and lowest scores given indexed integer array nums where numsi represents score ith student also given integer pick scores any students from array so that difference between highest and lowest scores minimized return minimum possible difference example input nums output explanation there one way pick scores one student difference between highest and lowest score minimum possible difference example input nums output explanation there six ways pick scores two students difference between highest and lowest score difference between highest and lowest score difference between highest and lowest score difference between highest and lowest score difference between highest and lowest score difference between highest and lowest score minimum possible difference constraints numslength numsi
consecutive numbers sql schema table logs column name type id int num varchar id primary key this table id autoincrement column write sql query find all numbers that appear least three times consecutively return result table any order query result format following example example input logs table id num output consecutivenums explanation only number that appears consecutively least three times
count triplets that can form two arrays equal xor given array integers arr want select three indices and where arrlength lets define and as follows arri arri arrj arrj arrj arrk note that denotes bitwisexor operation return number triplets and where example input arr output explanation triplets and example input arr output constraints arrlength arri
remove duplicates from sorted list ii given head sorted linked list delete all nodes that have duplicate numbers leaving only distinct numbers from original list return linked list sorted as well example input head output example input head output constraints number nodes list range nodeval list guaranteed be sorted ascending order
poor pigs there buckets buckets liquid where exactly one buckets poisonous figure out which one poisonous feed some number poor pigs liquid see whether will die or not unfortunately only have minutestotest minutes determine which bucket poisonous can feed pigs according these steps choose some live pigs feed each pig choose which buckets feed pig will consume all chosen buckets simultaneously and will take no time each pig can feed from any number buckets and each bucket can be fed from any number pigs wait minutestodie minutes may not feed any other pigs during this time after minutestodie minutes have passed any pigs that have been fed poisonous bucket will die and all others will survive repeat this process until run out time given buckets minutestodie and minutestotest return minimum number pigs needed figure out which bucket poisonous within allotted time example input buckets minutestodie minutestotest output explanation can determine poisonous bucket as follows time feed first pig buckets and and feed second pig buckets and time there possible outcomes if only first pig dies then bucket must be poisonous if only second pig dies then bucket must be poisonous if both pigs die then bucket must be poisonous if neither pig dies then bucket must be poisonous example input buckets minutestodie minutestotest output explanation can determine poisonous bucket as follows time feed first pig bucket and feed second pig bucket time there possible outcomes if either pig dies then poisonous bucket one fed if neither pig dies then feed first pig bucket and feed second pig bucket time one two pigs must die and poisonous bucket one fed constraints buckets minutestodie minutestotest
surface area shapes given grid where have placed some cubes each value gridij represents tower cubes placed top cell after placing these cubes have decided glue any directly adjacent cubes each other forming several irregular shapes return total surface area resulting shapes note bottom face each shape counts toward its surface area example input grid output example input grid output example input grid output constraints gridlength gridilength gridij
find right interval given array intervals where intervalsi starti endi and each starti unique right interval interval interval such that startj endi and startj minimized note that may equal return array right interval indices each interval if no right interval exists interval then put index example input intervals output explanation there only one interval collection so outputs example input intervals output explanation there no right interval right interval since start smallest start that end right interval since start smallest start that end example input intervals output explanation there no right interval and right interval since start smallest start that end constraints intervalslength intervalsilength starti endi start point each interval unique
sum prefix scores strings given array words size consisting nonempty strings define score string word as number strings wordsi such that word prefix wordsi example if words ab abc cab then score ab since ab prefix both ab and abc return array answer size where answeri sum scores every nonempty prefix wordsi note that string considered as prefix itself example input words abcabbcb output explanation answer each string following abc has prefixes ab and abc there strings prefix strings prefix ab and string prefix abc total answer ab has prefixes and ab there strings prefix and strings prefix ab total answer bc has prefixes and bc there strings prefix and string prefix bc total answer has prefix there strings prefix total answer example input words abcd output explanation abcd has prefixes ab abc and abcd each prefix has score one so total answer constraints wordslength wordsilength wordsi consists lowercase english letters
number ways wear different hats each other there people and types hats labeled from given integer array hats where hatsi list all hats preferred ith person return number ways that people wear different hats each other since answer may be too large return modulo example input hats output explanation there only one way choose hats given conditions first person choose hat second person choose hat and last one hat example input hats output explanation there ways choose hats and example input hats output explanation each person can choose hats labeled from number permutations constraints hatslength hatsilength hatsij hatsi contains list unique integers
cheapest flights within stops there cities connected some number flights given array flights where flightsi fromi toi pricei indicates that there flight from city fromi city toi cost pricei also given three integers src dst and return cheapest price from src dst most stops if there no such route return example input flights src dst output explanation graph shown above optimal path most stop from city marked red and has cost note that path through cities cheaper but invalid because uses stops example input flights src dst output explanation graph shown above optimal path most stop from city marked red and has cost example input flights src dst output explanation graph shown above optimal path no stops from city marked red and has cost constraints flightslength flightsilength fromi toi fromi toi pricei there will not be any multiple flights between two cities src dst src dst
search rotated sorted array ii there integer array nums sorted nondecreasing order not necessarily distinct values before being passed your function nums rotated unknown pivot index numslength such that resulting array numsk numsk numsn nums nums numsk indexed example might be rotated pivot index and become given array nums after rotation and integer target return true if target nums or false if not nums must decrease overall operation steps as much as possible example input nums target output true example input nums target output false constraints numslength numsi nums guaranteed be rotated some pivot target follow up this problem similar search rotated sorted array but nums may contain duplicates would this affect runtime complexity how and why
find good days rob bank and gang thieves planning robbing bank given indexed integer array security where securityi number guards duty ith day days numbered starting from also given integer time ith day good day rob bank if there least time days before and after ith day number guards bank time days before nonincreasing and number guards bank time days after nondecreasing more formally this means day good day rob bank if and only if securityi time securityi time securityi securityi time securityi time return list all days indexed that good days rob bank order that days returned does not matter example input security time output explanation day have security security security security security day have security security security security security no other days satisfy this condition so days and only good days rob bank example input security time output explanation since time equals every day good day rob bank so return every day example input security time output explanation no day has days before that have nonincreasing number guards thus no day good day rob bank so return empty list constraints securitylength securityi time
divide array into equal pairs given integer array nums consisting integers need divide nums into pairs such that each element belongs exactly one pair elements present pair equal return true if nums can be divided into pairs otherwise return false example input nums output true explanation there elements nums so should be divided into pairs if nums divided into pairs and will satisfy all conditions example input nums output false explanation there no way divide nums into pairs such that pairs satisfy every condition constraints numslength numsi
longest nice subarray given array nums consisting positive integers call subarray nums nice if bitwise and every pair elements that different positions subarray equal return length longest nice subarray subarray contiguous part array note that subarrays length always considered nice example input nums output explanation longest nice subarray this subarray satisfies conditions and and and can be proven that no longer nice subarray can be obtained so return example input nums output explanation length longest nice subarray any subarray length can be chosen constraints numslength numsi
surrounded regions given matrix board containing and capture all regions that directionally surrounded region captured flipping all os into xs that surrounded region example input board xxxxxooxxxoxxoxx output xxxxxxxxxxxxxoxx explanation notice that should not be flipped if border or adjacent that should not be flipped bottom border so not flipped other three form surrounded region so flipped example input board output constraints boardlength boardilength boardij or
count array pairs divisible given indexed integer array nums length and integer return number pairs such that and numsi numsj divisible example input nums output explanation pairs indices whose corresponding products divisible and their products and respectively other pairs such as and have products and respectively which not divisible example input nums output explanation there does not exist any pair indices whose corresponding product divisible constraints numslength numsi
maximum trailing zeros cornered path given integer array grid size where each cell contains positive integer cornered path defined as set adjacent cells most one turn more specifically path should exclusively move either horizontally or vertically up turn if there one without returning previously visited cell after turn path will then move exclusively alternate direction move vertically if moved horizontally and vice versa also without returning previously visited cell product path defined as product all values path return maximum number trailing zeros product cornered path found grid note horizontal movement means moving either left or right direction vertical movement means moving either up or down direction example input grid output explanation grid left shows valid cornered path has product which has trailing zeros can be shown that this maximum trailing zeros product cornered path grid middle not cornered path as has more than one turn grid right not cornered path as requires return previously visited cell example input grid output explanation grid shown figure above there no cornered paths grid that result product trailing zero constraints gridlength gridilength gridij
bulb switcher ii there room bulbs labeled from that all turned initially and four buttons wall each four buttons has different functionality where button flips status all bulbs button flips status all bulbs even labels ie button flips status all bulbs odd labels ie button flips status all bulbs label where ie must make exactly presses button presses total each press may pick any four buttons press given two integers and presses return number different possible statuses after performing all presses button presses example input presses output explanation status can be off pressing button pressing button example input presses output explanation status can be off off pressing button off pressing button off pressing button example input presses output explanation status can be off off off pressing button off off pressing button off pressing button off pressing button constraints presses
design front middle back queue design queue that supports push and pop operations front middle and back implement frontmiddleback class frontmiddleback initializes queue void pushfrontint val adds val front queue void pushmiddleint val adds val middle queue void pushbackint val adds val back queue int popfront removes front element queue and returns if queue empty return int popmiddle removes middle element queue and returns if queue empty return int popback removes back element queue and returns if queue empty return notice that when there two middle position choices operation performed frontmost middle position choice example pushing into middle results popping middle from returns and results example input frontmiddlebackqueue pushfront pushback pushmiddle pushmiddle popfront popmiddle popmiddle popback popfront output null null null null null explanation frontmiddlebackqueue new frontmiddlebackqueue qpushfront qpushback qpushmiddle qpushmiddle qpopfront return qpopmiddle return qpopmiddle return qpopback return qpopfront return queue empty constraints val most calls will be made pushfront pushmiddle pushback popfront popmiddle and popback
three consecutive odds given integer array arr return true if there three consecutive odd numbers array otherwise return false example input arr output false explanation there no three consecutive odds example input arr output true explanation three consecutive odds constraints arrlength arri
number beautiful subsets given array nums positive integers and positive integer subset nums beautiful if does not contain two integers absolute difference equal return number nonempty beautiful subsets array nums subset nums array that can be obtained deleting some possibly none elements from nums two subsets different if and only if chosen indices delete different example input nums output explanation beautiful subsets array nums can be proved that there only beautiful subsets array example input nums output explanation beautiful subset array nums can be proved that there only beautiful subset array constraints numslength numsi
count binary substrings given binary string return number nonempty substrings that have same number and and all and all these substrings grouped consecutively substrings that occur multiple times counted number times occur example input output explanation there substrings that have equal number consecutive and and notice that some these substrings repeat and counted number times occur also not valid substring because all and not grouped together example input output explanation there substrings that have equal number consecutive and constraints slength si either or
minimum additions make valid string given string word which can insert letters or anywhere and any number times return minimum number letters that must be inserted so that word becomes valid string called valid if can be formed concatenating string abc several times example input word output explanation insert letter right before and letter right next obtain valid string abc example input word aaa output explanation insert letters and next each obtain valid string abcabcabc example input word abc output explanation word already valid no modifications needed constraints wordlength word consists letters and only
determine color chessboard square given coordinates string that represents coordinates square chessboard below chessboard your reference return true if square white and false if square black coordinate will always represent valid chessboard square coordinate will always have letter first and number second example input coordinates output false explanation from chessboard above square coordinates black so return false example input coordinates output true explanation from chessboard above square coordinates white so return true example input coordinates output false constraints coordinateslength coordinates coordinates
remove digits given string num representing nonnegative integer num and integer return smallest possible integer after removing digits from num example input num output explanation remove three digits and form new number which smallest example input num output explanation remove leading and number note that output must not contain leading zeroes example input num output explanation remove all digits from number and left nothing which constraints numlength num consists only digits num does not have any leading zeros except zero itself
painting grid three different colors given two integers and consider grid where each cell initially white can paint each cell red green or blue all cells must be painted return number ways color grid no two adjacent cells having same color since answer can be very large return modulo example input output explanation three possible colorings shown image above example input output explanation six possible colorings shown image above example input output constraints
nonnegative integers without consecutive ones given positive integer return number integers range whose binary representations do not contain consecutive ones example input output explanation here nonnegative integers their corresponding binary representations among them only integer disobeys rule two consecutive ones and other satisfy rule example input output example input output constraints
design circular queue design your implementation circular queue circular queue linear data structure which operations performed based fifo first first out principle and last position connected back first position make circle also called ring buffer one benefits circular queue that can make use spaces front queue normal queue once queue becomes full cannot insert next element even if there space front queue but using circular queue can use space store new values implement mycircularqueue class mycircularqueuek initializes object size queue be int front gets front item from queue if queue empty return int rear gets last item from queue if queue empty return boolean enqueueint value inserts element into circular queue return true if operation successful boolean dequeue deletes element from circular queue return true if operation successful boolean isempty checks whether circular queue empty or not boolean isfull checks whether circular queue full or not must solve problem without using builtin queue data structure your programming language example input mycircularqueue enqueue enqueue enqueue enqueue rear isfull dequeue enqueue rear output null true true true false true true true explanation mycircularqueue mycircularqueue new mycircularqueue mycircularqueueenqueue return true mycircularqueueenqueue return true mycircularqueueenqueue return true mycircularqueueenqueue return false mycircularqueuerear return mycircularqueueisfull return true mycircularqueuedequeue return true mycircularqueueenqueue return true mycircularqueuerear return constraints value most calls will be made enqueue dequeue front rear isempty and isfull
sort characters frequency given string sort decreasing order based frequency characters frequency character number times appears string return sorted string if there multiple answers return any them example input tree output eert explanation appears twice while and both appear once so must appear before both and therefore eetr also valid answer example input cccaaa output aaaccc explanation both and appear three times so both cccaaa and aaaccc valid answers note that cacaca incorrect as same characters must be together example input aabb output bbaa explanation bbaa also valid answer but aabb incorrect note that and treated as two different characters constraints slength consists uppercase and lowercase english letters and digits
valid palindrome phrase palindrome if after converting all uppercase letters into lowercase letters and removing all nonalphanumeric characters reads same forward and backward alphanumeric characters include letters and numbers given string return true if palindrome or false otherwise example input man plan canal panama output true explanation amanaplanacanalpanama palindrome example input race car output false explanation raceacar not palindrome example input output true explanation empty string after removing nonalphanumeric characters since empty string reads same forward and backward palindrome constraints slength consists only printable ascii characters
gray code nbit gray code sequence sequence integers where every integer inclusive range first integer integer appears no more than once sequence binary representation every pair adjacent integers differs exactly one bit and binary representation first and last integers differs exactly one bit given integer return any valid nbit gray code sequence example input output explanation binary representation and differ one bit and differ one bit and differ one bit and differ one bit also valid gray code sequence whose binary representation and differ one bit and differ one bit and differ one bit and differ one bit example input output constraints
minimum operations make array increasing given integer array nums indexed one operation can choose element array and increment example if nums can choose increment nums make nums return minimum number operations needed make nums strictly increasing array nums strictly increasing if numsi numsi all numslength array length trivially strictly increasing example input nums output explanation can do following operations increment nums so nums becomes increment nums so nums becomes increment nums so nums becomes example input nums output example input nums output constraints numslength numsi
find closest number zero given integer array nums size return number value closest nums if there multiple answers return number largest value example input nums output explanation distance from distance from distance from distance from distance from thus closest number array example input nums output explanation and both closest numbers so being larger returned constraints numsi
check if word occurs as prefix any word sentence given sentence that consists some words separated single space and searchword check if searchword prefix any word sentence return index word sentence indexed where searchword prefix this word if searchword prefix more than one word return index first word minimum index if there no such word return prefix string any leading contiguous substring example input sentence love eating burger searchword burg output explanation burg prefix burger which th word sentence example input sentence this problem easy problem searchword pro output explanation pro prefix problem which nd and th word sentence but return as its minimal index example input sentence tired searchword output explanation not prefix any word sentence constraints sentencelength searchwordlength sentence consists lowercase english letters and spaces searchword consists lowercase english letters
rotting oranges given grid where each cell can have one three values representing empty cell representing fresh orange or representing rotten orange every minute any fresh orange that directionally adjacent rotten orange becomes rotten return minimum number minutes that must elapse until no cell has fresh orange if this impossible return example input grid output example input grid output explanation orange bottom left corner row column never rotten because rotting only happens directionally example input grid output explanation since there already no fresh oranges minute answer just constraints gridlength gridilength gridij or
number boomerangs given points plane that all distinct where pointsi xi yi boomerang tuple points such that distance between and equals distance between and order tuple matters return number boomerangs example input points output explanation two boomerangs and example input points output example input points output constraints pointslength pointsilength xi yi all points unique
find numbers even number digits given array nums integers return how many them contain even number digits example input nums output explanation contains digits even number digits contains digits odd number digits contains digit odd number digits contains digit odd number digits contains digits even number digits therefore only and contain even number digits example input nums output explanation only contains even number digits constraints numslength numsi
partition equal subset sum given integer array nums return true if can partition array into two subsets such that sum elements both subsets equal or false otherwise example input nums output true explanation array can be partitioned as and example input nums output false explanation array cannot be partitioned into equal sum subsets constraints numslength numsi
minimum area rectangle ii given array points xy plane points where pointsi xi yi return minimum area any rectangle formed from these points sides not necessarily parallel and axes if there not any such rectangle return answers within actual answer will be accepted example input points output explanation minimum area rectangle occurs area example input points output explanation minimum area rectangle occurs area example input points output explanation there no possible rectangle form from these points constraints pointslength pointsilength xi yi all given points unique
power three given integer return true if power three otherwise return false integer power three if there exists integer such that example input output true explanation example input output false explanation there no where example input output false explanation there no where constraints follow up could solve without loopsrecursion
find xor sum all pairs bitwise and xor sum list bitwise xor all its elements if list only contains one element then its xor sum will be equal this element example xor sum equal xor xor xor and xor sum equal given two indexed arrays arr and arr that consist only nonnegative integers consider list containing result arri and arrj bitwise and every pair where arrlength and arrlength return xor sum aforementioned list example input arr arr output explanation list and and and and and and xor sum xor xor xor xor xor example input arr arr output explanation list and xor sum constraints arrlength arrlength arri arrj
mini parser given string represents serialization nested list implement parser deserialize and return deserialized nestedinteger each element either integer or list whose elements may also be integers or other lists example input output explanation should return nestedinteger object which contains single integer example input output explanation return nestedinteger object containing nested list elements integer containing value nested list containing two elements integer containing value ii nested list one element integer containing value constraints slength consists digits square brackets negative sign and commas serialization valid nestedinteger all values input range
kth smallest element sorted matrix given matrix where each rows and columns sorted ascending order return kth smallest element matrix note that kth smallest element sorted order not kth distinct element must find solution memory complexity better than example input matrix output explanation elements matrix and th smallest number example input matrix output constraints matrixlength matrixilength matrixij all rows and columns matrix guaranteed be sorted nondecreasing order follow up could solve problem constant memory ie memory complexity could solve problem time complexity solution may be too advanced interview but may find reading this paper fun
minimum deletions make array beautiful given indexed integer array nums array nums beautiful if numslength even numsi numsi all note that empty array considered beautiful can delete any number elements from nums when delete element all elements right deleted element will be shifted one unit left fill gap created and all elements left deleted element will remain unchanged return minimum number elements delete from nums make beautiful example input nums output explanation can delete either nums or nums make nums which beautiful can be proven need least deletion make nums beautiful example input nums output explanation can delete nums and nums make nums which beautiful can be proven need least deletions make nums beautiful constraints numslength numsi
range sum sorted subarray sums given array nums consisting positive integers computed sum all nonempty continuous subarrays from array and then sorted them nondecreasing order creating new array numbers return sum numbers from index left index right indexed from inclusive new array since answer can be huge number return modulo example input nums left right output explanation all subarray sums after sorting them nondecreasing order have new array sum numbers from index le ri example input nums left right output explanation given array same as example have new array sum numbers from index le ri example input nums left right output constraints numslength numslength numsi left right
finding users active minutes given logs users actions leetcode and integer logs represented integer array logs where each logsi idi timei indicates that user idi performed action minute timei multiple users can perform actions simultaneously and single user can perform multiple actions same minute user active minutes uam given user defined as number unique minutes which user performed action leetcode minute can only be counted once even if multiple actions occur during calculate indexed array answer size such that each answerj number users whose uam equals return array answer as described above example input logs output explanation user id performed actions minutes and again hence have uam minute only counted once user id performed actions minutes and hence have uam since both users have uam answer and remaining answerj values example input logs output explanation user id performed single action minute hence have uam user id performed actions minutes and hence have uam there one user uam and one uam hence answer answer and remaining values constraints logslength idi timei range maximum uam user
delete leaves given value given binary tree root and integer target delete all leaf nodes value target note that once delete leaf node value target if its parent node becomes leaf node and has value target should also be deleted need continue doing that until cannot example input root null target output nullnull explanation leaf nodes green value target removed picture left after removing new nodes become leaf nodes value target picture center example input root target output nullnull example input root nullnull target output explanation leaf nodes green value target removed each step constraints number nodes tree range nodeval target
apply discount every orders there supermarket that frequented many customers products sold supermarket represented as two parallel integer arrays products and prices where ith product has id productsi and price pricesi when customer paying their bill represented as two parallel integer arrays product and amount where jth product purchased has id productj and amountj how much product bought their subtotal calculated as sum each amountj price jth product supermarket decided have sale every nth customer paying their groceries will be given percentage discount discount amount given discount where will be given discount percent off their subtotal more formally if their subtotal bill then would actually pay bill discount implement cashier class cashierint int discount int products int prices initializes object discount and products and their prices double getbillint product int amount returns final total bill discount applied if any answers within actual value will be accepted example input cashiergetbillgetbillgetbillgetbillgetbillgetbillgetbill output null explanation cashier cashier new cashier cashiergetbill return st customer no discount bill cashiergetbill return nd customer no discount bill cashiergetbill return rd customer discount original bill actual bill cashiergetbill return th customer no discount cashiergetbill return th customer no discount cashiergetbill return th customer discount original bill but actual bill cashiergetbill return th customer no discount constraints discount productslength priceslength productslength productsi pricesi elements products unique productlength productslength amountlength productlength productj exists products amountj elements product unique most calls will be made getbill answers within actual value will be accepted
valid square given coordinates four points space and return true if four points construct square coordinate point pi represented as xi yi input not given any order valid square has four equal sides positive length and four equal angles degree angles example input output true example input output false example input output true constraints plength plength plength plength xi yi
remove nth node from end list given head linked list remove nth node from end list and return its head example input head output example input head output example input head output constraints number nodes list sz sz nodeval sz follow up could do this one pass
reduce array size half given integer array arr can choose set integers and remove all occurrences these integers array return minimum size set so that least half integers array removed example input arr output explanation choosing will make new array which has size ie equal half size old array possible sets size choosing set not possible as will make new array which has size greater than half size old array example input arr output explanation only possible set can choose this will make new array empty constraints arrlength arrlength even arri
arithmetic subarrays sequence numbers called arithmetic if consists least two elements and difference between every two consecutive elements same more formally sequence arithmetic if and only if si si all valid example these arithmetic sequences following sequence not arithmetic given array integers nums and two arrays integers each and representing range queries where ith query range li ri all arrays indexed return list boolean elements answer where answeri true if subarray numsli numsli numsri can be rearranged form arithmetic sequence and false otherwise example input nums output truefalsetrue explanation th query subarray this can be rearranged as which arithmetic sequence st query subarray this cannot be rearranged as arithmetic sequence nd query subarray this can be rearranged as which arithmetic sequence example input nums output falsetruefalsefalsetruetrue constraints numslength llength rlength li ri numsi
paths matrix whose sum divisible given indexed integer matrix grid and integer currently position and want reach position moving only down or right return number paths where sum elements path divisible since answer may be very large return modulo example input grid output explanation there two paths where sum elements path divisible first path highlighted red has sum which divisible second path highlighted blue has sum which divisible example input grid output explanation path highlighted red has sum which divisible example input grid output explanation every integer divisible so sum elements every possible path divisible constraints gridlength gridilength gridij
palindrome partitioning ii given string partition such that every substring partition palindrome return minimum cuts needed palindrome partitioning example input aab output explanation palindrome partitioning aab could be produced using cut example input output example input ab output constraints slength consists lowercase english letters only
lfu cache design and implement data structure least frequently used lfu cache implement lfucache class lfucacheint capacity initializes object capacity data structure int getint key gets value key if key exists cache otherwise returns void putint key int value update value key if present or inserts key if not already present when cache reaches its capacity should invalidate and remove least frequently used key before inserting new item this problem when there tie ie two or more keys same frequency least recently used key would be invalidated determine least frequently used key use counter maintained each key cache key smallest use counter least frequently used key when key first inserted into cache its use counter set due put operation use counter key cache incremented either get or put operation called functions get and put must each run average time complexity example input lfucache put put get put get get put get get get output null null null null null explanation cntx use counter key cache will show last used order tiebreakers leftmost element most recent lfucache lfu new lfucache lfuput cache cnt lfuput cache cnt cnt lfuget return cache cnt cnt lfuput lfu key because cnt smallest invalidate cache cnt cnt lfuget return not found lfuget return cache cnt cnt lfuput both and have same cnt but lru invalidate cache cnt cnt lfuget return not found lfuget return cache cnt cnt lfuget return cache cnt cnt constraints capacity key value most calls will be made get and put
reverse substrings between each pair parentheses given string that consists lower case english letters and brackets reverse strings each pair matching parentheses starting from innermost one your result should not contain any brackets example input abcd output dcba example input ulovei output iloveu explanation substring love reversed first then whole string reversed example input edetocel output leetcode explanation first reverse substring oc then etco and finally whole string constraints slength only contains lower case english characters and parentheses guaranteed that all parentheses balanced
count number squarefree subsets given positive integer indexed array nums subset array nums squarefree if product its elements squarefree integer squarefree integer integer that divisible no square number other than return number squarefree nonempty subsets array nums since answer may be too large return modulo nonempty subset nums array that can be obtained deleting some possibly none but not all elements from nums two subsets different if and only if chosen indices delete different example input nums output explanation there squarefree subsets this example subset consisting th element product its elements which squarefree integer subset consisting rd element product its elements which squarefree integer subset consisting th and rd elements product its elements which squarefree integer can be proven that there no more than squarefree subsets given array example input nums output explanation there squarefree subset this example subset consisting th element product its elements which squarefree integer can be proven that there no more than squarefree subset given array constraints numslength numsi
valid boomerang given array points where pointsi xi yi represents point xy plane return true if these points boomerang boomerang set three points that all distinct and not straight line example input points output true example input points output false constraints pointslength pointsilength xi yi
sort array parity given integer array nums move all even integers beginning array followed all odd integers return any array that satisfies this condition example input nums output explanation outputs and would also be accepted example input nums output constraints numslength numsi
longest happy prefix string called happy prefix if nonempty prefix which also suffix excluding itself given string return longest happy prefix return empty string if no such prefix exists example input level output explanation contains prefix excluding itself le lev leve and suffix el vel evel largest prefix which also suffix given example input ababab output abab explanation abab largest prefix which also suffix can overlap original string constraints slength contains only lowercase english letters
shortest distance target string circular array given indexed circular string array words and string target circular array means that arrays end connects arrays beginning formally next element wordsi wordsi and previous element wordsi wordsi where length words starting from startindex can move either next word or previous word step time return shortest distance needed reach string target if string target does not exist words return example input words helloiamleetcodehello target hello startindex output explanation start from index and can reach hello moving units right reach index moving units left reach index moving units right reach index moving unit left reach index shortest distance reach hello example input words ableetcode target leetcode startindex output explanation start from index and can reach leetcode moving units right reach index moving unit left reach index shortest distance reach leetcode example input words ieatleetcode target ate startindex output explanation since ate does not exist words return constraints wordslength wordsilength wordsi and target consist only lowercase english letters startindex wordslength
pass pillow there people standing line labeled from first person line holding pillow initially every second person holding pillow passes next person standing line once pillow reaches end line direction changes and people continue passing pillow opposite direction example once pillow reaches nth person pass th person then th person and so given two positive integers and time return index person holding pillow after time seconds example input time output explanation people pass pillow following way afer five seconds pillow given nd person example input time output explanation people pass pillow following way afer two seconds pillow given rd person constraints time
number subarrays gcd equal given integer array nums and integer return number subarrays nums where greatest common divisor subarrays elements subarray contiguous nonempty sequence elements within array greatest common divisor array largest integer that evenly divides all array elements example input nums output explanation subarrays nums where greatest common divisor all subarrays elements example input nums output explanation there no subarrays nums where greatest common divisor all subarrays elements constraints numslength numsi
maximum students taking exam given matrix seats that represent seats distributions classroom if seat broken denoted character otherwise denoted character students can see answers those sitting next left right upper left and upper right but cannot see answers student sitting directly front or behind him return maximum number students that can take exam together without any cheating being possible students must be placed seats good condition example input seats output explanation teacher can place students available seats so dont cheat exam example input seats output explanation place all students available seats example input seats output explanation place students available seats column and constraints seats contains only characters and seatslength seatsilength
find longest valid obstacle course each position want build some obstacle courses given indexed integer array obstacles length where obstaclesi describes height ith obstacle every index between and inclusive find length longest obstacle course obstacles such that choose any number obstacles between and inclusive must include ith obstacle course must put chosen obstacles same order as appear obstacles every obstacle except first taller than or same height as obstacle immediately before return array ans length where ansi length longest obstacle course index as described above example input obstacles output explanation longest valid obstacle course each position has length has length has length has length example input obstacles output explanation longest valid obstacle course each position has length has length has length example input obstacles output explanation longest valid obstacle course each position has length has length has length also valid has length also valid has length also valid has length constraints obstacleslength obstaclesi
merge triplets form target triplet triplet array three integers given integer array triplets where tripletsi ai bi ci describes ith triplet also given integer array target that describes triplet want obtain obtain target may apply following operation triplets any number times possibly zero choose two indices indexed and and update tripletsj become maxai aj maxbi bj maxci cj example if tripletsi and tripletsj tripletsj will be updated max max max return true if possible obtain target triplet as element triplets or false otherwise example input triplets target output true explanation perform following operations choose first and last triplets update last triplet be max max max triplets target triplet now element triplets example input triplets target output false explanation impossible have as element because there no any triplets example input triplets target output true explanation perform following operations choose first and third triplets update third triplet be max max max triplets choose third and fourth triplets update fourth triplet be max max max triplets target triplet now element triplets constraints tripletslength tripletsilength targetlength ai bi ci
koko eating bananas koko loves eat bananas there piles bananas ith pile has pilesi bananas guards have gone and will come back hours koko can decide her bananasperhour eating speed each hour chooses some pile bananas and eats bananas from that pile if pile has less than bananas eats all them instead and will not eat any more bananas during this hour koko likes eat slowly but still wants finish eating all bananas before guards return return minimum integer such that can eat all bananas within hours example input piles output example input piles output example input piles output constraints pileslength pileslength pilesi
maximum number nonoverlapping subarrays sum equals target given array nums and integer target return maximum number nonempty nonoverlapping subarrays such that sum values each subarray equal target example input nums target output explanation there nonoverlapping subarrays sum equals target example input nums target output explanation there subarrays sum equal but only first nonoverlapping constraints numslength numsi target
frequency most frequent element frequency element number times occurs array given integer array nums and integer one operation can choose index nums and increment element that index return maximum possible frequency element after performing most operations example input nums output explanation increment first element three times and second element two times make nums has frequency example input nums output explanation there multiple optimal solutions increment first element three times make nums has frequency increment second element four times make nums has frequency increment third element five times make nums has frequency example input nums output constraints numslength numsi
build array from permutation given zerobased permutation nums indexed build array ans same length where ansi numsnumsi each numslength and return zerobased permutation nums array distinct integers from numslength inclusive example input nums output explanation array ans built as follows ans numsnums numsnums numsnums numsnums numsnums numsnums nums nums nums nums nums nums example input nums output explanation array ans built as follows ans numsnums numsnums numsnums numsnums numsnums numsnums nums nums nums nums nums nums constraints numslength numsi numslength elements nums distinct followup can solve without using extra space ie memory
remove comments given program remove comments from program source array strings source where sourcei ith line source code this represents result splitting original source code string newline character there two types comments line comments and block comments string denotes line comment which represents that and rest characters right same line should be ignored string denotes block comment which represents that all characters until next nonoverlapping occurrence should be ignored here occurrences happen reading order line line from left right be clear string does not yet end block comment as ending would be overlapping beginning first effective comment takes precedence over others example if string occurs block comment ignored similarly if string occurs line or block comment also ignored if certain line code empty after removing comments must not output that line each string answer list will be nonempty there will be no control characters single quote or double quote characters example source string not comment will not be test case also nothing else such as defines or macros will interfere comments guaranteed that every open block comment will eventually be closed so outside line or block comment always starts new comment finally implicit newline characters can be deleted block comments please see examples below details after removing comments from source code return source code same format example input source test program int main variable declaration int this test multiline comment testing output int main int ca explanation line line code visualized as below test program int main variable declaration int this test multiline comment testing string denotes block comment including line and lines string denotes line as comments line line output code visualized as below int main int example input source acomment line morecommentb output ab explanation original source string acommentnlinenmorecommentb where have bolded newline characters after deletion implicit newline characters deleted leaving string ab which when delimited newline characters becomes ab constraints sourcelength sourceilength sourcei consists printable ascii characters every open block comment eventually closed there no singlequote or doublequote input
remove letter equalize frequency given indexed string word consisting lowercase english letters need select one index and remove letter that index from word so that frequency every letter present word equal return true if possible remove one letter so that frequency all letters word equal and false otherwise note frequency letter number times occurs string must remove exactly one letter and cannot chose do nothing example input word abcc output true explanation select index and delete word becomes abc and each character has frequency example input word aazz output false explanation must delete character so either frequency and frequency or vice versa impossible make all present letters have equal frequency constraints wordlength word consists lowercase english letters only
rle iterator can use runlength encoding ie rle encode sequence integers runlength encoded array even length encoding indexed all even encodingi tells us number times that nonnegative integer value encodingi repeated sequence example sequence arr can be encoded be encoding encoding and encoding also valid rle arr given runlength encoded array design iterator that iterates through implement rleiterator class rleiteratorint encoded initializes object encoded array encoded int nextint exhausts next elements and returns last element exhausted this way if there no element left exhaust return instead example input rleiterator next next next next output null explanation rleiterator rleiterator new rleiterator this maps sequence rleiteratornext exhausts terms sequence returning remaining sequence now rleiteratornext exhausts term sequence returning remaining sequence now rleiteratornext exhausts term sequence returning remaining sequence now rleiteratornext exhausts terms returning this because first term exhausted but second term did not exist since last term exhausted does not exist return constraints encodinglength encodinglength even encodingi most calls will be made next
maximum number coins can get there piles coins varying size and your friends will take piles coins as follows each step will choose any piles coins not necessarily consecutive your choice alice will pick pile maximum number coins will pick next pile maximum number coins your friend bob will pick last pile repeat until there no more piles coins given array integers piles where pilesi number coins ith pile return maximum number coins that can have example input piles output explanation choose triplet alice pick pile coins pile coins and bob last one choose triplet alice pick pile coins pile coins and bob last one maximum number coins which can have other hand if choose this arrangement only get coins which not optimal example input piles output example input piles output constraints pileslength pileslength pilesi
count nodes equal average subtree given root binary tree return number nodes where value node equal average values its subtree note average elements sum elements divided and rounded down nearest integer subtree root tree consisting root and all its descendants example input root null output explanation node value average its subtree node value average its subtree node value average its subtree node value average its subtree node value average its subtree example input root output explanation node value average its subtree constraints number nodes tree range nodeval
detonate maximum bombs given list bombs range bomb defined as area where its effect can be felt this area shape circle center as location bomb bombs represented indexed integer array bombs where bombsi xi yi ri xi and yi denote xcoordinate and ycoordinate location ith bomb whereas ri denotes radius its range may choose detonate single bomb when bomb detonated will detonate all bombs that lie its range these bombs will further detonate bombs that lie their ranges given list bombs return maximum number bombs that can be detonated if allowed detonate only one bomb example input bombs output explanation above figure shows positions and ranges bombs if detonate left bomb right bomb will not be affected but if detonate right bomb both bombs will be detonated so maximum bombs that can be detonated max example input bombs output explanation detonating either bomb will not detonate other bomb so maximum number bombs that can be detonated example input bombs output explanation best bomb detonate bomb because bomb detonates bombs and red circle denotes range bomb bomb detonates bomb blue circle denotes range bomb bomb detonates bomb green circle denotes range bomb thus all bombs detonated constraints bombslength bombsilength xi yi ri
shortest completing word given string licenseplate and array strings words find shortest completing word words completing word word that contains all letters licenseplate ignore numbers and spaces licenseplate and treat letters as case insensitive if letter appears more than once licenseplate then must appear word same number times or more example if licenseplate abc then contains letters ignoring case and twice possible completing words abccdef caaacab and cbca return shortest completing word words guaranteed answer exists if there multiple shortest completing words return first one that occurs words example input licenseplate pst words stepstepsstripestepple output steps explanation licenseplate contains letters ignoring case and step contains and but only contains steps contains and both characters stripe missing stepple missing since steps only word containing all letters that answer example input licenseplate words lookspeststewshow output pest explanation licenseplate only contains letter all words contain but among these pest stew and show shortest answer pest because word that appears earliest constraints licenseplatelength licenseplate contains digits letters uppercase or lowercase or space wordslength wordsilength wordsi consists lower case english letters
isomorphic strings given two strings and determine if isomorphic two strings and isomorphic if characters can be replaced get all occurrences character must be replaced another character while preserving order characters no two characters may map same character but character may map itself example input egg add output true example input foo bar output false example input paper title output true constraints slength tlength slength and consist any valid ascii character
cousins binary tree given root binary tree unique values and values two different nodes tree and return true if nodes corresponding values and tree cousins or false otherwise two nodes binary tree cousins if have same depth different parents note that binary tree root node depth and children each depth node depth example input root output false example input root nullnull output true example input root null output false constraints number nodes tree range nodeval each node has unique value and exist tree
parallel courses iii given integer which indicates that there courses labeled from also given integer array relations where relationsj prevcoursej nextcoursej denotes that course prevcoursej has be completed before course nextcoursej prerequisite relationship furthermore given indexed integer array time where timei denotes how many months takes complete ith course must find minimum number months needed complete all courses following these rules may start taking course any time if prerequisites met any number courses can be taken same time return minimum number months needed complete all courses note test cases generated such that possible complete every course ie graph directed acyclic graph example input relations time output explanation figure above represents given graph and time required complete each course start course and course simultaneously month course takes months and course takes months complete respectively thus earliest time can start course month and total time required months example input relations time output explanation figure above represents given graph and time required complete each course can start courses and month can complete them after and months respectively course can be taken only after course completed ie after months completed after months course can be taken only after courses and have been completed ie after max months thus minimum time needed complete all courses months constraints relationslength minn relationsjlength prevcoursej nextcoursej prevcoursej nextcoursej all pairs prevcoursej nextcoursej unique timelength timei given graph directed acyclic graph
minimum speed arrive time given floatingpoint number hour representing amount time have reach office commute office must take trains sequential order also given integer array dist length where disti describes distance kilometers ith train ride each train can only depart integer hour so may need wait between each train ride example if st train ride takes hours must wait additional hours before can depart nd train ride hour mark return minimum positive integer speed kilometers per hour that all trains must travel reach office time or if impossible be time tests generated such that answer will not exceed and hour will have most two digits after decimal point example input dist hour output explanation speed first train ride takes hour since already integer hour depart immediately hour mark second train takes hours since already integer hour depart immediately hour mark third train takes hours will arrive exactly hour mark example input dist hour output explanation speed first train ride takes hours since not integer hour wait until hour mark depart second train ride takes hour since already integer hour depart immediately hour mark third train takes hours will arrive hour mark example input dist hour output explanation impossible because earliest third train can depart hour mark constraints distlength disti hour there will be most two digits after decimal point hour
partition array into two arrays minimize sum difference given integer array nums integers need partition nums into two arrays length minimize absolute difference sums arrays partition nums put each element nums into one two arrays return minimum possible absolute difference example input nums output explanation one optimal partition and absolute difference between sums arrays abs example input nums output explanation one optimal partition and absolute difference between sums arrays abs example input nums output explanation one optimal partition and absolute difference between sums arrays abs constraints numslength numsi
diameter binary tree given root binary tree return length diameter tree diameter binary tree length longest path between any two nodes tree this path may or may not pass through root length path between two nodes represented number edges between them example input root output explanation length path or example input root output constraints number nodes tree range nodeval
number paths max score given square board characters can move board starting bottom right square marked character need reach top left square marked character rest squares labeled either numeric character or obstacle one move can go up left or upleft diagonally only if there no obstacle there return list two integers first integer maximum sum numeric characters can collect and second number such paths that can take get that maximum sum taken modulo case there no path return example input board exs output example input board exs output example input board exxxs output constraints boardlength boardilength
jump game ii given indexed array integers nums length initially positioned nums each element numsi represents maximum length forward jump from index other words if numsi can jump any numsi where numsi and return minimum number jumps reach numsn test cases generated such that can reach numsn example input nums output explanation minimum number jumps reach last index jump step from index then steps last index example input nums output constraints numslength numsi its guaranteed that can reach numsn
maximum score after splitting string given string zeros and ones return maximum score after splitting string into two nonempty substrings ie left substring and right substring score after splitting string number zeros left substring plus number ones right substring example input output explanation all possible ways splitting into two nonempty substrings left and right score left and right score left and right score left and right score left and right score example input output explanation when left and right get maximum score example input output constraints slength string consists characters and only
count number fair pairs given indexed integer array nums size and two integers lower and upper return number fair pairs pair fair if and lower numsi numsj upper example input nums lower upper output explanation there fair pairs and example input nums lower upper output explanation there single fair pair constraints numslength numslength numsi lower upper
increasing order search tree given root binary search tree rearrange tree inorder so that leftmost node tree now root tree and every node has no left child and only one right child example input root nullnullnullnull output nullnullnullnullnullnullnullnull example input root output nullnull constraints number nodes given tree will be range nodeval
nrepeated element size array given integer array nums following properties numslength nums contains unique elements exactly one element nums repeated times return element that repeated times example input nums output example input nums output example input nums output constraints numslength numsi nums contains unique elements and one them repeated exactly times
biggest single number sql schema table mynumbers column name type num int there no primary key this table may contain duplicates each row this table contains integer single number number that appeared only once mynumbers table write sql query report largest single number if there no single number report null query result format following example example input mynumbers table num output num explanation single numbers and since largest single number return example input mynumbers table num output num null explanation there no single numbers input table so return null
subtree another tree given roots two binary trees root and subroot return true if there subtree root same structure and node values subroot and false otherwise subtree binary tree tree tree that consists node tree and all this nodes descendants tree tree could also be considered as subtree itself example input root subroot output true example input root nullnullnullnull subroot output false constraints number nodes root tree range number nodes subroot tree range rootval subrootval
greatest english letter upper and lower case given string english letters return greatest english letter which occurs as both lowercase and uppercase letter returned letter should be uppercase if no such letter exists return empty string english letter greater than another letter if appears after english alphabet example input leetcode output explanation letter only letter appear both lower and upper case example input arrazfif output explanation letter greatest letter appear both lower and upper case note that and also appear both lower and upper case but greater than or example input abcdefghijk output explanation there no letter that appears both lower and upper case constraints slength consists lowercase and uppercase english letters
merge bsts create single bst given bst binary search tree root nodes separate bsts stored array trees indexed each bst trees has most nodes and no two roots have same value one operation can select two distinct indices and such that value stored one leaves treesi equal root value treesj replace leaf node treesi treesj remove treesj from trees return root resulting bst if possible form valid bst after performing operations or null if impossible create valid bst bst binary search tree binary tree where each node satisfies following property every node nodes left subtree has value strictly less than nodes value every node nodes right subtree has value strictly greater than nodes value leaf node that has no children example input trees output null explanation first operation pick and and merge trees into trees delete trees so trees second operation pick and and merge trees into trees delete trees so trees null resulting tree shown above valid bst so return its root example input trees output explanation pick and and merge trees into trees delete trees so trees resulting tree shown above this only valid operation that can be performed but resulting tree not valid bst so return null example input trees output explanation impossible perform any operations constraints treeslength number nodes each tree range each node input may have children but no grandchildren no two roots trees have same value all trees input valid bsts treenodeval
maximum depth nary tree given nary tree find its maximum depth maximum depth number nodes along longest path from root node down farthest leaf node narytree input serialization represented their level order traversal each group children separated null value see examples example input root nullnull output example input root nullnullnullnullnullnullnullnullnullnullnull output constraints total number nodes range depth nary tree less than or equal
excel sheet column title given integer columnnumber return its corresponding column title as appears excel sheet example aa ab example input columnnumber output example input columnnumber output ab example input columnnumber output zy constraints columnnumber
minimum elements add form given sum given integer array nums and two integers limit and goal array nums has interesting property that absnumsi limit return minimum number elements need add make sum array equal goal array must maintain its property that absnumsi limit note that absx equals if and otherwise example input nums limit goal output explanation can add and then sum array will be example input nums limit goal output constraints numslength limit limit numsi limit goal
product array except self given integer array nums return array answer such that answeri equal product all elements nums except numsi product any prefix or suffix nums guaranteed fit bit integer must write algorithm that runs time and without using division operation example input nums output example input nums output constraints numslength numsi product any prefix or suffix nums guaranteed fit bit integer follow up can solve problem extra space complexity output array does not count as extra space space complexity analysis
unique email addresses every valid email consists local name and domain name separated sign besides lowercase letters email may contain one or more or example aliceleetcodecom alice local name and leetcodecom domain name if add periods between some characters local name part email address mail sent there will be forwarded same address without dots local name note that this rule does not apply domain names example alicezleetcodecom and alicezleetcodecom forward same email address if add plus local name everything after first plus sign will be ignored this allows certain emails be filtered note that this rule does not apply domain names example mynameemailcom will be forwarded myemailcom possible use both these rules same time given array strings emails where send one email each emailsi return number different addresses that actually receive mails example input emails testemailalexleetcodecomtestemailbobcathyleetcodecomtestemaildavidleetcodecom output explanation testemailleetcodecom and testemailleetcodecom actually receive mails example input emails aleetcodecombleetcodecomcleetcodecom output constraints emailslength emailsilength emailsi consist lowercase english letters and each emailsi contains exactly one character all local and domain names nonempty local names do not start character domain names end com suffix
smallest integer divisible given positive integer need find length smallest positive integer such that divisible and only contains digit return length if there no such return note may not fit bit signed integer example input output explanation smallest answer which has length example input output explanation there no such positive integer divisible example input output explanation smallest answer which has length constraints
maximum star sum graph there undirected graph consisting nodes numbered from given indexed integer array vals length where valsi denotes value ith node also given integer array edges where edgesi ai bi denotes that there exists undirected edge connecting nodes ai and bi star graph subgraph given graph having center node containing or more neighbors other words subset edges given graph such that there exists common node all edges image below shows star graphs and neighbors respectively centered blue node star sum sum values all nodes present star graph given integer return maximum star sum star graph containing most edges example input vals edges output explanation above diagram represents input graph star graph maximum star sum denoted blue centered and includes its neighbors and can be shown not possible get star graph sum greater than example input vals edges output explanation there only one possible star graph which node itself hence return constraints valslength valsi edgeslength minn edgesilength ai bi ai bi
frog jump frog crossing river river divided into some number units and each unit there may or may not exist stone frog can jump stone but must not jump into water given list stones positions units sorted ascending order determine if frog can cross river landing last stone initially frog first stone and assumes first jump must be unit if frogs last jump units its next jump must be either or units frog can only jump forward direction example input stones output true explanation frog can jump last stone jumping unit nd stone then units rd stone then units th stone then units th stone units th stone and units th stone example input stones output false explanation there no way jump last stone as gap between th and th stone too large constraints stoneslength stonesi stones stones sorted strictly increasing order
majority element given array nums size return majority element majority element element that appears more than n times may assume that majority element always exists array example input nums output example input nums output constraints numslength numsi followup could solve problem linear time and space
truncate sentence sentence list words that separated single space no leading or trailing spaces each words consists only uppercase and lowercase english letters no punctuation example hello world hello and hello world hello world all sentences given sentence and integer want truncate such that contains only first words return after truncating example input hello how contestant output hello how explanation words hello how contestant first words hello how hence should return hello how example input what solution this problem output what solution explanation words what solution this problem first words what solution hence should return what solution example input chopper not tanuki output chopper not tanuki constraints slength range number words consist only lowercase and uppercase english letters and spaces words separated single space there no leading or trailing spaces
remove duplicates from sorted array ii given integer array nums sorted nondecreasing order remove some duplicates inplace such that each unique element appears most twice relative order elements should be kept same since impossible change length array some languages must instead have result be placed first part array nums more formally if there elements after removing duplicates then first elements nums should hold final result does not matter what leave beyond first elements return after placing final result first slots nums do not allocate extra space another array must do this modifying input array inplace extra memory custom judge judge will test your solution following code int nums input array int expectednums expected answer correct length int removeduplicatesnums calls your implementation assert expectednumslength int assert numsi expectednumsi if all assertions pass then your solution will be accepted example input nums output nums explanation your function should return first five elements nums being and respectively does not matter what leave beyond returned hence underscores example input nums output nums explanation your function should return first seven elements nums being and respectively does not matter what leave beyond returned hence underscores constraints numslength numsi nums sorted nondecreasing order
two furthest houses different colors there houses evenly lined up street and each house beautifully painted given indexed integer array colors length where colorsi represents color ith house return maximum distance between two houses different colors distance between ith and jth houses absi where absx absolute value example input colors output explanation above image color blue and color red furthest two houses different colors house and house house has color and house has color distance between them abs note that houses and can also produce optimal answer example input colors output explanation above image color blue color yellow and color green furthest two houses different colors house and house house has color and house has color distance between them abs example input colors output explanation furthest two houses different colors house and house house has color and house has color distance between them abs constraints colorslength colorsi test data generated such that least two houses have different colors
filter elements from array given integer array arr and filtering function fn return new array fewer or equal number elements returned array should only contain elements where fnarri evaluated truthy value please solve without builtin arrayfilter method example input arr fn function greaterthann return output explanation const newarray filterarr fn function filters out values that not greater than example input arr fn function firstindexn return output explanation fn can also accept index each element this case function removes elements not index example input arr fn function plusonen return output explanation falsey values such as should be filtered out constraints arrlength arri
exclusive time functions singlethreaded cpu execute program containing functions each function has unique id between and function calls stored call stack when function call starts its id pushed onto stack and when function call ends its id popped off stack function whose id top stack current function being executed each time function starts or ends write log id whether started or ended and timestamp given list logs where logsi represents ith log message formatted as string functionidstart endtimestamp example start means function call function id started beginning timestamp and end means function call function id ended end timestamp note that function can be called multiple times possibly recursively functions exclusive time sum execution times all function calls program example if function called twice one call executing time units and another call executing time unit exclusive time return exclusive time each function array where value ith index represents exclusive time function id example input logs startstartendend output explanation function starts beginning time then executes units time and reaches end time function starts beginning time executes units time and ends end time function resumes execution beginning time and executes unit time so function spends units total time executing and function spends units total time executing example input logs startstartendstartendend output explanation function starts beginning time executes units time and recursively calls itself function recursive call starts beginning time and executes units time function initial call resumes execution then immediately calls itself again function nd recursive call starts beginning time and executes unit time function initial call resumes execution beginning time and executes unit time so function spends units total time executing example input logs startstartendstartendend output explanation function starts beginning time executes units time and recursively calls itself function recursive call starts beginning time and executes units time function initial call resumes execution then immediately calls function function starts beginning time executes unit time and ends end time function resumes execution beginning time and executes units time so function spends units total time executing and function spends unit total time executing constraints logslength functionid timestamp no two start events will happen same timestamp no two end events will happen same timestamp each function has end log each start log
count unguarded cells grid given two integers and representing indexed grid also given two integer arrays guards and walls where guardsi rowi coli and wallsj rowj colj represent positions ith guard and jth wall respectively guard can see every cell four cardinal directions north east south or west starting from their position unless obstructed wall or another guard cell guarded if there least one guard that can see return number unoccupied cells that not guarded example input guards walls output explanation guarded and unguarded cells shown red and green respectively above diagram there total unguarded cells so return example input guards walls output explanation unguarded cells shown green above diagram there total unguarded cells so return constraints guardslength wallslength guardslength wallslength guardsilength wallsjlength rowi rowj coli colj all positions guards and walls unique
html entity parser html entity parser parser that takes html code as input and replace all entities special characters characters itself special characters and their entities html quotation mark entity quot and symbol character single quote mark entity apos and symbol character ampersand entity amp and symbol character greater than sign entity gt and symbol character less than sign entity lt and symbol character slash entity frasl and symbol character given input text string html parser have implement entity parser return text after replacing entities special characters example input text amp html entity but ambassador not output html entity but ambassador not explanation parser will replace amp entity example input text and quote quotquot output and quote constraints textlength string may contain any possible characters out all ascii characters
maximum level sum binary tree given root binary tree level its root level its children and so return smallest level such that sum all values nodes level maximal example input root nullnull output explanation level sum level sum level sum so return level maximum sum which level example input root nullnullnullnull output constraints number nodes tree range nodeval
count words obtained after adding letter given two indexed arrays strings startwords and targetwords each string consists lowercase english letters only each string targetwords check if possible choose string from startwords and perform conversion operation be equal that from targetwords conversion operation described following two steps append any lowercase letter that not present string its end example if string abc letters or can be added but not if added resulting string will be abcd rearrange letters new string any arbitrary order example abcd can be rearranged acbd bacd cbda and so note that can also be rearranged abcd itself return number strings targetwords that can be obtained performing operations any string startwords note that will only be verifying if string targetwords can be obtained from string startwords performing operations strings startwords do not actually change during this process example input startwords antacttack targetwords tackactacti output explanation order form targetwords tack use startwords act append and rearrange actk tack there no string startwords that can be used obtain targetwords act note that act does exist startwords but must append one letter string before rearranging order form targetwords acti use startwords act append and rearrange acti acti itself example input startwords aba targetwords abcabcd output explanation order form targetwords abc use startwords ab add and rearrange abc there no string startwords that can be used obtain targetwords abcd constraints startwordslength targetwordslength startwordsilength targetwordsjlength each string startwords and targetwords consists lowercase english letters only no letter occurs more than once any string startwords or targetwords
maximum absolute value expression given two arrays integers equal lengths return maximum value arri arrj arri arrj where maximum taken over all arrlength example input arr arr output example input arr arr output constraints arrlength arrlength arri arri
handling sum queries after update given two indexed arrays nums and nums and array queries queries there three types queries query type queriesi flip values from and from nums from index index both and indexed query type queriesi every index set numsi numsi numsi query type queriesi find sum elements nums return array containing all answers third type queries example input nums nums queries output explanation after first query nums becomes after second query nums becomes so answer third query thus returned example input nums nums queries output explanation after first query nums remains so answer second query thus returned constraints numslengthnumslength numslength numslength querieslength queriesilength numslength numsi numsi
find corresponding node binary tree clone that tree given two binary trees original and cloned and given reference node target original tree cloned tree copy original tree return reference same node cloned tree note that not allowed change any two trees or target node and answer must be reference node cloned tree example input tree nullnull target output explanation all examples original and cloned trees shown target node green node from original tree answer yellow node from cloned tree example input tree target output example input tree nullnullnullnullnullnull target output constraints number nodes tree range values nodes tree unique target node node from original tree and not null follow up could solve problem if repeated values tree allowed
count pairs xor range given indexed integer array nums and two integers low and high return number nice pairs nice pair pair where numslength and low numsi xor numsj high example input nums low high output explanation all nice pairs as follows nums xor nums nums xor nums nums xor nums nums xor nums nums xor nums nums xor nums example input nums low high output explanation all nice pairs as follows nums xor nums nums xor nums nums xor nums nums xor nums nums xor nums nums xor nums nums xor nums nums xor nums constraints numslength numsi low high
maximum fruits harvested after most steps fruits available some positions infinite xaxis given integer array fruits where fruitsi positioni amounti depicts amounti fruits position positioni fruits already sorted positioni ascending order and each positioni unique also given integer startpos and integer initially position startpos from any position can either walk left or right takes one step move one unit xaxis and can walk most steps total every position reach harvest all fruits that position and fruits will disappear from that position return maximum total number fruits can harvest example input fruits startpos output explanation optimal way move right position and harvest fruits move right position and harvest fruits moved steps and harvested fruits total example input fruits startpos output explanation can move most steps so cannot reach position nor optimal way harvest fruits starting position move left position and harvest fruit move right position and harvest fruits move right position and harvest fruits moved steps and harvested fruits total example input fruits startpos output explanation can move most steps and cannot reach any position fruits constraints fruitslength fruitsilength startpos positioni positioni positioni any indexed amounti
delete columns make sorted ii given array strings strs all same length may choose any deletion indices and delete all characters those indices each string example if have strs abcdefuvwxyz and deletion indices then final array after deletions bef vyz suppose chose set deletion indices answer such that after deletions final array has its elements lexicographic order ie strs strs strs strsn return minimum possible value answerlength example input strs cabbac output explanation after deleting first column strs now strs lexicographic order ie strs strs strs require least deletion since initially strs not lexicographic order so answer example input strs xcybza output explanation strs already lexicographic order so do not need delete anything note that rows strs not necessarily lexicographic order ie not necessarily true that strs strs example input strs zyxwvutsr output explanation have delete every column constraints strslength strsilength strsi consists lowercase english letters
calculate special bonus sql schema table employees column name type employeeid int name varchar salary int employeeid primary key this table each row this table indicates employee id employee name and salary write sql query calculate bonus each employee bonus employee their salary if id employee odd number and employee name does not start character bonus employee otherwise return result table ordered employeeid query result format following example example input employees table employeeid name salary meir michael addilyn juan kannon output employeeid bonus explanation employees ids and get bonus because have even employeeid employee id gets bonus because their name starts rest employees get bonus
find closest elements given sorted integer array arr two integers and return closest integers array result should also be sorted ascending order integer closer than integer if or and example input arr output example input arr output constraints arrlength arrlength arr sorted ascending order arri
evaluate bracket pairs string given string that contains some bracket pairs each pair containing nonempty key example string nameisageyearsold there two bracket pairs that contain keys name and age know values wide range keys this represented string array knowledge where each knowledgei keyi valuei indicates that key keyi has value valuei tasked evaluate all bracket pairs when evaluate bracket pair that contains some key keyi will replace keyi and bracket pair keys corresponding valuei if do not know value key will replace keyi and bracket pair question mark without quotation marks each key will appear most once your knowledge there will not be any nested brackets return resulting string after evaluating all bracket pairs example input nameisageyearsold knowledge namebobagetwo output bobistwoyearsold explanation key name has value bob so replace name bob key age has value two so replace age two example input hiname knowledge ab output hi explanation as do not know value key name replace name example input aaaaaa knowledge ayes output yesyesyesaaa explanation same key can appear multiple times key has value yes so replace all occurrences yes notice that as not bracket pair not evaluated constraints slength knowledgelength knowledgeilength keyilength valueilength consists lowercase english letters and round brackets and every open bracket will have corresponding close bracket key each bracket pair will be nonempty there will not be any nested bracket pairs keyi and valuei consist lowercase english letters each keyi knowledge unique
corporate flight bookings there flights that labeled from given array flight bookings bookings where bookingsi firsti lasti seatsi represents booking flights firsti through lasti inclusive seatsi seats reserved each flight range return array answer length where answeri total number seats reserved flight example input bookings output explanation flight labels booking reserved booking reserved booking reserved total seats hence answer example input bookings output explanation flight labels booking reserved booking reserved total seats hence answer constraints bookingslength bookingsilength firsti lasti seatsi
tree coprimes there tree ie connected undirected graph that has no cycles consisting nodes numbered from and exactly edges each node has value associated and root tree node represent this tree given integer array nums and array edges each numsi represents ith nodes value and each edgesj uj vj represents edge between nodes uj and vj tree two values and coprime if gcdx where gcdx greatest common divisor and ancestor node any other node shortest path from node root node not considered ancestor itself return array ans size where ansi closest ancestor node such that numsi and numsansi coprime or if there no such ancestor example input nums edges output explanation above figure each nodes value parentheses node has no coprime ancestors node has only one ancestor node their values coprime gcd node has two ancestors nodes and node value not coprime gcd but node value gcd so node closest valid ancestor node has two ancestors nodes and coprime node gcd so node its closest valid ancestor example input nums edges output constraints numslength numsi edgeslength edgesjlength uj vj uj vj
verbal arithmetic puzzle given equation represented words left side and result right side need check if equation solvable under following rules each character decoded as one digit no two characters can map same digit each wordsi and result decoded as one number without leading zeros sum numbers left side words will equal number right side result return true if equation solvable otherwise return false example input words sendmore result money output true explanation map such that send more money example input words sixsevenseven result twenty output true explanation map such that six seven seven twenty example input words leetcode result point output false explanation there no possible mapping satisfy equation so return false note that two different characters cannot map same digit constraints wordslength wordsilength resultlength wordsi result contain only uppercase english letters number different characters used expression most
single number ii given integer array nums where every element appears three times except one which appears exactly once find single element and return must implement solution linear runtime complexity and use only constant extra space example input nums output example input nums output constraints numslength numsi each element nums appears exactly three times except one element which appears once
detect cycles grid given array characters grid size need find if there exists any cycle consisting same value grid cycle path length or more grid that starts and ends same cell from given cell can move one cells adjacent one four directions up down left or right if has same value current cell also cannot move cell that visited your last move example cycle invalid because from visited which last visited cell return true if any cycle same value exists grid otherwise return false example input grid aaaaabbaabbaaaaa output true explanation there two valid cycles shown different colors image below example input grid cccacdccccecfccc output true explanation there only one valid cycle highlighted image below example input grid abbbzbbba output false constraints gridlength gridilength grid consists only lowercase english letters
find mountain array this problem interactive problem may recall that array arr mountain array if and only if arrlength there exists some arrlength such that arr arr arri arri arri arri arrarrlength given mountain array mountainarr return minimum index such that mountainarrgetindex target if such index does not exist return cannot access mountain array directly may only access array using mountainarray interface mountainarraygetk returns element array index indexed mountainarraylength returns length array submissions making more than calls mountainarrayget will be judged wrong answer also any solutions that attempt circumvent judge will result disqualification example input array target output explanation exists array index and index return minimum index which example input array target output explanation does not exist array so return constraints mountainarrlength target mountainarrgetindex
largest samedigit number string given string num representing large integer integer good if meets following conditions substring num length consists only one unique digit return maximum good integer as string or empty string if no such integer exists note substring contiguous sequence characters within string there may be leading zeroes num or good integer example input num output explanation there two distinct good integers and largest so return example input num output explanation only good integer example input num output explanation no substring length consists only one unique digit therefore there no good integers constraints numlength num only consists digits
product price given date sql schema table products column name type productid int newprice int changedate date productid changedate primary key this table each row this table indicates that price some product changed new price some date write sql query find prices all products assume price all products before any change return result table any order query result format following example example input products table productid newprice changedate output productid price
fix names table sql schema table users column name type userid int name varchar userid primary key this table this table contains id and name user name consists only lowercase and uppercase characters write sql query fix names so that only first character uppercase and rest lowercase return result table ordered userid query result format following example example input users table userid name alice bob output userid name alice bob
populating next right pointers each node ii given binary tree struct node int val node left node right node next populate each next pointer point its next right node if there no next right node next pointer should be set null initially all next pointers set null example input root null output explanation given above binary tree figure your function should populate each next pointer point its next right node just like figure serialized output level order as connected next pointers signifying end each level example input root output constraints number nodes tree range nodeval followup may only use constant extra space recursive approach fine may assume implicit stack space does not count as extra space this problem
maximum distance between pair values given two nonincreasing indexed integer arrays nums and nums pair indices where numslength and numslength valid if both and numsi numsj distance pair return maximum distance any valid pair if there no valid pairs return array arr nonincreasing if arri arri every arrlength example input nums nums output explanation valid pairs and maximum distance pair example input nums nums output explanation valid pairs and maximum distance pair example input nums nums output explanation valid pairs and maximum distance pair constraints numslength numslength numsi numsj both nums and nums nonincreasing
degree array given nonempty array nonnegative integers nums degree this array defined as maximum frequency any one its elements your task find smallest possible length contiguous subarray nums that has same degree as nums example input nums output explanation input array has degree because both elements and appear twice subarrays that have same degree shortest length so return example input nums output explanation degree because element repeated times so shortest subarray therefore returning constraints numslength will be between and numsi will be integer between and
count smaller numbers after self given integer array nums return integer array counts where countsi number smaller elements right numsi example input nums output explanation right there smaller elements and right there only smaller element right there smaller element right there smaller element example input nums output example input nums output constraints numslength numsi
maximum number given positive integer num consisting only digits and return maximum number can get changing most one digit becomes and becomes example input num output explanation changing first digit results changing second digit results changing third digit results changing fourth digit results maximum number example input num output explanation changing last digit results maximum number example input num output explanation better not apply any change constraints num num consists only and digits
maximum number tasks can assign have tasks and workers each task has strength requirement stored indexed integer array tasks ith task requiring tasksi strength complete strength each worker stored indexed integer array workers jth worker having workersj strength each worker can only be assigned single task and must have strength greater than or equal tasks strength requirement ie workersj tasksi additionally have pills magical pills that will increase workers strength strength can decide which workers receive magical pills however may only give each worker most one magical pill given indexed integer arrays tasks and workers and integers pills and strength return maximum number tasks that can be completed example input tasks workers pills strength output explanation can assign magical pill and tasks as follows give magical pill worker assign worker task assign worker task assign worker task example input tasks workers pills strength output explanation can assign magical pill and tasks as follows give magical pill worker assign worker task example input tasks workers pills strength output explanation can assign magical pills and tasks as follows give magical pill worker and worker assign worker task assign worker task last pill not given because will not make any worker strong enough last task constraints taskslength workerslength pills tasksi workersj strength
count all valid pickup and delivery options given orders each order consist pickup and delivery services count all valid pickupdelivery possible sequences such that deliveryi always after pickupi since answer may be too large return modulo example input output explanation unique order delivery always after pickup example input output explanation all possible orders ppdd ppdd pdpd ppdd ppdd and pdpd this invalid order pdpd because pickup after delivery example input output constraints
longest substring least repeating characters given string and integer return length longest substring such that frequency each character this substring greater than or equal example input aaabb output explanation longest substring aaa as repeated times example input ababbc output explanation longest substring ababb as repeated times and repeated times constraints slength consists only lowercase english letters
minimum operations make array alternating given indexed array nums consisting positive integers array nums called alternating if numsi numsi where numsi numsi where one operation can choose index and change numsi into any positive integer return minimum number operations required make array alternating example input nums output explanation one way make array alternating converting number operations required this case can be proven that not possible make array alternating less than operations example input nums output explanation one way make array alternating converting number operations required this case note that array cannot be converted because this case nums nums which violates conditions alternating array constraints numslength numsi
neighboring bitwise xor indexed array derived length derived computing bitwise xor adjacent values binary array original length specifically each index range if then derivedi originali original otherwise derivedi originali originali given array derived your task determine whether there exists valid binary array original that could have formed derived return true if such array exists or false otherwise binary array array containing only and example input derived output true explanation valid original array that gives derived derived original original derived original original derived original original example input derived output true explanation valid original array that gives derived derived original original derived original original example input derived output false explanation there no valid original array that gives derived constraints derivedlength values derived either or
buddy strings given two strings and goal return true if can swap two letters so result equal goal otherwise return false swapping letters defined as taking two indices and indexed such that and swapping characters si and sj example swapping indices and abcd results cbad example input ab goal ba output true explanation can swap and get ba which equal goal example input ab goal ab output false explanation only letters can swap and which results ba goal example input aa goal aa output true explanation can swap and get aa which equal goal constraints slength goallength and goal consist lowercase letters
lexicographical numbers given integer return all numbers range sorted lexicographical order must write algorithm that runs time and uses extra space example input output example input output constraints
maximum sum obtained any permutation have array integers nums and array requests where requestsi starti endi ith request asks sum numsstarti numsstarti numsendi numsendi both starti and endi indexed return maximum total sum all requests among all permutations nums since answer may be too large return modulo example input nums requests output explanation one permutation nums following result requests nums nums nums requests nums nums total sum permutation higher total sum following result requests nums nums nums requests nums nums total sum which best that can do example input nums requests output explanation permutation max total sum request sums example input nums requests output explanation permutation max total sum request sums constraints numslength numsi requestslength requestsilength starti endi
recover tree from preorder traversal run preorder depthfirst search dfs root binary tree each node this traversal output dashes where depth this node then output value this node if depth node depth its immediate child depth root node if node has only one child that child guaranteed be left child given output traversal this traversal recover tree and return its root example input traversal output example input traversal output nullnullnull example input traversal output null constraints number nodes original tree range nodeval
search rotated sorted array there integer array nums sorted ascending order distinct values prior being passed your function nums possibly rotated unknown pivot index numslength such that resulting array numsk numsk numsn nums nums numsk indexed example might be rotated pivot index and become given array nums after possible rotation and integer target return index target if nums or if not nums must write algorithm olog runtime complexity example input nums target output example input nums target output example input nums target output constraints numslength numsi all values nums unique nums ascending array that possibly rotated target
add edges make degrees all nodes even there undirected graph consisting nodes numbered from given integer and array edges where edgesi ai bi indicates that there edge between nodes ai and bi graph can be disconnected can add most two additional edges possibly none this graph so that there no repeated edges and no selfloops return true if possible make degree each node graph even otherwise return false degree node number edges connected example input edges output true explanation above diagram shows valid way adding edge every node resulting graph connected even number edges example input edges output true explanation above diagram shows valid way adding two edges example input edges output false explanation not possible obtain valid graph adding most edges constraints edgeslength edgesilength ai bi ai bi there no repeated edges
partition string into substrings values most given string consisting digits from and integer partition string called good if each digit part exactly one substring value each substring less than or equal return minimum number substrings good partition if no good partition exists return note that value string its result when interpreted as integer example value and value substring contiguous sequence characters within string example input output explanation can partition string into substrings and each substring has value less than or equal can be shown that cannot partition string into less than substrings example input output explanation there no good partition this string constraints slength si digit from
range sum query immutable given matrix matrix handle multiple queries following type calculate sum elements matrix inside rectangle defined its upper left corner row col and lower right corner row col implement nummatrix class nummatrixint matrix initializes object integer matrix matrix int sumregionint row int col int row int col returns sum elements matrix inside rectangle defined its upper left corner row col and lower right corner row col must design algorithm where sumregion works time complexity example input nummatrix sumregion sumregion sumregion output null explanation nummatrix nummatrix new nummatrix nummatrixsumregion return ie sum red rectangle nummatrixsumregion return ie sum green rectangle nummatrixsumregion return ie sum blue rectangle constraints matrixlength matrixilength matrixij row row col col most calls will be made sumregion
maximum number consecutive values can make given integer array coins length which represents coins that own value ith coin coinsi can make some value if can choose some your coins such that their values sum up return maximum number consecutive integer values that can make your coins starting from and including note that may have multiple coins same value example input coins output explanation can make following values take take can make consecutive integer values starting from example input coins output explanation can make following values take take take take take take take take can make consecutive integer values starting from example input nums output constraints coinslength coinsi
find highest altitude there biker going road trip road trip consists points different altitudes biker starts his trip point altitude equal given integer array gain length where gaini net gain altitude between points and all return highest altitude point example input gain output explanation altitudes highest example input gain output explanation altitudes highest constraints gainlength gaini
tenth line given text file filetxt print just th line file example assume that filetxt has following content line line line line line line line line line line your script should output tenth line which line note if file contains less than lines what should output theres least three different solutions try explore all possibilities
minimum xor sum two arrays given two integer arrays nums and nums length xor sum two integer arrays nums xor nums nums xor nums numsn xor numsn indexed example xor sum and equal xor xor xor rearrange elements nums such that resulting xor sum minimized return xor sum after rearrangement example input nums nums output explanation rearrange nums so that becomes xor sum xor xor example input nums nums output explanation rearrange nums so that becomes xor sum xor xor xor constraints numslength numslength numsi numsi
count hidden sequences given indexed array integers differences which describes differences between each pair consecutive integers hidden sequence length more formally call hidden sequence hidden then have that differencesi hiddeni hiddeni further given two integers lower and upper that describe inclusive range values lower upper that hidden sequence can contain example given differences lower upper hidden sequence sequence length whose elements between and inclusive and possible hidden sequences not possible since contains element greater than not possible since differences not correct return number possible hidden sequences there if there no possible sequences return example input differences lower upper output explanation possible hidden sequences thus return example input differences lower upper output explanation possible hidden sequences thus return example input differences lower upper output explanation there no possible hidden sequences thus return constraints differenceslength differencesi lower upper
minimum number refueling stops car travels from starting position destination which target miles east starting position there gas stations along way gas stations represented as array stations where stationsi positioni fueli indicates that ith gas station positioni miles east starting position and has fueli liters gas car starts infinite tank gas which initially has startfuel liters fuel uses one liter gas per one mile that drives when car reaches gas station may stop and refuel transferring all gas from station into car return minimum number refueling stops car must make order reach its destination if cannot reach destination return note that if car reaches gas station fuel left car can still refuel there if car reaches destination fuel left still considered have arrived example input target startfuel stations output explanation can reach target without refueling example input target startfuel stations output explanation can not reach target or even first gas station example input target startfuel stations output explanation start liters fuel drive position expending liters fuel refuel from liters liters gas then drive from position position expending liters fuel and refuel from liters liters gas then drive and reach target made refueling stops along way so return constraints target startfuel stationslength positioni positioni target fueli
count integers intervals given empty set intervals implement data structure that can add interval set intervals count number integers that present least one interval implement countintervals class countintervals initializes object empty set intervals void addint left int right adds interval left right set intervals int count returns number integers that present least one interval note that interval left right denotes all integers where left right example input countintervals add add count add count output null null null null explanation countintervals countintervals new countintervals initialize object empty set intervals countintervalsadd add set intervals countintervalsadd add set intervals countintervalscount return integers and present interval integers and present interval countintervalsadd add set intervals countintervalscount return integers and present interval integers and present interval integers and present intervals and integers and present interval constraints left right most calls total will be made add and count least one call will be made count
swap salary sql schema table salary column name type id int name varchar sex enum salary int id primary key this table sex column enum value type table contains information about employee write sql query swap all and values ie change all values and vice versa single update statement and no intermediate temporary tables note that must write single update statement do not write any select statement this problem query result format following example example input salary table id name sex salary output id name sex salary explanation and changed from and changed from
maximum equal frequency given array nums positive integers return longest possible length array prefix nums such that possible remove exactly one element from this prefix so that every number that has appeared will have same number occurrences if after removing one element there no remaining elements its still considered that every appeared number has same number ocurrences example input nums output explanation subarray length if remove nums will get so that each number will appear exactly twice example input nums output constraints numslength numsi
symmetric tree given root binary tree check whether mirror itself ie symmetric around its center example input root output true example input root nullnull output false constraints number nodes tree range nodeval follow up could solve both recursively and iteratively
smallest range covering elements from lists have lists sorted integers nondecreasing order find smallest range that includes least one number from each lists define range smaller than range if or if example input nums output explanation list range list range list range example input nums output constraints numslength numsilength numsij numsi sorted nondecreasing order
basic calculator iv given expression such as expression and evaluation map such as given terms evalvars and evalints return list tokens representing simplified expression such as expression alternates chunks and symbols space separating each chunk and symbol chunk either expression parentheses variable or nonnegative integer variable string lowercase letters not including digits note that variables can be multiple letters and note that variables never have leading coefficient or unary operator like or expressions evaluated usual order brackets first then multiplication then addition and subtraction example expression has answer format output as follows each term free variables nonzero coefficient write free variables within term sorted order lexicographically example would never write term like bac only abc terms have degrees equal number free variables being multiplied counting multiplicity write largest degree terms our answer first breaking ties lexicographic order ignoring leading coefficient term example aabc has degree leading coefficient term placed directly left asterisk separating from variables if exist leading coefficient still printed example wellformatted answer aaa aab bb terms including constant terms coefficient not included example expression has output note may assume that given expression always valid all intermediate results will be range example input expression evalvars evalints output example input expression temperature pressure evalvars temperature evalints output pressure example input expression evalvars evalints output ee constraints expressionlength expression consists lowercase english letters digits expression does not contain any leading or trailing spaces all tokens expression separated single space evalvarslength evalvarsilength evalvarsi consists lowercase english letters evalintslength evalvarslength evalintsi
elimination game have list arr all integers range sorted strictly increasing order apply following algorithm arr starting from left right remove first number and every other number afterward until reach end list repeat previous step again but this time from right left remove rightmost number and every other number from remaining numbers keep repeating steps again alternating left right and right left until single number remains given integer return last number that remains arr example input output explanation arr arr arr arr example input output constraints
minimum absolute difference bst given root binary search tree bst return minimum absolute difference between values any two different nodes tree example input root output example input root nullnull output constraints number nodes tree range nodeval note this question same as httpsleetcodecomproblemsminimumdistancebetweenbstnodes
sales person sql schema table salesperson column name type salesid int name varchar salary int commissionrate int hiredate date salesid primary key column this table each row this table indicates name and id salesperson alongside their salary commission rate and hire date table company column name type comid int name varchar city varchar comid primary key column this table each row this table indicates name and id company and city which company located table orders column name type orderid int orderdate date comid int salesid int amount int orderid primary key column this table comid foreign key comid from company table salesid foreign key salesid from salesperson table each row this table contains information about one order this includes id company id salesperson date order and amount paid write sql query report names all salespersons who did not have any orders related company name red return result table any order query result format following example example input salesperson table salesid name salary commissionrate hiredate john amy mark pam alex company table comid name city red boston orange new york yellow boston green austin orders table orderid orderdate comid salesid amount output name amy mark alex explanation according orders and orders table easy tell that only salesperson john and pam have sales company red so report all other names table salesperson
ways make fair array given integer array nums can choose exactly one index indexed and remove element notice that index elements may change after removal example if nums choosing remove index results nums choosing remove index results nums choosing remove index results nums array fair if sum oddindexed values equals sum evenindexed values return number indices that could choose such that after removal nums fair example input nums output explanation remove index even sum odd sum not fair remove index even sum odd sum fair remove index even sum odd sum not fair remove index even sum odd sum not fair there index that can remove make nums fair example input nums output explanation can remove any index and remaining array fair example input nums output explanation cannot make fair array after removing any index constraints numslength numsi
first day where have been all rooms there rooms need visit labeled from each day labeled starting from will go and visit one room day initially day visit room order visit rooms coming days determined following rules and given indexed array nextvisit length assuming that day visit room if have been room odd number times including current visit next day will visit room lower or equal room number specified nextvisiti where nextvisiti if have been room even number times including current visit next day will visit room mod return label first day where have been all rooms can be shown that such day exists since answer may be very large return modulo example input nextvisit output explanation day visit room total times have been room which odd next day will visit room nextvisit day visit room total times have been room which even next day will visit room mod day visit room this first day where have been all rooms example input nextvisit output explanation your room visiting order each day day first day where have been all rooms example input nextvisit output explanation your room visiting order each day day first day where have been all rooms constraints nextvisitlength nextvisiti
kth largest sum binary tree given root binary tree and positive integer level sum tree sum values nodes that same level return kth largest level sum tree not necessarily distinct if there fewer than levels tree return note that two nodes same level if have same distance from root example input root output explanation level sums following level level level level nd largest level sum example input root null output explanation largest level sum constraints number nodes tree nodeval
flip string monotone increasing binary string monotone increasing if consists some number possibly none followed some number also possibly none given binary string can flip si changing from or from return minimum number flips make monotone increasing example input output explanation flip last digit get example input output explanation flip get or alternatively example input output explanation flip get constraints slength si either or
remove all adjacent duplicates string given string consisting lowercase english letters duplicate removal consists choosing two adjacent and equal letters and removing them repeatedly make duplicate removals until no longer can return final string after all such duplicate removals have been made can be proven that answer unique example input abbaca output ca explanation example abbaca could remove bb since letters adjacent and equal and this only possible move result this move that string aaca which only aa possible so final string ca example input azxxzy output ay constraints slength consists lowercase english letters
get biggest three rhombus sums grid given integer matrix grid rhombus sum sum elements that form border regular rhombus shape grid rhombus must have shape square rotated degrees each corners centered grid cell below image four valid rhombus shapes corresponding colored cells that should be included each rhombus sum note that rhombus can have area which depicted purple rhombus bottom right corner return biggest three distinct rhombus sums grid descending order if there less than three distinct values return all them example input grid output explanation rhombus shapes three biggest distinct rhombus sums depicted above blue red green example input grid output explanation rhombus shapes three biggest distinct rhombus sums depicted above blue red area rhombus bottom right corner green area rhombus bottom middle example input grid output explanation all three possible rhombus sums same so return constraints gridlength gridilength gridij
number senior citizens given indexed array strings details each element details provides information about given passenger compressed into string length system such that first ten characters consist phone number passengers next character denotes gender person following two characters used indicate age person last two characters determine seat allotted that person return number passengers who strictly more than years old example input details mff output explanation passengers indices and have ages and thus there people who over years old example input details fm output explanation none passengers older than constraints detailslength detailsilength detailsi consists digits from detailsi either or or phone numbers and seat numbers passengers distinct
goal parser interpretation own goal parser that can interpret string command command consists alphabet andor al some order goal parser will interpret as string as string and al as string al interpreted strings then concatenated original order given string command return goal parsers interpretation command example input command gal output goal explanation goal parser interprets command as follows al al final concatenated result goal example input command gal output gooooal example input command algalg output algaloog constraints commandlength command consists andor al some order
single element sorted array given sorted array consisting only integers where every element appears exactly twice except one element which appears exactly once return single element that appears only once your solution must run olog time and space example input nums output example input nums output constraints numslength numsi
primary department each employee sql schema table employee column name type employeeid int departmentid int primaryflag varchar employeeid departmentid primary key this table employeeid id employee departmentid id department which employee belongs primaryflag enum type if flag department primary department employee if flag department not primary employees can belong multiple departments when employee joins other departments need decide which department their primary department note that when employee belongs only one department their primary column write sql query report all employees their primary department employees who belong one department report their only department return result table any order query result format following example example input employee table employeeid departmentid primaryflag output employeeid departmentid explanation primary department employee primary department employee primary department employee primary department employee
next permutation permutation array integers arrangement its members into sequence or linear order example arr following all permutations arr next permutation array integers next lexicographically greater permutation its integer more formally if all permutations array sorted one container according their lexicographical order then next permutation that array permutation that follows sorted container if such arrangement not possible array must be rearranged as lowest possible order ie sorted ascending order example next permutation arr similarly next permutation arr while next permutation arr because does not have lexicographical larger rearrangement given array integers nums find next permutation nums replacement must be place and use only constant extra memory example input nums output example input nums output example input nums output constraints numslength numsi
house robber iv there several consecutive houses along street each which has some money inside there also robber who wants steal money from homes but refuses steal from adjacent homes capability robber maximum amount money steals from one house all houses robbed given integer array nums representing how much money stashed each house more formally ith house from left has numsi dollars also given integer representing minimum number houses robber will steal from always possible steal least houses return minimum capability robber out all possible ways steal least houses example input nums output explanation there three ways rob least houses rob houses indices and capability maxnums nums rob houses indices and capability maxnums nums rob houses indices and capability maxnums nums therefore return min example input nums output explanation there ways rob houses way which leads minimum capability rob house index and return maxnums nums constraints numslength numsi numslength
make array empty given integer array nums containing distinct numbers and can perform following operations until array empty if first element has smallest value remove otherwise put first element end array return integer denoting number operations takes make nums empty example input nums output operation array example input nums output operation array example input nums output operation array constraints numslength numsi all values nums distinct
possible bipartition want split group people labeled from into two groups any size each person may dislike some other people and should not go into same group given integer and array dislikes where dislikesi ai bi indicates that person labeled ai does not like person labeled bi return true if possible split everyone into two groups this way example input dislikes output true explanation first group has and second group has example input dislikes output false explanation need least groups divide them cannot put them two groups constraints dislikeslength dislikesilength ai bi all pairs dislikes unique
find lucky integer array given array integers arr lucky integer integer that has frequency array equal its value return largest lucky integer array if there no lucky integer return example input arr output explanation only lucky number array because frequency example input arr output explanation and all lucky numbers return largest them example input arr output explanation there no lucky numbers array constraints arrlength arri
flood fill image represented integer grid image where imageij represents pixel value image also given three integers sr sc and color should perform flood fill image starting from pixel imagesrsc perform flood fill consider starting pixel plus any pixels connected directionally starting pixel same color as starting pixel plus any pixels connected directionally those pixels also same color and so replace color all aforementioned pixels color return modified image after performing flood fill example input image sr sc color output explanation from center image position sr sc ie red pixel all pixels connected path same color as starting pixel ie blue pixels colored new color note bottom corner not colored because not directionally connected starting pixel example input image sr sc color output explanation starting pixel already colored so no changes made image constraints imagelength imageilength imageij color sr sc
reverse subarray maximize array value given integer array nums value this array defined as sum numsi numsi all numslength allowed select any subarray given array and reverse can perform this operation only once find maximum possible value final array example input nums output explanation reversing subarray array becomes whose value example input nums output constraints numslength numsi
find greatest common divisor array given integer array nums return greatest common divisor smallest number and largest number nums greatest common divisor two numbers largest positive integer that evenly divides both numbers example input nums output explanation smallest number nums largest number nums greatest common divisor and example input nums output explanation smallest number nums largest number nums greatest common divisor and example input nums output explanation smallest number nums largest number nums greatest common divisor and constraints numslength numsi
find original array from doubled array integer array original transformed into doubled array changed appending twice value every element original and then randomly shuffling resulting array given array changed return original if changed doubled array if changed not doubled array return empty array elements original may be returned any order example input changed output explanation one possible original array could be twice value twice value twice value other original arrays could be or example input changed output explanation changed not doubled array example input changed output explanation changed not doubled array constraints changedlength changedi
alert using same keycard three or more times one hour period leetcode company workers use keycards unlock office doors each time worker uses their keycard security system saves workers name and time when used system emits alert if any worker uses keycard three or more times onehour period given list strings keyname and keytime where keynamei keytimei corresponds persons name and time when their keycard used single day access times given hour time format hhmm such as and return list unique worker names who received alert frequent keycard use sort names ascending order alphabetically notice that considered be within onehour period while not considered be within onehour period example input keyname danieldanieldanielluisluisluisluis keytime output daniel explanation daniel used keycard times onehour period example input keyname alicealicealicebobbobbobbob keytime output bob explanation bob used keycard times onehour period constraints keynamelength keytimelength keynamelength keytimelength keytimei format hhmm keynamei keytimei unique keynameilength keynamei contains only lowercase english letters
sum total strength wizards as ruler kingdom have army wizards your command given indexed integer array strength where strengthi denotes strength ith wizard contiguous group wizards ie wizards strengths form subarray strength total strength defined as product following two values strength weakest wizard group total all individual strengths wizards group return sum total strengths all contiguous groups wizards since answer may be very large return modulo subarray contiguous nonempty sequence elements within array example input strength output explanation following all contiguous groups wizards from has total strength min sum from has total strength min sum from has total strength min sum from has total strength min sum from has total strength min sum from has total strength min sum from has total strength min sum from has total strength min sum from has total strength min sum from has total strength min sum sum all total strengths example input strength output explanation following all contiguous groups wizards from has total strength min sum from has total strength min sum from has total strength min sum from has total strength min sum from has total strength min sum from has total strength min sum sum all total strengths constraints strengthlength strengthi
minimize total price trips there exists undirected and unrooted tree nodes indexed from given integer and integer array edges length where edgesi ai bi indicates that there edge between nodes ai and bi tree each node has associated price given integer array price where pricei price ith node price sum given path sum prices all nodes lying that path additionally given integer array trips where tripsi starti endi indicates that start ith trip from node starti and travel node endi any path like before performing your first trip can choose some nonadjacent nodes and halve prices return minimum total price sum perform all given trips example input edges price trips output explanation diagram above denotes tree after rooting node first part shows initial tree and second part shows tree after choosing nodes and and making their price half st trip choose path price sum that path nd trip choose path price sum that path rd trip choose path price sum that path total price sum all trips can be proven that minimum answer that can achieve example input edges price trips output explanation diagram above denotes tree after rooting node first part shows initial tree and second part shows tree after choosing node and making its price half st trip choose path price sum that path total price sum all trips can be proven that minimum answer that can achieve constraints edgeslength ai bi edges represents valid tree pricelength pricei even integer pricei tripslength starti endi
camelcase matching given array strings queries and string pattern return boolean array answer where answeri true if queriesi matches pattern and false otherwise query word queriesi matches pattern if can insert lowercase english letters pattern so that equals query may insert each character any position and may not insert any characters example input queries foobarfoobartestfootballframebufferforcefeedback pattern fb output truefalsetruetruefalse explanation foobar can be generated like this oo ar football can be generated like this oot all framebuffer can be generated like this rame uffer example input queries foobarfoobartestfootballframebufferforcefeedback pattern foba output truefalsetruefalsefalse explanation foobar can be generated like this fo ba football can be generated like this fo ot ba ll example input queries foobarfoobartestfootballframebufferforcefeedback pattern fobat output falsetruefalsefalsefalse explanation foobartest can be generated like this fo ba est constraints patternlength querieslength queriesilength queriesi and pattern consist english letters
vowel spellchecker given wordlist want implement spellchecker that converts query word into correct word given query word spell checker handles two categories spelling mistakes capitalization if query matches word wordlist caseinsensitive then query word returned same case as case wordlist example wordlist yellow query yellow correct yellow example wordlist yellow query yellow correct yellow example wordlist yellow query yellow correct yellow vowel errors if after replacing vowels query word any vowel individually matches word wordlist caseinsensitive then query word returned same case as match wordlist example wordlist yellow query yollow correct yellow example wordlist yellow query yeellow correct no match example wordlist yellow query yllw correct no match addition spell checker operates under following precedence rules when query exactly matches word wordlist casesensitive should return same word back when query matches word up capitlization should return first such match wordlist when query matches word up vowel errors should return first such match wordlist if query has no matches wordlist should return empty string given some queries return list words answer where answeri correct word query queriesi example input wordlist kitekiteharehare queries kitekitekitehareharehearhearketikeetketo output kitekitekitehareharekitekite example input wordlist yellow queries yellow output yellow constraints wordlistlength querieslength wordlistilength queriesilength wordlisti and queriesi consist only only english letters
count number bad pairs given indexed integer array nums pair indices bad pair if and numsj numsi return total number bad pairs nums example input nums output explanation pair bad pair since pair bad pair since pair bad pair since pair bad pair since pair bad pair since there total bad pairs so return example input nums output explanation there no bad pairs constraints numslength numsi
copy list random pointer linked list length given such that each node contains additional random pointer which could point any node list or null construct deep copy list deep copy should consist exactly brand new nodes where each new node has its value set value its corresponding original node both next and random pointer new nodes should point new nodes copied list such that pointers original list and copied list represent same list state none pointers new list should point nodes original list example if there two nodes and original list where xrandom then corresponding two nodes and copied list xrandom return head copied linked list linked list represented inputoutput as list nodes each node represented as pair val randomindex where val integer representing nodeval randomindex index node range from that random pointer points or null if does not point any node your code will only be given head original linked list example input head null output null example input head output example input head nullnull output nullnull constraints nodeval noderandom null or pointing some node linked list
lemonade change lemonade stand each lemonade costs customers standing queue buy from and order one time order specified bills each customer will only buy one lemonade and pay either or bill must provide correct change each customer so that net transaction that customer pays note that do not have any change hand first given integer array bills where billsi bill ith customer pays return true if can provide every customer correct change or false otherwise example input bills output true explanation from first customers collect three bills order from fourth customer collect bill and give back from fifth customer give bill and bill since all customers got correct change output true example input bills output false explanation from first two customers order collect two bills next two customers order collect bill and give back bill last customer can not give change back because only have two bills since not every customer received correct change answer false constraints billslength billsi either or
skyline problem citys skyline outer contour silhouette formed all buildings that city when viewed from distance given locations and heights all buildings return skyline formed these buildings collectively geometric information each building given array buildings where buildingsi lefti righti heighti lefti coordinate left edge ith building righti coordinate right edge ith building heighti height ith building may assume all buildings perfect rectangles grounded absolutely flat surface height skyline should be represented as list key points sorted their xcoordinate form xyxy each key point left endpoint some horizontal segment skyline except last point list which always has ycoordinate and used mark skylines termination where rightmost building ends any ground between leftmost and rightmost buildings should be part skylines contour note there must be no consecutive horizontal lines equal height output skyline instance not acceptable three lines height should be merged into one final output as such example input buildings output explanation figure shows buildings input figure shows skyline formed those buildings red points figure represent key points output list example input buildings output constraints buildingslength lefti righti heighti buildings sorted lefti nondecreasing order
contains duplicate ii given integer array nums and integer return true if there two distinct indices and array such that numsi numsj and absi example input nums output true example input nums output true example input nums output false constraints numslength numsi
minimum obstacle removal reach corner given indexed integer array grid size each cell has one two values represents empty cell represents obstacle that may be removed can move up down left or right from and empty cell return minimum number obstacles remove so can move from upper left corner lower right corner example input grid output explanation can remove obstacles and create path from can be shown that need remove least obstacles so return note that there may be other ways remove obstacles create path example input grid output explanation can move from without removing any obstacles so return constraints gridlength gridilength gridij either or grid gridm
employee that worked longest task there employees each unique id from given integer array logs where logsi idi leavetimei where idi id employee that worked ith task and leavetimei time which employee finished ith task all values leavetimei unique note that ith task starts moment right after th task ends and th task starts time return id employee that worked task longest time if there tie between two or more employees return smallest id among them example input logs output explanation task started and ended units times task started and ended units times task started and ended units times task started and ended units times task longest time task and employee id one that worked so return example input logs output explanation task started and ended unit times task started and ended units times task started and ended units times task started and ended units times tasks longest time task employee that worked so return example input logs output explanation task started and ended units times task started and ended units times tasks longest time tasks and employees that worked them and so return smallest id constraints logslength logsilength idi leavetimei idi idi leavetimei sorted strictly increasing order
nqueens nqueens puzzle problem placing queens chessboard such that no two queens attack each other given integer return all distinct solutions nqueens puzzle may return answer any order each solution contains distinct board configuration nqueens placement where and both indicate queen and empty space respectively example input output qqqqqqqq explanation there exist two distinct solutions queens puzzle as shown above example input output constraints
watering plants ii alice and bob want water plants their garden plants arranged row and labeled from from left right where ith plant located each plant needs specific amount water alice and bob have watering can each initially full water plants following way alice waters plants order from left right starting from th plant bob waters plants order from right left starting from th plant begin watering plants simultaneously takes same amount time water each plant regardless how much water needs alicebob must water plant if have enough their can fully water otherwise first refill their can instantaneously then water plant case both alice and bob reach same plant one more water currently hisher watering can should water this plant if have same amount water then alice should water this plant given indexed integer array plants integers where plantsi amount water ith plant needs and two integers capacitya and capacityb representing capacities alices and bobs watering cans respectively return number times have refill water all plants example input plants capacitya capacityb output explanation initially alice and bob have units water each their watering cans alice waters plant bob waters plant alice and bob now have units and units water respectively alice has enough water plant so waters bob does not have enough water plant so refills his can then waters so total number times have refill water all plants example input plants capacitya capacityb output explanation initially alice and bob have units and units water their watering cans respectively alice waters plant bob waters plant alice and bob now have unit water each and need water plants and respectively since neither them have enough water their current plants refill their cans and then water plants so total number times have refill water all plants example input plants capacitya capacityb output explanation there only one plant alices watering can has units water whereas bobs can has units since alice has more water her can waters this plant so total number times have refill constraints plantslength plantsi maxplantsi capacitya capacityb
erect fence given array trees where treesi xi yi represents location tree garden fence entire garden using minimum length rope as expensive garden wellfenced only if all trees enclosed return coordinates trees that exactly located fence perimeter may return answer any order example input trees output explanation all trees will be perimeter fence except tree which will be inside fence example input trees output explanation fence forms line that passes through all trees constraints treeslength treesilength xi yi all given positions unique
groups strings given indexed array strings words each string consists lowercase english letters only no letter occurs more than once any string words two strings and said be connected if set letters can be obtained from set letters any one following operations adding exactly one letter set letters deleting exactly one letter from set letters replacing exactly one letter from set letters any letter including itself array words can be divided into one or more nonintersecting groups string belongs group if any one following true connected least one other string group only string present group note that strings words should be grouped such manner that string belonging group cannot be connected string present any other group can be proved that such arrangement always unique return array ans size where ans maximum number groups words can be divided into and ans size largest group example input words ababcde output explanation words can be used obtain words replacing and words adding so words connected words and words words can be used obtain words replacing and words adding so words connected words and words words can be used obtain words deleting and words deleting so words connected words and words words not connected any string words thus words can be divided into groups abab and cde size largest group example input words aababc output explanation words connected words words connected words and words words connected words since all strings connected each other should be grouped together thus size largest group constraints wordslength wordsilength wordsi consists lowercase english letters only no letter occurs more than once wordsi
minimum number operations convert time given two strings current and correct representing two hour times hour times formatted as hhmm where hh between and and mm between and earliest hour time and latest one operation can increase time current or minutes can perform this operation any number times return minimum number operations needed convert current correct example input current correct output explanation can convert current correct operations as follows add minutes current current becomes add minutes current current becomes add minutes current current becomes can be proven that not possible convert current correct fewer than operations example input current correct output explanation only have add one minute current so minimum number operations needed constraints current and correct format hhmm current correct
spiral matrix given matrix return all elements matrix spiral order example input matrix output example input matrix output constraints matrixlength matrixilength matrixij
number ways select buildings given indexed binary string which represents types buildings along street where si denotes that ith building office and si denotes that ith building restaurant as city official would like select buildings random inspection however ensure variety no two consecutive buildings out selected buildings can be same type example given cannot select st rd and th buildings as that would form which not allowed due having two consecutive buildings same type return number valid ways select buildings example input output explanation following sets indices selected valid from forms from forms from forms from forms from forms from forms no other selection valid thus there total ways example input output explanation can be shown that there no valid selections constraints slength si either or
minimum cost connect two groups points given two groups points where first group has size points second group has size points and size size cost connection between any two points given size size matrix where costij cost connecting point first group and point second group groups connected if each point both groups connected one or more points opposite group other words each point first group must be connected least one point second group and each point second group must be connected least one point first group return minimum cost takes connect two groups example input cost output explanation optimal way connecting groups this results total cost example input cost output explanation optimal way connecting groups this results total cost note that there multiple points connected point first group and point second group this does not matter as there no limit number points that can be connected only care about minimum total cost example input cost output constraints size costlength size costilength size size size size costij
maximum matching players trainers given indexed integer array players where playersi represents ability ith player also given indexed integer array trainers where trainersj represents training capacity jth trainer ith player can match jth trainer if players ability less than or equal trainers training capacity additionally ith player can be matched most one trainer and jth trainer can be matched most one player return maximum number matchings between players and trainers that satisfy these conditions example input players trainers output explanation one ways can form two matchings as follows players can be matched trainers since players can be matched trainers since can be proven that maximum number matchings that can be formed example input players trainers output explanation trainer can be matched any players each player can only be matched one trainer so maximum answer constraints playerslength trainerslength playersi trainersj
reverse nodes kgroup given head linked list reverse nodes list time and return modified list positive integer and less than or equal length linked list if number nodes not multiple then leftout nodes end should remain as may not alter values lists nodes only nodes themselves may be changed example input head output example input head output constraints number nodes list nodeval followup can solve problem extra memory space
minimum impossible or given indexed integer array nums say that integer expressible from nums if there exist some integers index index indexk numslength which numsindex numsindex numsindexk other words integer expressible if can be written as bitwise or some subsequence nums return minimum positive nonzero integer that not expressible from nums example input nums output explanation and already present array know that expressible since nums nums since not expressible return example input nums output explanation can show that smallest number that not expressible constraints numslength numsi
execution all suffix instructions staying grid there grid topleft cell and bottomright cell given integer and integer array startpos where startpos startrow startcol indicates that robot initially cell startrow startcol also given indexed string length where si ith instruction robot move left move right move up and move down robot can begin executing from any ith instruction executes instructions one one towards end but stops if either these conditions met next instruction will move robot off grid there no more instructions left execute return array answer length where answeri number instructions robot can execute if robot begins executing from ith instruction example input startpos rrddlu output explanation starting from startpos and beginning execution from ith instruction th rrddlu only one instruction can be executed before moves off grid st rddlu all five instructions can be executed while stays grid and ends nd ddlu all four instructions can be executed while stays grid and ends rd dlu all three instructions can be executed while stays grid and ends th lu only one instruction can be executed before moves off grid th if moving up would move off grid example input startpos lurd output explanation th lurd st urd nd rd rd example input startpos lrud output explanation no matter which instruction robot begins execution from would move off grid constraints slength startposlength startrow startcol consists and
earliest and latest rounds where players compete there tournament where players participating players standing single row and numbered from based their initial standing position player first player row player second player row etc tournament consists multiple rounds starting from round number each round ith player from front row competes against ith player from end row and winner advances next round when number players odd current round player middle automatically advances next round example if row consists players player competes against player player competes against player player automatically advances next round after each round over winners lined back up row based original ordering assigned them initially ascending order players numbered firstplayer and secondplayer best tournament can win against any other player before compete against each other if any two other players compete against each other either them might win and thus may choose outcome this round given integers firstplayer and secondplayer return integer array containing two values earliest possible round number and latest possible round number which these two players will compete against each other respectively example input firstplayer secondplayer output explanation one possible scenario which leads earliest round number first round second round third round one possible scenario which leads latest round number first round second round third round fourth round example input firstplayer secondplayer output explanation players numbered and compete first round there no way make them compete any other round constraints firstplayer secondplayer
convert sorted list binary search tree given head singly linked list where elements sorted ascending order convert heightbalanced binary search tree example input head output null explanation one possible answer null which represents shown height balanced bst example input head output constraints number nodes head range nodeval
promise time limit given asyncronous function fn and time milliseconds return new time limited version input function time limited function function that identical original unless takes longer than milliseconds fullfill that case will reject time limit exceeded note that should reject string not error example input fn async await new promiseres settimeoutres return inputs output rejectedtime limit exceededtime explanation provided function set resolve after ms however time limit set ms rejects tms because time limit reached example input fn async await new promiseres settimeoutres return inputs output resolvedtime explanation function resolved tms time limit never reached example input fn async await new promiseres settimeoutres return inputs output resolvedtime explanation function resolved tms time limit never reached example input fn async throw error inputs output rejectederrortime explanation function immediately throws error constraints inputslength fn returns promise
number lines write string given string lowercase english letters and array widths denoting how many pixels wide each lowercase english letter specifically widths width widths width and so trying write across several lines where each line no longer than pixels starting beginning write as many letters first line such that total width does not exceed pixels then from where stopped continue writing as many letters as can second line continue this process until have written all return array result length where result total number lines result width last line pixels example input widths abcdefghijklmnopqrstuvwxyz output explanation can write as follows abcdefghij pixels wide klmnopqrst pixels wide uvwxyz pixels wide there total lines and last line pixels wide example input widths bbbcccdddaaa output explanation can write as follows bbbcccdddaa pixels wide pixels wide there total lines and last line pixels wide constraints widthslength widthsi slength contains only lowercase english letters
maximize greatness array given indexed integer array nums allowed permute nums into new array perm your choosing define greatness nums be number indices numslength which permi numsi return maximum possible greatness can achieve after permuting nums example input nums output explanation one optimal rearrangements perm indices and permi numsi hence return example input nums output explanation can prove optimal perm indices and permi numsi hence return constraints numslength numsi
graph connectivity threshold have cities labeled from two different cities labels and directly connected bidirectional road if and only if and share common divisor strictly greater than some threshold more formally cities labels and have road between them if there exists integer such that all following true and threshold given two integers and threshold and array queries must determine each queriesi ai bi if cities ai and bi connected directly or indirectly ie there some path between them return array answer where answerlength querieslength and answeri true if ith query there path between ai and bi or answeri false if there no path example input threshold queries output falsefalsetrue explanation divisors each number using underlined divisors above threshold only cities and share common divisor so only ones directly connected result each query not connected not connected connected through path example input threshold queries output truetruetruetruetrue explanation divisors each number same as previous example however since threshold all divisors can be used since all numbers share as divisor all cities connected example input threshold queries output falsefalsefalsefalsefalse explanation only cities and share common divisor which strictly greater than threshold so only ones directly connected please notice that there can be multiple queries same pair nodes and that query equivalent query constraints threshold querieslength queriesilength ai bi cities ai bi
path sum iii given root binary tree and integer targetsum return number paths where sum values along path equals targetsum path does not need start or end root or leaf but must go downwards ie traveling only from parent nodes child nodes example input root nullnull targetsum output explanation paths that sum shown example input root nullnullnull targetsum output constraints number nodes tree range nodeval targetsum
reduction operations make array elements equal given integer array nums your goal make all elements nums equal complete one operation follow these steps find largest value nums let its index be indexed and its value be largest if there multiple elements largest value pick smallest find next largest value nums strictly smaller than largest let its value be nextlargest reduce numsi nextlargest return number operations make all elements nums equal example input nums output explanation takes operations make all elements nums equal largest index nextlargest reduce nums nums largest index nextlargest reduce nums nums largest index nextlargest reduce nums nums example input nums output explanation all elements nums already equal example input nums output explanation takes operations make all elements nums equal largest index nextlargest reduce nums nums largest index nextlargest reduce nums nums largest index nextlargest reduce nums nums largest index nextlargest reduce nums nums constraints numslength numsi
find smallest letter greater than target given array characters letters that sorted nondecreasing order and character target there least two different characters letters return smallest character letters that lexicographically greater than target if such character does not exist return first character letters example input letters cfj target output explanation smallest character that lexicographically greater than letters example input letters cfj target output explanation smallest character that lexicographically greater than letters example input letters xxyy target output explanation there no characters letters that lexicographically greater than so return letters constraints letterslength lettersi lowercase english letter letters sorted nondecreasing order letters contains least two different characters target lowercase english letter
length longest fibonacci subsequence sequence xn fibonaccilike if xi xi xi all given strictly increasing array arr positive integers forming sequence return length longest fibonaccilike subsequence arr if one does not exist return subsequence derived from another sequence arr deleting any number elements including none from arr without changing order remaining elements example subsequence example input arr output explanation longest subsequence that fibonaccilike example input arr output explanation longest subsequence that fibonaccilike or constraints arrlength arri arri
process tasks using servers given two indexed integer arrays servers and tasks lengths and respectively serversi weight ith server and tasksj time needed process jth task seconds tasks assigned servers using task queue initially all servers free and queue empty second jth task inserted into queue starting th task being inserted second as long as there free servers and queue not empty task front queue will be assigned free server smallest weight and case tie assigned free server smallest index if there no free servers and queue not empty wait until server becomes free and immediately assign next task if multiple servers become free same time then multiple tasks from queue will be assigned order insertion following weight and index priorities above server that assigned task second will be free again second tasksj build array ans length where ansj index server jth task will be assigned return array ans example input servers tasks output explanation events chronological order go as follows second task added and processed using server until second second server becomes free task added and processed using server until second second task added and processed using server until second second server becomes free task added and processed using server until second second task added and processed using server until second second all servers become free task added and processed using server until second example input servers tasks output explanation events chronological order go as follows second task added and processed using server until second second task added and processed using server until second second servers and become free task added and processed using server until second second task added and processed using server until second second server becomes free task added and processed using server until second second task added and processed using server until second second task added and processed using server until second constraints serverslength taskslength serversi tasksj
longest palindromic substring given string return longest palindromic substring example input babad output bab explanation aba also valid answer example input cbbd output bb constraints slength consist only digits and english letters
daily leads and partners sql schema table dailysales column name type dateid date makename varchar leadid int partnerid int this table does not have primary key this table contains date and name product sold and ids lead and partner sold name consists only lowercase english letters write sql query that will each dateid and makename return number distinct leadids and distinct partnerids return result table any order query result format following example example input dailysales table dateid makename leadid partnerid toyota toyota toyota toyota toyota honda honda honda honda honda output dateid makename uniqueleads uniquepartners toyota toyota honda honda explanation toyota gets leads and partners while honda gets leads and partners toyota gets leads and partners while honda gets leads and partners
search suggestions system given array strings products and string searchword design system that suggests most three product names from products after each character searchword typed suggested products should have common prefix searchword if there more than three products common prefix return three lexicographically minimums products return list lists suggested products after each character searchword typed example input products mobilemousemoneypotmonitormousepad searchword mouse output mobilemoneypotmonitormobilemoneypotmonitormousemousepadmousemousepadmousemousepad explanation products sorted lexicographically mobilemoneypotmonitormousemousepad after typing and mo all products match and show user mobilemoneypotmonitor after typing mou mous and mouse system suggests mousemousepad example input products havana searchword havana output havanahavanahavanahavanahavanahavana explanation only word havana will be always suggested while typing search word constraints productslength productsilength sumproductsilength all strings products unique productsi consists lowercase english letters searchwordlength searchword consists lowercase english letters
random pick weight given indexed array positive integers where wi describes weight ith index need implement function pickindex which randomly picks index range wlength inclusive and returns probability picking index wi sumw example if probability picking index ie and probability picking index ie example input solutionpickindex output null explanation solution solution new solution solutionpickindex return only option return since there only one element example input solutionpickindexpickindexpickindexpickindexpickindex output null explanation solution solution new solution solutionpickindex return returning second element index that has probability solutionpickindex return solutionpickindex return solutionpickindex return solutionpickindex return returning first element index that has probability since this randomization problem multiple answers allowed all following outputs can be considered correct null null null null null and so constraints wlength wi pickindex will be called most times
snapshot array implement snapshotarray that supports following interface snapshotarrayint length initializes arraylike data structure given length initially each element equals void setindex val sets element given index be equal val int snap takes snapshot array and returns snapid total number times called snap minus int getindex snapid returns value given index time took snapshot given snapid example input snapshotarraysetsnapsetget output nullnullnull explanation snapshotarray snapshotarr new snapshotarray set length be snapshotarrset set array snapshotarrsnap take snapshot return snapid snapshotarrset snapshotarrget get value array snapid return constraints length index length val snapid total number times call snap most calls will be made set snap and get
number steps reduce number zero given integer num return number steps reduce zero one step if current number even have divide otherwise have subtract from example input num output explanation step even divide and obtain step odd subtract and obtain step even divide and obtain step odd subtract and obtain step even divide and obtain step odd subtract and obtain example input num output explanation step even divide and obtain step even divide and obtain step even divide and obtain step odd subtract and obtain example input num output constraints num
minimum height trees tree undirected graph which any two vertices connected exactly one path other words any connected graph without simple cycles tree given tree nodes labelled from and array edges where edgesi ai bi indicates that there undirected edge between two nodes ai and bi tree can choose any node tree as root when select node as root result tree has height among all possible rooted trees those minimum height ie minh called minimum height trees mhts return list all mhts root labels can return answer any order height rooted tree number edges longest downward path between root and leaf example input edges output explanation as shown height tree when root node label which only mht example input edges output constraints edgeslength ai bi ai bi all pairs ai bi distinct given input guaranteed be tree and there will be no repeated edges
check if and its double exist given array arr integers check if there exist two indices and such that arrlength arri arrj example input arr output true explanation and arri arrj example input arr output false explanation there no and that satisfy conditions constraints arrlength arri
unique paths ii given integer array grid there robot initially located topleft corner ie grid robot tries move bottomright corner ie gridm robot can only move either down or right any point time obstacle and space marked as or respectively grid path that robot takes cannot include any square that obstacle return number possible unique paths that robot can take reach bottomright corner testcases generated so that answer will be less than or equal example input obstaclegrid output explanation there one obstacle middle grid above there two ways reach bottomright corner right right down down down down right right example input obstaclegrid output constraints obstaclegridlength obstaclegridilength obstaclegridij or
nth highest salary sql schema table employee column name type id int salary int id primary key column this table each row this table contains information about salary employee write sql query report nth highest salary from employee table if there no nth highest salary query should report null query result format following example example input employee table id salary output getnthhighestsalary example input employee table id salary output getnthhighestsalary null
number rectangles that can form largest square given array rectangles where rectanglesi li wi represents ith rectangle length li and width wi can cut ith rectangle form square side length if both li and wi example if have rectangle can cut get square side length most let maxlen be side length largest square can obtain from any given rectangles return number rectangles that can make square side length maxlen example input rectangles output explanation largest squares can get from each rectangle lengths largest possible square length and can get out rectangles example input rectangles output constraints rectangleslength rectanglesilength li wi li wi
valid palindrome ii given string return true if can be palindrome after deleting most one character from example input aba output true example input abca output true explanation could delete character example input abc output false constraints slength consists lowercase english letters
find duplicate number given array integers nums containing integers where each integer range inclusive there only one repeated number nums return this repeated number must solve problem without modifying array nums and uses only constant extra space example input nums output example input nums output constraints numslength numsi all integers nums appear only once except precisely one integer which appears two or more times follow up how can prove that least one duplicate number must exist nums can solve problem linear runtime complexity
number pairs strings concatenation equal target given array digit strings nums and digit string target return number pairs indices where such that concatenation numsi numsj equals target example input nums target output explanation valid pairs example input nums target output explanation valid pairs example input nums target output explanation valid pairs constraints numslength numsilength targetlength numsi and target consist digits numsi and target do not have leading zeros
brace expansion ii under grammar given below strings can represent set lowercase words let rexpr denote set words expression represents grammar can best be understood through simple examples single letters represent singleton set containing that word ra rw when take commadelimited list two or more expressions take union possibilities rabc abc rabbc abc notice final set only contains each word most once when concatenate two expressions take set possible concatenations between two words where first word comes from first expression and second word comes from second expression rabcd acadbcbd rabcdefgh abdfg abdfh abefg abefh acdfg acdfh acefg acefh formally three rules our grammar every lowercase letter have rx expressions ek have re re  re  expressions and have re re re where denotes concatenation and denotes cartesian product given expression representing set words under given grammar return sorted list words that expression represents example input expression abcde output acadaebcbdbe example input expression azabcabz output aabacz explanation each distinct word written only once final answer constraints expressionlength expressioni consists or lowercase english letters given expression represents set words based grammar given description
number submatrices that sum target given matrix and target return number nonempty submatrices that sum target submatrix set all cells matrixxy and two submatrices and different if have some coordinate that different example if example input matrix target output explanation four submatrices that only contain example input matrix target output explanation two submatrices plus two submatrices plus submatrix example input matrix target output constraints matrixlength matrixlength matrixi target
brick wall there rectangular brick wall front rows bricks ith row has some number bricks each same height ie one unit but can be different widths total width each row same draw vertical line from top bottom and cross least bricks if your line goes through edge brick then brick not considered as crossed cannot draw line just along one two vertical edges wall which case line will obviously cross no bricks given array wall that contains information about wall return minimum number crossed bricks after drawing such vertical line example input wall output example input wall output constraints walllength wallilength sumwallilength sumwalli same each row wallij
random flip matrix there binary grid matrix all values set initially design algorithm randomly pick index where matrixij and flips all indices where matrixij should be equally likely be returned optimize your algorithm minimize number calls made builtin random function your language and optimize time and space complexity implement solution class solutionint int initializes object size binary matrix and int flip returns random index matrix where matrixij and flips void reset resets all values matrix be example input solution flip flip flip reset flip output null null explanation solution solution new solution solutionflip return and should be equally likely be returned solutionflip return since returned and solutionflip return based previously returned indices only can be returned solutionreset all values reset and can be returned solutionflip return and should be equally likely be returned constraints there will be least one free cell each call flip most calls will be made flip and reset
power two given integer return true if power two otherwise return false integer power two if there exists integer such that example input output true explanation example input output true explanation example input output false constraints follow up could solve without loopsrecursion
maximum bags full capacity rocks have bags numbered from given two indexed integer arrays capacity and rocks ith bag can hold maximum capacityi rocks and currently contains rocksi rocks also given integer additionalrocks number additional rocks can place any bags return maximum number bags that could have full capacity after placing additional rocks some bags example input capacity rocks additionalrocks output explanation place rock bag and rock bag number rocks each bag now bags and have full capacity there bags full capacity so return can be shown that not possible have more than bags full capacity note that there may be other ways placing rocks that result answer example input capacity rocks additionalrocks output explanation place rocks bag and rocks bag number rocks each bag now bags and have full capacity there bags full capacity so return can be shown that not possible have more than bags full capacity note that did not use all additional rocks constraints capacitylength rockslength capacityi rocksi capacityi additionalrocks
implement stack using queues implement lastinfirstout lifo stack using only two queues implemented stack should support all functions normal stack push top pop and empty implement mystack class void pushint pushes element top stack int pop removes element top stack and returns int top returns element top stack boolean empty returns true if stack empty false otherwise notes must use only standard operations queue which means that only push back peekpop from front size and empty operations valid depending your language queue may not be supported natively may simulate queue using list or deque doubleended queue as long as use only queues standard operations example input mystack push push top pop empty output null null null false explanation mystack mystack new mystack mystackpush mystackpush mystacktop return mystackpop return mystackempty return false constraints most calls will be made push pop top and empty all calls pop and top valid followup can implement stack using only one queue
create binary tree from descriptions given integer array descriptions where descriptionsi parenti childi islefti indicates that parenti parent childi binary tree unique values furthermore if islefti then childi left child parenti if islefti then childi right child parenti construct binary tree described descriptions and return its root test cases will be generated such that binary tree valid example input descriptions output explanation root node node value since has no parent resulting binary tree shown diagram example input descriptions output nullnull explanation root node node value since has no parent resulting binary tree shown diagram constraints descriptionslength descriptionsilength parenti childi islefti binary tree described descriptions valid
minimum path cost grid given indexed integer matrix grid consisting distinct integers from can move this matrix from cell any other cell next row that if cell such that can move any cells note that not possible move from cells last row each possible move has cost given indexed array movecost size where movecostij cost moving from cell value cell column next row cost moving from cells last row grid can be ignored cost path grid sum all values cells visited plus sum costs all moves made return minimum cost path that starts from any cell first row and ends any cell last row example input grid movecost output explanation path minimum possible cost path sum values cells visited cost moving from cost moving from so total cost path example input grid movecost output explanation path minimum possible cost path sum values cells visited cost moving from so total cost this path constraints gridlength gridilength grid consists distinct integers from movecostlength movecostilength movecostij
basic calculator given string representing valid expression implement basic calculator evaluate and return result evaluation note not allowed use any builtin function which evaluates strings as mathematical expressions such as eval example input output example input output example input output constraints slength consists digits and represents valid expression not used as unary operation ie and invalid could be used as unary operation ie and valid there will be no two consecutive operators input every number and running calculation will fit signed bit integer
minimum depth binary tree given binary tree find its minimum depth minimum depth number nodes along shortest path from root node down nearest leaf node note leaf node no children example input root nullnull output example input root nullnullnullnull output constraints number nodes tree range nodeval
transform chessboard given binary grid board each move can swap any two rows each other or any two columns each other return minimum number moves transform board into chessboard board if task impossible return chessboard board board where no and no directionally adjacent example input board output explanation one potential sequence moves shown first move swaps first and second column second move swaps second and third row example input board output explanation also note that board top left corner also valid chessboard example input board output explanation no matter what sequence moves make cannot end valid chessboard constraints boardlength boardilength boardij either or
json deep equal given two objects and check if deeply equal two objects be deeply equal must contain same keys and associated values must also be deeply equal two objects also considered deeply equal if pass equality check may assume both objects output jsonparse other words valid json please solve without using lodashs isequal function example input xy xy output true explanation keys and values match exactly example input yx xy output true explanation although keys different order still match exactly example input xnulll xnulll output false explanation array numbers different from array strings example input true false output false explanation true false constraints jsonstringifyolength jsonstringifyolength maxnestingdepth
check if word valid after substitutions given string determine if valid string valid if starting empty string can transform into after performing following operation any number times insert string abc into any position more formally becomes tleft abc tright where tleft tright note that tleft and tright may be empty return true if valid string otherwise return false example input aabcbc output true explanation abc aabcbc thus aabcbc valid example input abcabcababcc output true explanation abc abcabc abcabcabc abcabcababcc thus abcabcababcc valid example input abccba output false explanation impossible get abccba using operation constraints slength consists letters and
maximal square given binary matrix filled and find largest square containing only and return its area example input matrix output example input matrix output example input matrix output constraints matrixlength matrixilength matrixij or
longest cycle graph given directed graph nodes numbered from where each node has most one outgoing edge graph represented given indexed array edges size indicating that there directed edge from node node edgesi if there no outgoing edge from node then edgesi return length longest cycle graph if no cycle exists return cycle path that starts and ends same node example input edges output explanation longest cycle graph cycle length this cycle so returned example input edges output explanation there no cycles this graph constraints edgeslength edgesi edgesi
baseball game keeping scores baseball game strange rules beginning game start empty record given list strings operations where operationsi ith operation must apply record and one following integer record new score record new score that sum previous two scores record new score that double previous score invalidate previous score removing from record return sum all scores record after applying all operations test cases generated such that answer and all intermediate calculations fit bit integer and that all operations valid example input ops cd output explanation add record record now add record record now invalidate and remove previous score record now add record record now add record record now total sum example input ops cd output explanation add record record now add record record now add record record now invalidate and remove previous score record now add record record now add record record now add record record now add record record now total sum example input ops output explanation add record record now invalidate and remove previous score record now since record empty total sum constraints operationslength operationsi or string representing integer range operation there will always be least two previous scores record operations and there will always be least one previous score record
queue reconstruction height given array people people which attributes some people queue not necessarily order each peoplei hi ki represents ith person height hi exactly ki other people front who have height greater than or equal hi reconstruct and return queue that represented input array people returned queue should be formatted as array queue where queuej hj kj attributes jth person queue queue person front queue example input people output explanation person has height no other people taller or same height front person has height no other people taller or same height front person has height two persons taller or same height front which person and person has height one person taller or same height front which person person has height four people taller or same height front which people and person has height one person taller or same height front which person hence reconstructed queue example input people output constraints peoplelength hi ki peoplelength guaranteed that queue can be reconstructed
maximum product splitted binary tree given root binary tree split binary tree into two subtrees removing one edge such that product sums subtrees maximized return maximum product sums two subtrees since answer may be too large return modulo note that need maximize answer before taking mod and not after taking example input root output explanation remove red edge and get binary trees sum and their product example input root nullnullnull output explanation remove red edge and get binary trees sum and their product constraints number nodes tree range nodeval
maximum matrix sum given integer matrix can do following operation any number times choose any two adjacent elements matrix and multiply each them two elements considered adjacent if and only if share border your goal maximize summation matrixs elements return maximum sum matrixs elements using operation mentioned above example input matrix output explanation can follow following steps reach sum equals multiply elements first row multiply elements first column example input matrix output explanation can follow following step reach sum equals multiply last elements second row constraints matrixlength matrixilength matrixij
matrix block sum given matrix mat and integer return matrix answer where each answerij sum all elements matrc and valid position matrix example input mat output example input mat output constraints matlength matilength matij
minimum deletions make array divisible given two positive integer arrays nums and numsdivide can delete any number elements from nums return minimum number deletions such that smallest element nums divides all elements numsdivide if this not possible return note that integer divides if example input nums numsdivide output explanation smallest element which does not divide all elements numsdivide use deletions delete elements nums that equal which makes nums smallest element which divides all elements numsdivide can be shown that minimum number deletions needed example input nums numsdivide output explanation want smallest element nums divide all elements numsdivide there no way delete elements from nums allow this constraints numslength numsdividelength numsi numsdividei
time based keyvalue store design timebased keyvalue data structure that can store multiple values same key different time stamps and retrieve keys value certain timestamp implement timemap class timemap initializes object data structure void setstring key string value int timestamp stores key key value value given time timestamp string getstring key int timestamp returns value such that set called previously timestampprev timestamp if there multiple such values returns value associated largest timestampprev if there no values returns example input timemap set get get set get get foo bar foo foo foo bar foo foo output null null bar bar null bar bar explanation timemap timemap new timemap timemapsetfoo bar store key foo and value bar along timestamp timemapgetfoo return bar timemapgetfoo return bar since there no value corresponding foo timestamp and timestamp then only value timestamp bar timemapsetfoo bar store key foo and value bar along timestamp timemapgetfoo return bar timemapgetfoo return bar constraints keylength valuelength key and value consist lowercase english letters and digits timestamp all timestamps timestamp set strictly increasing most calls will be made set and get
find ksum array given integer array nums and positive integer can choose any subsequence array and sum all its elements together define ksum array as kth largest subsequence sum that can be obtained not necessarily distinct return ksum array subsequence array that can be derived from another array deleting some or no elements without changing order remaining elements note that empty subsequence considered have sum example input nums output explanation all possible subsequence sums that can obtain following sorted decreasing order sum array example input nums output explanation sum array constraints numslength numsi min
kth largest element array given integer array nums and integer return kth largest element array note that kth largest element sorted order not kth distinct element must solve time complexity example input nums output example input nums output constraints numslength numsi
pascals triangle given integer numrows return first numrows pascals triangle pascals triangle each number sum two numbers directly above as shown example input numrows output example input numrows output constraints numrows
binary string substrings representing given binary string and positive integer return true if binary representation all integers range substrings or false otherwise substring contiguous sequence characters within string example input output true example input output false constraints slength si either or
throne inheritance kingdom consists king his children his grandchildren and so every once while someone family dies or child born kingdom has welldefined order inheritance that consists king as first member lets define recursive function successorx curorder which given person and inheritance order so far returns who should be next person after order inheritance successorx curorder if has no children or all xs children curorder if king return null else return successorxs parent curorder else return xs oldest child whos not curorder example assume have kingdom that consists king his children alice and bob alice older than bob and finally alices son jack beginning curorder will be king calling successorking curorder will return alice so append curorder get king alice calling successoralice curorder will return jack so append curorder get king alice jack calling successorjack curorder will return bob so append curorder get king alice jack bob calling successorbob curorder will return null thus order inheritance will be king alice jack bob using above function can always obtain unique order inheritance implement throneinheritance class throneinheritancestring kingname initializes object throneinheritance class name king given as part constructor void birthstring parentname string childname indicates that parentname gave birth childname void deathstring name indicates death name death person doesnt affect successor function nor current inheritance order can treat as just marking person as dead string getinheritanceorder returns list representing current order inheritance excluding dead people example input throneinheritance birth birth birth birth birth birth getinheritanceorder death getinheritanceorder king king andy king bob king catherine andy matthew bob alex bob asha null bob null output null null null null null null null king andy matthew bob alex asha catherine null king andy matthew alex asha catherine explanation throneinheritance new throneinheritanceking order king tbirthking andy order king andy tbirthking bob order king andy bob tbirthking catherine order king andy bob catherine tbirthandy matthew order king andy matthew bob catherine tbirthbob alex order king andy matthew bob alex catherine tbirthbob asha order king andy matthew bob alex asha catherine tgetinheritanceorder return king andy matthew bob alex asha catherine tdeathbob order king andy matthew bob alex asha catherine tgetinheritanceorder return king andy matthew alex asha catherine constraints kingnamelength parentnamelength childnamelength namelength kingname parentname childname and name consist lowercase english letters only all arguments childname and kingname distinct all name arguments death will be passed either constructor or as childname birth first each call birthparentname childname guaranteed that parentname alive most calls will be made birth and death most calls will be made getinheritanceorder
online election given two integer arrays persons and times election ith vote cast personsi time timesi each query time find person that leading election time votes cast time will count towards our query case tie most recent vote among tied candidates wins implement topvotedcandidate class topvotedcandidateint persons int times initializes object persons and times arrays int qint returns number person that leading election time according mentioned rules example input topvotedcandidate output null explanation topvotedcandidate topvotedcandidate new topvotedcandidate topvotedcandidateq return time votes and leading topvotedcandidateq return time votes and leading topvotedcandidateq return time votes and leading as ties go most recent vote topvotedcandidateq return topvotedcandidateq return topvotedcandidateq return constraints personslength timeslength personslength personsi personslength timesi times sorted strictly increasing order times most calls will be made
memoize given function fn return memoized version that function memoized function function that will never be called twice same inputs instead will return cached value can assume there possible input functions sum fib and factorial sum accepts two integers and and returns fib accepts single integer and returns if or fibn fibn otherwise factorial accepts single integer and returns if or factorialn otherwise example input sum callcallgetcallcountcallgetcallcount output explanation const sum const memoizedsum memoizesum memoizedsum returns sum called as not seen before memoizedsum returns however sum not called because same inputs seen before total call count memoizedsum returns sum called as not seen before total call count example input factorial callcallcallgetcallcountcallgetcallcount output explanation const factorial factorialn const memofactorial memoizefactorial memofactorial returns memofactorial returns memofactorial returns however factorial not called because seen before total call count memofactorial returns however factorial not called because seen before total call count example input fib callgetcallcount output explanation fib total call count constraints most function calls most attempts access callcount input function sum fib or factorial
hamming distance hamming distance between two integers number positions which corresponding bits different given two integers and return hamming distance between them example input output explanation above arrows point positions where corresponding bits different example input output constraints
subarray sums divisible given integer array nums and integer return number nonempty subarrays that have sum divisible subarray contiguous part array example input nums output explanation there subarrays sum divisible example input nums output constraints numslength numsi
kth missing positive number given array arr positive integers sorted strictly increasing order and integer return kth positive integer that missing from this array example input arr output explanation missing positive integers th missing positive integer example input arr output explanation missing positive integers nd missing positive integer constraints arrlength arri arri arrj arrlength follow up could solve this problem less than complexity
stone game iii alice and bob continue their games piles stones there several stones arranged row and each stone has associated value which integer given array stonevalue alice and bob take turns alice starting first each players turn that player can take or stones from first remaining stones row score each player sum values stones taken score each player initially objective game end highest score and winner player highest score and there could be tie game continues until all stones have been taken assume alice and bob play optimally return alice if alice will win bob if bob will win or tie if will end game same score example input values output bob explanation alice will always lose her best move will be take three piles and score become now score bob and bob wins example input values output alice explanation alice must choose all three piles first move win and leave bob negative score if alice chooses one pile her score will be and next move bobs score becomes next move alice will take pile value and lose if alice chooses two piles her score will be and next move bobs score becomes next move alice will take pile value and also lose remember that both play optimally so here alice will choose scenario that makes her win example input values output tie explanation alice cannot win this game can end game draw if decided choose all first three piles otherwise will lose constraints stonevaluelength stonevaluei
find resultant array after removing anagrams given indexed string array words where wordsi consists lowercase english letters one operation select any index such that wordslength and wordsi and wordsi anagrams and delete wordsi from words keep performing this operation as long as can select index that satisfies conditions return words after performing all operations can be shown that selecting indices each operation any arbitrary order will lead same result anagram word or phrase formed rearranging letters different word or phrase using all original letters exactly once example dacb anagram abdc example input words abbabababbaacdcd output abbacd explanation one ways can obtain resultant array using following operations since words bbaa and words baba anagrams choose index and delete words now words abbababacdcd since words baba and words abba anagrams choose index and delete words now words abbacdcd since words cd and words cd anagrams choose index and delete words now words abbacd can no longer perform any operations so abbacd final answer example input words abcde output abcde explanation no two adjacent strings words anagrams each other so no operations performed constraints wordslength wordsilength wordsi consists lowercase english letters
count number special subsequences sequence special if consists positive number followed positive number then positive number example and special contrast and not special given array nums consisting only integers and return number different subsequences that special since answer may be very large return modulo subsequence array sequence that can be derived from array deleting some or no elements without changing order remaining elements two subsequences different if set indices chosen different example input nums output explanation special subsequences bolded and example input nums output explanation there no special subsequences example input nums output explanation special subsequences bolded constraints numslength numsi
destroy sequential targets given indexed array nums consisting positive integers representing targets number line also given integer space have machine which can destroy targets seeding machine some numsi allows destroy all targets values that can be represented as numsi space where any nonnegative integer want destroy maximum number targets nums return minimum value numsi can seed machine destroy maximum number targets example input nums space output explanation if seed machine nums then destroy all targets equal this case would destroy total targets all except nums impossible destroy more than targets so return nums example input nums space output explanation seeding machine nums or nums destroys targets not possible destroy more than targets since nums minimal integer that can destroy targets return example input nums space output explanation whatever initial seed select can only destroy target minimal seed nums constraints numslength numsi space
numbers same consecutive differences given two integers and return array all integers length where difference between every two consecutive digits may return answer any order note that integers should not have leading zeros integers as and not allowed example input output explanation note that not valid number because has leading zeroes example input output constraints
accounts merge given list accounts where each element accountsi list strings where first element accountsi name and rest elements emails representing emails account now would like merge these accounts two accounts definitely belong same person if there some common email both accounts note that even if two accounts have same name may belong different people as people could have same name person can have any number accounts initially but all their accounts definitely have same name after merging accounts return accounts following format first element each account name and rest elements emails sorted order accounts themselves can be returned any order example input accounts johnjohnsmithmailcomjohnnewyorkmailcomjohnjohnsmithmailcomjohnmailcommarymarymailcomjohnjohnnybravomailcom output johnjohnmailcomjohnnewyorkmailcomjohnsmithmailcommarymarymailcomjohnjohnnybravomailcom explanation first and second johns same person as have common email johnsmithmailcom third john and mary different people as none their email addresses used other accounts could return these lists any order example answer mary marymailcom john johnnybravomailcom john johnmailcom johnnewyorkmailcom johnsmithmailcom would still be accepted example input accounts gabegabemcogabemcogabemcokevinkevinmcokevinmcokevinmcoethanethanmcoethanmcoethanmcohanzohanzomcohanzomcohanzomcofernfernmcofernmcofernmco output ethanethanmcoethanmcoethanmcogabegabemcogabemcogabemcohanzohanzomcohanzomcohanzomcokevinkevinmcokevinmcokevinmcofernfernmcofernmcofernmco constraints accountslength accountsilength accountsijlength accountsi consists english letters accountsij valid email
rank teams votes special ranking system each voter gives rank from highest lowest all teams participating competition ordering teams decided who received most positionone votes if two or more teams tie first position consider second position resolve conflict if tie again continue this process until ties resolved if two or more teams still tied after considering all positions rank them alphabetically based their team letter given array strings votes which votes all voters ranking systems sort all teams according ranking system described above return string all teams sorted ranking system example input votes abcacbabcacbacb output acb explanation team ranked first place voters no other team voted as first place so team first team team ranked second voters and ranked third voters team ranked second voters and ranked third voters as most voters ranked second team second team and team third example input votes wxyzxyzw output xwyz explanation winner due tiebreaking rule has same votes as first position but has one vote second position while does not have any votes second position example input votes zmnaguedsjylbophrqicwfxtvk output zmnaguedsjylbophrqicwfxtvk explanation only one voter so their votes used ranking constraints voteslength votesilength votesilength votesjlength voteslength votesij english uppercase letter all characters votesi unique all characters that occur votes also occur votesj where voteslength
maximum good people based statements there two types persons good person person who always tells truth bad person person who might tell truth and might lie given indexed integer array statements size that represents statements made people about each other more specifically statementsij could be one following which represents statement made person that person bad person which represents statement made person that person good person represents that no statement made person about person additionally no person ever makes statement about themselves formally have that statementsii all return maximum number people who can be good based statements made people example input statements output explanation each person makes single statement person states that person good person states that person good person states that person bad lets take person as key assuming that person good person based statement made person person bad person now know sure that person bad and person good based statement made person and since person bad could be telling truth there will be contradiction this case and this assumption invalid lying this case person also bad person and lied their statement following that person good person there will be only one good person group assuming that person bad person based statement made person and since person bad could be telling truth following this scenario person and both bad as explained before following that person bad but told truth there will be no good persons group lying this case person good person since person good person person also good person following that person bad and lied there will be two good persons group can see that most persons good best case so return note that there more than one way arrive this conclusion example input statements output explanation each person makes single statement person states that person bad person states that person bad lets take person as key assuming that person good person based statement made person person bad person and lying following that person good person there will be only one good person group assuming that person bad person based statement made person and since person bad could be telling truth following this scenario person and both bad following that person bad but told truth there will be no good persons group lying this case person good person following that person bad and lied there will be only one good person group can see that most one person good best case so return note that there more than one way arrive this conclusion constraints statementslength statementsilength statementsij either or statementsii
check if word can be placed crossword given matrix board representing current state crossword puzzle crossword contains lowercase english letters from solved words represent any empty cells and represent any blocked cells word can be placed horizontally left right or right left or vertically top bottom or bottom top board if does not occupy cell containing character cell each letter placed must either be empty or match letter already board there must not be any empty cells or other lowercase letters directly left or right word if word placed horizontally there must not be any empty cells or other lowercase letters directly above or below word if word placed vertically given string word return true if word can be placed board or false otherwise example input board word abc output true explanation word abc can be placed as shown above top bottom example input board word ac output false explanation impossible place word because there will always be spaceletter above or below example input board word ca output true explanation word ca can be placed as shown above right left constraints boardlength boardilength boardij will be or lowercase english letter wordlength maxm word will contain only lowercase english letters
minimum weighted subgraph required paths given integer denoting number nodes weighted directed graph nodes numbered from also given integer array edges where edgesi fromi toi weighti denotes that there exists directed edge from fromi toi weight weighti lastly given three distinct integers src src and dest denoting three distinct nodes graph return minimum weight subgraph graph such that possible reach dest from both src and src via set edges this subgraph case such subgraph does not exist return subgraph graph whose vertices and edges subsets original graph weight subgraph sum weights its constituent edges example input edges src src dest output explanation above figure represents input graph blue edges represent one subgraphs that yield optimal answer note that subgraph also yields optimal answer not possible get subgraph less weight satisfying all constraints example input edges src src dest output explanation above figure represents input graph can be seen that there does not exist any path from node node hence there no subgraphs satisfying all constraints constraints edgeslength edgesilength fromi toi src src dest fromi toi src src and dest pairwise distinct weighti
minimum swaps arrange binary grid given binary grid one step can choose two adjacent rows grid and swap them grid said be valid if all cells above main diagonal zeros return minimum number steps needed make grid valid or if grid cannot be valid main diagonal grid diagonal that starts cell and ends cell example input grid output example input grid output explanation all rows similar swaps have no effect grid example input grid output constraints gridlength gridilength gridij either or
cache time limit write class that allows getting and setting keyvalue pairs however time until expiration associated each key class has three public methods setkey value duration accepts integer key integer value and duration milliseconds once duration has elapsed key should be inaccessible method should return true if same unexpired key already exists and false otherwise both value and duration should be overwritten if key already exists getkey if unexpired key exists should return associated value otherwise should return count returns count unexpired keys example input timelimitedcache set get count get output null false explanation cache constructed keyvalue pair added time limit ms value doesnt exist so false returned key requested and value returned count called and there one active key cache key expires get called but returned because cache empty example input timelimitedcache set set get get get count output null false true explanation cache constructed keyvalue pair added time limit ms value doesnt exist so false returned keyvalue pair added time limit ms nonexpired value already existed so true returned and old value overwritten get called which returned get called which returned key expires get called but cache empty so returned count returns because cache empty constraints key value duration total method calls will not exceed
count subarrays median given array nums size consisting distinct integers from and positive integer return number nonempty subarrays nums that have median equal note median array middle element after sorting array ascending order if array even length median left middle element example median and median subarray contiguous part array example input nums output explanation subarrays that have median equal and example input nums output explanation only subarray that has median equal constraints numslength numsi integers nums distinct
minesweeper lets play minesweeper game wikipedia online game given char matrix board representing game board where represents unrevealed mine represents unrevealed empty square represents revealed blank square that has no adjacent mines ie above below left right and all diagonals digit represents how many mines adjacent this revealed square and represents revealed mine also given integer array click where click clickr clickc represents next click position among all unrevealed squares or return board after revealing this position according following rules if mine revealed then game over should change if empty square no adjacent mines revealed then change revealed blank and all its adjacent unrevealed squares should be revealed recursively if empty square least one adjacent mine revealed then change digit representing number adjacent mines return board when no more squares will be revealed example input board eeeeeeemeeeeeeeeeeee click output bebbmbbbbbbbb example input board bebbmbbbbbbbb click output bebbxbbbbbbbb constraints boardlength boardilength boardij either or digit from clicklength clickr clickc boardclickrclickc either or
maximum sum distinct subarrays length given integer array nums and integer find maximum subarray sum all subarrays nums that meet following conditions length subarray and all elements subarray distinct return maximum subarray sum all subarrays that meet conditions if no subarray meets conditions return subarray contiguous nonempty sequence elements within array example input nums output explanation subarrays nums length which meets requirements and has sum which meets requirements and has sum which meets requirements and has sum which does not meet requirements because element repeated which does not meet requirements because element repeated return because maximum subarray sum all subarrays that meet conditions example input nums output explanation subarrays nums length which does not meet requirements because element repeated return because no subarrays meet conditions constraints numslength numsi
merge nodes between zeros given head linked list which contains series integers separated beginning and end linked list will have nodeval every two consecutive merge all nodes lying between them into single node whose value sum all merged nodes modified list should not contain any return head modified linked list example input head output explanation above figure represents given linked list modified list contains sum nodes marked green sum nodes marked red example input head output explanation above figure represents given linked list modified list contains sum nodes marked green sum nodes marked red sum nodes marked yellow constraints number nodes list range nodeval there no two consecutive nodes nodeval beginning and end linked list have nodeval
smallest string given numeric value numeric value lowercase character defined as its position indexed alphabet so numeric value numeric value numeric value and so numeric value string consisting lowercase characters defined as sum its characters numeric values example numeric value string abe equal given two integers and return lexicographically smallest string length equal and numeric value equal note that string lexicographically smaller than string if comes before dictionary order that either prefix or if first position such that xi yi then xi comes before yi alphabetic order example input output aay explanation numeric value string and smallest string such value and length equal example input output aaszz constraints
number ways split array given indexed integer array nums length nums contains valid split index if following true sum first elements greater than or equal sum last elements there least one element right that return number valid splits nums example input nums output explanation there three ways splitting nums into two nonempty parts split nums index then first part and its sum second part and its sum since valid split split nums index then first part and its sum second part and its sum since valid split split nums index then first part and its sum second part and its sum since not valid split thus number valid splits nums example input nums output explanation there two valid splits nums split nums index then first part and its sum second part and its sum since valid split split nums index then first part and its sum second part and its sum since valid split constraints numslength numsi
subsets ii given integer array nums that may contain duplicates return all possible subsets power set solution set must not contain duplicate subsets return solution any order example input nums output example input nums output constraints numslength numsi
bitwise ors subarrays given integer array arr return number distinct bitwise ors all nonempty subarrays arr bitwise or subarray bitwise or each integer subarray bitwise or subarray one integer that integer subarray contiguous nonempty sequence elements within array example input arr output explanation there only one possible result example input arr output explanation possible subarrays these yield results there unique values so answer example input arr output explanation possible results and constraints arrlength arri
race car your car starts position and speed infinite number line your car can go into negative positions your car drives automatically according sequence instructions accelerate and reverse when get instruction your car does following position speed speed when get instruction your car does following if your speed positive then speed otherwise speed your position stays same example after commands aar your car goes positions and your speed goes given target position target return length shortest sequence instructions get there example input target output explanation shortest instruction sequence aa your position goes from example input target output explanation shortest instruction sequence aaara your position goes from constraints target
number valid words sentence sentence consists lowercase letters digits hyphens punctuation marks and and spaces only each sentence can be broken down into one or more tokens separated one or more spaces token valid word if all three following true only contains lowercase letters hyphens andor punctuation no digits there most one hyphen if present must be surrounded lowercase characters ab valid but ab and ab not valid there most one punctuation mark if present must be end token ab cd and valid but ab and not valid examples valid words include ab afad bac and given string sentence return number valid words sentence example input sentence cat and dog output explanation valid words sentence cat and and dog example input sentence this bd output explanation there no valid words sentence this invalid because starts punctuation mark and bd invalid because contain digits example input sentence alice and bob playing stonegame output explanation valid words sentence alice and bob and playing stonegame invalid because contains digits constraints sentencelength sentence only contains lowercase english letters digits and there will be least token
delete and earn given integer array nums want maximize number points get performing following operation any number times pick any numsi and delete earn numsi points afterwards must delete every element equal numsi and every element equal numsi return maximum number points can earn applying above operation some number times example input nums output explanation can perform following operations delete earn points consequently also deleted nums delete earn points nums earn total points example input nums output explanation can perform following operations delete earn points all and also deleted nums delete again earn points nums delete once more earn points nums earn total points constraints numslength numsi
chunk array given array arr and chunk size size return chunked array chunked array contains original elements arr but consists subarrays each length size length last subarray may be less than size if arrlength not evenly divisible size may assume array output jsonparse other words valid json please solve without using lodashs chunk function example input arr size output explanation arr has been split into subarrays each element example input arr size output explanation arr has been split into subarrays elements however only two elements left nd subarray example input arr size output explanation size greater than arrlength thus all elements first subarray example input arr size output explanation there no elements be chunked so empty array returned constraints arr valid json array jsonstringifyarrlength size arrlength
shuffle array given integer array nums design algorithm randomly shuffle array all permutations array should be equally likely as result shuffling implement solution class solutionint nums initializes object integer array nums int reset resets array its original configuration and returns int shuffle returns random shuffling array example input solution shuffle reset shuffle output null explanation solution solution new solution solutionshuffle shuffle array and return its result any permutation must be equally likely be returned example return solutionreset resets array back its original configuration return solutionshuffle returns random shuffling array example return constraints numslength numsi all elements nums unique most calls total will be made reset and shuffle
longest subsequence limited sum given integer array nums length and integer array queries length return array answer length where answeri maximum size subsequence that can take from nums such that sum its elements less than or equal queriesi subsequence array that can be derived from another array deleting some or no elements without changing order remaining elements example input nums queries output explanation answer queries as follows subsequence has sum less than or equal can be proven that maximum size such subsequence so answer subsequence has sum less than or equal can be proven that maximum size such subsequence so answer subsequence has sum less than or equal can be proven that maximum size such subsequence so answer example input nums queries output explanation empty subsequence only subsequence that has sum less than or equal so answer constraints numslength querieslength numsi queriesi
check if there valid parentheses string path parentheses string nonempty string consisting only and valid if any following conditions true can be written as ab concatenated where and valid parentheses strings can be written as where valid parentheses string given matrix parentheses grid valid parentheses string path grid path satisfying all following conditions path starts from upper left cell path ends bottomright cell path only ever moves down or right resulting parentheses string formed path valid return true if there exists valid parentheses string path grid otherwise return false example input grid output true explanation above diagram shows two possible paths that form valid parentheses strings first path shown results valid parentheses string second path shown results valid parentheses string note that there may be other valid parentheses string paths example input grid output false explanation two possible paths form parentheses strings and since neither them valid parentheses strings return false constraints gridlength gridilength gridij either or
path sum given root binary tree and integer targetsum return true if tree has roottoleaf path such that adding up all values along path equals targetsum leaf node no children example input root nullnullnullnull targetsum output true explanation roottoleaf path target sum shown example input root targetsum output false explanation there two roottoleaf paths tree sum sum there no roottoleaf path sum example input root targetsum output false explanation since tree empty there no roottoleaf paths constraints number nodes tree range nodeval targetsum
earliest possible day full bloom have flower seeds every seed must be planted first before can begin grow then bloom planting seed takes time and so does growth seed given two indexed integer arrays planttime and growtime length each planttimei number full days takes plant ith seed every day can work planting exactly one seed do not have work planting same seed consecutive days but planting seed not complete until have worked planttimei days planting total growtimei number full days takes ith seed grow after being completely planted after last day its growth flower blooms and stays bloomed forever from beginning day can plant seeds any order return earliest possible day where all seeds blooming example input planttime growtime output explanation grayed out pots represent planting days colored pots represent growing days and flower represents day blooms one optimal way day plant th seed seed grows full days and blooms day days and plant st seed seed grows full days and blooms day days and plant nd seed seed grows full day and blooms day thus day all seeds blooming example input planttime growtime output explanation grayed out pots represent planting days colored pots represent growing days and flower represents day blooms one optimal way day plant th seed seed grows full days and blooms day days and plant st seed seed grows full day and blooms day days and plant nd seed seed grows full days and blooms day days and plant rd seed seed grows full day and blooms day thus day all seeds blooming example input planttime growtime output explanation day plant th seed seed grows full day and blooms day thus day all seeds blooming constraints planttimelength growtimelength planttimei growtimei
reverse only letters given string reverse string according following rules all characters that not english letters remain same position all english letters lowercase or uppercase should be reversed return after reversing example input abcd output dcba example input abcdefghij output jihgfedcba example input testngleetcodeq output qedocteelgntset constraints slength consists characters ascii values range does not contain or
count anagrams given string containing one or more words every consecutive pair words separated single space string anagram string if ith word permutation ith word example acb dfe anagram abc def but def cab and adc bef not return number distinct anagrams since answer may be very large return modulo example input too hot output explanation some anagrams given string too hot oot hot oto toh too toh and too oht example input aa output explanation there only one anagram possible given string constraints slength consists lowercase english letters and spaces there single space between consecutive words
check if two string arrays equivalent given two string arrays word and word return true if two arrays represent same string and false otherwise string represented array if array elements concatenated order forms string example input word ab word bc output true explanation word represents string ab abc word represents string bc abc strings same so return true example input word cb word ab output false example input word abc defg word abcddefg output true constraints wordlength wordlength wordilength wordilength sumwordilength sumwordilength wordi and wordi consist lowercase letters
subarray elements greater than varying threshold given integer array nums and integer threshold find any subarray nums length such that every element subarray greater than threshold return size any such subarray if there no such subarray return subarray contiguous nonempty sequence elements within array example input nums threshold output explanation subarray has size and every element greater than note that this only valid subarray example input nums threshold output explanation subarray has size and so returned note that subarray has size and every element greater than similarly subarrays also satisfy given conditions therefore or may also be returned constraints numslength numsi threshold
design authentication manager there authentication system that works authentication tokens each session user will receive new authentication token that will expire timetolive seconds after currenttime if token renewed expiry time will be extended expire timetolive seconds after potentially different currenttime implement authenticationmanager class authenticationmanagerint timetolive constructs authenticationmanager and sets timetolive generatestring tokenid int currenttime generates new token given tokenid given currenttime seconds renewstring tokenid int currenttime renews unexpired token given tokenid given currenttime seconds if there no unexpired tokens given tokenid request ignored and nothing happens countunexpiredtokensint currenttime returns number unexpired tokens given currenttime note that if token expires time and another action happens time renew or countunexpiredtokens expiration takes place before other actions example input authenticationmanager renew generate countunexpiredtokens generate renew renew countunexpiredtokens aaa aaa bbb aaa bbb output null null null null null null explanation authenticationmanager authenticationmanager new authenticationmanager constructs authenticationmanager timetolive seconds authenticationmanagerrenewaaa no token exists tokenid aaa time so nothing happens authenticationmanagergenerateaaa generates new token tokenid aaa time authenticationmanagercountunexpiredtokens token tokenid aaa only unexpired one time so return authenticationmanagergeneratebbb generates new token tokenid bbb time authenticationmanagerrenewaaa token tokenid aaa expired time and so time renew request ignored and nothing happens authenticationmanagerrenewbbb token tokenid bbb unexpired time so renew request fulfilled and now token will expire time authenticationmanagercountunexpiredtokens token tokenid bbb expires time and token tokenid aaa expired time so currently no token unexpired so return constraints timetolive currenttime tokenidlength tokenid consists only lowercase letters all calls generate will contain unique values tokenid values currenttime across all function calls will be strictly increasing most calls will be made all functions combined
number closed islands given grid consists land and water island maximal directionally connected group and closed island island totally all left top right bottom surrounded return number closed islands example input grid output explanation islands gray closed because completely surrounded water group example input grid output example input grid output constraints gridlength gridlength gridij
nim game playing following nim game your friend initially there heap stones table and your friend will alternate taking turns and go first each turn person whose turn will remove stones from heap one who removes last stone winner given number stones heap return true if can win game assuming both and your friend play optimally otherwise return false example input output false explanation these possible outcomes remove stone your friend removes stones including last stone your friend wins remove stones your friend removes stones including last stone your friend wins remove stones your friend removes last stone your friend wins all outcomes your friend wins example input output true example input output true constraints
minimum subsequence nonincreasing order given array nums obtain subsequence array whose sum elements strictly greater than sum non included elements such subsequence if there multiple solutions return subsequence minimum size and if there still exist multiple solutions return subsequence maximum total sum all its elements subsequence array can be obtained erasing some possibly zero elements from array note that solution given constraints guaranteed be unique also return answer sorted nonincreasing order example input nums output explanation subsequences and minimal such that sum their elements strictly greater than sum elements not included however subsequence has maximum total sum its elements example input nums output explanation subsequence has sum its elements equal which not strictly greater than sum elements not included therefore subsequence minimal satisfying conditions note subsequence has be returned nondecreasing order constraints numslength numsi
assign cookies assume awesome parent and want give your children some cookies but should give each child most one cookie each child has greed factor gi which minimum size cookie that child will be content and each cookie has size sj if sj gi can assign cookie child and child will be content your goal maximize number your content children and output maximum number example input output explanation have children and cookies greed factors children and even though have cookies since their size both could only make child whose greed factor content need output example input output explanation have children and cookies greed factors children have cookies and their sizes big enough gratify all children need output constraints glength slength gi sj
finding pairs certain sum given two integer arrays nums and nums tasked implement data structure that supports queries two types add positive integer element given index array nums count number pairs such that numsi numsj equals given value numslength and numslength implement findsumpairs class findsumpairsint nums int nums initializes findsumpairs object two integer arrays nums and nums void addint index int val adds val numsindex ie apply numsindex val int countint tot returns number pairs such that numsi numsj tot example input findsumpairs count add count count add add count output null null null null explanation findsumpairs findsumpairs new findsumpairs findsumpairscount return pairs make and pairs make findsumpairsadd now nums findsumpairscount return pairs make findsumpairscount return pair makes findsumpairsadd now nums findsumpairsadd now nums findsumpairscount return pairs make and pairs make constraints numslength numslength numsi numsi index numslength val tot most calls made add and count each
fibonacci number fibonacci numbers commonly denoted fn form sequence called fibonacci sequence such that each number sum two preceding ones starting from and that fn fn fn given calculate fn example input output explanation example input output explanation example input output explanation constraints
split array largest sum given integer array nums and integer split nums into nonempty subarrays such that largest sum any subarray minimized return minimized largest sum split subarray contiguous part array example input nums output explanation there four ways split nums into two subarrays best way split into and where largest sum among two subarrays only example input nums output explanation there four ways split nums into two subarrays best way split into and where largest sum among two subarrays only constraints numslength numsi min numslength
print binary tree given root binary tree construct indexed string matrix res that represents formatted layout tree formatted layout matrix should be constructed using following rules height tree height and number rows should be equal height number columns should be equal height place root node middle top row more formally location resn each node that has been placed matrix position resrc place its left child resrcheightr and its right child resrcheightr continue this process until all nodes tree have been placed any empty cells should contain empty string return constructed matrix res example input root output example input root null output constraints number nodes tree range nodeval depth tree will be range
integer break given integer break into sum positive integers where and maximize product those integers return maximum product can get example input output explanation example input output explanation constraints
sum beauty array given indexed integer array nums each index numslength beauty numsi equals if numsj numsi numsk all and all numslength if numsi numsi numsi and previous condition not satisfied if none previous conditions holds return sum beauty all numsi where numslength example input nums output explanation each index range beauty nums equals example input nums output explanation each index range beauty nums equals beauty nums equals example input nums output explanation each index range beauty nums equals constraints numslength numsi
find followers count sql schema table followers column name type userid int followerid int userid followerid primary key this table this table contains ids user and follower social media app where follower follows user write sql query that will each user return number followers return result table ordered userid ascending order query result format following example example input followers table userid followerid output userid followerscount explanation followers followers followers
number people aware secret day one person discovers secret given integer delay which means that each person will share secret new person every day starting from delay days after discovering secret also given integer forget which means that each person will forget secret forget days after discovering person cannot share secret same day forgot or any day afterwards given integer return number people who know secret end day since answer may be very large return modulo example input delay forget output explanation day suppose first person named person day only person who knows secret person day shares secret new person people day shares secret new person people day forgets secret and shares secret new person people day shares secret and shares secret people example input delay forget output explanation day first person named person day shares secret people day and share secret new people and people day forgets secret and share secret new people people constraints delay forget
kids greatest number candies there kids candies given integer array candies where each candiesi represents number candies ith kid has and integer extracandies denoting number extra candies that have return boolean array result length where resulti true if after giving ith kid all extracandies will have greatest number candies among all kids or false otherwise note that multiple kids can have greatest number candies example input candies extracandies output truetruetruefalsetrue explanation if give all extracandies kid will have candies which greatest among kids kid will have candies which greatest among kids kid will have candies which greatest among kids kid will have candies which not greatest among kids kid will have candies which greatest among kids example input candies extracandies output truefalsefalsefalsefalse explanation there only extra candy kid will always have greatest number candies even if different kid given extra candy example input candies extracandies output truefalsetrue constraints candieslength candiesi extracandies
complete binary tree inserter complete binary tree binary tree which every level except possibly last completely filled and all nodes as far left as possible design algorithm insert new node complete binary tree keeping complete after insertion implement cbtinserter class cbtinsertertreenode root initializes data structure root complete binary tree int insertint inserts treenode into tree value nodeval val so that tree remains complete and returns value parent inserted treenode treenode getroot returns root node tree example input cbtinserter insert insert getroot output null explanation cbtinserter cbtinserter new cbtinserter cbtinserterinsert return cbtinserterinsert return cbtinsertergetroot return constraints number nodes tree will be range nodeval root complete binary tree val most calls will be made insert and getroot
occurrences after bigram given two strings first and second consider occurrences some text form first second third where second comes immediately after first and third comes immediately after second return array all words third each occurrence first second third example input text alice good girl good student first second good output girlstudent example input text will will rock first second will output werock constraints textlength text consists lowercase english letters and spaces all words text separated single space firstlength secondlength first and second consist lowercase english letters
serialize and deserialize bst serialization converting data structure or object into sequence bits so that can be stored file or memory buffer or transmitted across network connection link be reconstructed later same or another computer environment design algorithm serialize and deserialize binary search tree there no restriction how your serializationdeserialization algorithm should work need ensure that binary search tree can be serialized string and this string can be deserialized original tree structure encoded string should be as compact as possible example input root output example input root output constraints number nodes tree range nodeval input tree guaranteed be binary search tree
valid number valid number can be split up into these components order decimal number or integer optional or followed integer decimal number can be split up into these components order optional sign character either or one following formats one or more digits followed dot one or more digits followed dot followed one or more digits dot followed one or more digits integer can be split up into these components order optional sign character either or one or more digits example all following valid numbers while following not valid numbers abc ae given string return true if valid number example input output true example input output false example input output false constraints slength consists only english letters both uppercase and lowercase digits plus minus or dot
trapping rain water ii given integer matrix heightmap representing height each unit cell elevation map return volume water can trap after raining example input heightmap output explanation after rain water trapped between blocks have two small ponds and units trapped total volume water trapped example input heightmap output constraints heightmaplength heightmapilength heightmapij
jump game iv given array integers arr initially positioned first index array one step can jump from index index where arrlength where where arri arrj and return minimum number steps reach last index array notice that can not jump outside array any time example input arr output explanation need three jumps from index note that index last index array example input arr output explanation start index last index do not need jump example input arr output explanation can jump directly from index index which last index array constraints arrlength arri
number ways earn points there test that has types questions given integer target and indexed integer array types where typesi counti marksi indicates that there counti questions ith type and each one them worth marksi points return number ways can earn exactly target points exam since answer may be too large return modulo note that questions same type indistinguishable example if there questions same type then solving st and nd questions same as solving st and rd questions or nd and rd questions example input target types output explanation can earn points one seven ways solve questions th type solve questions th type and question st type solve questions th type and questions st type solve questions th type and question nd type solve question th type question st type and question nd type solve questions st type solve questions nd type example input target types output explanation can earn points one four ways solve questions th type solve questions th type and question st type solve questions th type and questions st type solve question nd type example input target types output explanation can only earn points answering all questions constraints target typeslength typesilength counti marksi
flatten binary tree linked list given root binary tree flatten tree into linked list linked list should use same treenode class where right child pointer points next node list and left child pointer always null linked list should be same order as preorder traversal binary tree example input root null output nullnullnullnullnull example input root output example input root output constraints number nodes tree range nodeval follow up can flatten tree inplace extra space
actors and directors who cooperated least three times sql schema table actordirector column name type actorid int directorid int timestamp int timestamp primary key column this table write sql query report that provides pairs actorid directorid where actor has cooperated director least three times return result table any order query result format following example example input actordirector table actorid directorid timestamp output actorid directorid explanation only pair where cooperated exactly times
maximize number nice divisors given positive integer primefactors asked construct positive integer that satisfies following conditions number prime factors not necessarily distinct most primefactors number nice divisors maximized note that divisor nice if divisible every prime factor example if then its prime factors then and nice divisors while and not return number nice divisors since that number can be too large return modulo note that prime number natural number greater than that not product two smaller natural numbers prime factors number list prime numbers such that their product equals example input primefactors output explanation valid value has prime factors and has nice divisors there not other value that has most prime factors and more nice divisors example input primefactors output constraints primefactors
minimum cost set cooking time generic microwave supports cooking times least second most minutes and seconds set cooking time push most four digits microwave normalizes what push as four digits prepending zeroes interprets first two digits as minutes and last two digits as seconds then adds them up as cooking time example push three digits normalized as and interpreted as minutes and seconds push four digits interpreted as minutes and seconds push interpreted as minutes and seconds push interpreted as minutes and seconds given integers startat movecost pushcost and targetseconds initially your finger digit startat moving finger above any specific digit costs movecost units fatigue pushing digit below finger once costs pushcost units fatigue there can be multiple ways set microwave cook targetseconds seconds but interested way minimum cost return minimum cost set targetseconds seconds cooking time remember that one minute consists seconds example input startat movecost pushcost targetseconds output explanation following possible ways set cooking time interpreted as minutes and seconds finger already digit pushes cost moves cost pushes cost pushes cost and pushes cost cost this minimum cost interpreted as minutes and seconds that also seconds finger moves cost pushes cost moves cost pushes cost moves cost pushes cost moves cost and pushes cost cost normalized as and interpreted as minutes and seconds finger moves cost pushes cost moves cost pushes cost moves cost and pushes cost cost example input startat movecost pushcost targetseconds output explanation optimal way push two digits interpreted as seconds finger moves cost pushes cost moves cost and pushes cost total cost note other possible ways and but none them produces minimum cost constraints startat movecost pushcost targetseconds
online stock span design algorithm that collects daily price quotes some stock and returns span that stocks price current day span stocks price one day maximum number consecutive days starting from that day and going backward which stock price less than or equal price that day example if prices stock last four days and price stock today then span today because starting from today price stock less than or equal consecutive days also if prices stock last four days and price stock today then span today because starting from today price stock less than or equal consecutive days implement stockspanner class stockspanner initializes object class int nextint price returns span stocks price given that todays price price example input stockspanner next next next next next next next output null explanation stockspanner stockspanner new stockspanner stockspannernext return stockspannernext return stockspannernext return stockspannernext return stockspannernext return stockspannernext return because last prices including todays price less than or equal todays price stockspannernext return constraints price most calls will be made next
minimum cost hire workers there workers given two integer arrays quality and wage where qualityi quality ith worker and wagei minimum wage expectation ith worker want hire exactly workers form paid group hire group workers must pay them according following rules every worker paid group should be paid ratio their quality compared other workers paid group every worker paid group must be paid least their minimum wage expectation given integer return least amount money needed form paid group satisfying above conditions answers within actual answer will be accepted example input quality wage output explanation pay th worker and nd worker example input quality wage output explanation pay th worker nd and rd workers separately constraints qualitylength wagelength qualityi wagei
minimum number steps make two strings anagram given two strings same length and one step can choose any character and replace another character return minimum number steps make anagram anagram string string that contains same characters different or same ordering example input bab aba output explanation replace first bba which anagram example input leetcode practice output explanation replace and from proper characters make anagram example input anagram mangaar output explanation anagram and mangaar anagrams constraints slength slength tlength and consist lowercase english letters only
count submatrices all ones given binary matrix mat return number submatrices that have all ones example input mat output explanation there rectangles side there rectangles side there rectangles side there rectangle side there rectangle side total number rectangles example input mat output explanation there rectangles side there rectangles side there rectangles side there rectangles side there rectangles side there rectangles side there rectangle side total number rectangles constraints matij either or
maximum product after increments given array nonnegative integers nums and integer one operation may choose any element from nums and increment return maximum product nums after most operations since answer may be very large return modulo note that should maximize product before taking modulo example input nums output explanation increment first number times now nums product can be shown that maximum product possible so return note that there may be other ways increment nums have maximum product example input nums output explanation increment second number time and increment fourth number time now nums product can be shown that maximum product possible so return note that there may be other ways increment nums have maximum product constraints numslength numsi
relative ranks given integer array score size where scorei score ith athlete competition all scores guaranteed be unique athletes placed based their scores where st place athlete has highest score nd place athlete has nd highest score and so placement each athlete determines their rank st place athletes rank gold medal nd place athletes rank silver medal rd place athletes rank bronze medal th place nth place athlete their rank their placement number ie xth place athletes rank return array answer size where answeri rank ith athlete example input score output gold medalsilver medalbronze medal explanation placements st nd rd th th example input score output gold medalbronze medalsilver medal explanation placements st th rd nd th constraints scorelength scorei all values score unique
maximize number subsequences string given indexed string text and another indexed string pattern length both which consist only lowercase english letters can add either pattern or pattern anywhere text exactly once note that character can be added even beginning or end text return maximum number times pattern can occur as subsequence modified text subsequence string that can be derived from another string deleting some or no characters without changing order remaining characters example input text abdcdbc pattern ac output explanation if add pattern between text and text get abadcdbc now number times ac occurs as subsequence some other strings which have subsequences ac after adding character text aabdcdbc and abdacdbc however strings such as abdcadbc abdccdbc and abdcdbcc although obtainable have only subsequences ac and thus suboptimal can be shown that not possible get more than subsequences ac adding only one character example input text aabb pattern ab output explanation some strings which can be obtained from text and have subsequences ab aaabb aaabb and aabbb constraints textlength patternlength text and pattern consist only lowercase english letters
three divisors given integer return true if has exactly three positive divisors otherwise return false integer divisor if there exists integer such that example input output false explantion has only two divisors and example input output true explantion has three divisors and constraints
find smallest divisor given threshold given array integers nums and integer threshold will choose positive integer divisor divide all array and sum divisions result find smallest divisor such that result mentioned above less than or equal threshold each result division rounded nearest integer greater than or equal that element example and test cases generated so that there will be answer example input nums threshold output explanation can get sum if divisor if divisor can get sum and if divisor sum will be example input nums threshold output constraints numslength numsi numslength threshold
number digit one given integer count total number digit appearing all nonnegative integers less than or equal example input output example input output constraints
flip columns maximum number equal rows given binary matrix matrix can choose any number columns matrix and flip every cell that column ie change value cell from or vice versa return maximum number rows that have all values equal after some number flips example input matrix output explanation after flipping no values row has all values equal example input matrix output explanation after flipping values first column both rows have equal values example input matrix output explanation after flipping values first two columns last two rows have equal values constraints matrixlength matrixilength matrixij either or
sales analysis iii sql schema table product column name type productid int productname varchar unitprice int productid primary key this table each row this table indicates name and price each product table sales column name type sellerid int productid int buyerid int saledate date quantity int price int this table has no primary key can have repeated rows productid foreign key product table each row this table contains some information about one sale write sql query that reports products that only sold first quarter that between and inclusive return result table any order query result format following example example input product table productid productname unitprice iphone sales table sellerid productid buyerid saledate quantity price output productid productname explanation product id only sold spring product id sold spring but also sold after spring product id sold after spring return only product as product that only sold spring
smallest string starting from leaf given root binary tree where each node has value range representing letters return lexicographically smallest string that starts leaf this tree and ends root as reminder any shorter prefix string lexicographically smaller example ab lexicographically smaller than aba leaf node node that has no children example input root output dba example input root output adz example input root nullnull output abc constraints number nodes tree range nodeval
my calendar implementing program use as your calendar can add new event if adding event will not cause double booking double booking happens when two events have some nonempty intersection ie some moment common both events event can be represented as pair integers start and end that represents booking halfopen interval start end range real numbers such that start end implement mycalendar class mycalendar initializes calendar object boolean bookint start int end returns true if event can be added calendar successfully without causing double booking otherwise return false and do not add event calendar example input mycalendar book book book output null true false true explanation mycalendar mycalendar new mycalendar mycalendarbook return true mycalendarbook return false can not be booked because time already booked another event mycalendarbook return true event can be booked as first event takes every time less than but not including constraints start end most calls will be made book
append integers minimal sum given integer array nums and integer append unique positive integers that do not appear nums nums such that resulting total sum minimum return sum integers appended nums example input nums output explanation two unique positive integers that do not appear nums which append and resulting sum nums which minimum sum two integers appended so return example input nums output explanation six unique positive integers that do not appear nums which append and resulting sum nums which minimum sum six integers appended so return constraints numslength numsi
can win game two players take turns adding running total any integer from player who first causes running total reach or exceed wins what if change game so that players cannot reuse integers example two players might take turns drawing from common pool numbers from without replacement until reach total given two integers maxchoosableinteger and desiredtotal return true if first player move can force win otherwise return false assume both players play optimally example input maxchoosableinteger desiredtotal output false explanation no matter which integer first player choose first player will lose first player can choose integer from up if first player choose second player can only choose integers from up second player will win choosing and get total which desiredtotal same other integers chosen first player second player will always win example input maxchoosableinteger desiredtotal output true example input maxchoosableinteger desiredtotal output true constraints maxchoosableinteger desiredtotal
construct binary search tree from preorder traversal given array integers preorder which represents preorder traversal bst ie binary search tree construct tree and return its root guaranteed that there always possible find binary search tree given requirements given test cases binary search tree binary tree where every node any descendant nodeleft has value strictly less than nodeval and any descendant noderight has value strictly greater than nodeval preorder traversal binary tree displays value node first then traverses nodeleft then traverses noderight example input preorder output null example input preorder output null constraints preorderlength preorderi all values preorder unique
find distinct difference array given indexed array nums length distinct difference array nums array diff length such that diffi equal number distinct elements suffix numsi subtracted from number distinct elements prefix nums return distinct difference array nums note that numsi denotes subarray nums starting index and ending index inclusive particularly if then numsi denotes empty subarray example input nums output explanation index there element prefix and distinct elements suffix thus diff index there distinct elements prefix and distinct elements suffix thus diff index there distinct elements prefix and distinct elements suffix thus diff index there distinct elements prefix and distinct element suffix thus diff index there distinct elements prefix and no elements suffix thus diff example input nums output explanation index there element prefix and distinct elements suffix thus diff index there distinct elements prefix and distinct elements suffix thus diff index there distinct elements prefix and distinct elements suffix thus diff index there distinct elements prefix and distinct element suffix thus diff index there distinct elements prefix and no elements suffix thus diff constraints numslength numsi
student attendance record given string representing attendance record student where each character signifies whether student absent late or present that day record only contains following three characters absent late present student eligible attendance award if meet both following criteria student absent strictly fewer than days total student never late or more consecutive days return true if student eligible attendance award or false otherwise example input ppallp output true explanation student has fewer than absences and never late or more consecutive days example input ppalll output false explanation student late consecutive days last days so not eligible award constraints slength si either or
available captures rook chessboard there exactly one white rook and some number white bishops black pawns and empty squares when rook moves chooses one four cardinal directions north east south or west then moves that direction until chooses stop reaches edge board captures black pawn or blocked white bishop rook considered attacking pawn if rook can capture pawn rooks turn number available captures white rook number pawns that rook attacking return number available captures white rook example input board prpp output explanation this example rook attacking all pawns example input board pppppppbpppbrbpppbppppppp output explanation bishops blocking rook from attacking any pawns example input board pppprpbbp output explanation rook attacking pawns positions and constraints boardlength boardilength boardij either or there exactly one cell boardij
group people given group size belong there people that split into some unknown number groups each person labeled unique id from given integer array groupsizes where groupsizesi size group that person example if groupsizes then person must be group size return list groups such that each person group size groupsizesi each person should appear exactly one group and every person must be group if there multiple answers return any them guaranteed that there will be least one valid solution given input example input groupsizes output explanation first group size and groupsizes second group size and groupsizes groupsizes groupsizes third group size and groupsizes groupsizes groupsizes other possible solutions and example input groupsizes output constraints groupsizeslength groupsizesi
sign product array there function signfuncx that returns if positive if negative if equal given integer array nums let product be product all values array nums return signfuncproduct example input nums output explanation product all values array and signfunc example input nums output explanation product all values array and signfunc example input nums output explanation product all values array and signfunc constraints numslength numsi
design bitset bitset data structure that compactly stores bits implement bitset class bitsetint size initializes bitset size bits all which void fixint idx updates value bit index idx if value already no change occurs void unfixint idx updates value bit index idx if value already no change occurs void flip flips values each bit bitset other words all bits value will now have value and vice versa boolean all checks if value each bit bitset returns true if satisfies condition false otherwise boolean one checks if there least one bit bitset value returns true if satisfies condition false otherwise int count returns total number bits bitset which have value string tostring returns current composition bitset note that resultant string character ith index should coincide value ith bit bitset example input bitset fix fix flip all unfix flip one unfix count tostring output null null null null false null null true null explanation bitset bs new bitset bitset bsfix value idx updated so bitset bsfix value idx updated so bitset bsflip value each bit flipped so bitset bsall return false as not all values bitset bsunfix value idx updated so bitset bsflip value each bit flipped so bitset bsone return true as there least index value bsunfix value idx updated so bitset bscount return as there bits value bstostring return which composition bitset constraints size idx size most calls will be made total fix unfix flip all one count and tostring least one call will be made all one count or tostring most calls will be made tostring
sum root leaf numbers given root binary tree containing digits from only each roottoleaf path tree represents number example roottoleaf path represents number return total sum all roottoleaf numbers test cases generated so that answer will fit bit integer leaf node node no children example input root output explanation roottoleaf path represents number roottoleaf path represents number therefore sum example input root output explanation roottoleaf path represents number roottoleaf path represents number roottoleaf path represents number therefore sum constraints number nodes tree range nodeval depth tree will not exceed
trips and users sql schema table trips column name type id int clientid int driverid int cityid int status enum requestat date id primary key this table table holds all taxi trips each trip has unique id while clientid and driverid foreign keys usersid users table status enum type completed cancelledbydriver cancelledbyclient table users column name type usersid int banned enum role enum usersid primary key this table table holds all users each user has unique usersid and role enum type client driver partner banned enum type yes no cancellation rate computed dividing number canceled client or driver requests unbanned users total number requests unbanned users that day write sql query find cancellation rate requests unbanned users both client and driver must not be banned each day between and round cancellation rate two decimal points return result table any order query result format following example example input trips table id clientid driverid cityid status requestat completed cancelledbydriver completed cancelledbyclient completed completed completed completed completed cancelledbydriver users table usersid banned role no client yes client no client no client no driver no driver no driver no driver output day cancellation rate explanation there requests total which canceled however request id made banned client userid so ignored calculation hence there unbanned requests total which canceled cancellation rate there requests total which canceled request id made banned client so ignored hence there unbanned requests total which canceled cancellation rate there requests total which canceled request id made banned client so ignored hence there unbanned request total which canceled cancellation rate
interleaving string given strings and find whether formed interleaving and interleaving two strings and configuration where and divided into and substrings respectively such that sn tm interleaving or note concatenation strings and example input aabcc dbbca aadbbcbcac output true explanation one way obtain split into aa bc and into dbbc interleaving two splits get aa dbbc bc aadbbcbcac since can be obtained interleaving and return true example input aabcc dbbca aadbbbaccc output false explanation notice how impossible interleave any other string obtain example input output true constraints slength slength slength and consist lowercase english letters follow up could solve using only oslength additional memory space
peeking iterator design iterator that supports peek operation existing iterator addition hasnext and next operations implement peekingiterator class peekingiteratoriteratorint nums initializes object given integer iterator iterator int next returns next element array and moves pointer next element boolean hasnext returns true if there still elements array int peek returns next element array without moving pointer note each language may have different implementation constructor and iterator but all support int next and boolean hasnext functions example input peekingiterator next peek next next hasnext output null false explanation peekingiterator peekingiterator new peekingiterator peekingiteratornext return pointer moves next element peekingiteratorpeek return pointer does not move peekingiteratornext return pointer moves next element peekingiteratornext return pointer moves next element peekingiteratorhasnext return false constraints numslength numsi all calls next and peek valid most calls will be made next hasnext and peek follow up how would extend your design be generic and work all types not just integer
maximize win from two segments there some prizes xaxis given integer array prizepositions that sorted nondecreasing order where prizepositionsi position ith prize there could be different prizes same position line also given integer allowed select two segments integer endpoints length each segment must be will collect all prizes whose position falls within least one two selected segments including endpoints segments two selected segments may intersect example if can choose segments and and will win any prize that satisfies prizepositionsi or prizepositionsi return maximum number prizes can win if choose two segments optimally example input prizepositions output explanation this example can win all prizes selecting two segments and example input prizepositions output explanation this example one choice segments and and will be able get prizes constraints prizepositionslength prizepositionsi prizepositions sorted nondecreasing order
frog position after seconds given undirected tree consisting vertices numbered from frog starts jumping from vertex one second frog jumps from its current vertex another unvisited vertex if directly connected frog can not jump back visited vertex case frog can jump several vertices jumps randomly one them same probability otherwise when frog can not jump any unvisited vertex jumps forever same vertex edges undirected tree given array edges where edgesi ai bi means that exists edge connecting vertices ai and bi return probability that after seconds frog vertex target answers within actual answer will be accepted example input edges target output explanation figure above shows given graph frog starts vertex jumping probability vertex after second and then jumping probability vertex after second thus probability frog vertex after seconds example input edges target output explanation figure above shows given graph frog starts vertex jumping probability vertex after second constraints edgeslength edgesilength ai bi target
minimum distance between bst nodes given root binary search tree bst return minimum difference between values any two different nodes tree example input root output example input root nullnull output constraints number nodes tree range nodeval note this question same as httpsleetcodecomproblemsminimumabsolutedifferenceinbst
distribute candies alice has candies where ith candy type candytypei alice noticed that started gain weight so visited doctor doctor advised alice only eat candies has always even alice likes her candies very much and wants eat maximum number different types candies while still following doctors advice given integer array candytype length return maximum number different types candies can eat if only eats them example input candytype output explanation alice can only eat candies since there only types can eat one each type example input candytype output explanation alice can only eat candies whether eats types or still can only eat different types example input candytype output explanation alice can only eat candies even though can eat candies only has type constraints candytypelength even candytypei
profitable schemes there group members and list various crimes could commit ith crime generates profiti and requires groupi members participate if member participates one crime that member cant participate another crime lets call profitable scheme any subset these crimes that generates least minprofit profit and total number members participating that subset crimes most return number schemes that can be chosen since answer may be very large return modulo example input minprofit group profit output explanation make profit least group could either commit crimes and or just crime total there schemes example input minprofit group profit output explanation make profit least group could commit any crimes as long as commit one there possible schemes and constraints minprofit grouplength groupi profitlength grouplength profiti
linked list random node given singly linked list return random nodes value from linked list each node must have same probability being chosen implement solution class solutionlistnode head initializes object head singlylinked list head int getrandom chooses node randomly from list and returns its value all nodes list should be equally likely be chosen example input solution getrandom getrandom getrandom getrandom getrandom output null explanation solution solution new solution solutiongetrandom return solutiongetrandom return solutiongetrandom return solutiongetrandom return solutiongetrandom return getrandom should return either or randomly each element should have equal probability returning constraints number nodes linked list will be range nodeval most calls will be made getrandom follow up what if linked list extremely large and its length unknown could solve this efficiently without using extra space
maximum element after decreasing and rearranging given array positive integers arr perform some operations possibly none arr so that satisfies these conditions value first element arr must be absolute difference between any adjacent elements must be less than or equal other words absarri arri each where arrlength indexed absx absolute value there types operations that can perform any number times decrease value any element arr smaller positive integer rearrange elements arr be any order return maximum possible value element arr after performing operations satisfy conditions example input arr output explanation can satisfy conditions rearranging arr so becomes largest element arr example input arr output explanation one possible way satisfy conditions doing following rearrange arr so becomes decrease value second element decrease value third element now arr which satisfies conditions largest element arr example input arr output explanation array already satisfies conditions and largest element constraints arrlength arri
calculate money leetcode bank hercy wants save money his first car puts money leetcode bank every day starts putting monday first day every day from tuesday sunday will put more than day before every subsequent monday will put more than previous monday given return total amount money will have leetcode bank end nth day example input output explanation after th day total example input output explanation after th day total notice that nd monday hercy only puts example input output explanation after th day total constraints
count subarrays score less than score array defined as product its sum and its length example score given positive integer array nums and integer return number nonempty subarrays nums whose score strictly less than subarray contiguous sequence elements within array example input nums output explanation subarrays having scores less than score score score score score score note that subarrays such as and not considered because their scores and respectively while need scores strictly less than example input nums output explanation every subarray except has score less than has score which greater than thus there subarrays having scores less than constraints numslength numsi
find closest node given two nodes given directed graph nodes numbered from where each node has most one outgoing edge graph represented given indexed array edges size indicating that there directed edge from node node edgesi if there no outgoing edge from then edgesi also given two integers node and node return index node that can be reached from both node and node such that maximum between distance from node that node and from node that node minimized if there multiple answers return node smallest index and if no possible answer exists return note that edges may contain cycles example input edges node node output explanation distance from node node and distance from node node maximum those two distances can be proven that cannot get node smaller maximum distance than so return node example input edges node node output explanation distance from node node and distance from node itself maximum those two distances can be proven that cannot get node smaller maximum distance than so return node constraints edgeslength edgesi edgesi node node
longest nice substring string nice if every letter alphabet that contains appears both uppercase and lowercase example ababb nice because and appear and and appear however aba not because appears but does not given string return longest substring that nice if there multiple return substring earliest occurrence if there none return empty string example input yazaaay output aaa explanation aaa nice string because aa only letter alphabet and both and appear aaa longest nice substring example input bb output bb explanation bb nice string because both and appear whole string substring example input output explanation there no nice substrings constraints slength consists uppercase and lowercase english letters
valid triangle number given integer array nums return number triplets chosen from array that can make triangles if take them as side lengths triangle example input nums output explanation valid combinations using first using second example input nums output constraints numslength numsi
minimum score path between two cities given positive integer representing cities numbered from also given array roads where roadsi ai bi distancei indicates that there bidirectional road between cities ai and bi distance equal distancei cities graph not necessarily connected score path between two cities defined as minimum distance road this path return minimum possible score path between cities and note path sequence roads between two cities allowed path contain same road multiple times and can visit cities and multiple times along path test cases generated such that there least one path between and example input roads output explanation path from city minimum score score this path min can be shown that no other path has less score example input roads output explanation path from city minimum score score this path min constraints roadslength roadsilength ai bi ai bi distancei there no repeated edges there least one path between and
find consecutive integers from data stream stream integers implement data structure that checks if last integers parsed stream equal value implement datastream class datastreamint value int initializes object empty integer stream and two integers value and boolean consecint num adds num stream integers returns true if last integers equal value and false otherwise if there less than integers condition does not hold true so returns false example input datastream consec consec consec consec output null false false true false explanation datastream datastream new datastream value datastreamconsec only integer parsed so returns false datastreamconsec only integers parsed since less than returns false datastreamconsec integers parsed all equal value so returns true datastreamconsec last integers parsed stream since not equal value returns false constraints value num most calls will be made consec
design hashmap design hashmap without using any builtin hash table libraries implement myhashmap class myhashmap initializes object empty map void putint key int value inserts key value pair into hashmap if key already exists map update corresponding value int getint key returns value which specified key mapped or if this map contains no mapping key void removekey removes key and its corresponding value if map contains mapping key example input myhashmap put put get get put get remove get output null null null null null explanation myhashmap myhashmap new myhashmap myhashmapput map now myhashmapput map now myhashmapget return map now myhashmapget return ie not found map now myhashmapput map now ie update existing value myhashmapget return map now myhashmapremove remove mapping map now myhashmapget return ie not found map now constraints key value most calls will be made put get and remove
maximum erasure value given array positive integers nums and want erase subarray containing unique elements score get erasing subarray equal sum its elements return maximum score can get erasing exactly one subarray array called be subarray if forms contiguous subsequence that if equal alalar some lr example input nums output explanation optimal subarray here example input nums output explanation optimal subarray here or constraints numslength numsi
exchange seats sql schema table seat column name type id int student varchar id primary key column this table each row this table indicates name and id student id continuous increment write sql query swap seat id every two consecutive students if number students odd id last student not swapped return result table ordered id ascending order query result format following example example input seat table id student abbot doris emerson green jeames output id student doris abbot green emerson jeames explanation note that if number students odd there no need change last ones seat
maximum score spliced array given two indexed integer arrays nums and nums both length can choose two integers left and right where left right and swap subarray numsleftright subarray numsleftright example if nums and nums and choose left and right nums becomes and nums becomes may choose apply mentioned operation once or not do anything score arrays maximum sumnums and sumnums where sumarr sum all elements array arr return maximum possible score subarray contiguous sequence elements within array arrleftright denotes subarray that contains elements nums between indices left and right inclusive example input nums nums output explanation choosing left and right have nums and nums score maxsumnums sumnums max example input nums nums output explanation choosing left right have nums and nums score maxsumnums sumnums max example input nums nums output explanation choose not swap any subarray score maxsumnums sumnums max constraints numslength numslength numsi numsi
daily temperatures given array integers temperatures represents daily temperatures return array answer such that answeri number days have wait after ith day get warmer temperature if there no future day which this possible keep answeri instead example input temperatures output example input temperatures output example input temperatures output constraints temperatureslength temperaturesi
check completeness binary tree given root binary tree determine if complete binary tree complete binary tree every level except possibly last completely filled and all nodes last level as far left as possible can have between and nodes inclusive last level example input root output true explanation every level before last full ie levels nodevalues and and all nodes last level as far left as possible example input root null output false explanation node value isnt as far left as possible constraints number nodes tree range nodeval
group sold products date sql schema table activities column name type selldate date product varchar there no primary key this table may contain duplicates each row this table contains product name and date sold market write sql query find each date number different products sold and their names sold products names each date should be sorted lexicographically return result table ordered selldate query result format following example example input activities table selldate product headphone pencil mask basketball bible mask tshirt output selldate numsold products basketballheadphonetshirt biblepencil mask explanation sold items headphone basketball tshirt sort them lexicographically and separate them comma sold items pencil bible sort them lexicographically and separate them comma sold item mask just return
find string lcp define lcp matrix any indexed string word lowercase english letters as grid such that lcpij equal length longest common prefix between substrings wordin and wordjn given matrix lcp return alphabetically smallest string word that corresponds lcp if there no such string return empty string string lexicographically smaller than string same length if first position where and differ string has letter that appears earlier alphabet than corresponding letter example aabd lexicographically smaller than aaca because first position differ third letter and comes before example input lcp output abab explanation lcp corresponds any letter string two alternating letters lexicographically smallest them abab example input lcp output aaaa explanation lcp corresponds any letter string single distinct letter lexicographically smallest them aaaa example input lcp output explanation lcp cannot be equal since word consists only single letter thus no answer exists constraints lcplength lcpilength lcpij
remove colored pieces if both neighbors same color there pieces arranged line and each piece colored either or given string colors length where colorsi color ith piece alice and bob playing game where take alternating turns removing pieces from line this game alice moves first alice only allowed remove piece colored if both its neighbors also colored not allowed remove pieces that colored bob only allowed remove piece colored if both its neighbors also colored not allowed remove pieces that colored alice and bob cannot remove pieces from edge line if player cannot make move their turn that player loses and other player wins assuming alice and bob play optimally return true if alice wins or return false if bob wins example input colors aaababb output true explanation aaababb aababb alice moves first removes second from left since that only whose neighbors both now its bobs turn bob cannot make move his turn since there no bs whose neighbors both thus alice wins so return true example input colors aa output false explanation alice has her turn first there only two as and both edge line so cannot move her turn thus bob wins so return false example input colors abbbbbbbaaa output false explanation abbbbbbbaaa abbbbbbbaa alice moves first her only option remove second last from right abbbbbbbaa abbbbbbaa next bobs turn has many options which piece remove can pick any alices second turn has no more pieces that can remove thus bob wins so return false constraints colorslength colors consists only letters and
top travellers sql schema table users column name type id int name varchar id primary key this table name name user table rides column name type id int userid int distance int id primary key this table userid id user who traveled distance distance write sql query report distance traveled each user return result table ordered travelleddistance descending order if two or more users traveled same distance order them their name ascending order query result format following example example input users table id name alice bob alex donald lee jonathan elvis rides table id userid distance output name travelleddistance elvis lee bob jonathan alex alice donald explanation elvis and lee traveled miles elvis top traveler as his name alphabetically smaller than lee bob jonathan alex and alice have only one ride and just order them total distances ride donald did not have any rides distance traveled him
adding spaces string given indexed string and indexed integer array spaces that describes indices original string where spaces will be added each space should be inserted before character given index example given enjoyyourcoffee and spaces place spaces before and which indices and respectively thus obtain enjoy your coffee return modified string after spaces have been added example input leetcodehelpsmelearn spaces output leetcode helps me learn explanation indices and correspond underlined characters leetcodehelpsmelearn then place spaces before those characters example input icodeinpython spaces output code py thon explanation indices and correspond underlined characters icodeinpython then place spaces before those characters example input spacing spaces output explanation also able place spaces before first character string constraints slength consists only lowercase and uppercase english letters spaceslength spacesi slength all values spaces strictly increasing
naming company given array strings ideas that represents list names be used process naming company process naming company as follows choose distinct names from ideas call them ideaa and ideab swap first letters ideaa and ideab each other if both new names not found original ideas then name ideaa ideab concatenation ideaa and ideab separated space valid company name otherwise not valid name return number distinct valid names company example input ideas coffeedonutstimetoffee output explanation following selections valid coffee donuts company name created doffee conuts donuts coffee company name created conuts doffee donuts time company name created tonuts dime donuts toffee company name created tonuts doffee time donuts company name created dime tonuts toffee donuts company name created doffee tonuts therefore there total distinct company names following some examples invalid selections coffee time name toffee formed after swapping already exists original array time toffee both names still same after swapping and exist original array coffee toffee both names formed after swapping already exist original array example input ideas lackback output explanation there no valid selections therefore returned constraints ideaslength ideasilength ideasi consists lowercase english letters all strings ideas unique
bank account summary ii sql schema table users column name type account int name varchar account primary key this table each row this table contains account number each user bank there will be no two users having same name table table transactions column name type transid int account int amount int transactedon date transid primary key this table each row this table contains all changes made all accounts amount positive if user received money and negative if transferred money all accounts start balance write sql query report name and balance users balance higher than balance account equal sum amounts all transactions involving that account return result table any order query result format following example example input users table account name alice bob charlie transactions table transid account amount transactedon output name balance alice explanation alices balance bobs balance charlies balance
maximum subarray sum one deletion given array integers return maximum sum nonempty subarray contiguous elements most one element deletion other words want choose subarray and optionally delete one element from so that there still least one element left and sum remaining elements maximum possible note that subarray needs be nonempty after deleting one element example input arr output explanation because can choose and drop thus subarray becomes maximum value example input arr output explanation just choose and its maximum sum example input arr output explanation final subarray needs be nonempty cant choose and delete from then get empty subarray make sum equals constraints arrlength arri
find critical and pseudocritical edges minimum spanning tree given weighted undirected connected graph vertices numbered from and array edges where edgesi ai bi weighti represents bidirectional and weighted edge between nodes ai and bi minimum spanning tree mst subset graphs edges that connects all vertices without cycles and minimum possible total edge weight find all critical and pseudocritical edges given graphs minimum spanning tree mst mst edge whose deletion from graph would cause mst weight increase called critical edge other hand pseudocritical edge that which can appear some msts but not all note that can return indices edges any order example input edges output explanation figure above describes graph following figure shows all possible msts notice that two edges and appear all msts therefore critical edges so return them first list output edges and only part some msts therefore considered pseudocritical edges add them second list output example input edges output explanation can observe that since all edges have equal weight choosing any edges from given will yield mst therefore all edges pseudocritical constraints edgeslength min edgesilength ai bi weighti all pairs ai bi distinct
count items matching rule given array items where each itemsi typei colori namei describes type color and name ith item also given rule represented two strings rulekey and rulevalue ith item said match rule if one following true rulekey type and rulevalue typei rulekey color and rulevalue colori rulekey name and rulevalue namei return number items that match given rule example input items phonebluepixelcomputersilverlenovophonegoldiphone rulekey color rulevalue silver output explanation there only one item matching given rule which computersilverlenovo example input items phonebluepixelcomputersilverphonephonegoldiphone rulekey type rulevalue phone output explanation there only two items matching given rule which phonebluepixel and phonegoldiphone note that item computersilverphone does not match constraints itemslength typeilength colorilength nameilength rulevaluelength rulekey equal either type color or name all strings consist only lowercase letters
sum two integers given two integers and return sum two integers without using operators and example input output example input output constraints
sum distances tree there undirected connected tree nodes labeled from and edges given integer and array edges where edgesi ai bi indicates that there edge between nodes ai and bi tree return array answer length where answeri sum distances between ith node tree and all other nodes example input edges output explanation tree shown above can see that dist dist dist dist dist equals hence answer and so example input edges output example input edges output constraints edgeslength edgesilength ai bi ai bi given input represents valid tree
two city scheduling company planning interview people given array costs where costsi acosti bcosti cost flying ith person city acosti and cost flying ith person city bcosti return minimum cost fly every person city such that exactly people arrive each city example input costs output explanation first person goes city cost second person goes city cost third person goes city cost fourth person goes city cost total minimum cost have half people interviewing each city example input costs output example input costs output constraints costslength costslength costslength even acosti bcosti
average levels binary tree given root binary tree return average value nodes each level form array answers within actual answer will be accepted example input root nullnull output explanation average value nodes level level and level hence return example input root output constraints number nodes tree range nodeval
pattern given array integers nums pattern subsequence three integers numsi numsj and numsk such that and numsi numsk numsj return true if there pattern nums otherwise return false example input nums output false explanation there no pattern sequence example input nums output true explanation there pattern sequence example input nums output true explanation there three patterns sequence and constraints numslength numsi
shift grid given grid size and integer need shift grid times one shift operation element gridij moves gridij element gridin moves gridi element gridm moves grid return grid after applying shift operation times example input grid output example input grid output example input grid output constraints gridlength gridilength gridij
path maximum probability given undirected weighted graph nodes indexed represented edge list where edgesi undirected edge connecting nodes and probability success traversing that edge succprobi given two nodes start and end find path maximum probability success go from start end and return its success probability if there no path from start end return your answer will be accepted if differs from correct answer most example input edges succprob start end output explanation there two paths from start end one having probability success and other has example input edges succprob start end output example input edges succprob start end output explanation there no path between and constraints start end start end succproblength edgeslength succprobi there most one edge between every two nodes
maximum number darts inside circular dartboard alice throwing darts very large wall given array darts where dartsi xi yi position ith dart that alice threw wall bob knows positions darts wall wants place dartboard radius wall so that maximum number darts that alice throws lies dartboard given integer return maximum number darts that can lie dartboard example input darts output explanation circle dartboard center and radius contain all points example input darts output explanation circle dartboard center and radius contain all points except point constraints dartslength dartsilength xi yi all darts unique
find bottom left tree value given root binary tree return leftmost value last row tree example input root output example input root nullnullnull output constraints number nodes tree range nodeval
find and replace string given indexed string that must perform replacement operations replacement operations given as three indexed parallel arrays indices sources and targets all length complete ith replacement operation check if substring sourcesi occurs index indicesi original string if does not occur do nothing otherwise if does occur replace that substring targetsi example if abcd indicesi sourcesi ab and targetsi eee then result this replacement will be eeecd all replacement operations must occur simultaneously meaning replacement operations should not affect indexing each other testcases will be generated such that replacements will not overlap example testcase abc indices and sources abbc will not be generated because ab and bc replacements overlap return resulting string after performing all replacement operations substring contiguous sequence characters string example input abcd indices sources cd targets eee ffff output eeebffff explanation occurs index so replace eee cd occurs index so replace ffff example input abcd indices sources abec targets eeeffff output eeecd explanation ab occurs index so replace eee ec does not occur index so do nothing constraints slength indiceslength sourceslength targetslength indexesi slength sourcesilength targetsilength consists only lowercase english letters sourcesi and targetsi consist only lowercase english letters
minimum number visited cells grid given indexed integer matrix grid your initial position topleft cell starting from cell can move one following cells cells gridij rightward movement or cells gridij downward movement return minimum number cells need visit reach bottomright cell if there no valid path return example input grid output explanation image above shows one paths that visits exactly cells example input grid output explanation image above shows one paths that visits exactly cells example input grid output explanation can be proven that no path exists constraints gridlength gridilength gridij gridm
longest square streak array given integer array nums subsequence nums called square streak if length subsequence least and after sorting subsequence each element except first element square previous number return length longest square streak nums or return if there no square streak subsequence array that can be derived from another array deleting some or no elements without changing order remaining elements example input nums output explanation choose subsequence after sorting becomes therefore square streak can be shown that every subsequence length not square streak example input nums output explanation there no square streak nums so return constraints numslength numsi
rotated digits integer good if after rotating each digit individually degrees get valid number that different from each digit must be rotated cannot choose leave alone number valid if each digit remains digit after rotation example and rotate themselves and rotate each other this case rotated different direction other words or gets mirrored and rotate each other and rest numbers do not rotate any other number and become invalid given integer return number good integers range example input output explanation there four good numbers range note that and not good numbers since remain unchanged after rotating example input output example input output constraints
longest increasing subsequence ii given integer array nums and integer find longest subsequence nums that meets following requirements subsequence strictly increasing and difference between adjacent elements subsequence most return length longest subsequence that meets requirements subsequence array that can be derived from another array deleting some or no elements without changing order remaining elements example input nums output explanation longest subsequence that meets requirements subsequence has length so return note that subsequence does not meet requirements because larger than example input nums output explanation longest subsequence that meets requirements subsequence has length so return example input nums output explanation longest subsequence that meets requirements subsequence has length so return constraints numslength numsi
binary watch binary watch has leds top represent hours and leds bottom represent minutes each led represents zero or one least significant bit right example below binary watch reads given integer turnedon which represents number leds that currently ignoring pm return all possible times watch could represent may return answer any order hour must not contain leading zero example not valid should be minute must be consist two digits and may contain leading zero example not valid should be example input turnedon output example input turnedon output constraints turnedon
longest substring without repeating characters given string find length longest substring without repeating characters example input abcabcbb output explanation answer abc length example input bbbbb output explanation answer length example input pwwkew output explanation answer wke length notice that answer must be substring pwke subsequence and not substring constraints slength consists english letters digits symbols and spaces
make array zero subtracting equal amounts given nonnegative integer array nums one operation must choose positive integer such that less than or equal smallest nonzero element nums subtract from every positive element nums return minimum number operations make every element nums equal example input nums output explanation first operation choose now nums second operation choose now nums third operation choose now nums example input nums output explanation each element nums already so no operations needed constraints numslength numsi
third maximum number given integer array nums return third distinct maximum number this array if third maximum does not exist return maximum number example input nums output explanation first distinct maximum second distinct maximum third distinct maximum example input nums output explanation first distinct maximum second distinct maximum third distinct maximum does not exist so maximum returned instead example input nums output explanation first distinct maximum second distinct maximum both counted together since have same value third distinct maximum constraints numslength numsi follow up can find solution
sum beauty all substrings beauty string difference frequencies between most frequent and least frequent characters example beauty abaacc given string return sum beauty all its substrings example input aabcb output explanation substrings nonzero beauty aabaabcaabcbabcbbcb each beauty equal example input aabcbaa output constraints slength consists only lowercase english letters
generate fibonacci sequence write generator function that returns generator object which yields fibonacci sequence fibonacci sequence defined relation xn xn xn first few numbers series example input callcount output explanation const gen fibgenerator gennextvalue gennextvalue gennextvalue gennextvalue gennextvalue example input callcount output explanation gennext never called so nothing outputted constraints callcount
longest turbulent subarray given integer array arr return length maximum size turbulent subarray arr subarray turbulent if comparison sign flips between each adjacent pair elements subarray more formally subarray arri arri arrj arr said be turbulent if and only if arrk arrk when odd and arrk arrk when even or arrk arrk when even and arrk arrk when odd example input arr output explanation arr arr arr arr arr example input arr output example input arr output constraints arrlength arri
last moment before all ants fall out plank have wooden plank length units some ants walking plank each ant moves speed unit per second some ants move left other move right when two ants moving two different directions meet some point change their directions and continue moving again assume changing directions does not take any additional time when ant reaches one end plank time falls out plank immediately given integer and two integer arrays left and right positions ants moving left and right return moment when last ants fall out plank example input left right output explanation image above ant index named and going right ant index named and going right ant index named and going left ant index named and going left last moment when ant plank seconds after that falls immediately out plank ie can say that there no ants plank example input left right output explanation all ants going right ant index needs seconds fall example input left right output explanation all ants going left ant index needs seconds fall constraints leftlength lefti rightlength righti leftlength rightlength all values left and right unique and each value can appear only one two arrays
find score array after marking all elements given array nums consisting positive integers starting score apply following algorithm choose smallest integer array that not marked if there tie choose one smallest index add value chosen integer score mark chosen element and its two adjacent elements if exist repeat until all array elements marked return score get after applying above algorithm example input nums output explanation mark elements as follows smallest unmarked element so mark and its two adjacent elements smallest unmarked element so mark and its left adjacent element only remaining unmarked element so mark our score example input nums output explanation mark elements as follows smallest unmarked element so mark and its two adjacent elements smallest unmarked element since there two them choose leftmost one so mark one index and its right adjacent element only remaining unmarked element so mark our score constraints numslength numsi
find first palindromic string array given array strings words return first palindromic string array if there no such string return empty string string palindromic if reads same forward and backward example input words abccaradaracecarcool output ada explanation first string that palindromic ada note that racecar also palindromic but not first example input words notapalindromeracecar output racecar explanation first and only string that palindromic racecar example input words defghi output explanation there no palindromic strings so empty string returned constraints wordslength wordsilength wordsi consists only lowercase english letters
counter given integer return counter function this counter function initially returns and then returns more than previous value every subsequent time called etc example input callcallcall output explanation counter first time counter called returns counter returns more than previous time counter returns more than previous time example input callcallcallcallcall output explanation counter initially returns then increases after each sebsequent call constraints most calls counter will be made
build array where can find maximum exactly comparisons given three integers and consider following algorithm find maximum element array positive integers should build array arr which has following properties arr has exactly integers arri where after applying mentioned algorithm arr value searchcost equal return number ways build array arr under mentioned conditions as answer may grow large answer must be computed modulo example input output explanation possible arrays example input output explanation there no possible arrays that satisify mentioned conditions example input output explanation only possible array constraints
take gifts from richest pile given integer array gifts denoting number gifts various piles every second do following choose pile maximum number gifts if there more than one pile maximum number gifts choose any leave behind floor square root number gifts pile take rest gifts return number gifts remaining after seconds example input gifts output explanation gifts taken following way first second last pile chosen and gifts left behind then second pile chosen and gifts left behind after that first pile chosen and gifts left behind finally last pile chosen again and gifts left behind final remaining gifts so total number gifts remaining example input gifts output explanation this case regardless which pile choose have leave behind gift each pile that cant take any pile so total gifts remaining constraints giftslength giftsi
rotate string given two strings and goal return true if and only if can become goal after some number shifts shift consists moving leftmost character rightmost position example if abcde then will be bcdea after one shift example input abcde goal cdeab output true example input abcde goal abced output false constraints slength goallength and goal consist lowercase english letters
maximize sum array after negations given integer array nums and integer modify array following way choose index and replace numsi numsi should apply this process exactly times may choose same index multiple times return largest possible sum array after modifying this way example input nums output explanation choose index and nums becomes example input nums output explanation choose indices and nums becomes example input nums output explanation choose indices and nums becomes constraints numslength numsi
best position service centre delivery company wants build new service center new city company knows positions all customers this city dmap and wants build new center position such that sum euclidean distances all customers minimum given array positions where positionsi xi yi position ith customer map return minimum sum euclidean distances all customers other words need choose position service center xcentre ycentre such that following formula minimized answers within actual value will be accepted example input positions output explanation as shown can see that choosing xcentre ycentre will make distance each customer sum all distances which minimum possible can achieve example input positions output explanation minimum possible sum distances sqrt sqrt constraints positionslength positionsilength xi yi
minimum initial energy finish tasks given array tasks where tasksi actuali minimumi actuali actual amount energy spend finish ith task minimumi minimum amount energy require begin ith task example if task and your current energy cannot start this task however if your current energy can complete this task and your energy will be after finishing can finish tasks any order like return minimum initial amount energy will need finish all tasks example input tasks output explanation starting energy finish tasks following order rd task now energy nd task now energy st task now energy notice that even though have leftover energy starting energy does not work because cannot do rd task example input tasks output explanation starting energy finish tasks following order st task now energy nd task now energy rd task now energy th task now energy th task now energy example input tasks output explanation starting energy finish tasks following order th task now energy nd task now energy rd task now energy st task now energy th task now energy th task now energy constraints taskslength actuali minimumi
range sum query immutable given integer array nums handle multiple queries following type calculate sum elements nums between indices left and right inclusive where left right implement numarray class numarrayint nums initializes object integer array nums int sumrangeint left int right returns sum elements nums between indices left and right inclusive ie numsleft numsleft numsright example input numarray sumrange sumrange sumrange output null explanation numarray numarray new numarray numarraysumrange return numarraysumrange return numarraysumrange return constraints numslength numsi left right numslength most calls will be made sumrange
find servers that handled most number requests have servers numbered from that being used handle multiple requests simultaneously each server has infinite computational capacity but cannot handle more than one request time requests assigned servers according specific algorithm ith indexed request arrives if all servers busy request dropped not handled all if kth server available assign request that server otherwise assign request next available server wrapping around list servers and starting from if necessary example if ith server busy try assign request ith server then ith server and so given strictly increasing array arrival positive integers where arrivali represents arrival time ith request and another array load where loadi represents load ith request time takes complete your goal find busiest servers server considered busiest if handled most number requests successfully among all servers return list containing ids indexed busiest servers may return ids any order example input arrival load output explanation all servers start out available first requests handled first servers order request comes server busy so its assigned next available server which request comes cannot be handled since all servers busy so dropped servers and handled one request each while server handled two requests hence server busiest server example input arrival load output explanation first requests handled first servers request comes handled server since server available server handled two requests while servers and handled one request each hence server busiest server example input arrival load output explanation each server handles single request so all considered busiest constraints arrivallength loadlength arrivallength loadlength arrivali loadi arrival strictly increasing
find three consecutive integers that sum given number given integer num return three consecutive integers as sorted array that sum num if num cannot be expressed as sum three consecutive integers return empty array example input num output explanation can be expressed as consecutive integers so return example input num output explanation there no way express as sum consecutive integers constraints num
regions cut slashes grid composed squares where each square consists or blank space these characters divide square into contiguous regions given grid grid represented as string array return number regions note that backslash characters escaped so represented as example input grid output example input grid output example input grid output explanation recall that because characters escaped refers and refers constraints gridlength gridilength gridij either or
maximum points can obtain from cards there several cards arranged row and each card has associated number points points given integer array cardpoints one step can take one card from beginning or from end row have take exactly cards your score sum points cards have taken given integer array cardpoints and integer return maximum score can obtain example input cardpoints output explanation after first step your score will always be however choosing rightmost card first will maximize your total score optimal strategy take three cards right giving final score example input cardpoints output explanation regardless which two cards take your score will always be example input cardpoints output explanation have take all cards your score sum points all cards constraints cardpointslength cardpointsi cardpointslength
count special integers call positive integer special if all its digits distinct given positive integer return number special integers that belong interval example input output explanation all integers from except special thus there special integers example input output explanation all integers from special example input output explanation there integers from that special some integers that not special and constraints
domino and tromino tiling have two types tiles domino shape and tromino shape may rotate these shapes given integer return number ways tile board since answer may be very large return modulo tiling every square must be covered tile two tilings different if and only if there two directionally adjacent cells board such that exactly one tilings has both squares occupied tile example input output explanation five different ways show above example input output constraints
maximum split positive even integers given integer finalsum split into sum maximum number unique positive even integers example given finalsum following splits valid unique positive even integers summing up finalsum and among them contains maximum number integers note that finalsum cannot be split into as all numbers should be unique return list integers that represent valid split containing maximum number integers if no valid split exists finalsum return empty list may return integers any order example input finalsum output explanation following valid splits and has maximum number integers which thus return note that etc also accepted example input finalsum output explanation there no valid splits given finalsum thus return empty array example input finalsum output explanation following valid splits and has maximum number integers which thus return note that etc also accepted constraints finalsum
swap nodes pairs given linked list swap every two adjacent nodes and return its head must solve problem without modifying values lists nodes ie only nodes themselves may be changed example input head output example input head output example input head output constraints number nodes list range nodeval
maximum number visible points given array points integer angle and your location where location posx posy and pointsi xi yi both denote integral coordinates xy plane initially facing directly east from your position cannot move from your position but can rotate other words posx and posy cannot be changed your field view degrees represented angle determining how wide can see from any given view direction let be amount degrees that rotate counterclockwise then your field view inclusive range angles angle angle your browser does not support video tag or this video format can see some set points if each point angle formed point your position and immediate east direction from your position your field view there can be multiple points one coordinate there may be points your location and can always see these points regardless your rotation points do not obstruct your vision other points return maximum number points can see example input points angle location output explanation shaded region represents your field view all points can be made visible your field view including even though front and same line sight example input points angle location output explanation all points can be made visible your field view including one your location example input points angle location output explanation can only see one two points as shown above constraints pointslength pointsilength locationlength angle posx posy xi yi
print foobar alternately suppose given following code class foobar public void foo int printfoo public void bar int printbar same instance foobar will be passed two different threads thread will call foo while thread will call bar modify given program output foobar times example input output foobar explanation there two threads being fired asynchronously one them calls foo while other calls bar foobar being output time example input output foobarfoobar explanation foobar being output times constraints
maximum candies can get from boxes have boxes labeled from given four arrays status candies keys and containedboxes where statusi if ith box open and if ith box closed candiesi number candies ith box keysi list labels boxes can open after opening ith box containedboxesi list boxes found inside ith box given integer array initialboxes that contains labels boxes initially have can take all candies any open box and can use keys open new boxes and also can use boxes find return maximum number candies can get following rules above example input status candies keys containedboxes initialboxes output explanation will be initially given box will find candies and boxes and box closed and do not have key so will open box will find candies and key box box box will find candies and box but will not find key box so box will remain closed total number candies collected candy example input status candies keys containedboxes initialboxes output explanation have initially box opening can find boxes and and their keys total number candies will be constraints statuslength candieslength keyslength containedboxeslength statusi either or candiesi keysilength keysij all values keysi unique containedboxesilength containedboxesij all values containedboxesi unique each box contained one box most initialboxeslength initialboxesi
convert temperature given nonnegative floating point number rounded two decimal places celsius that denotes temperature celsius should convert celsius into kelvin and fahrenheit and return as array ans kelvin fahrenheit return array ans answers within actual answer will be accepted note that kelvin celsius fahrenheit celsius example input celsius output explanation temperature celsius converted kelvin and converted fahrenheit example input celsius output explanation temperature celsius converted kelvin and converted fahrenheit constraints celsius
maximum xor after operations given indexed integer array nums one operation select any nonnegative integer and index then update numsi be equal numsi and numsi xor note that and bitwise and operation and xor bitwise xor operation return maximum possible bitwise xor all elements nums after applying operation any number times example input nums output explanation apply operation and num and xor and now nums and bitwise xor all elements xor xor xor can be shown that maximum possible bitwise xor note that other operations may be used achieve bitwise xor example input nums output explanation apply operation zero times bitwise xor all elements xor xor xor xor can be shown that maximum possible bitwise xor constraints numslength numsi
minimum numbers function calls make target array given integer array nums have integer array arr same length all values set initially also have following modify function want use modify function convert arr nums using minimum number calls return minimum number function calls make nums from arr test cases generated so that answer fits bit signed integer example input nums output explanation increment second element get operation double all elements operations increment both elements operations total operations example input nums output explanation increment both elements operations double all elements operation total operations example input nums output explanation initial nums constraints numslength numsi
minimum number taps open water garden there onedimensional garden xaxis garden starts point and ends point ie length garden there taps located points garden given integer and integer array ranges length where rangesi indexed means ith tap can water area rangesi rangesi if open return minimum number taps that should be open water whole garden if garden cannot be watered return example input ranges output explanation tap point can cover interval tap point can cover interval tap point can cover interval tap point can cover interval tap point can cover interval tap point can cover interval opening only second tap will water whole garden example input ranges output explanation even if activate all four taps cannot water whole garden constraints rangeslength rangesi
count common words one occurrence given two string arrays words and words return number strings that appear exactly once each two arrays example input words leetcodeisamazingasis words amazingleetcodeis output explanation leetcode appears exactly once each two arrays count this string amazing appears exactly once each two arrays count this string appears each two arrays but there occurrences words do not count this string as appears once words but does not appear words do not count this string thus there strings that appear exactly once each two arrays example input words bbbbbb words aaaaaa output explanation there no strings that appear each two arrays example input words aab words aaaab output explanation only string that appears exactly once each two arrays ab constraints wordslength wordslength wordsilength wordsjlength wordsi and wordsj consists only lowercase english letters
count good triplets given array integers arr and three integers and need find number good triplets triplet arri arrj arrk good if following conditions true arrlength arri arrj arrj arrk arri arrk where denotes absolute value return number good triplets example input arr output explanation there good triplets example input arr output explanation no triplet satisfies all conditions constraints arrlength arri
maximum repeating substring string sequence string word krepeating if word concatenated times substring sequence words maximum krepeating value highest value where word krepeating sequence if word not substring sequence words maximum krepeating value given strings sequence and word return maximum krepeating value word sequence example input sequence ababc word ab output explanation abab substring ababc example input sequence ababc word ba output explanation ba substring ababc baba not substring ababc example input sequence ababc word ac output explanation ac not substring ababc constraints sequencelength wordlength sequence and word contains only lowercase english letters
sum game alice and bob take turns playing game alice starting first given string num even length consisting digits and characters each turn player will do following if there still least one num choose index where numi replace numi any digit between and game ends when there no more characters num bob win sum digits first half num must be equal sum digits second half alice win sums must not be equal example if game ended num then bob wins because if game ended num then alice wins because assuming alice and bob play optimally return true if alice will win and false if bob will win example input num output false explanation there no moves be made sum first half equal sum second half example input num output true explanation alice can replace one and will be impossible bob make sums equal example input num output false explanation can be proven that bob will always win one possible outcome alice replaces first num bob replaces one right half num alice replaces one right half num bob replaces last right half num bob wins because constraints numlength numlength even num consists only digits and
number nodes subtree same label given tree ie connected undirected graph that has no cycles consisting nodes numbered from and exactly edges root tree node and each node tree has label which lowercase character given string labels ie node number has label labelsi edges array given form edgesi ai bi which means there edge between nodes ai and bi tree return array size where ansi number nodes subtree ith node which have same label as node subtree tree tree consisting node and all its descendant nodes example input edges labels abaedcd output explanation node has label and its subtree has node label as well thus answer notice that any node part its subtree node has label subtree node contains nodes and as nodes and have different labels than node answer just node itself example input edges labels bbbb output explanation subtree node contains only node so answer subtree node contains only node so answer subtree node contains nodes and both have label thus answer subtree node contains nodes and all label thus answer example input edges labels aabab output constraints edgeslength edgesilength ai bi ai bi labelslength labels consisting only lowercase english letters
minimum domino rotations equal row row dominoes topsi and bottomsi represent top and bottom halves ith domino domino tile two numbers from one each half tile may rotate ith domino so that topsi and bottomsi swap values return minimum number rotations so that all values tops same or all values bottoms same if cannot be done return example input tops bottoms output explanation first figure represents dominoes as given tops and bottoms before do any rotations if rotate second and fourth dominoes can make every value top row equal as indicated second figure example input tops bottoms output explanation this case not possible rotate dominoes make one row values equal constraints topslength bottomslength topslength topsi bottomsi
can convert string moves given two strings and your goal convert into moves or less during ith move can choose any index indexed from such that slength and has not been chosen any previous move and shift character that index times do nothing shifting character means replacing next letter alphabet wrapping around so that becomes shifting character means applying shift operations times remember that any index can be picked most once return true if its possible convert into no more than moves otherwise return false example input input ouput output true explanation th move shift times get and th move shift get example input abc bcd output false explanation need shift each character one time convert into can shift during st move however there no way shift other characters remaining moves obtain from example input aab bbb output true explanation st move shift first time get th move shift second times get constraints slength tlength contain only lowercase english letters
maximum difference between node and ancestor given root binary tree find maximum value which there exist different nodes and where aval bval and ancestor node ancestor if either any child equal or any child ancestor example input root nullnullnull output explanation have various ancestornode differences some which given below among all possible differences maximum value obtained example input root nullnull output constraints number nodes tree range nodeval
kth lexicographical string all happy strings length happy string string that consists only letters set si si all values from slength string indexed example strings abc ac and abcbabcbcb all happy strings and strings aa baa and ababbc not happy strings given two integers and consider list all happy strings length sorted lexicographical order return kth string this list or return empty string if there less than happy strings length example input output explanation list contains all happy strings length third string example input output explanation there only happy strings length example input output cab explanation there different happy string length aba abc aca acb bab bac bca bcb cab cac cba cbc will find th string cab constraints
friends appropriate ages there persons social media website given integer array ages where agesi age ith person person will not send friend request person if any following conditions true agey agex agey agex agey agex otherwise will send friend request note that if sends request will not necessarily send request also person will not send friend request themself return total number friend requests made example input ages output explanation people friend request each other example input ages output explanation friend requests made example input ages output explanation friend requests made constraints ageslength agesi
number good paths there tree ie connected undirected graph no cycles consisting nodes numbered from and exactly edges given indexed integer array vals length where valsi denotes value ith node also given integer array edges where edgesi ai bi denotes that there exists undirected edge connecting nodes ai and bi good path simple path that satisfies following conditions starting node and ending node have same value all nodes between starting node and ending node have values less than or equal starting node ie starting nodes value should be maximum value along path return number distinct good paths note that path and its reverse counted as same path example considered be same as single node also considered as valid path example input vals edges output explanation there good paths consisting single node there additional good path reverse path treated as same as note that not good path because vals vals example input vals edges output explanation there good paths consisting single node there additional good paths and example input vals edges output explanation tree consists only one node so there one good path constraints valslength valsi edgeslength edgesilength ai bi ai bi edges represents valid tree
height checker school trying take annual photo all students students asked stand single file line nondecreasing order height let this ordering be represented integer array expected where expectedi expected height ith student line given integer array heights representing current order that students standing each heightsi height ith student line indexed return number indices where heightsi expectedi example input heights output explanation heights expected indices and do not match example input heights output explanation heights expected all indices do not match example input heights output explanation heights expected all indices match constraints heightslength heightsi
range sum bst given root node binary search tree and two integers low and high return sum values all nodes value inclusive range low high example input root null low high output explanation nodes and range example input root null low high output explanation nodes and range constraints number nodes tree range nodeval low high all nodeval unique
minimum cost path special roads given array start where start startx starty represents your initial position startx starty space also given array target where target targetx targety represents your target position targetx targety cost going from position any other position space there also some special roads given array specialroads where specialroadsi xi yi xi yi costi indicates that ith special road can take from xi yi xi yi cost equal costi can use each special road any number times return minimum cost required go from startx starty targetx targety example input start target specialroads output explanation optimal path from following this move has cost this move uses first special edge cost this move has cost this move uses second special edge cost so total cost can be shown that cannot achieve smaller total cost than example input start target specialroads output explanation optimal not use any special edges and go directly from starting ending position cost constraints startlength targetlength startx targetx starty targety specialroadslength specialroadsilength startx xi xi targetx starty yi yi targety costi
minimum absolute difference queries minimum absolute difference array defined as minimum value ai aj where alength and ai aj if all elements same minimum absolute difference example minimum absolute difference array note that not because ai and aj must be different given integer array nums and array queries where queriesi li ri each query compute minimum absolute difference subarray numsliri containing elements nums between based indices li and ri inclusive return array ans where ansi answer ith query subarray contiguous sequence elements array value defined as if if example input nums queries output explanation queries processed as follows queries subarray and minimum absolute difference queries subarray and minimum absolute difference queries subarray and minimum absolute difference queries subarray and minimum absolute difference example input nums queries output explanation queries processed as follows queries subarray and minimum absolute difference because all elements same queries subarray and minimum absolute difference queries subarray and minimum absolute difference queries subarray and minimum absolute difference constraints numslength numsi querieslength li ri numslength
minimum operations make array kincreasing given indexed array arr consisting positive integers and positive integer array arr called kincreasing if arrik arri holds every index where example arr kincreasing because arr arr arr arr arr arr arr arr however same arr not kincreasing because arr arr or because arr arr one operation can choose index and change arri into any positive integer return minimum number operations required make array kincreasing given example input arr output explanation resultant array has be nondecreasing some kincreasing arrays that can be formed all them require operations suboptimal change array example because would take operations can be shown that cannot make array kincreasing less than operations example input arr output explanation this same example as one problem description here every index where arri arri since given array already kincreasing do not need perform any operations example input arr output explanation indices and only ones not satisfying arri arri one ways can make array kincreasing changing arr and arr array will now be note that there can be other ways make array kincreasing but none them require less than operations constraints arrlength arri arrlength
latest time replacing hidden digits given string time form hhmm where some digits string hidden represented valid times those inclusively between and return latest valid time can get from time replacing hidden digits example input time output explanation latest hour beginning digit and latest minute ending digit example input time output example input time output constraints time format hhmm guaranteed that can produce valid time from given string
maximum number groups entering competition given positive integer array grades which represents grades students university would like enter all these students into competition ordered nonempty groups such that ordering meets following conditions sum grades students ith group less than sum grades students th group all groups except last total number students ith group less than total number students th group all groups except last return maximum number groups that can be formed example input grades output explanation following possible way form groups students st group has students grades sum grades student count nd group has students grades sum grades student count rd group has students grades sum grades student count can be shown that not possible form more than groups example input grades output explanation can only form group since forming groups would lead equal number students both groups constraints gradeslength gradesi
nary tree preorder traversal given root nary tree return preorder traversal its nodes values narytree input serialization represented their level order traversal each group children separated null value see examples example input root nullnull output example input root nullnullnullnullnullnullnullnullnullnullnull output constraints number nodes tree range nodeval height nary tree less than or equal follow up recursive solution trivial could do iteratively
sum subarray ranges given integer array nums range subarray nums difference between largest and smallest element subarray return sum all subarray ranges nums subarray contiguous nonempty sequence elements within array example input nums output explanation subarrays nums following range largest smallest range range range range range so sum all ranges example input nums output explanation subarrays nums following range largest smallest range range range range range so sum all ranges example input nums output explanation sum all subarray ranges nums constraints numslength numsi followup could find solution time complexity
least number unique integers after removals given array integers arr and integer find least number unique integers after removing exactly elements example input arr output explanation remove single only left example input arr output explanation remove and either one two or three and will be left constraints arrlength arri arrlength
reverse string write function that reverses string input string given as array characters must do this modifying input array inplace extra memory example input hello output olleh example input hannah output hannah constraints slength si printable ascii character
unique substrings wraparound string define string base be infinite wraparound string abcdefghijklmnopqrstuvwxyz so base will look like this zabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcd given string return number unique nonempty substrings present base example input output explanation only substring base example input cac output explanation there two substrings base example input zab output explanation there six substrings za ab and zab base constraints slength consists lowercase english letters
minimum remove make valid parentheses given string and lowercase english characters your task remove minimum number parentheses or any positions so that resulting parentheses string valid and return any valid string formally parentheses string valid if and only if empty string contains only lowercase characters or can be written as ab concatenated where and valid strings or can be written as where valid string example input leetcode output leetcode explanation leetcode leetcode would also be accepted example input abcd output abcd example input output explanation empty string also valid constraints slength si either or lowercase english letter
design circular deque design your implementation circular doubleended queue deque implement mycirculardeque class mycirculardequeint initializes deque maximum size boolean insertfront adds item front deque returns true if operation successful or false otherwise boolean insertlast adds item rear deque returns true if operation successful or false otherwise boolean deletefront deletes item from front deque returns true if operation successful or false otherwise boolean deletelast deletes item from rear deque returns true if operation successful or false otherwise int getfront returns front item from deque returns if deque empty int getrear returns last item from deque returns if deque empty boolean isempty returns true if deque empty or false otherwise boolean isfull returns true if deque full or false otherwise example input mycirculardeque insertlast insertlast insertfront insertfront getrear isfull deletelast insertfront getfront output null true true true false true true true explanation mycirculardeque mycirculardeque new mycirculardeque mycirculardequeinsertlast return true mycirculardequeinsertlast return true mycirculardequeinsertfront return true mycirculardequeinsertfront return false queue full mycirculardequegetrear return mycirculardequeisfull return true mycirculardequedeletelast return true mycirculardequeinsertfront return true mycirculardequegetfront return constraints value most calls will be made insertfront insertlast deletefront deletelast getfront getrear isempty isfull
maximum number balloons given string text want use characters text form as many instances word balloon as possible can use each character text most once return maximum number instances that can be formed example input text nlaebolko output example input text loonbalxballpoon output example input text leetcode output constraints textlength text consists lower case english letters only
count number possible root nodes alice has undirected tree nodes labeled from tree represented as integer array edges length where edgesi ai bi indicates that there edge between nodes ai and bi tree alice wants bob find root tree allows bob make several guesses about her tree one guess does following chooses two distinct integers and such that there exists edge tree tells alice that parent tree bobs guesses represented integer array guesses where guessesj uj vj indicates bob guessed uj be parent vj alice being lazy does not reply each bobs guesses but just says that least his guesses true given integer arrays edges guesses and integer return number possible nodes that can be root alices tree if there no such tree return example input edges guesses output explanation root correct guesses root correct guesses root correct guesses root correct guesses root correct guesses considering or as root node leads correct guesses example input edges guesses output explanation root correct guesses root correct guesses root correct guesses root correct guesses root correct guesses considering any node as root will give least correct guess constraints edgeslength guesseslength ai bi uj vj ai bi uj vj edges represents valid tree guessesj edge tree guesses unique guesseslength
longest continuous subarray absolute diff less than or equal limit given array integers nums and integer limit return size longest nonempty subarray such that absolute difference between any two elements this subarray less than or equal limit example input nums limit output explanation all subarrays maximum absolute diff maximum absolute diff maximum absolute diff maximum absolute diff maximum absolute diff maximum absolute diff maximum absolute diff maximum absolute diff maximum absolute diff maximum absolute diff therefore size longest subarray example input nums limit output explanation subarray longest since maximum absolute diff example input nums limit output constraints numslength numsi limit
unique paths iii given integer array grid where gridij could be representing starting square there exactly one starting square representing ending square there exactly one ending square representing empty squares can walk over representing obstacles that cannot walk over return number directional walks from starting square ending square that walk over every nonobstacle square exactly once example input grid output explanation have following two paths example input grid output explanation have following four paths example input grid output explanation there no path that walks over every empty square exactly once note that starting and ending square can be anywhere grid constraints gridlength gridilength gridij there exactly one starting cell and one ending cell
minimum value get positive step step sum given array integers nums start initial positive value startvalue each iteration calculate step step sum startvalue plus elements nums from left right return minimum positive value startvalue such that step step sum never less than example input nums output explanation if choose startvalue third iteration your step step sum less than step step sum startvalue startvalue nums example input nums output explanation minimum start value should be positive example input nums output constraints numslength numsi
check if binary string has most one segment ones given binary string without leading zeros return true if contains most one contiguous segment ones otherwise return false example input output false explanation ones do not form contiguous segment example input output true constraints slength si either or
partition array maximum sum given integer array arr partition array into contiguous subarrays length most after partitioning each subarray has their values changed become maximum value that subarray return largest sum given array after partitioning test cases generated so that answer fits bit integer example input arr output explanation arr becomes example input arr output example input arr output constraints arrlength arri arrlength
minimum adjacent swaps reach kth smallest number given string num representing large integer and integer call some integer wonderful if permutation digits num and greater value than num there can be many wonderful integers however only care about smallestvalued ones example when num st smallest wonderful integer nd smallest wonderful integer rd smallest wonderful integer th smallest wonderful integer return minimum number adjacent digit swaps that needs be applied num reach kth smallest wonderful integer tests generated such way that kth smallest wonderful integer exists example input num output explanation th smallest wonderful number get this number swap index index swap index index example input num output explanation th smallest wonderful number get this number swap index index swap index index swap index index swap index index example input num output explanation st smallest wonderful number get this number swap index index constraints numlength num only consists digits
maximize distance closest person given array representing row seats where seatsi represents person sitting ith seat and seatsi represents that ith seat empty indexed there least one empty seat and least one person sitting alex wants sit seat such that distance between him and closest person him maximized return that maximum distance closest person example input seats output explanation if alex sits second open seat ie seats then closest person has distance if alex sits any other open seat closest person has distance thus maximum distance closest person example input seats output explanation if alex sits last seat ie seats closest person seats away this maximum distance possible so answer example input seats output constraints seatslength seatsi or least one seat empty least one seat occupied
satisfiability equality equations given array strings equations that represent relationships between variables where each string equationsi length and takes one two different forms xiyi or xiyihere xi and yi lowercase letters not necessarily different that represent oneletter variable names return true if possible assign integers variable names so as satisfy all given equations or false otherwise example input equations abba output false explanation if assign say and then first equation satisfied but not second there no way assign variables satisfy both equations example input equations baab output true explanation could assign and satisfy both equations constraints equationslength equationsilength equationsi lowercase letter equationsi either or equationsi equationsi lowercase letter
merge similar items given two integer arrays items and items representing two sets items each array items has following properties itemsi valuei weighti where valuei represents value and weighti represents weight ith item value each item items unique return integer array ret where reti valuei weighti weighti being sum weights all items value valuei note ret should be returned ascending order value example input items items output explanation item value occurs items weight and items weight total weight item value occurs items weight and items weight total weight item value occurs items weight total weight therefore return example input items items output explanation item value occurs items weight and items weight total weight item value occurs items weight and items weight total weight item value occurs items weight and items weight total weight therefore return example input items items output explanation item value occurs items weight and items weight total weight item value occurs items weight and items weight total weight item value occurs items weight total weight therefore return constraints itemslength itemslength itemsilength itemsilength valuei weighti each valuei items unique each valuei items unique
best poker hand given integer array ranks and character array suits have cards where ith card has rank ranksi and suit suitsi following types poker hands can make from best worst flush five cards same suit three kind three cards same rank pair two cards same rank high card any single card return string representing best type poker hand can make given cards note that return values casesensitive example input ranks suits aaaaa output flush explanation hand all cards consists cards same suit so have flush example input ranks suits daabc output three kind explanation hand first second and fourth card consists cards same rank so have three kind note that could also make pair hand but three kind better hand also note that other cards could be used make three kind hand example input ranks suits abcad output pair explanation hand first and second card consists cards same rank so have pair note that cannot make flush or three kind constraints rankslength suitslength ranksi suitsi no two cards have same rank and suit
decoded string index given encoded string decode string tape encoded string read one character time and following steps taken if character read letter that letter written onto tape if character read digit entire current tape repeatedly written more times total given integer return kth letter indexed decoded string example input leetcode output explanation decoded string leetleetcodeleetleetcodeleetleetcode th letter string example input ha output explanation decoded string hahahaha th letter example input output explanation decoded string repeated times st letter constraints slength consists lowercase english letters and digits through starts letter guaranteed that less than or equal length decoded string decoded string guaranteed have less than letters
cousins binary tree ii given root binary tree replace value each node tree sum all its cousins values two nodes binary tree cousins if have same depth different parents return root modified tree note that depth node number edges path from root node example input root null output null explanation diagram above shows initial binary tree and binary tree after changing value each node node value does not have any cousins so its sum node value does not have any cousins so its sum node value does not have any cousins so its sum node value has cousin value so its sum node value has cousin value so its sum node value has cousins values and so its sum example input root output explanation diagram above shows initial binary tree and binary tree after changing value each node node value does not have any cousins so its sum node value does not have any cousins so its sum node value does not have any cousins so its sum constraints number nodes tree range nodeval
find closest palindrome given string representing integer return closest integer not including itself which palindrome if there tie return smaller one closest defined as absolute difference minimized between two integers example input output example input output explanation and closest palindromes but return smallest which constraints nlength consists only digits does not have leading zeros representing integer range
keyboard row given array strings words return words that can be typed using letters alphabet only one row american keyboard like image below american keyboard first row consists characters qwertyuiop second row consists characters asdfghjkl and third row consists characters zxcvbnm example input words helloalaskadadpeace output alaskadad example input words omk output example input words adsdfsfd output adsdfsfd constraints wordslength wordsilength wordsi consists english letters both lowercase and uppercase
construct smallest number from di string given indexed string pattern length consisting characters meaning increasing and meaning decreasing indexed string num length created using following conditions num consists digits where each digit used most once if patterni then numi numi if patterni then numi numi return lexicographically smallest possible string num that meets conditions example input pattern iiididdd output explanation indices and must have that numi numi indices and must have that numi numi some possible values num and can be proven that smallest possible num that meets conditions note that not possible because digit used more than once example input pattern ddd output explanation some possible values num and can be proven that smallest possible num that meets conditions constraints patternlength pattern consists only letters and
binary tree right side view given root binary tree imagine yourself standing right side return values nodes can see ordered from top bottom example input root nullnull output example input root null output example input root output constraints number nodes tree range nodeval
largest merge two strings given two strings word and word want construct string merge following way while either word or word nonempty choose one following options if word nonempty append first character word merge and delete from word example if word abc and merge dv then after choosing this operation word bc and merge dva if word nonempty append first character word merge and delete from word example if word abc and merge then after choosing this operation word bc and merge return lexicographically largest merge can construct string lexicographically larger than string same length if first position where and differ has character strictly larger than corresponding character example abcd lexicographically larger than abcc because first position differ fourth character and greater than example input word cabaa word bcaaa output cbcabaaaaa explanation one way get lexicographically largest merge take from word merge word abaa word bcaaa take from word merge cb word abaa word caaa take from word merge cbc word abaa word aaa take from word merge cbca word baa word aaa take from word merge cbcab word aa word aaa append remaining as from word and word end merge example input word abcabc word abdcaba output abdcabcabcaba constraints wordlength wordlength word and word consist only lowercase english letters
rearrange characters make target string given two indexed strings and target can take some letters from and rearrange them form new strings return maximum number copies target that can be formed taking letters from and rearranging them example input ilovecodingonleetcode target code output explanation first copy code take letters indices and second copy code take letters indices and strings that formed ecod and code which can both be rearranged into code can make most two copies code so return example input abcba target abc output explanation can make one copy abc taking letters indices and can make most one copy abc so return note that while there extra and indices and cannot reuse letter index so cannot make second copy abc example input abbaccaddaeea target aaaaa output explanation can make one copy aaaaa taking letters indices and can make most one copy aaaaa so return constraints slength targetlength and target consist lowercase english letters
largest palindromic number given string num consisting digits only return largest palindromic integer form string that can be formed using digits taken from num should not contain leading zeroes notes do not need use all digits num but must use least one digit digits can be reordered example input num output explanation use digits from form palindromic integer can be shown that largest palindromic integer that can be formed example input num output explanation can be shown that largest palindromic integer that can be formed note that integer returned should not contain leading zeroes constraints numlength num consists digits
maximum subsequence score given two indexed integer arrays nums and nums equal length and positive integer must choose subsequence indices from nums length chosen indices ik your score defined as sum selected elements from nums multiplied minimum selected elements from nums can defined simply as numsi numsi numsik minnumsi numsi numsik return maximum possible score subsequence indices array set that can be derived from set deleting some or no elements example input nums nums output explanation four possible subsequence scores choose indices and score min choose indices and score min choose indices and score min choose indices and score min therefore return max score which example input nums nums output explanation choosing index optimal nums nums maximum possible score constraints numslength numslength numsi numsj
largest component size common factor given integer array unique positive integers nums consider following graph there numslength nodes labeled nums numsnumslength there undirected edge between numsi and numsj if numsi and numsj share common factor greater than return size largest connected component graph example input nums output example input nums output example input nums output constraints numslength numsi all values nums unique
find latest group size given array arr that represents permutation numbers from have binary string size that initially has all its bits set zero each step assuming both binary string and arr indexed from bit position arri set also given integer find latest step which there exists group ones length group ones contiguous substring such that cannot be extended either direction return latest step which there exists group ones length exactly if no such group exists return example input arr output explanation step groups step groups step groups step groups step groups latest step which there exists group size step example input arr output explanation step groups step groups step groups step groups step groups no group size exists during any step constraints arrlength arri all integers arr distinct
sum closest given integer array nums length and integer target find three integers nums such that sum closest target return sum three integers may assume that each input would have exactly one solution example input nums target output explanation sum that closest target example input nums target output explanation sum that closest target constraints numslength numsi target
minimum white tiles after covering carpets given indexed binary string floor which represents colors tiles floor floori denotes that ith tile floor colored black other hand floori denotes that ith tile floor colored white also given numcarpets and carpetlen have numcarpets black carpets each length carpetlen tiles cover tiles given carpets such that number white tiles still visible minimum carpets may overlap one another return minimum number white tiles still visible example input floor numcarpets carpetlen output explanation figure above shows one way covering tiles carpets such that only white tiles visible no other way covering tiles carpets can leave less than white tiles visible example input floor numcarpets carpetlen output explanation figure above shows one way covering tiles carpets such that no white tiles visible note that carpets able overlap one another constraints carpetlen floorlength floori either or numcarpets
maximum score from removing stones playing solitaire game three piles stones sizes and respectively each turn choose two different nonempty piles take one stone from each and add point your score game stops when there fewer than two nonempty piles meaning there no more available moves given three integers and return maximum score can get example input output explanation starting state one optimal set moves take from st and rd piles state now take from st and rd piles state now take from nd and rd piles state now take from nd and rd piles state now take from nd and rd piles state now take from nd and rd piles state now there fewer than two nonempty piles so game ends total points example input output explanation starting state one optimal set moves take from st and nd piles state now take from st and rd piles state now take from st and rd piles state now take from st and rd piles state now take from nd and rd piles state now take from nd and rd piles state now take from nd and rd piles state now there fewer than two nonempty piles so game ends total points example input output explanation one optimal set moves take from nd and rd piles turns until empty after that there fewer than two nonempty piles so game ends constraints
minimum number operations make all array elements equal given indexed array nums consisiting positive integers can do following operation array any number times select index such that and replace either numsi or numsi their gcd value return minimum number operations make all elements nums equal if impossible return gcd two integers greatest common divisor two integers example input nums output explanation can do following operations choose index and replace nums gcd now have nums choose index and replace nums gcd now have nums choose index and replace nums gcd now have nums choose index and replace nums gcd now have nums example input nums output explanation can be shown that impossible make all elements equal constraints numslength numsi followup time complexity solution works but could find constant time complexity solution
rising temperature sql schema table weather column name type id int recorddate date temperature int id primary key this table this table contains information about temperature certain day write sql query find all dates id higher temperatures compared its previous dates yesterday return result table any order query result format following example example input weather table id recorddate temperature output id explanation temperature higher than previous day temperature higher than previous day
apply transform over each element array given integer array arr and mapping function fn return new array transformation applied each element returned array should be created such that returnedarrayi fnarri please solve without builtin arraymap method example input arr fn function plusonen return output explanation const newarray maparr plusone function increases each value array one example input arr fn function plusin return output explanation function increases each value index resides example input arr fn function constant return output explanation function always returns constraints arrlength arri fn returns number
long pressed name your friend typing his name into keyboard sometimes when typing character key might get long pressed and character will be typed or more times examine typed characters keyboard return true if possible that your friends name some characters possibly none being long pressed example input name alex typed aaleex output true explanation and alex long pressed example input name saeed typed ssaaedd output false explanation must have been pressed twice but not typed output constraints namelength typedlength name and typed consist only lowercase english letters
number atoms given string formula representing chemical formula return count each atom atomic element always starts uppercase character then zero or more lowercase letters representing name one or more digits representing that elements count may follow if count greater than if count no digits will follow example ho and ho possible but ho impossible two formulas concatenated together produce another formula example hohemg also formula formula placed parentheses and count optionally added also formula example ho and ho formulas return count all elements as string following form first name sorted order followed its count if that count more than followed second name sorted order followed its count if that count more than and so test cases generated so that all values output fit bit integer example input formula ho output ho explanation count elements example input formula mgoh output hmgo explanation count elements mg example input formula konso output knos explanation count elements constraints formulalength formula consists english letters digits and formula always valid
build matrix conditions given positive integer also given integer array rowconditions size where rowconditionsi abovei belowi and integer array colconditions size where colconditionsi lefti righti two arrays contain integers from have build matrix that contains each numbers from exactly once remaining cells should have value matrix should also satisfy following conditions number abovei should appear row that strictly above row which number belowi appears all from number lefti should appear column that strictly left column which number righti appears all from return any matrix that satisfies conditions if no answer exists return empty matrix example input rowconditions colconditions output explanation diagram above shows valid example matrix that satisfies all conditions row conditions following number row and number row so above matrix number row and number row so above matrix column conditions following number column and number column so left matrix number column and number column so left matrix note that there may be multiple correct answers example input rowconditions colconditions output explanation from first two conditions has be below but third conditions needs be above be satisfied no matrix can satisfy all conditions so return empty matrix constraints rowconditionslength colconditionslength rowconditionsilength colconditionsilength abovei belowi lefti righti abovei belowi lefti righti
kdiff pairs array given array integers nums and integer return number unique kdiff pairs array kdiff pair integer pair numsi numsj where following true numslength numsi numsj notice that val denotes absolute value val example input nums output explanation there two diff pairs array and although have two input should only return number unique pairs example input nums output explanation there four diff pairs array and example input nums output explanation there one diff pair array constraints numslength numsi
apply operations array given indexed array nums size consisting nonnegative integers need apply operations this array where ith operation indexed will apply following ith element nums if numsi numsi then multiply numsi and set numsi otherwise skip this operation after performing all operations shift all end array example array after shifting all its end return resulting array note that operations applied sequentially not all once example input nums output explanation do following operations nums and nums not equal so skip this operation nums and nums equal multiply nums and change nums array becomes nums and nums not equal so skip this operation nums and nums equal multiply nums and change nums array becomes nums and nums equal multiply nums and change nums array becomes after that shift end which gives array example input nums output explanation no operation can be applied just shift end constraints numslength numsi
maximum difference between increasing elements given indexed integer array nums size find maximum difference between numsi and numsj ie numsj numsi such that and numsi numsj return maximum difference if no such and exists return example input nums output explanation maximum difference occurs and numsj numsi note that and difference numsj numsi but so not valid example input nums output explanation there no and such that and numsi numsj example input nums output explanation maximum difference occurs and numsj numsi constraints numslength numsi
delete columns make sorted given array strings strs all same length strings can be arranged such that there one each line making grid example strs abc bce cae can be arranged as follows abc bce cae want delete columns that not sorted lexicographically above example indexed columns and sorted while column not so would delete column return number columns that will delete example input strs cbadafghi output explanation grid looks as follows cba daf ghi columns and sorted but column not so only need delete column example input strs ab output explanation grid looks as follows column only column and sorted so will not delete any columns example input strs zyxwvutsr output explanation grid looks as follows zyx wvu tsr all columns not sorted so will delete all constraints strslength strsilength strsi consists lowercase english letters
task scheduler ii given indexed array positive integers tasks representing tasks that need be completed order where tasksi represents type ith task also given positive integer space which represents minimum number days that must pass after completion task before another task same type can be performed each day until all tasks have been completed must either complete next task from tasks or take break return minimum number days needed complete all tasks example input tasks space output explanation one way complete all tasks days as follows day complete th task day complete st task day take break day take break day complete nd task day complete rd task day take break day complete th task day complete th task can be shown that tasks cannot be completed less than days example input tasks space output explanation one way complete all tasks days as follows day complete th task day complete st task day take break day take break day complete nd task day complete rd task can be shown that tasks cannot be completed less than days constraints taskslength tasksi space taskslength
decrypt string from alphabet integer mapping given string formed digits and want map english lowercase characters as follows characters represented respectively characters represented respectively return string formed after mapping test cases generated so that unique mapping will always exist example input output jkab explanation example input output acz constraints slength consists digits and letter will be valid string such that mapping always possible
longest uploaded prefix given stream videos each represented distinct number from that need upload server need implement data structure that calculates length longest uploaded prefix various points upload process consider be uploaded prefix if all videos range inclusive have been uploaded server longest uploaded prefix maximum value that satisfies this definition implement luprefix class luprefixint initializes object stream videos void uploadint video uploads video server int longest returns length longest uploaded prefix defined above example input luprefix upload longest upload longest upload longest output null null null null explanation luprefix server new luprefix initialize stream videos serverupload upload video serverlongest since video has not been uploaded yet there no prefix so return serverupload upload video serverlongest prefix longest uploaded prefix so return serverupload upload video serverlongest prefix longest uploaded prefix so return constraints video all values video distinct most calls total will be made upload and longest least one call will be made longest
longest common subpath there country cities numbered from this country there road connecting every pair cities there friends numbered from who traveling through country each one them will take path consisting some cities each path represented integer array that contains visited cities order path may contain city more than once but same city will not be listed consecutively given integer and integer array paths where pathsi integer array representing path ith friend return length longest common subpath that shared every friends path or if there no common subpath all subpath path contiguous sequence cities within that path example input paths output explanation longest common subpath example input paths output explanation there no common subpath shared three paths example input paths output explanation possible longest common subpaths and all have length constraints pathslength sumpathsilength pathsij same city not listed multiple times consecutively pathsi
number ways stay same place after some steps have pointer index array size arrlen each step can move position left position right array or stay same place pointer should not be placed outside array any time given two integers steps and arrlen return number ways such that your pointer still index after exactly steps steps since answer may be too large return modulo example input steps arrlen output explanation there differents ways stay index after steps right left stay stay right left right stay left stay stay stay example input steps arrlen output explanation there differents ways stay index after steps right left stay stay example input steps arrlen output constraints steps arrlen
video stitching given series video clips from sporting event that lasted time seconds these video clips can be overlapping each other and have varying lengths each video clip described array clips where clipsi starti endi indicates that ith clip started starti and ended endi can cut these clips into segments freely example clip can be cut into segments return minimum number clips needed so that can cut clips into segments that cover entire sporting event time if task impossible return example input clips time output explanation take clips total clips then can reconstruct sporting event as follows cut into segments now have segments which cover sporting event example input clips time output explanation cannot cover only and example input clips time output explanation can take clips and constraints clipslength starti endi time
find customer referee sql schema table customer column name type id int name varchar refereeid int id primary key column this table each row this table indicates id customer their name and id customer who referred them write sql query report names customer that not referred customer id return result table any order query result format following example example input customer table id name refereeid will null jane null alex bill null zack mark output name will jane bill zack
minimize malware spread ii given network nodes represented as adjacency matrix graph where ith node directly connected jth node if graphij some nodes initial initially infected malware whenever two nodes directly connected and least one those two nodes infected malware both nodes will be infected malware this spread malware will continue until no more nodes can be infected this manner suppose minitial final number nodes infected malware entire network after spread malware stops will remove exactly one node from initial completely removing and any connections from this node any other node return node that if removed would minimize minitial if multiple nodes could be removed minimize minitial return such node smallest index example input graph initial output example input graph initial output example input graph initial output constraints graphlength graphilength graphij or graphij graphji graphii initiallength initiali all integers initial unique
richest customer wealth given integer grid accounts where accountsij amount money ith customer has jth bank return wealth that richest customer has customers wealth amount money have all their bank accounts richest customer customer that has maximum wealth example input accounts output explanation st customer has wealth nd customer has wealth both customers considered richest wealth each so return example input accounts output explanation st customer has wealth nd customer has wealth rd customer has wealth nd customer richest wealth example input accounts output constraints accountslength accountsilength accountsij
shortest subarray be removed make array sorted given integer array arr remove subarray can be empty from arr such that remaining elements arr nondecreasing return length shortest subarray remove subarray contiguous subsequence array example input arr output explanation shortest subarray can remove length remaining elements after that will be which sorted another correct solution remove subarray example input arr output explanation since array strictly decreasing can only keep single element therefore need remove subarray length either or example input arr output explanation array already nondecreasing do not need remove any elements constraints arrlength arri
words within two edits dictionary given two string arrays queries and dictionary all words each array comprise lowercase english letters and have same length one edit can take word from queries and change any letter any other letter find all words from queries that after maximum two edits equal some word from dictionary return list all words from queries that match some word from dictionary after maximum two edits return words same order appear queries example input queries wordnoteantswood dictionary woodjokemoat output wordnotewood explanation changing word allows equal dictionary word wood changing and note changes joke would take more than edits ants equal dictionary word wood can remain unchanged edits and match corresponding dictionary word thus return wordnotewood example input queries yes dictionary not output explanation applying any two edits yes cannot make equal not thus return empty array constraints querieslength dictionarylength queriesilength dictionaryjlength all queriesi and dictionaryj composed lowercase english letters
powerful integers given three integers and bound return list all powerful integers that have value less than or equal bound integer powerful if can be represented as xi yj some integers and may return answer any order your answer each value should occur most once example input bound output explanation example input bound output constraints bound
unique number occurrences given array integers arr return true if number occurrences each value array unique or false otherwise example input arr output true explanation value has occurrences has and has no two values have same number occurrences example input arr output false example input arr output true constraints arrlength arri
cherry pickup given grid representing field cherries each cell one three possible integers means cell empty so can pass through means cell contains cherry that can pick up and pass through or means cell contains thorn that blocks your way return maximum number cherries can collect following rules below starting position and reaching moving right or down through valid path cells cells value or after reaching returning moving left or up through valid path cells when passing through path cell containing cherry pick up and cell becomes empty cell if there no valid path between and then no cherries can be collected example input grid output explanation player started and went down down right right reach cherries picked up during this single trip and matrix becomes then player went left up up left return home picking up one more cherry total number cherries picked up and this maximum possible example input grid output constraints gridlength gridilength gridij or grid gridn
as far from land as possible given grid containing only values and where represents water and represents land find water cell such that its distance nearest land cell maximized and return distance if no land or water exists grid return distance used this problem manhattan distance distance between two cells and example input grid output explanation cell as far as possible from all land distance example input grid output explanation cell as far as possible from all land distance constraints gridlength gridilength gridij or
minimum degree connected trio graph given undirected graph given integer which number nodes graph and array edges where each edgesi ui vi indicates that there undirected edge between ui and vi connected trio set three nodes where there edge between every pair them degree connected trio number edges where one endpoint trio and other not return minimum degree connected trio graph or if graph has no connected trios example input edges output explanation there exactly one trio which edges that form its degree bolded figure above example input edges output explanation there exactly three trios degree degree degree constraints edgesilength edgeslength ui vi ui vi there no repeated edges
course schedule ii there total numcourses courses have take labeled from numcourses given array prerequisites where prerequisitesi ai bi indicates that must take course bi first if want take course ai example pair indicates that take course have first take course return ordering courses should take finish all courses if there many valid answers return any them if impossible finish all courses return empty array example input numcourses prerequisites output explanation there total courses take take course should have finished course so correct course order example input numcourses prerequisites output explanation there total courses take take course should have finished both courses and both courses and should be taken after finished course so one correct course order another correct ordering example input numcourses prerequisites output constraints numcourses prerequisiteslength numcourses numcourses prerequisitesilength ai bi numcourses ai bi all pairs ai bi distinct
maximum nesting depth two valid parentheses strings string valid parentheses string denoted vps if and only if consists and characters only and empty string or can be written as ab concatenated where and vpss or can be written as where vps can similarly define nesting depth depths any vps as follows depth deptha maxdeptha depthb where and vpss depth deptha where vps example and vpss nesting depths and and and not vpss given vps seq split into two disjoint subsequences and such that and vpss and alength blength seqlength now choose any such and such that maxdeptha depthb minimum possible value return answer array length seqlength that encodes such choice and answeri if seqi part else answeri note that even though multiple answers may exist may return any them example input seq output example input seq output constraints seqsize
range product queries powers given positive integer there exists indexed array called powers composed minimum number powers that sum array sorted nondecreasing order and there only one way form array also given indexed integer array queries where queriesi lefti righti each queriesi represents query where have find product all powersj lefti righti return array answers equal length queries where answersi answer ith query since answer ith query may be too large each answersi should be returned modulo example input queries output explanation powers can be shown that powers cannot be smaller size answer st query powers powers answer nd query powers answer rd query powers powers powers powers each answer modulo yields same answer so returned example input queries output explanation powers answer only query powers answer modulo same so returned constraints querieslength starti endi powerslength
check if object instance class write function that checks if given value instance given class or superclass this problem object considered instance given class if that object has access that classs methods there no constraints data types that can be passed function example value or class could be undefined example input func checkifinstanceofnew date date output true explanation object returned date constructor definition instance date example input func class animal class dog extends animal return checkifinstanceofnew dog animal output true explanation class animal class dog extends animal checkifinstancenew dog animal true dog subclass animal therefore dog object instance both dog and animal example input func checkifinstanceofdate date output false explanation date constructor cannot logically be instance itself example input func checkifinstanceof number output true explanation number note that instanceof keyword would return false however still considered instance number because accesses number methods example tofixed
clumsy factorial factorial positive integer product all positive integers less than or equal example factorial make clumsy factorial using integers decreasing order swapping out multiply operations fixed rotation operations multiply divide add and subtract this order example clumsy however these operations still applied using usual order operations arithmetic do all multiplication and division steps before any addition or subtraction steps and multiplication and division steps processed left right additionally division that use floor division such that given integer return clumsy factorial example input output explanation example input output explanation constraints
random point nonoverlapping rectangles given array nonoverlapping axisaligned rectangles rects where rectsi ai bi xi yi indicates that ai bi bottomleft corner point ith rectangle and xi yi topright corner point ith rectangle design algorithm pick random integer point inside space covered one given rectangles point perimeter rectangle included space covered rectangle any integer point inside space covered one given rectangles should be equally likely be returned note that integer point point that has integer coordinates implement solution class solutionint rects initializes object given rectangles rects int pick returns random integer point inside space covered one given rectangles example input solution pick pick pick pick pick output null explanation solution solution new solution solutionpick return solutionpick return solutionpick return solutionpick return solutionpick return constraints rectslength rectsilength ai xi bi yi xi ai yi bi all rectangles do not overlap most calls will be made pick
kind deck cards given integer array deck where decki represents number written ith card partition cards into one or more groups such that each group has exactly cards where and all cards one group have same integer written them return true if such partition possible or false otherwise example input deck output true explanation possible partition example input deck output false explanation no possible partition constraints decklength decki
pyramid transition matrix stacking blocks form pyramid each block has color which represented single letter each row blocks contains one less block than row beneath and centered top make pyramid aesthetically pleasing there only specific triangular patterns that allowed triangular pattern consists single block stacked top two blocks patterns given as list threeletter strings allowed where first two characters pattern represent left and right bottom blocks respectively and third character top block example abc represents triangular pattern block stacked top left and right block note that this different from bac where left bottom and right bottom start bottom row blocks bottom given as single string that must use as base pyramid given bottom and allowed return true if can build pyramid all way top such that every triangular pattern pyramid allowed or false otherwise example input bottom bcd allowed bcccdeceafff output true explanation allowed triangular patterns shown right starting from bottom level can build ce level and then build level there three triangular patterns pyramid which bcc cde and cea all allowed example input bottom aaaa allowed aabaacbcdbbedef output false explanation allowed triangular patterns shown right starting from bottom level there multiple ways build level but trying all possibilites will get always stuck before building level constraints bottomlength allowedlength allowedilength letters all input strings from set all values allowed unique
sort array increasing frequency given array integers nums sort array increasing order based frequency values if multiple values have same frequency sort them decreasing order return sorted array example input nums output explanation has frequency has frequency and has frequency example input nums output explanation and both have frequency so sorted decreasing order example input nums output constraints numslength numsi
merge two arrays summing values given two integer arrays nums and nums numsi idi vali indicate that number id idi has value equal vali numsi idi vali indicate that number id idi has value equal vali each array contains unique ids and sorted ascending order id merge two arrays into one array that sorted ascending order id respecting following conditions only ids that appear least one two arrays should be included resulting array each id should be included only once and its value should be sum values this id two arrays if id does not exist one two arrays then its value that array considered be return resulting array returned array must be sorted ascending order id example input nums nums output explanation resulting array contains following id value this id id value this id id value this id id value this id example input nums nums output explanation there no common ids so just include each id its value resulting list constraints numslength numslength numsilength numsjlength idi vali both arrays contain unique ids both arrays strictly ascending order id
beautiful arrangement ii given two integers and construct list answer that contains different positive integers ranging from and obeys following requirement suppose this list answer then list has exactly distinct integers return list answer if there multiple valid answers return any them example input output explanation has three different positive integers ranging from and has exactly distinct integer example input output explanation has three different positive integers ranging from and has exactly distinct integers and constraints
minimum total space wasted resizing operations currently designing dynamic array given indexed integer array nums where numsi number elements that will be array time addition given integer maximum number times can resize array any size size array time sizet must be least numst because there needs be enough space array hold all elements space wasted time defined as sizet numst and total space wasted sum space wasted across every time where numslength return minimum total space wasted if can resize array most times note array can have any size start and does not count towards number resizing operations example input nums output explanation size can set initial size be total wasted space example input nums output explanation size can set initial size be and resize time total wasted space example input nums output explanation size can set initial size resize time and resize time total wasted space constraints numslength numsi numslength
insert into binary search tree given root node binary search tree bst and value insert into tree return root node bst after insertion guaranteed that new value does not exist original bst notice that there may exist multiple valid ways insertion as long as tree remains bst after insertion can return any them example input root val output explanation another accepted tree example input root val output nullnull example input root nullnullnullnullnullnull val output constraints number nodes tree will be range nodeval all values nodeval unique val its guaranteed that val does not exist original bst
shortest unsorted continuous subarray given integer array nums need find one continuous subarray such that if only sort this subarray nondecreasing order then whole array will be sorted nondecreasing order return shortest such subarray and output its length example input nums output explanation need sort ascending order make whole array sorted ascending order example input nums output example input nums output constraints numslength numsi follow up can solve time complexity
prison cells after days there prison cells row and each cell either occupied or vacant each day whether cell occupied or vacant changes according following rules if cell has two adjacent neighbors that both occupied or both vacant then cell becomes occupied otherwise becomes vacant note that because prison row first and last cells row cant have two adjacent neighbors given integer array cells where cellsi if ith cell occupied and cellsi if ith cell vacant and given integer return state prison after days ie such changes described above example input cells output explanation following table summarizes state prison each day day day day day day day day day example input cells output constraints cellslength cellsi either or
reordered power given integer reorder digits any order including original order such that leading digit not zero return true if and only if can do this so that resulting number power two example input output true example input output false constraints
removing minimum number magic beans given array positive integers beans where each integer represents number magic beans found particular magic bag remove any number beans possibly none from each bag such that number beans each remaining nonempty bag still containing least one bean equal once bean has been removed from bag not allowed return any bags return minimum number magic beans that have remove example input beans output explanation remove bean from bag only bean this results remaining bags then remove beans from bag beans this results remaining bags then remove bean from bag beans this results remaining bags removed total beans make remaining nonempty bags have equal number beans there no other solutions that remove beans or fewer example input beans output explanation remove beans from one bags beans this results remaining bags then remove beans from other bag beans this results remaining bags then remove beans from bag beans this results remaining bags removed total beans make remaining nonempty bags have equal number beans there no other solutions that removes beans or fewer constraints beanslength beansi
minimum addition make integer beautiful given two positive integers and target integer considered beautiful if sum its digits less than or equal target return minimum nonnegative integer such that beautiful input will be generated such that always possible make beautiful example input target output explanation initially and its digit sum after adding becomes and digit sum becomes can be shown that can not make beautiful adding nonnegative integer less than example input target output explanation initially and its digit sum after adding becomes and digit sum becomes can be shown that can not make beautiful adding nonnegative integer less than example input target output explanation initially and its digit sum which already smaller than or equal target constraints target input will be generated such that always possible make beautiful
find pivot index given array integers nums calculate pivot index this array pivot index index where sum all numbers strictly left index equal sum all numbers strictly indexs right if index left edge array then left sum because there no elements left this also applies right edge array return leftmost pivot index if no such index exists return example input nums output explanation pivot index left sum nums nums nums right sum nums nums example input nums output explanation there no index that satisfies conditions problem statement example input nums output explanation pivot index left sum no elements left index right sum nums nums constraints numslength numsi note this question same as httpsleetcodecomproblemsfindthemiddleindexinarray
find maximum number marked indices given indexed integer array nums initially all indices unmarked allowed make this operation any number times pick two different unmarked indices and such that numsi numsj then mark and return maximum possible number marked indices nums using above operation any number times example input nums output explanation first operation pick and operation allowed because nums nums then mark index and can be shown that theres no other valid operation so answer example input nums output explanation first operation pick and operation allowed because nums nums then mark index and second operation pick and operation allowed because nums nums then mark index and since there no other operation answer example input nums output explanation there no valid operation do so answer constraints numslength numsi
counter ii write function createcounter should accept initial integer init should return object three functions three functions increment increases current value and then returns decrement reduces current value and then returns reset sets current value init and then returns example input init calls incrementresetdecrement output explanation const counter createcounter counterincrement counterreset counterdecrement example input init calls incrementincrementdecrementresetreset output explanation const counter createcounter counterincrement counterincrement counterdecrement counterreset counterreset constraints init total calls not exceed
first unique character string given string find first nonrepeating character and return its index if does not exist return example input leetcode output example input loveleetcode output example input aabb output constraints slength consists only lowercase english letters
longest happy string string called happy if satisfies following conditions only contains letters and does not contain any aaa bbb or ccc as substring contains most occurrences letter contains most occurrences letter contains most occurrences letter given three integers and return longest possible happy string if there multiple longest happy strings return any them if there no such string return empty string substring contiguous sequence characters within string example input output ccaccbcc explanation ccbccacc would also be correct answer example input output aabaa explanation only correct answer this case constraints
function composition given array functions fn return new function fn that function composition array functions function composition fx gx hx fnx fghx function composition empty list functions identity function fx may assume each function array accepts one integer as input and returns one integer as output example input functions output explanation evaluating from right left starting example input functions output explanation evaluating from right left example input functions output explanation composition zero functions identity function constraints functionslength all functions accept and return single integer
remove one element make array strictly increasing given indexed integer array nums return true if can be made strictly increasing after removing exactly one element or false otherwise if array already strictly increasing return true array nums strictly increasing if numsi numsi each index numslength example input nums output true explanation removing index from nums becomes strictly increasing so return true example input nums output false explanation result removing element index result removing element index result removing element index result removing element index no resulting array strictly increasing so return false example input nums output false explanation result removing any element not strictly increasing so return false constraints numslength numsi
longest substring one repeating character given indexed string also given indexed string querycharacters length and indexed array integer indices queryindices length both which used describe queries ith query updates character index queryindicesi character querycharactersi return array lengths length where lengthsi length longest substring consisting only one repeating character after ith query performed example input babacc querycharacters bcb queryindices output explanation st query updates bbbacc longest substring consisting one repeating character bbb length nd query updates bbbccc longest substring consisting one repeating character can be bbb or ccc length rd query updates bbbbcc longest substring consisting one repeating character bbbb length thus return example input abyzz querycharacters aa queryindices output explanation st query updates abazz longest substring consisting one repeating character zz length nd query updates aaazz longest substring consisting one repeating character aaa length thus return constraints slength consists lowercase english letters querycharacterslength queryindiceslength querycharacters consists lowercase english letters queryindicesi slength
immediate food delivery ii sql schema table delivery column name type deliveryid int customerid int orderdate date customerprefdeliverydate date deliveryid primary key this table table holds information about food delivery customers that make orders some date and specify preferred delivery date same order date or after if customers preferred delivery date same as order date then order called immediate otherwise called scheduled first order customer order earliest order date that customer made guaranteed that customer has precisely one first order write sql query find percentage immediate orders first orders all customers rounded decimal places query result format following example example input delivery table deliveryid customerid orderdate customerprefdeliverydate output immediatepercentage explanation customer id has first order delivery id and scheduled customer id has first order delivery id and immediate customer id has first order delivery id and scheduled customer id has first order delivery id and immediate hence half customers have immediate first orders
number zerofilled subarrays given integer array nums return number subarrays filled subarray contiguous nonempty sequence elements within array example input nums output explanation there occurrences as subarray there occurrences as subarray there no occurrence subarray size more than filled therefore return example input nums output explanation there occurrences as subarray there occurrences as subarray there occurrence as subarray there no occurrence subarray size more than filled therefore return example input nums output explanation there no subarray filled therefore return constraints numslength numsi
maximum nesting depth parentheses string valid parentheses string denoted vps if meets one following empty string or single character not equal or can be written as ab concatenated where and vpss or can be written as where vps can similarly define nesting depth depths any vps as follows depth depthc where string single character not equal or deptha maxdeptha depthb where and vpss depth deptha where vps example and vpss nesting depths and and and not vpss given vps represented as string return nesting depth example input output explanation digit inside nested parentheses string example input output constraints slength consists digits and characters and guaranteed that parentheses expression vps
design number container system design number container system that can do following insert or replace number given index system return smallest index given number system implement numbercontainers class numbercontainers initializes number container system void changeint index int number fills container index number if there already number that index replace int findint number returns smallest index given number or if there no index that filled number system example input numbercontainers find change change change change find change find output null null null null null null explanation numbercontainers nc new numbercontainers ncfind there no index that filled number therefore return ncchange your container index will be filled number ncchange your container index will be filled number ncchange your container index will be filled number ncchange your container index will be filled number ncfind number indices and since smallest index that filled return ncchange your container index will be filled number note that index filled and then replaced ncfind number indices and smallest index that filled therefore return constraints index number most calls will be made total change and find
maximal network rank there infrastructure cities some number roads connecting these cities each roadsi ai bi indicates that there bidirectional road between cities ai and bi network rank two different cities defined as total number directly connected roads either city if road directly connected both cities only counted once maximal network rank infrastructure maximum network rank all pairs different cities given integer and array roads return maximal network rank entire infrastructure example input roads output explanation network rank cities and as there roads that connected either or road between and only counted once example input roads output explanation there roads that connected cities or example input roads output explanation network rank and notice that all cities do not have be connected constraints roadslength roadsilength ai bi ai bi each pair cities has most one road connecting them
merge between linked lists given two linked lists list and list sizes and respectively remove lists nodes from ath node bth node and put list their place blue edges and nodes following figure indicate result build result list and return its head example input list list output explanation remove nodes and and put entire list their place blue edges and nodes above figure indicate result example input list list output explanation blue edges and nodes above figure indicate result constraints listlength listlength listlength
construct palindrome strings given string and integer return true if can use all characters construct palindrome strings or false otherwise example input annabelle output true explanation can construct two palindromes using all characters some possible constructions anna elble anbna elle anellena example input leetcode output false explanation impossible construct palindromes using all characters example input true output true explanation only possible solution put each character separate string constraints slength consists lowercase english letters
find target indices after sorting array given indexed integer array nums and target element target target index index such that numsi target return list target indices nums after sorting nums nondecreasing order if there no target indices return empty list returned list must be sorted increasing order example input nums target output explanation after sorting nums indices where numsi and example input nums target output explanation after sorting nums index where numsi example input nums target output explanation after sorting nums index where numsi constraints numslength numsi target
check if array pairs divisible given array integers arr even length and integer want divide array into exactly pairs such that sum each pair divisible return true if can find way do that or false otherwise example input arr output true explanation pairs and example input arr output true explanation pairs and example input arr output false explanation can try all possible pairs see that there no way divide arr into pairs each sum divisible constraints arrlength even arri
maximum alternating subsequence sum alternating sum indexed array defined as sum elements even indices minus sum elements odd indices example alternating sum given array nums return maximum alternating sum any subsequence nums after reindexing elements subsequence subsequence array new array generated from original array deleting some elements possibly none without changing remaining elements relative order example subsequence underlined elements while not example input nums output explanation optimal choose subsequence alternating sum example input nums output explanation optimal choose subsequence alternating sum example input nums output explanation optimal choose subsequence alternating sum constraints numslength numsi
powx implement powx which calculates raised power ie xn example input output example input output example input output explanation constraints integer either not zero or xn
maximum difference remapping digit given integer num know that danny mittal will sneakily remap one possible digits another digit return difference between maximum and minimum values danny can make remapping exactly one digit num notes when danny remaps digit another digit danny replaces all occurrences num danny can remap digit itself which case num does not change danny can remap different digits obtaining minimum and maximum values respectively resulting number after remapping can contain leading zeroes mentioned danny mittal congratulate him being top weekly contest example input num output explanation achieve maximum value danny can remap digit digit yield achieve minimum value danny can remap digit digit yielding difference between these two numbers example input num output explanation maximum value that can be returned function if replaced and minimum value that can be returned function if replaced thus return constraints num
projection area shapes given grid where place some cubes that axisaligned and axes each value gridij represents tower cubes placed top cell view projection these cubes onto xy yz and zx planes projection like shadow that maps our dimensional figure dimensional plane viewing shadow when looking cubes from top front and side return total area all three projections example input grid output explanation here three projections shadows shape made each axisaligned plane example input grid output example input grid output constraints gridlength gridilength gridij
day year given string date representing gregorian calendar date formatted as yyyymmdd return day number year example input date output explanation given date th day year example input date output constraints datelength date date and all other dateis digits date represents calendar date between jan st and dec th
meeting rooms iii given integer there rooms numbered from given integer array meetings where meetingsi starti endi means that meeting will be held during halfclosed time interval starti endi all values starti unique meetings allocated rooms following manner each meeting will take place unused room lowest number if there no available rooms meeting will be delayed until room becomes free delayed meeting should have same duration as original meeting when room becomes unused meetings that have earlier original start time should be given room return number room that held most meetings if there multiple rooms return room lowest number halfclosed interval interval between and including and not including example input meetings output explanation time both rooms not being used first meeting starts room time only room not being used second meeting starts room time both rooms being used third meeting delayed time both rooms being used fourth meeting delayed time meeting room finishes third meeting starts room time period time meetings both rooms finish fourth meeting starts room time period both rooms and held meetings so return example input meetings output explanation time all three rooms not being used first meeting starts room time rooms and not being used second meeting starts room time only room not being used third meeting starts room time all three rooms being used fourth meeting delayed time meeting room finishes fourth meeting starts room time period time all three rooms being used fifth meeting delayed time meetings rooms and finish fifth meeting starts room time period room held meeting while rooms and each held meetings so return constraints meetingslength meetingsilength starti endi all values starti unique
find largest value each tree row given root binary tree return array largest value each row tree indexed example input root null output example input root output constraints number nodes tree will be range nodeval
maximum number nonoverlapping substrings given string lowercase letters need find maximum number nonempty substrings that meet following conditions substrings do not overlap that any two substrings sij and sxy either or true substring that contains certain character must also contain all occurrences find maximum number substrings that meet above conditions if there multiple solutions same number substrings return one minimum total length can be shown that there exists unique solution minimum total length notice that can return substrings any order example input adefaddaccc output efccc explanation following all possible substrings that meet conditions adefaddaccc adefadda ef ccc if choose first string cannot choose anything else and wed get only if choose adefadda left ccc which only one that doesnt overlap thus obtaining substrings notice also that its not optimal choose ef since can be split into two therefore optimal way choose efccc which gives us substrings no other solution same number substrings exist example input abbaccd output dbbcc explanation notice that while set substrings dabbacc also has length its considered incorrect since has larger total length constraints slength contains only lowercase english letters
maximum number points from grid queries given integer matrix grid and array queries size find array answer size such that each integer queriesi start top left cell matrix and repeat following process if queriesi strictly greater than value current cell that then get one point if your first time visiting this cell and can move any adjacent cell all directions up down left and right otherwise do not get any points and end this process after process answeri maximum number points can get note that each query allowed visit same cell multiple times return resulting array answer example input grid queries output explanation diagrams above show which cells visit get points each query example input grid queries output explanation can not get any points because value top left cell already greater than or equal constraints gridlength gridilength querieslength gridij queriesi
friend requests ii who has most friends sql schema table requestaccepted column name type requesterid int accepterid int acceptdate date requesterid accepterid primary key this table this table contains id user who sent request id user who received request and date when request accepted write sql query find people who have most friends and most friends number test cases generated so that only one person has most friends query result format following example example input requestaccepted table requesterid accepterid acceptdate output id num explanation person id friend people and so has three friends total which most number than any others follow up real world multiple people could have same most number friends could find all these people this case
left and right sum differences given indexed integer array nums find indexed integer array answer where answerlength numslength answeri leftsumi rightsumi where leftsumi sum elements left index array nums if there no such element leftsumi rightsumi sum elements right index array nums if there no such element rightsumi return array answer example input nums output explanation array leftsum and array rightsum array answer example input nums output explanation array leftsum and array rightsum array answer constraints numslength numsi
distinct subsequences given two strings and return number distinct subsequences which equals test cases generated so that answer fits bit signed integer example input rabbbit rabbit output explanation as shown below there ways can generate rabbit from rabbbit rabbbit rabbbit example input babgbag bag output explanation as shown below there ways can generate bag from babgbag babgbag babgbag babgbag babgbag constraints slength tlength and consist english letters
permutations ii given collection numbers nums that might contain duplicates return all possible unique permutations any order example input nums output example input nums output constraints numslength numsi
cyclically rotating grid given integer matrix grid where and both even integers and integer matrix composed several layers which shown below image where each color its own layer cyclic rotation matrix done cyclically rotating each layer matrix cyclically rotate layer once each element layer will take place adjacent element counterclockwise direction example rotation shown below return matrix after applying cyclic rotations example input grid output explanation figures above represent grid every state example input grid output explanation figures above represent grid every state constraints gridlength gridilength both and even integers gridij
rearrange array elements sign given indexed integer array nums even length consisting equal number positive and negative integers should rearrange elements nums such that modified array follows given conditions every consecutive pair integers have opposite signs all integers same sign order which present nums preserved rearranged array begins positive integer return modified array after rearranging elements satisfy aforementioned conditions example input nums output explanation positive integers nums negative integers only possible way rearrange them such that satisfy all conditions other ways such as incorrect because do not satisfy one or more conditions example input nums output explanation only positive integer and only negative integer nums so nums rearranged constraints numslength numslength even numsi nums consists equal number positive and negative integers
partitioning into minimum number decibinary numbers decimal number called decibinary if each its digits either or without any leading zeros example and decibinary while and not given string that represents positive decimal integer return minimum number positive decibinary numbers needed so that sum up example input output explanation example input output example input output constraints nlength consists only digits does not contain any leading zeros and represents positive integer
jump game given integer array nums initially positioned arrays first index and each element array represents your maximum jump length that position return true if can reach last index or false otherwise example input nums output true explanation jump step from index then steps last index example input nums output false explanation will always arrive index no matter what its maximum jump length which makes impossible reach last index constraints numslength numsi
concatenation consecutive binary numbers given integer return decimal value binary string formed concatenating binary representations order modulo example input output explanation binary corresponds decimal value example input output explanation binary and corresponds and after concatenating them have which corresponds decimal value example input output explanation concatenation results decimal value that after modulo result constraints
find maximum divisibility score given two indexed integer arrays nums and divisors divisibility score divisorsi number indices such that numsj divisible divisorsi return integer divisorsi maximum divisibility score if there more than one integer maximum score return minimum them example input nums divisors output explanation divisibility score every element divisors divisibility score divisors since no number nums divisible divisibility score divisors since nums divisible divisibility score divisors since nums nums and nums divisible since divisors has maximum divisibility score return example input nums divisors output explanation divisibility score every element divisors divisibility score divisors since nums and nums divisible divisibility score divisors since nums and nums divisible divisibility score divisors since nums and nums divisible since divisors divisors and divisors all have maximum divisibility score return minimum them ie divisors example input nums divisors output explanation divisibility score every element divisors divisibility score divisors since no number nums divisible divisibility score divisors since no number nums divisible since divisors and divisors both have maximum divisibility score return minimum them ie divisors constraints numslength divisorslength numsi divisorsi
difference between maximum and minimum price sum there exists undirected and initially unrooted tree nodes indexed from given integer and integer array edges length where edgesi ai bi indicates that there edge between nodes ai and bi tree each node has associated price given integer array price where pricei price ith node price sum given path sum prices all nodes lying that path tree can be rooted any node root your choice incurred cost after choosing root difference between maximum and minimum price sum amongst all paths starting root return maximum possible cost amongst all possible root choices example input edges price output explanation diagram above denotes tree after rooting node first part colored red shows path maximum price sum second part colored blue shows path minimum price sum first path contains nodes prices and sum prices second path contains node price difference between maximum and minimum price sum can be proved that maximum cost example input edges price output explanation diagram above denotes tree after rooting node first part colored red shows path maximum price sum second part colored blue shows path minimum price sum first path contains nodes prices and sum prices second path contains node price difference between maximum and minimum price sum can be proved that maximum cost constraints edgeslength ai bi edges represents valid tree pricelength pricei
count servers that communicate given map server center represented as integer matrix grid where means that that cell there server and means that no server two servers said communicate if same row or same column return number servers that communicate any other server example input grid output explanation no servers can communicate others example input grid output explanation all three servers can communicate least one other server example input grid output explanation two servers first row can communicate each other two servers third column can communicate each other server right bottom corner cant communicate any other server constraints gridlength gridilength gridij or
count largest group given integer each number from grouped according sum its digits return number groups that have largest size example input output explanation there groups total grouped according sum its digits numbers from there groups largest size example input output explanation there groups size constraints
check if all integers range covered given integer array ranges and two integers left and right each rangesi starti endi represents inclusive interval between starti and endi return true if each integer inclusive range left right covered least one interval ranges return false otherwise integer covered interval rangesi starti endi if starti endi example input ranges left right output true explanation every integer between and covered covered first range and covered second range covered third range example input ranges left right output false explanation not covered any range constraints rangeslength starti endi left right
second minimum time reach destination city represented as bidirectional connected graph vertices where each vertex labeled from inclusive edges graph represented as integer array edges where each edgesi ui vi denotes bidirectional edge between vertex ui and vertex vi every vertex pair connected most one edge and no vertex has edge itself time taken traverse any edge time minutes each vertex has traffic signal which changes its color from green red and vice versa every change minutes all signals change same time can enter vertex any time but can leave vertex only when signal green cannot wait vertex if signal green second minimum value defined as smallest value strictly larger than minimum value example second minimum value and second minimum value given edges time and change return second minimum time will take go from vertex vertex notes can go through any vertex any number times including and can assume that when journey starts all signals have just turned green example input edges time change output explanation figure left shows given graph blue path figure right minimum time path time taken start time elapsed minutes time elapsed minutes time elapsed hence minimum time needed minutes red path shows path get second minimum time start time elapsed minutes time elapsed minutes time elapsed wait minutes time elapsed minutes time elapsed hence second minimum time minutes example input edges time change output explanation minimum time path time minutes second minimum time path time minutes constraints edgeslength min edgesilength ui vi ui vi there no duplicate edges each vertex can be reached directly or indirectly from every other vertex time change
shortest palindrome given string can convert palindrome adding characters front return shortest palindrome can find performing this transformation example input aacecaaa output aaacecaaa example input abcd output dcbabcd constraints slength consists lowercase english letters only
maximum sum nonoverlapping subarrays given integer array nums and integer find three nonoverlapping subarrays length maximum sum and return them return result as list indices representing starting position each interval indexed if there multiple answers return lexicographically smallest one example input nums output explanation subarrays correspond starting indices could have also taken but answer would be lexicographically larger example input nums output constraints numslength numsi floornumslength
group write code that enhances all arrays such that can call arraygroupbyfn method any array and will return grouped version array grouped array object where each key output fnarri and each value array containing all items original array that key provided callback fn will accept item array and return string key order each value list should be order items appear array any order keys acceptable please solve without lodashs groupby function example input array id id id fn function item return itemid output id id id explanation output from arraygroupbyfn selector function gets id out each item array there two objects id both those objects put first array there one object id that object put second array example input array fn function list return stringlist output explanation array can be any type this case selector function defines key as being first element array all arrays have as their first element so grouped together example input array fn function return stringn output true false explanation selector function splits array whether each number greater than constraints arraylength fn returns string
remove duplicate letters given string remove duplicate letters so that every letter appears once and only once must make sure your result smallest lexicographical order among all possible results example input bcabc output abc example input cbacdcbc output acdb constraints slength consists lowercase english letters note this question same as httpsleetcodecomproblemssmallestsubsequenceofdistinctcharacters
special array elements greater than or equal given array nums nonnegative integers nums considered special if there exists number such that there exactly numbers nums that greater than or equal notice that does not have be element nums return if array special otherwise return can be proven that if nums special value unique example input nums output explanation there values and that greater than or equal example input nums output explanation no numbers fit criteria if there should be numbers but there if there should be number but there if there should be numbers but there cannot be greater since there only numbers nums example input nums output explanation there values that greater than or equal constraints numslength numsi
bus routes given array routes representing bus routes where routesi bus route that ith bus repeats forever example if routes this means that th bus travels sequence forever will start bus stop source not any bus initially and want go bus stop target can travel between bus stops buses only return least number buses must take travel from source target return if not possible example input routes source target output explanation best strategy take first bus bus stop then take second bus bus stop example input routes source target output constraints routeslength routesilength all values routesi unique sumroutesilength routesij source target
maximum subarray given integer array nums find subarray largest sum and return its sum example input nums output explanation subarray has largest sum example input nums output explanation subarray has largest sum example input nums output explanation subarray has largest sum constraints numslength numsi follow up if have figured out solution try coding another solution using divide and conquer approach which more subtle
sum nodes evenvalued grandparent given root binary tree return sum values nodes evenvalued grandparent if there no nodes evenvalued grandparent return grandparent node parent its parent if exists example input root nullnullnullnull output explanation red nodes nodes evenvalue grandparent while blue nodes evenvalue grandparents example input root output constraints number nodes tree range nodeval
three equal parts given array arr which consists only zeros and ones divide array into three nonempty parts such that all these parts represent same binary value if possible return any such that arr arr arri first part arri arri arrj second part and arrj arrj arrarrlength third part all three parts have equal binary values if not possible return note that entire part used when considering what binary value represents example represents decimal not also leading zeros allowed so and represent same value example input arr output example input arr output example input arr output constraints arrlength arri or
permutation string given two strings and return true if contains permutation or false otherwise other words return true if one ss permutations substring example input ab eidbaooo output true explanation contains one permutation ba example input ab eidboaoo output false constraints slength slength and consist lowercase english letters
maximum points archery competition alice and bob opponents archery competition competition has set following rules alice first shoots numarrows arrows and then bob shoots numarrows arrows points then calculated as follows target has integer scoring sections ranging from inclusive each section target score between say alice and bob have shot ak and bk arrows that section respectively if ak bk then alice takes points if ak bk then bob takes points however if ak bk then nobody takes points example if alice and bob both shot arrows section score then alice takes points other hand if alice shot arrows section score and bob shot arrows that same section then bob takes points given integer numarrows and integer array alicearrows size which represents number arrows alice shot each scoring section from now bob wants maximize total number points can obtain return array bobarrows which represents number arrows bob shot each scoring section from sum values bobarrows should equal numarrows if there multiple ways bob earn maximum total points return any one them example input numarrows alicearrows output explanation table above shows how competition scored bob earns total point can be shown that bob cannot obtain score higher than points example input numarrows alicearrows output explanation table above shows how competition scored bob earns total point can be shown that bob cannot obtain score higher than points constraints numarrows alicearrowslength bobarrowslength alicearrowsi bobarrowsi numarrows sumalicearrowsi numarrows
sum floored pairs given integer array nums return sum floornumsi numsj all pairs indices numslength array since answer may be too large return modulo floor function returns integer part division example input nums output explanation floor floor floor floor floor floor floor floor floor calculate floor division every pair indices array then sum them up example input nums output constraints numslength numsi
remove all occurrences substring given two strings and part perform following operation until all occurrences substring part removed find leftmost occurrence substring part and remove from return after removing all occurrences part substring contiguous sequence characters string example input daabcbaabcbc part abc output dab explanation following operations done daabcbaabcbc remove abc starting index so dabaabcbc dabaabcbc remove abc starting index so dababc dababc remove abc starting index so dab now has no occurrences abc example input axxxxyyyyb part xy output ab explanation following operations done axxxxyyyyb remove xy starting index so axxxyyyb axxxyyyb remove xy starting index so axxyyb axxyyb remove xy starting index so axyb axyb remove xy starting index so ab now has no occurrences xy constraints slength partlength and part consists lowercase english letters
find kth smallest pair distance distance pair integers and defined as absolute difference between and given integer array nums and integer return kth smallest distance among all pairs numsi and numsj where numslength example input nums output explanation here all pairs then st smallest distance pair and its distance example input nums output example input nums output constraints numslength numsi
matrix given binary matrix mat return distance nearest each cell distance between two adjacent cells example input mat output example input mat output constraints matlength matilength matij either or there least one mat
my calendar iii kbooking happens when events have some nonempty intersection ie there some time that common all events given some events starttime endtime after each given event return integer representing maximum kbooking between all previous events implement mycalendarthree class mycalendarthree initializes object int bookint starttime int endtime returns integer representing largest integer such that there exists kbooking calendar example input mycalendarthree book book book book book book output null explanation mycalendarthree mycalendarthree new mycalendarthree mycalendarthreebook return mycalendarthreebook return mycalendarthreebook return mycalendarthreebook return mycalendarthreebook return mycalendarthreebook return constraints starttime endtime most calls will be made book
minimum reverse operations given integer and integer range representing indexed array arr length where all positions set except position which set also given integer array banned containing some positions from array ith position banned arrbannedi and bannedi can perform multiple operations arr operation can choose subarray size and reverse subarray however arr should never go any positions banned other words after each operation arrbannedi remains return array ans where each from ansi minimum number reverse operations needed bring position arr or if impossible subarray contiguous nonempty sequence elements within array values ansi independent all reverse array array containing values reverse order example input banned output explanation this case so there only one possible reverse operation can perform which reversing whole array initially placed position so amount operations need position can never place banned positions so answer positions and finally one reverse operation can bring index so answer position example input banned output explanation this case initially position so answer that position can perform reverse operations size currently located position so need reverse subarray leave that position but reversing that subarray makes position have which shouldnt happen so cant move from position making result all other positions example input banned output explanation this case can only perform reverse operations size so never changes its position constraints bannedlength bannedi bannedi all values banned unique
removing minimum and maximum from array given indexed array distinct integers nums there element nums that has lowest value and element that has highest value call them minimum and maximum respectively your goal remove both these elements from array deletion defined as either removing element from front array or removing element from back array return minimum number deletions would take remove both minimum and maximum element from array example input nums output explanation minimum element array nums which maximum element array nums which can remove both minimum and maximum removing elements from front and elements from back this results deletions which minimum number possible example input nums output explanation minimum element array nums which maximum element array nums which can remove both minimum and maximum removing elements from front this results only deletions which minimum number possible example input nums output explanation there only one element array which makes both minimum and maximum element can remove deletion constraints numslength numsi integers nums distinct
deepest leaves sum given root binary tree return sum values its deepest leaves example input root nullnullnullnullnull output example input root nullnullnullnull output constraints number nodes tree range nodeval
multiply strings given two nonnegative integers num and num represented as strings return product num and num also represented as string note must not use any builtin biginteger library or convert inputs integer directly example input num num output example input num num output constraints numlength numlength num and num consist digits only both num and num do not contain any leading zero except number itself
making file names unique given array strings names size will create folders your file system such that ith minute will create folder name namesi since two files cannot have same name if enter folder name that previously used system will have suffix addition its name form where smallest positive integer such that obtained name remains unique return array strings length where ansi actual name system will assign ith folder when create example input names pesfifagtapes output pesfifagtapes explanation lets see how file system creates folder names pes not assigned before remains pes fifa not assigned before remains fifa gta not assigned before remains gta pes not assigned before remains pes example input names gtagtagtaavalon output gtagtagtaavalon explanation lets see how file system creates folder names gta not assigned before remains gta gta not assigned before remains gta gta name reserved system adds since gta also reserved systems put becomes gta avalon not assigned before remains avalon example input names onepieceonepieceonepieceonepieceonepiece output onepieceonepieceonepieceonepieceonepiece explanation when last folder created smallest positive valid and becomes onepiece constraints nameslength namesilength namesi consists lowercase english letters digits andor round brackets
peak index mountain array array arr mountain if following properties hold arrlength there exists some arrlength such that arr arr arri arri arri arri arrarrlength given mountain array arr return index such that arr arr arri arri arri arrarrlength must solve ologarrlength time complexity example input arr output example input arr output example input arr output constraints arrlength arri arr guaranteed be mountain array
longest subarray after deleting one element given binary array nums should delete one element from return size longest nonempty subarray containing only resulting array return if there no such subarray example input nums output explanation after deleting number position contains numbers value example input nums output explanation after deleting number position longest subarray value example input nums output explanation must delete one element constraints numslength numsi either or
take each character from left and right given string consisting characters and and nonnegative integer each minute may take either leftmost character or rightmost character return minimum number minutes needed take least each character or return if not possible take each character example input aabaaaacaabc output explanation take three characters from left now have two characters and one character take five characters from right now have four characters two characters and two characters total minutes needed can be proven that minimum number minutes needed example input output explanation not possible take one or so return constraints slength consists only letters and slength
reverse words string iii given string reverse order characters each word within sentence while still preserving whitespace and initial word order example input lets take leetcode contest output stel ekat edocteel tsetnoc example input god ding output dog gnid constraints slength contains printable ascii characters does not contain any leading or trailing spaces there least one word all words separated single space
shortest subarray sum least given integer array nums and integer return length shortest nonempty subarray nums sum least if there no such subarray return subarray contiguous part array example input nums output example input nums output example input nums output constraints numslength numsi
reverse string ii given string and integer reverse first characters every characters counting from start string if there fewer than characters left reverse all them if there less than but greater than or equal characters then reverse first characters and leave other as original example input abcdefg output bacdfeg example input abcd output bacd constraints slength consists only lowercase english letters
daily temperatures given array integers temperatures represents daily temperatures return array answer such that answeri number days have wait after ith day get warmer temperature if there no future day which this possible keep answeri instead example input temperatures output example input temperatures output example input temperatures output constraints temperatureslength temperaturesi
check completeness binary tree given root binary tree determine if complete binary tree complete binary tree every level except possibly last completely filled and all nodes last level as far left as possible can have between and nodes inclusive last level example input root output true explanation every level before last full ie levels nodevalues and and all nodes last level as far left as possible example input root null output false explanation node value isnt as far left as possible constraints number nodes tree range nodeval
group sold products date sql schema table activities column name type selldate date product varchar there no primary key this table may contain duplicates each row this table contains product name and date sold market write sql query find each date number different products sold and their names sold products names each date should be sorted lexicographically return result table ordered selldate query result format following example example input activities table selldate product headphone pencil mask basketball bible mask tshirt output selldate numsold products basketballheadphonetshirt biblepencil mask explanation sold items headphone basketball tshirt sort them lexicographically and separate them comma sold items pencil bible sort them lexicographically and separate them comma sold item mask just return
find string lcp define lcp matrix any indexed string word lowercase english letters as grid such that lcpij equal length longest common prefix between substrings wordin and wordjn given matrix lcp return alphabetically smallest string word that corresponds lcp if there no such string return empty string string lexicographically smaller than string same length if first position where and differ string has letter that appears earlier alphabet than corresponding letter example aabd lexicographically smaller than aaca because first position differ third letter and comes before example input lcp output abab explanation lcp corresponds any letter string two alternating letters lexicographically smallest them abab example input lcp output aaaa explanation lcp corresponds any letter string single distinct letter lexicographically smallest them aaaa example input lcp output explanation lcp cannot be equal since word consists only single letter thus no answer exists constraints lcplength lcpilength lcpij
remove colored pieces if both neighbors same color there pieces arranged line and each piece colored either or given string colors length where colorsi color ith piece alice and bob playing game where take alternating turns removing pieces from line this game alice moves first alice only allowed remove piece colored if both its neighbors also colored not allowed remove pieces that colored bob only allowed remove piece colored if both its neighbors also colored not allowed remove pieces that colored alice and bob cannot remove pieces from edge line if player cannot make move their turn that player loses and other player wins assuming alice and bob play optimally return true if alice wins or return false if bob wins example input colors aaababb output true explanation aaababb aababb alice moves first removes second from left since that only whose neighbors both now its bobs turn bob cannot make move his turn since there no bs whose neighbors both thus alice wins so return true example input colors aa output false explanation alice has her turn first there only two as and both edge line so cannot move her turn thus bob wins so return false example input colors abbbbbbbaaa output false explanation abbbbbbbaaa abbbbbbbaa alice moves first her only option remove second last from right abbbbbbbaa abbbbbbaa next bobs turn has many options which piece remove can pick any alices second turn has no more pieces that can remove thus bob wins so return false constraints colorslength colors consists only letters and
top travellers sql schema table users column name type id int name varchar id primary key this table name name user table rides column name type id int userid int distance int id primary key this table userid id user who traveled distance distance write sql query report distance traveled each user return result table ordered travelleddistance descending order if two or more users traveled same distance order them their name ascending order query result format following example example input users table id name alice bob alex donald lee jonathan elvis rides table id userid distance output name travelleddistance elvis lee bob jonathan alex alice donald explanation elvis and lee traveled miles elvis top traveler as his name alphabetically smaller than lee bob jonathan alex and alice have only one ride and just order them total distances ride donald did not have any rides distance traveled him
adding spaces string given indexed string and indexed integer array spaces that describes indices original string where spaces will be added each space should be inserted before character given index example given enjoyyourcoffee and spaces place spaces before and which indices and respectively thus obtain enjoy your coffee return modified string after spaces have been added example input leetcodehelpsmelearn spaces output leetcode helps me learn explanation indices and correspond underlined characters leetcodehelpsmelearn then place spaces before those characters example input icodeinpython spaces output code py thon explanation indices and correspond underlined characters icodeinpython then place spaces before those characters example input spacing spaces output explanation also able place spaces before first character string constraints slength consists only lowercase and uppercase english letters spaceslength spacesi slength all values spaces strictly increasing
naming company given array strings ideas that represents list names be used process naming company process naming company as follows choose distinct names from ideas call them ideaa and ideab swap first letters ideaa and ideab each other if both new names not found original ideas then name ideaa ideab concatenation ideaa and ideab separated space valid company name otherwise not valid name return number distinct valid names company example input ideas coffeedonutstimetoffee output explanation following selections valid coffee donuts company name created doffee conuts donuts coffee company name created conuts doffee donuts time company name created tonuts dime donuts toffee company name created tonuts doffee time donuts company name created dime tonuts toffee donuts company name created doffee tonuts therefore there total distinct company names following some examples invalid selections coffee time name toffee formed after swapping already exists original array time toffee both names still same after swapping and exist original array coffee toffee both names formed after swapping already exist original array example input ideas lackback output explanation there no valid selections therefore returned constraints ideaslength ideasilength ideasi consists lowercase english letters all strings ideas unique
bank account summary ii sql schema table users column name type account int name varchar account primary key this table each row this table contains account number each user bank there will be no two users having same name table table transactions column name type transid int account int amount int transactedon date transid primary key this table each row this table contains all changes made all accounts amount positive if user received money and negative if transferred money all accounts start balance write sql query report name and balance users balance higher than balance account equal sum amounts all transactions involving that account return result table any order query result format following example example input users table account name alice bob charlie transactions table transid account amount transactedon output name balance alice explanation alices balance bobs balance charlies balance
maximum subarray sum one deletion given array integers return maximum sum nonempty subarray contiguous elements most one element deletion other words want choose subarray and optionally delete one element from so that there still least one element left and sum remaining elements maximum possible note that subarray needs be nonempty after deleting one element example input arr output explanation because can choose and drop thus subarray becomes maximum value example input arr output explanation just choose and its maximum sum example input arr output explanation final subarray needs be nonempty cant choose and delete from then get empty subarray make sum equals constraints arrlength arri
find critical and pseudocritical edges minimum spanning tree given weighted undirected connected graph vertices numbered from and array edges where edgesi ai bi weighti represents bidirectional and weighted edge between nodes ai and bi minimum spanning tree mst subset graphs edges that connects all vertices without cycles and minimum possible total edge weight find all critical and pseudocritical edges given graphs minimum spanning tree mst mst edge whose deletion from graph would cause mst weight increase called critical edge other hand pseudocritical edge that which can appear some msts but not all note that can return indices edges any order example input edges output explanation figure above describes graph following figure shows all possible msts notice that two edges and appear all msts therefore critical edges so return them first list output edges and only part some msts therefore considered pseudocritical edges add them second list output example input edges output explanation can observe that since all edges have equal weight choosing any edges from given will yield mst therefore all edges pseudocritical constraints edgeslength min edgesilength ai bi weighti all pairs ai bi distinct
count items matching rule given array items where each itemsi typei colori namei describes type color and name ith item also given rule represented two strings rulekey and rulevalue ith item said match rule if one following true rulekey type and rulevalue typei rulekey color and rulevalue colori rulekey name and rulevalue namei return number items that match given rule example input items phonebluepixelcomputersilverlenovophonegoldiphone rulekey color rulevalue silver output explanation there only one item matching given rule which computersilverlenovo example input items phonebluepixelcomputersilverphonephonegoldiphone rulekey type rulevalue phone output explanation there only two items matching given rule which phonebluepixel and phonegoldiphone note that item computersilverphone does not match constraints itemslength typeilength colorilength nameilength rulevaluelength rulekey equal either type color or name all strings consist only lowercase letters
sum two integers given two integers and return sum two integers without using operators and example input output example input output constraints
sum distances tree there undirected connected tree nodes labeled from and edges given integer and array edges where edgesi ai bi indicates that there edge between nodes ai and bi tree return array answer length where answeri sum distances between ith node tree and all other nodes example input edges output explanation tree shown above can see that dist dist dist dist dist equals hence answer and so example input edges output example input edges output constraints edgeslength edgesilength ai bi ai bi given input represents valid tree
two city scheduling company planning interview people given array costs where costsi acosti bcosti cost flying ith person city acosti and cost flying ith person city bcosti return minimum cost fly every person city such that exactly people arrive each city example input costs output explanation first person goes city cost second person goes city cost third person goes city cost fourth person goes city cost total minimum cost have half people interviewing each city example input costs output example input costs output constraints costslength costslength costslength even acosti bcosti
average levels binary tree given root binary tree return average value nodes each level form array answers within actual answer will be accepted example input root nullnull output explanation average value nodes level level and level hence return example input root output constraints number nodes tree range nodeval
pattern given array integers nums pattern subsequence three integers numsi numsj and numsk such that and numsi numsk numsj return true if there pattern nums otherwise return false example input nums output false explanation there no pattern sequence example input nums output true explanation there pattern sequence example input nums output true explanation there three patterns sequence and constraints numslength numsi
shift grid given grid size and integer need shift grid times one shift operation element gridij moves gridij element gridin moves gridi element gridm moves grid return grid after applying shift operation times example input grid output example input grid output example input grid output constraints gridlength gridilength gridij
path maximum probability given undirected weighted graph nodes indexed represented edge list where edgesi undirected edge connecting nodes and probability success traversing that edge succprobi given two nodes start and end find path maximum probability success go from start end and return its success probability if there no path from start end return your answer will be accepted if differs from correct answer most example input edges succprob start end output explanation there two paths from start end one having probability success and other has example input edges succprob start end output example input edges succprob start end output explanation there no path between and constraints start end start end succproblength edgeslength succprobi there most one edge between every two nodes
maximum number darts inside circular dartboard alice throwing darts very large wall given array darts where dartsi xi yi position ith dart that alice threw wall bob knows positions darts wall wants place dartboard radius wall so that maximum number darts that alice throws lies dartboard given integer return maximum number darts that can lie dartboard example input darts output explanation circle dartboard center and radius contain all points example input darts output explanation circle dartboard center and radius contain all points except point constraints dartslength dartsilength xi yi all darts unique
find bottom left tree value given root binary tree return leftmost value last row tree example input root output example input root nullnullnull output constraints number nodes tree range nodeval
find and replace string given indexed string that must perform replacement operations replacement operations given as three indexed parallel arrays indices sources and targets all length complete ith replacement operation check if substring sourcesi occurs index indicesi original string if does not occur do nothing otherwise if does occur replace that substring targetsi example if abcd indicesi sourcesi ab and targetsi eee then result this replacement will be eeecd all replacement operations must occur simultaneously meaning replacement operations should not affect indexing each other testcases will be generated such that replacements will not overlap example testcase abc indices and sources abbc will not be generated because ab and bc replacements overlap return resulting string after performing all replacement operations substring contiguous sequence characters string example input abcd indices sources cd targets eee ffff output eeebffff explanation occurs index so replace eee cd occurs index so replace ffff example input abcd indices sources abec targets eeeffff output eeecd explanation ab occurs index so replace eee ec does not occur index so do nothing constraints slength indiceslength sourceslength targetslength indexesi slength sourcesilength targetsilength consists only lowercase english letters sourcesi and targetsi consist only lowercase english letters
minimum number visited cells grid given indexed integer matrix grid your initial position topleft cell starting from cell can move one following cells cells gridij rightward movement or cells gridij downward movement return minimum number cells need visit reach bottomright cell if there no valid path return example input grid output explanation image above shows one paths that visits exactly cells example input grid output explanation image above shows one paths that visits exactly cells example input grid output explanation can be proven that no path exists constraints gridlength gridilength gridij gridm
longest square streak array given integer array nums subsequence nums called square streak if length subsequence least and after sorting subsequence each element except first element square previous number return length longest square streak nums or return if there no square streak subsequence array that can be derived from another array deleting some or no elements without changing order remaining elements example input nums output explanation choose subsequence after sorting becomes therefore square streak can be shown that every subsequence length not square streak example input nums output explanation there no square streak nums so return constraints numslength numsi
rotated digits integer good if after rotating each digit individually degrees get valid number that different from each digit must be rotated cannot choose leave alone number valid if each digit remains digit after rotation example and rotate themselves and rotate each other this case rotated different direction other words or gets mirrored and rotate each other and rest numbers do not rotate any other number and become invalid given integer return number good integers range example input output explanation there four good numbers range note that and not good numbers since remain unchanged after rotating example input output example input output constraints
longest increasing subsequence ii given integer array nums and integer find longest subsequence nums that meets following requirements subsequence strictly increasing and difference between adjacent elements subsequence most return length longest subsequence that meets requirements subsequence array that can be derived from another array deleting some or no elements without changing order remaining elements example input nums output explanation longest subsequence that meets requirements subsequence has length so return note that subsequence does not meet requirements because larger than example input nums output explanation longest subsequence that meets requirements subsequence has length so return example input nums output explanation longest subsequence that meets requirements subsequence has length so return constraints numslength numsi
binary watch binary watch has leds top represent hours and leds bottom represent minutes each led represents zero or one least significant bit right example below binary watch reads given integer turnedon which represents number leds that currently ignoring pm return all possible times watch could represent may return answer any order hour must not contain leading zero example not valid should be minute must be consist two digits and may contain leading zero example not valid should be example input turnedon output example input turnedon output constraints turnedon
longest substring without repeating characters given string find length longest substring without repeating characters example input abcabcbb output explanation answer abc length example input bbbbb output explanation answer length example input pwwkew output explanation answer wke length notice that answer must be substring pwke subsequence and not substring constraints slength consists english letters digits symbols and spaces
make array zero subtracting equal amounts given nonnegative integer array nums one operation must choose positive integer such that less than or equal smallest nonzero element nums subtract from every positive element nums return minimum number operations make every element nums equal example input nums output explanation first operation choose now nums second operation choose now nums third operation choose now nums example input nums output explanation each element nums already so no operations needed constraints numslength numsi
third maximum number given integer array nums return third distinct maximum number this array if third maximum does not exist return maximum number example input nums output explanation first distinct maximum second distinct maximum third distinct maximum example input nums output explanation first distinct maximum second distinct maximum third distinct maximum does not exist so maximum returned instead example input nums output explanation first distinct maximum second distinct maximum both counted together since have same value third distinct maximum constraints numslength numsi follow up can find solution
sum beauty all substrings beauty string difference frequencies between most frequent and least frequent characters example beauty abaacc given string return sum beauty all its substrings example input aabcb output explanation substrings nonzero beauty aabaabcaabcbabcbbcb each beauty equal example input aabcbaa output constraints slength consists only lowercase english letters
generate fibonacci sequence write generator function that returns generator object which yields fibonacci sequence fibonacci sequence defined relation xn xn xn first few numbers series example input callcount output explanation const gen fibgenerator gennextvalue gennextvalue gennextvalue gennextvalue gennextvalue example input callcount output explanation gennext never called so nothing outputted constraints callcount
longest turbulent subarray given integer array arr return length maximum size turbulent subarray arr subarray turbulent if comparison sign flips between each adjacent pair elements subarray more formally subarray arri arri arrj arr said be turbulent if and only if arrk arrk when odd and arrk arrk when even or arrk arrk when even and arrk arrk when odd example input arr output explanation arr arr arr arr arr example input arr output example input arr output constraints arrlength arri
last moment before all ants fall out plank have wooden plank length units some ants walking plank each ant moves speed unit per second some ants move left other move right when two ants moving two different directions meet some point change their directions and continue moving again assume changing directions does not take any additional time when ant reaches one end plank time falls out plank immediately given integer and two integer arrays left and right positions ants moving left and right return moment when last ants fall out plank example input left right output explanation image above ant index named and going right ant index named and going right ant index named and going left ant index named and going left last moment when ant plank seconds after that falls immediately out plank ie can say that there no ants plank example input left right output explanation all ants going right ant index needs seconds fall example input left right output explanation all ants going left ant index needs seconds fall constraints leftlength lefti rightlength righti leftlength rightlength all values left and right unique and each value can appear only one two arrays
find score array after marking all elements given array nums consisting positive integers starting score apply following algorithm choose smallest integer array that not marked if there tie choose one smallest index add value chosen integer score mark chosen element and its two adjacent elements if exist repeat until all array elements marked return score get after applying above algorithm example input nums output explanation mark elements as follows smallest unmarked element so mark and its two adjacent elements smallest unmarked element so mark and its left adjacent element only remaining unmarked element so mark our score example input nums output explanation mark elements as follows smallest unmarked element so mark and its two adjacent elements smallest unmarked element since there two them choose leftmost one so mark one index and its right adjacent element only remaining unmarked element so mark our score constraints numslength numsi
find first palindromic string array given array strings words return first palindromic string array if there no such string return empty string string palindromic if reads same forward and backward example input words abccaradaracecarcool output ada explanation first string that palindromic ada note that racecar also palindromic but not first example input words notapalindromeracecar output racecar explanation first and only string that palindromic racecar example input words defghi output explanation there no palindromic strings so empty string returned constraints wordslength wordsilength wordsi consists only lowercase english letters
counter given integer return counter function this counter function initially returns and then returns more than previous value every subsequent time called etc example input callcallcall output explanation counter first time counter called returns counter returns more than previous time counter returns more than previous time example input callcallcallcallcall output explanation counter initially returns then increases after each sebsequent call constraints most calls counter will be made
build array where can find maximum exactly comparisons given three integers and consider following algorithm find maximum element array positive integers should build array arr which has following properties arr has exactly integers arri where after applying mentioned algorithm arr value searchcost equal return number ways build array arr under mentioned conditions as answer may grow large answer must be computed modulo example input output explanation possible arrays example input output explanation there no possible arrays that satisify mentioned conditions example input output explanation only possible array constraints
take gifts from richest pile given integer array gifts denoting number gifts various piles every second do following choose pile maximum number gifts if there more than one pile maximum number gifts choose any leave behind floor square root number gifts pile take rest gifts return number gifts remaining after seconds example input gifts output explanation gifts taken following way first second last pile chosen and gifts left behind then second pile chosen and gifts left behind after that first pile chosen and gifts left behind finally last pile chosen again and gifts left behind final remaining gifts so total number gifts remaining example input gifts output explanation this case regardless which pile choose have leave behind gift each pile that cant take any pile so total gifts remaining constraints giftslength giftsi
rotate string given two strings and goal return true if and only if can become goal after some number shifts shift consists moving leftmost character rightmost position example if abcde then will be bcdea after one shift example input abcde goal cdeab output true example input abcde goal abced output false constraints slength goallength and goal consist lowercase english letters
maximize sum array after negations given integer array nums and integer modify array following way choose index and replace numsi numsi should apply this process exactly times may choose same index multiple times return largest possible sum array after modifying this way example input nums output explanation choose index and nums becomes example input nums output explanation choose indices and nums becomes example input nums output explanation choose indices and nums becomes constraints numslength numsi
best position service centre delivery company wants build new service center new city company knows positions all customers this city dmap and wants build new center position such that sum euclidean distances all customers minimum given array positions where positionsi xi yi position ith customer map return minimum sum euclidean distances all customers other words need choose position service center xcentre ycentre such that following formula minimized answers within actual value will be accepted example input positions output explanation as shown can see that choosing xcentre ycentre will make distance each customer sum all distances which minimum possible can achieve example input positions output explanation minimum possible sum distances sqrt sqrt constraints positionslength positionsilength xi yi
minimum initial energy finish tasks given array tasks where tasksi actuali minimumi actuali actual amount energy spend finish ith task minimumi minimum amount energy require begin ith task example if task and your current energy cannot start this task however if your current energy can complete this task and your energy will be after finishing can finish tasks any order like return minimum initial amount energy will need finish all tasks example input tasks output explanation starting energy finish tasks following order rd task now energy nd task now energy st task now energy notice that even though have leftover energy starting energy does not work because cannot do rd task example input tasks output explanation starting energy finish tasks following order st task now energy nd task now energy rd task now energy th task now energy th task now energy example input tasks output explanation starting energy finish tasks following order th task now energy nd task now energy rd task now energy st task now energy th task now energy th task now energy constraints taskslength actuali minimumi
range sum query immutable given integer array nums handle multiple queries following type calculate sum elements nums between indices left and right inclusive where left right implement numarray class numarrayint nums initializes object integer array nums int sumrangeint left int right returns sum elements nums between indices left and right inclusive ie numsleft numsleft numsright example input numarray sumrange sumrange sumrange output null explanation numarray numarray new numarray numarraysumrange return numarraysumrange return numarraysumrange return constraints numslength numsi left right numslength most calls will be made sumrange
find servers that handled most number requests have servers numbered from that being used handle multiple requests simultaneously each server has infinite computational capacity but cannot handle more than one request time requests assigned servers according specific algorithm ith indexed request arrives if all servers busy request dropped not handled all if kth server available assign request that server otherwise assign request next available server wrapping around list servers and starting from if necessary example if ith server busy try assign request ith server then ith server and so given strictly increasing array arrival positive integers where arrivali represents arrival time ith request and another array load where loadi represents load ith request time takes complete your goal find busiest servers server considered busiest if handled most number requests successfully among all servers return list containing ids indexed busiest servers may return ids any order example input arrival load output explanation all servers start out available first requests handled first servers order request comes server busy so its assigned next available server which request comes cannot be handled since all servers busy so dropped servers and handled one request each while server handled two requests hence server busiest server example input arrival load output explanation first requests handled first servers request comes handled server since server available server handled two requests while servers and handled one request each hence server busiest server example input arrival load output explanation each server handles single request so all considered busiest constraints arrivallength loadlength arrivallength loadlength arrivali loadi arrival strictly increasing
find three consecutive integers that sum given number given integer num return three consecutive integers as sorted array that sum num if num cannot be expressed as sum three consecutive integers return empty array example input num output explanation can be expressed as consecutive integers so return example input num output explanation there no way express as sum consecutive integers constraints num
regions cut slashes grid composed squares where each square consists or blank space these characters divide square into contiguous regions given grid grid represented as string array return number regions note that backslash characters escaped so represented as example input grid output example input grid output example input grid output explanation recall that because characters escaped refers and refers constraints gridlength gridilength gridij either or
maximum points can obtain from cards there several cards arranged row and each card has associated number points points given integer array cardpoints one step can take one card from beginning or from end row have take exactly cards your score sum points cards have taken given integer array cardpoints and integer return maximum score can obtain example input cardpoints output explanation after first step your score will always be however choosing rightmost card first will maximize your total score optimal strategy take three cards right giving final score example input cardpoints output explanation regardless which two cards take your score will always be example input cardpoints output explanation have take all cards your score sum points all cards constraints cardpointslength cardpointsi cardpointslength
count special integers call positive integer special if all its digits distinct given positive integer return number special integers that belong interval example input output explanation all integers from except special thus there special integers example input output explanation all integers from special example input output explanation there integers from that special some integers that not special and constraints
domino and tromino tiling have two types tiles domino shape and tromino shape may rotate these shapes given integer return number ways tile board since answer may be very large return modulo tiling every square must be covered tile two tilings different if and only if there two directionally adjacent cells board such that exactly one tilings has both squares occupied tile example input output explanation five different ways show above example input output constraints
maximum split positive even integers given integer finalsum split into sum maximum number unique positive even integers example given finalsum following splits valid unique positive even integers summing up finalsum and among them contains maximum number integers note that finalsum cannot be split into as all numbers should be unique return list integers that represent valid split containing maximum number integers if no valid split exists finalsum return empty list may return integers any order example input finalsum output explanation following valid splits and has maximum number integers which thus return note that etc also accepted example input finalsum output explanation there no valid splits given finalsum thus return empty array example input finalsum output explanation following valid splits and has maximum number integers which thus return note that etc also accepted constraints finalsum
swap nodes pairs given linked list swap every two adjacent nodes and return its head must solve problem without modifying values lists nodes ie only nodes themselves may be changed example input head output example input head output example input head output constraints number nodes list range nodeval
maximum number visible points given array points integer angle and your location where location posx posy and pointsi xi yi both denote integral coordinates xy plane initially facing directly east from your position cannot move from your position but can rotate other words posx and posy cannot be changed your field view degrees represented angle determining how wide can see from any given view direction let be amount degrees that rotate counterclockwise then your field view inclusive range angles angle angle your browser does not support video tag or this video format can see some set points if each point angle formed point your position and immediate east direction from your position your field view there can be multiple points one coordinate there may be points your location and can always see these points regardless your rotation points do not obstruct your vision other points return maximum number points can see example input points angle location output explanation shaded region represents your field view all points can be made visible your field view including even though front and same line sight example input points angle location output explanation all points can be made visible your field view including one your location example input points angle location output explanation can only see one two points as shown above constraints pointslength pointsilength locationlength angle posx posy xi yi
print foobar alternately suppose given following code class foobar public void foo int printfoo public void bar int printbar same instance foobar will be passed two different threads thread will call foo while thread will call bar modify given program output foobar times example input output foobar explanation there two threads being fired asynchronously one them calls foo while other calls bar foobar being output time example input output foobarfoobar explanation foobar being output times constraints
maximum candies can get from boxes have boxes labeled from given four arrays status candies keys and containedboxes where statusi if ith box open and if ith box closed candiesi number candies ith box keysi list labels boxes can open after opening ith box containedboxesi list boxes found inside ith box given integer array initialboxes that contains labels boxes initially have can take all candies any open box and can use keys open new boxes and also can use boxes find return maximum number candies can get following rules above example input status candies keys containedboxes initialboxes output explanation will be initially given box will find candies and boxes and box closed and do not have key so will open box will find candies and key box box box will find candies and box but will not find key box so box will remain closed total number candies collected candy example input status candies keys containedboxes initialboxes output explanation have initially box opening can find boxes and and their keys total number candies will be constraints statuslength candieslength keyslength containedboxeslength statusi either or candiesi keysilength keysij all values keysi unique containedboxesilength containedboxesij all values containedboxesi unique each box contained one box most initialboxeslength initialboxesi
convert temperature given nonnegative floating point number rounded two decimal places celsius that denotes temperature celsius should convert celsius into kelvin and fahrenheit and return as array ans kelvin fahrenheit return array ans answers within actual answer will be accepted note that kelvin celsius fahrenheit celsius example input celsius output explanation temperature celsius converted kelvin and converted fahrenheit example input celsius output explanation temperature celsius converted kelvin and converted fahrenheit constraints celsius
maximum xor after operations given indexed integer array nums one operation select any nonnegative integer and index then update numsi be equal numsi and numsi xor note that and bitwise and operation and xor bitwise xor operation return maximum possible bitwise xor all elements nums after applying operation any number times example input nums output explanation apply operation and num and xor and now nums and bitwise xor all elements xor xor xor can be shown that maximum possible bitwise xor note that other operations may be used achieve bitwise xor example input nums output explanation apply operation zero times bitwise xor all elements xor xor xor xor can be shown that maximum possible bitwise xor constraints numslength numsi
minimum numbers function calls make target array given integer array nums have integer array arr same length all values set initially also have following modify function want use modify function convert arr nums using minimum number calls return minimum number function calls make nums from arr test cases generated so that answer fits bit signed integer example input nums output explanation increment second element get operation double all elements operations increment both elements operations total operations example input nums output explanation increment both elements operations double all elements operation total operations example input nums output explanation initial nums constraints numslength numsi
minimum number taps open water garden there onedimensional garden xaxis garden starts point and ends point ie length garden there taps located points garden given integer and integer array ranges length where rangesi indexed means ith tap can water area rangesi rangesi if open return minimum number taps that should be open water whole garden if garden cannot be watered return example input ranges output explanation tap point can cover interval tap point can cover interval tap point can cover interval tap point can cover interval tap point can cover interval tap point can cover interval opening only second tap will water whole garden example input ranges output explanation even if activate all four taps cannot water whole garden constraints rangeslength rangesi
count common words one occurrence given two string arrays words and words return number strings that appear exactly once each two arrays example input words leetcodeisamazingasis words amazingleetcodeis output explanation leetcode appears exactly once each two arrays count this string amazing appears exactly once each two arrays count this string appears each two arrays but there occurrences words do not count this string as appears once words but does not appear words do not count this string thus there strings that appear exactly once each two arrays example input words bbbbbb words aaaaaa output explanation there no strings that appear each two arrays example input words aab words aaaab output explanation only string that appears exactly once each two arrays ab constraints wordslength wordslength wordsilength wordsjlength wordsi and wordsj consists only lowercase english letters
count good triplets given array integers arr and three integers and need find number good triplets triplet arri arrj arrk good if following conditions true arrlength arri arrj arrj arrk arri arrk where denotes absolute value return number good triplets example input arr output explanation there good triplets example input arr output explanation no triplet satisfies all conditions constraints arrlength arri
maximum repeating substring string sequence string word krepeating if word concatenated times substring sequence words maximum krepeating value highest value where word krepeating sequence if word not substring sequence words maximum krepeating value given strings sequence and word return maximum krepeating value word sequence example input sequence ababc word ab output explanation abab substring ababc example input sequence ababc word ba output explanation ba substring ababc baba not substring ababc example input sequence ababc word ac output explanation ac not substring ababc constraints sequencelength wordlength sequence and word contains only lowercase english letters
sum game alice and bob take turns playing game alice starting first given string num even length consisting digits and characters each turn player will do following if there still least one num choose index where numi replace numi any digit between and game ends when there no more characters num bob win sum digits first half num must be equal sum digits second half alice win sums must not be equal example if game ended num then bob wins because if game ended num then alice wins because assuming alice and bob play optimally return true if alice will win and false if bob will win example input num output false explanation there no moves be made sum first half equal sum second half example input num output true explanation alice can replace one and will be impossible bob make sums equal example input num output false explanation can be proven that bob will always win one possible outcome alice replaces first num bob replaces one right half num alice replaces one right half num bob replaces last right half num bob wins because constraints numlength numlength even num consists only digits and
number nodes subtree same label given tree ie connected undirected graph that has no cycles consisting nodes numbered from and exactly edges root tree node and each node tree has label which lowercase character given string labels ie node number has label labelsi edges array given form edgesi ai bi which means there edge between nodes ai and bi tree return array size where ansi number nodes subtree ith node which have same label as node subtree tree tree consisting node and all its descendant nodes example input edges labels abaedcd output explanation node has label and its subtree has node label as well thus answer notice that any node part its subtree node has label subtree node contains nodes and as nodes and have different labels than node answer just node itself example input edges labels bbbb output explanation subtree node contains only node so answer subtree node contains only node so answer subtree node contains nodes and both have label thus answer subtree node contains nodes and all label thus answer example input edges labels aabab output constraints edgeslength edgesilength ai bi ai bi labelslength labels consisting only lowercase english letters
minimum domino rotations equal row row dominoes topsi and bottomsi represent top and bottom halves ith domino domino tile two numbers from one each half tile may rotate ith domino so that topsi and bottomsi swap values return minimum number rotations so that all values tops same or all values bottoms same if cannot be done return example input tops bottoms output explanation first figure represents dominoes as given tops and bottoms before do any rotations if rotate second and fourth dominoes can make every value top row equal as indicated second figure example input tops bottoms output explanation this case not possible rotate dominoes make one row values equal constraints topslength bottomslength topslength topsi bottomsi
can convert string moves given two strings and your goal convert into moves or less during ith move can choose any index indexed from such that slength and has not been chosen any previous move and shift character that index times do nothing shifting character means replacing next letter alphabet wrapping around so that becomes shifting character means applying shift operations times remember that any index can be picked most once return true if its possible convert into no more than moves otherwise return false example input input ouput output true explanation th move shift times get and th move shift get example input abc bcd output false explanation need shift each character one time convert into can shift during st move however there no way shift other characters remaining moves obtain from example input aab bbb output true explanation st move shift first time get th move shift second times get constraints slength tlength contain only lowercase english letters
maximum difference between node and ancestor given root binary tree find maximum value which there exist different nodes and where aval bval and ancestor node ancestor if either any child equal or any child ancestor example input root nullnullnull output explanation have various ancestornode differences some which given below among all possible differences maximum value obtained example input root nullnull output constraints number nodes tree range nodeval
kth lexicographical string all happy strings length happy string string that consists only letters set si si all values from slength string indexed example strings abc ac and abcbabcbcb all happy strings and strings aa baa and ababbc not happy strings given two integers and consider list all happy strings length sorted lexicographical order return kth string this list or return empty string if there less than happy strings length example input output explanation list contains all happy strings length third string example input output explanation there only happy strings length example input output cab explanation there different happy string length aba abc aca acb bab bac bca bcb cab cac cba cbc will find th string cab constraints
friends appropriate ages there persons social media website given integer array ages where agesi age ith person person will not send friend request person if any following conditions true agey agex agey agex agey agex otherwise will send friend request note that if sends request will not necessarily send request also person will not send friend request themself return total number friend requests made example input ages output explanation people friend request each other example input ages output explanation friend requests made example input ages output explanation friend requests made constraints ageslength agesi
number good paths there tree ie connected undirected graph no cycles consisting nodes numbered from and exactly edges given indexed integer array vals length where valsi denotes value ith node also given integer array edges where edgesi ai bi denotes that there exists undirected edge connecting nodes ai and bi good path simple path that satisfies following conditions starting node and ending node have same value all nodes between starting node and ending node have values less than or equal starting node ie starting nodes value should be maximum value along path return number distinct good paths note that path and its reverse counted as same path example considered be same as single node also considered as valid path example input vals edges output explanation there good paths consisting single node there additional good path reverse path treated as same as note that not good path because vals vals example input vals edges output explanation there good paths consisting single node there additional good paths and example input vals edges output explanation tree consists only one node so there one good path constraints valslength valsi edgeslength edgesilength ai bi ai bi edges represents valid tree
height checker school trying take annual photo all students students asked stand single file line nondecreasing order height let this ordering be represented integer array expected where expectedi expected height ith student line given integer array heights representing current order that students standing each heightsi height ith student line indexed return number indices where heightsi expectedi example input heights output explanation heights expected indices and do not match example input heights output explanation heights expected all indices do not match example input heights output explanation heights expected all indices match constraints heightslength heightsi
range sum bst given root node binary search tree and two integers low and high return sum values all nodes value inclusive range low high example input root null low high output explanation nodes and range example input root null low high output explanation nodes and range constraints number nodes tree range nodeval low high all nodeval unique
minimum cost path special roads given array start where start startx starty represents your initial position startx starty space also given array target where target targetx targety represents your target position targetx targety cost going from position any other position space there also some special roads given array specialroads where specialroadsi xi yi xi yi costi indicates that ith special road can take from xi yi xi yi cost equal costi can use each special road any number times return minimum cost required go from startx starty targetx targety example input start target specialroads output explanation optimal path from following this move has cost this move uses first special edge cost this move has cost this move uses second special edge cost so total cost can be shown that cannot achieve smaller total cost than example input start target specialroads output explanation optimal not use any special edges and go directly from starting ending position cost constraints startlength targetlength startx targetx starty targety specialroadslength specialroadsilength startx xi xi targetx starty yi yi targety costi
minimum absolute difference queries minimum absolute difference array defined as minimum value ai aj where alength and ai aj if all elements same minimum absolute difference example minimum absolute difference array note that not because ai and aj must be different given integer array nums and array queries where queriesi li ri each query compute minimum absolute difference subarray numsliri containing elements nums between based indices li and ri inclusive return array ans where ansi answer ith query subarray contiguous sequence elements array value defined as if if example input nums queries output explanation queries processed as follows queries subarray and minimum absolute difference queries subarray and minimum absolute difference queries subarray and minimum absolute difference queries subarray and minimum absolute difference example input nums queries output explanation queries processed as follows queries subarray and minimum absolute difference because all elements same queries subarray and minimum absolute difference queries subarray and minimum absolute difference queries subarray and minimum absolute difference constraints numslength numsi querieslength li ri numslength
minimum operations make array kincreasing given indexed array arr consisting positive integers and positive integer array arr called kincreasing if arrik arri holds every index where example arr kincreasing because arr arr arr arr arr arr arr arr however same arr not kincreasing because arr arr or because arr arr one operation can choose index and change arri into any positive integer return minimum number operations required make array kincreasing given example input arr output explanation resultant array has be nondecreasing some kincreasing arrays that can be formed all them require operations suboptimal change array example because would take operations can be shown that cannot make array kincreasing less than operations example input arr output explanation this same example as one problem description here every index where arri arri since given array already kincreasing do not need perform any operations example input arr output explanation indices and only ones not satisfying arri arri one ways can make array kincreasing changing arr and arr array will now be note that there can be other ways make array kincreasing but none them require less than operations constraints arrlength arri arrlength
latest time replacing hidden digits given string time form hhmm where some digits string hidden represented valid times those inclusively between and return latest valid time can get from time replacing hidden digits example input time output explanation latest hour beginning digit and latest minute ending digit example input time output example input time output constraints time format hhmm guaranteed that can produce valid time from given string
maximum number groups entering competition given positive integer array grades which represents grades students university would like enter all these students into competition ordered nonempty groups such that ordering meets following conditions sum grades students ith group less than sum grades students th group all groups except last total number students ith group less than total number students th group all groups except last return maximum number groups that can be formed example input grades output explanation following possible way form groups students st group has students grades sum grades student count nd group has students grades sum grades student count rd group has students grades sum grades student count can be shown that not possible form more than groups example input grades output explanation can only form group since forming groups would lead equal number students both groups constraints gradeslength gradesi
nary tree preorder traversal given root nary tree return preorder traversal its nodes values narytree input serialization represented their level order traversal each group children separated null value see examples example input root nullnull output example input root nullnullnullnullnullnullnullnullnullnullnull output constraints number nodes tree range nodeval height nary tree less than or equal follow up recursive solution trivial could do iteratively
sum subarray ranges given integer array nums range subarray nums difference between largest and smallest element subarray return sum all subarray ranges nums subarray contiguous nonempty sequence elements within array example input nums output explanation subarrays nums following range largest smallest range range range range range so sum all ranges example input nums output explanation subarrays nums following range largest smallest range range range range range so sum all ranges example input nums output explanation sum all subarray ranges nums constraints numslength numsi followup could find solution time complexity
least number unique integers after removals given array integers arr and integer find least number unique integers after removing exactly elements example input arr output explanation remove single only left example input arr output explanation remove and either one two or three and will be left constraints arrlength arri arrlength
reverse string write function that reverses string input string given as array characters must do this modifying input array inplace extra memory example input hello output olleh example input hannah output hannah constraints slength si printable ascii character
unique substrings wraparound string define string base be infinite wraparound string abcdefghijklmnopqrstuvwxyz so base will look like this zabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcd given string return number unique nonempty substrings present base example input output explanation only substring base example input cac output explanation there two substrings base example input zab output explanation there six substrings za ab and zab base constraints slength consists lowercase english letters
minimum remove make valid parentheses given string and lowercase english characters your task remove minimum number parentheses or any positions so that resulting parentheses string valid and return any valid string formally parentheses string valid if and only if empty string contains only lowercase characters or can be written as ab concatenated where and valid strings or can be written as where valid string example input leetcode output leetcode explanation leetcode leetcode would also be accepted example input abcd output abcd example input output explanation empty string also valid constraints slength si either or lowercase english letter
design circular deque design your implementation circular doubleended queue deque implement mycirculardeque class mycirculardequeint initializes deque maximum size boolean insertfront adds item front deque returns true if operation successful or false otherwise boolean insertlast adds item rear deque returns true if operation successful or false otherwise boolean deletefront deletes item from front deque returns true if operation successful or false otherwise boolean deletelast deletes item from rear deque returns true if operation successful or false otherwise int getfront returns front item from deque returns if deque empty int getrear returns last item from deque returns if deque empty boolean isempty returns true if deque empty or false otherwise boolean isfull returns true if deque full or false otherwise example input mycirculardeque insertlast insertlast insertfront insertfront getrear isfull deletelast insertfront getfront output null true true true false true true true explanation mycirculardeque mycirculardeque new mycirculardeque mycirculardequeinsertlast return true mycirculardequeinsertlast return true mycirculardequeinsertfront return true mycirculardequeinsertfront return false queue full mycirculardequegetrear return mycirculardequeisfull return true mycirculardequedeletelast return true mycirculardequeinsertfront return true mycirculardequegetfront return constraints value most calls will be made insertfront insertlast deletefront deletelast getfront getrear isempty isfull
maximum number balloons given string text want use characters text form as many instances word balloon as possible can use each character text most once return maximum number instances that can be formed example input text nlaebolko output example input text loonbalxballpoon output example input text leetcode output constraints textlength text consists lower case english letters only
count number possible root nodes alice has undirected tree nodes labeled from tree represented as integer array edges length where edgesi ai bi indicates that there edge between nodes ai and bi tree alice wants bob find root tree allows bob make several guesses about her tree one guess does following chooses two distinct integers and such that there exists edge tree tells alice that parent tree bobs guesses represented integer array guesses where guessesj uj vj indicates bob guessed uj be parent vj alice being lazy does not reply each bobs guesses but just says that least his guesses true given integer arrays edges guesses and integer return number possible nodes that can be root alices tree if there no such tree return example input edges guesses output explanation root correct guesses root correct guesses root correct guesses root correct guesses root correct guesses considering or as root node leads correct guesses example input edges guesses output explanation root correct guesses root correct guesses root correct guesses root correct guesses root correct guesses considering any node as root will give least correct guess constraints edgeslength guesseslength ai bi uj vj ai bi uj vj edges represents valid tree guessesj edge tree guesses unique guesseslength
longest continuous subarray absolute diff less than or equal limit given array integers nums and integer limit return size longest nonempty subarray such that absolute difference between any two elements this subarray less than or equal limit example input nums limit output explanation all subarrays maximum absolute diff maximum absolute diff maximum absolute diff maximum absolute diff maximum absolute diff maximum absolute diff maximum absolute diff maximum absolute diff maximum absolute diff maximum absolute diff therefore size longest subarray example input nums limit output explanation subarray longest since maximum absolute diff example input nums limit output constraints numslength numsi limit
unique paths iii given integer array grid where gridij could be representing starting square there exactly one starting square representing ending square there exactly one ending square representing empty squares can walk over representing obstacles that cannot walk over return number directional walks from starting square ending square that walk over every nonobstacle square exactly once example input grid output explanation have following two paths example input grid output explanation have following four paths example input grid output explanation there no path that walks over every empty square exactly once note that starting and ending square can be anywhere grid constraints gridlength gridilength gridij there exactly one starting cell and one ending cell
minimum value get positive step step sum given array integers nums start initial positive value startvalue each iteration calculate step step sum startvalue plus elements nums from left right return minimum positive value startvalue such that step step sum never less than example input nums output explanation if choose startvalue third iteration your step step sum less than step step sum startvalue startvalue nums example input nums output explanation minimum start value should be positive example input nums output constraints numslength numsi
check if binary string has most one segment ones given binary string without leading zeros return true if contains most one contiguous segment ones otherwise return false example input output false explanation ones do not form contiguous segment example input output true constraints slength si either or
partition array maximum sum given integer array arr partition array into contiguous subarrays length most after partitioning each subarray has their values changed become maximum value that subarray return largest sum given array after partitioning test cases generated so that answer fits bit integer example input arr output explanation arr becomes example input arr output example input arr output constraints arrlength arri arrlength
minimum adjacent swaps reach kth smallest number given string num representing large integer and integer call some integer wonderful if permutation digits num and greater value than num there can be many wonderful integers however only care about smallestvalued ones example when num st smallest wonderful integer nd smallest wonderful integer rd smallest wonderful integer th smallest wonderful integer return minimum number adjacent digit swaps that needs be applied num reach kth smallest wonderful integer tests generated such way that kth smallest wonderful integer exists example input num output explanation th smallest wonderful number get this number swap index index swap index index example input num output explanation th smallest wonderful number get this number swap index index swap index index swap index index swap index index example input num output explanation st smallest wonderful number get this number swap index index constraints numlength num only consists digits
maximize distance closest person given array representing row seats where seatsi represents person sitting ith seat and seatsi represents that ith seat empty indexed there least one empty seat and least one person sitting alex wants sit seat such that distance between him and closest person him maximized return that maximum distance closest person example input seats output explanation if alex sits second open seat ie seats then closest person has distance if alex sits any other open seat closest person has distance thus maximum distance closest person example input seats output explanation if alex sits last seat ie seats closest person seats away this maximum distance possible so answer example input seats output constraints seatslength seatsi or least one seat empty least one seat occupied
satisfiability equality equations given array strings equations that represent relationships between variables where each string equationsi length and takes one two different forms xiyi or xiyihere xi and yi lowercase letters not necessarily different that represent oneletter variable names return true if possible assign integers variable names so as satisfy all given equations or false otherwise example input equations abba output false explanation if assign say and then first equation satisfied but not second there no way assign variables satisfy both equations example input equations baab output true explanation could assign and satisfy both equations constraints equationslength equationsilength equationsi lowercase letter equationsi either or equationsi equationsi lowercase letter
merge similar items given two integer arrays items and items representing two sets items each array items has following properties itemsi valuei weighti where valuei represents value and weighti represents weight ith item value each item items unique return integer array ret where reti valuei weighti weighti being sum weights all items value valuei note ret should be returned ascending order value example input items items output explanation item value occurs items weight and items weight total weight item value occurs items weight and items weight total weight item value occurs items weight total weight therefore return example input items items output explanation item value occurs items weight and items weight total weight item value occurs items weight and items weight total weight item value occurs items weight and items weight total weight therefore return example input items items output explanation item value occurs items weight and items weight total weight item value occurs items weight and items weight total weight item value occurs items weight total weight therefore return constraints itemslength itemslength itemsilength itemsilength valuei weighti each valuei items unique each valuei items unique
best poker hand given integer array ranks and character array suits have cards where ith card has rank ranksi and suit suitsi following types poker hands can make from best worst flush five cards same suit three kind three cards same rank pair two cards same rank high card any single card return string representing best type poker hand can make given cards note that return values casesensitive example input ranks suits aaaaa output flush explanation hand all cards consists cards same suit so have flush example input ranks suits daabc output three kind explanation hand first second and fourth card consists cards same rank so have three kind note that could also make pair hand but three kind better hand also note that other cards could be used make three kind hand example input ranks suits abcad output pair explanation hand first and second card consists cards same rank so have pair note that cannot make flush or three kind constraints rankslength suitslength ranksi suitsi no two cards have same rank and suit
decoded string index given encoded string decode string tape encoded string read one character time and following steps taken if character read letter that letter written onto tape if character read digit entire current tape repeatedly written more times total given integer return kth letter indexed decoded string example input leetcode output explanation decoded string leetleetcodeleetleetcodeleetleetcode th letter string example input ha output explanation decoded string hahahaha th letter example input output explanation decoded string repeated times st letter constraints slength consists lowercase english letters and digits through starts letter guaranteed that less than or equal length decoded string decoded string guaranteed have less than letters
cousins binary tree ii given root binary tree replace value each node tree sum all its cousins values two nodes binary tree cousins if have same depth different parents return root modified tree note that depth node number edges path from root node example input root null output null explanation diagram above shows initial binary tree and binary tree after changing value each node node value does not have any cousins so its sum node value does not have any cousins so its sum node value does not have any cousins so its sum node value has cousin value so its sum node value has cousin value so its sum node value has cousins values and so its sum example input root output explanation diagram above shows initial binary tree and binary tree after changing value each node node value does not have any cousins so its sum node value does not have any cousins so its sum node value does not have any cousins so its sum constraints number nodes tree range nodeval
find closest palindrome given string representing integer return closest integer not including itself which palindrome if there tie return smaller one closest defined as absolute difference minimized between two integers example input output example input output explanation and closest palindromes but return smallest which constraints nlength consists only digits does not have leading zeros representing integer range
keyboard row given array strings words return words that can be typed using letters alphabet only one row american keyboard like image below american keyboard first row consists characters qwertyuiop second row consists characters asdfghjkl and third row consists characters zxcvbnm example input words helloalaskadadpeace output alaskadad example input words omk output example input words adsdfsfd output adsdfsfd constraints wordslength wordsilength wordsi consists english letters both lowercase and uppercase
construct smallest number from di string given indexed string pattern length consisting characters meaning increasing and meaning decreasing indexed string num length created using following conditions num consists digits where each digit used most once if patterni then numi numi if patterni then numi numi return lexicographically smallest possible string num that meets conditions example input pattern iiididdd output explanation indices and must have that numi numi indices and must have that numi numi some possible values num and can be proven that smallest possible num that meets conditions note that not possible because digit used more than once example input pattern ddd output explanation some possible values num and can be proven that smallest possible num that meets conditions constraints patternlength pattern consists only letters and
binary tree right side view given root binary tree imagine yourself standing right side return values nodes can see ordered from top bottom example input root nullnull output example input root null output example input root output constraints number nodes tree range nodeval
largest merge two strings given two strings word and word want construct string merge following way while either word or word nonempty choose one following options if word nonempty append first character word merge and delete from word example if word abc and merge dv then after choosing this operation word bc and merge dva if word nonempty append first character word merge and delete from word example if word abc and merge then after choosing this operation word bc and merge return lexicographically largest merge can construct string lexicographically larger than string same length if first position where and differ has character strictly larger than corresponding character example abcd lexicographically larger than abcc because first position differ fourth character and greater than example input word cabaa word bcaaa output cbcabaaaaa explanation one way get lexicographically largest merge take from word merge word abaa word bcaaa take from word merge cb word abaa word caaa take from word merge cbc word abaa word aaa take from word merge cbca word baa word aaa take from word merge cbcab word aa word aaa append remaining as from word and word end merge example input word abcabc word abdcaba output abdcabcabcaba constraints wordlength wordlength word and word consist only lowercase english letters
rearrange characters make target string given two indexed strings and target can take some letters from and rearrange them form new strings return maximum number copies target that can be formed taking letters from and rearranging them example input ilovecodingonleetcode target code output explanation first copy code take letters indices and second copy code take letters indices and strings that formed ecod and code which can both be rearranged into code can make most two copies code so return example input abcba target abc output explanation can make one copy abc taking letters indices and can make most one copy abc so return note that while there extra and indices and cannot reuse letter index so cannot make second copy abc example input abbaccaddaeea target aaaaa output explanation can make one copy aaaaa taking letters indices and can make most one copy aaaaa so return constraints slength targetlength and target consist lowercase english letters
largest palindromic number given string num consisting digits only return largest palindromic integer form string that can be formed using digits taken from num should not contain leading zeroes notes do not need use all digits num but must use least one digit digits can be reordered example input num output explanation use digits from form palindromic integer can be shown that largest palindromic integer that can be formed example input num output explanation can be shown that largest palindromic integer that can be formed note that integer returned should not contain leading zeroes constraints numlength num consists digits
maximum subsequence score given two indexed integer arrays nums and nums equal length and positive integer must choose subsequence indices from nums length chosen indices ik your score defined as sum selected elements from nums multiplied minimum selected elements from nums can defined simply as numsi numsi numsik minnumsi numsi numsik return maximum possible score subsequence indices array set that can be derived from set deleting some or no elements example input nums nums output explanation four possible subsequence scores choose indices and score min choose indices and score min choose indices and score min choose indices and score min therefore return max score which example input nums nums output explanation choosing index optimal nums nums maximum possible score constraints numslength numslength numsi numsj
largest component size common factor given integer array unique positive integers nums consider following graph there numslength nodes labeled nums numsnumslength there undirected edge between numsi and numsj if numsi and numsj share common factor greater than return size largest connected component graph example input nums output example input nums output example input nums output constraints numslength numsi all values nums unique
find latest group size given array arr that represents permutation numbers from have binary string size that initially has all its bits set zero each step assuming both binary string and arr indexed from bit position arri set also given integer find latest step which there exists group ones length group ones contiguous substring such that cannot be extended either direction return latest step which there exists group ones length exactly if no such group exists return example input arr output explanation step groups step groups step groups step groups step groups latest step which there exists group size step example input arr output explanation step groups step groups step groups step groups step groups no group size exists during any step constraints arrlength arri all integers arr distinct
sum closest given integer array nums length and integer target find three integers nums such that sum closest target return sum three integers may assume that each input would have exactly one solution example input nums target output explanation sum that closest target example input nums target output explanation sum that closest target constraints numslength numsi target
minimum white tiles after covering carpets given indexed binary string floor which represents colors tiles floor floori denotes that ith tile floor colored black other hand floori denotes that ith tile floor colored white also given numcarpets and carpetlen have numcarpets black carpets each length carpetlen tiles cover tiles given carpets such that number white tiles still visible minimum carpets may overlap one another return minimum number white tiles still visible example input floor numcarpets carpetlen output explanation figure above shows one way covering tiles carpets such that only white tiles visible no other way covering tiles carpets can leave less than white tiles visible example input floor numcarpets carpetlen output explanation figure above shows one way covering tiles carpets such that no white tiles visible note that carpets able overlap one another constraints carpetlen floorlength floori either or numcarpets
maximum score from removing stones playing solitaire game three piles stones sizes and respectively each turn choose two different nonempty piles take one stone from each and add point your score game stops when there fewer than two nonempty piles meaning there no more available moves given three integers and return maximum score can get example input output explanation starting state one optimal set moves take from st and rd piles state now take from st and rd piles state now take from nd and rd piles state now take from nd and rd piles state now take from nd and rd piles state now take from nd and rd piles state now there fewer than two nonempty piles so game ends total points example input output explanation starting state one optimal set moves take from st and nd piles state now take from st and rd piles state now take from st and rd piles state now take from st and rd piles state now take from nd and rd piles state now take from nd and rd piles state now take from nd and rd piles state now there fewer than two nonempty piles so game ends total points example input output explanation one optimal set moves take from nd and rd piles turns until empty after that there fewer than two nonempty piles so game ends constraints
minimum number operations make all array elements equal given indexed array nums consisiting positive integers can do following operation array any number times select index such that and replace either numsi or numsi their gcd value return minimum number operations make all elements nums equal if impossible return gcd two integers greatest common divisor two integers example input nums output explanation can do following operations choose index and replace nums gcd now have nums choose index and replace nums gcd now have nums choose index and replace nums gcd now have nums choose index and replace nums gcd now have nums example input nums output explanation can be shown that impossible make all elements equal constraints numslength numsi followup time complexity solution works but could find constant time complexity solution
rising temperature sql schema table weather column name type id int recorddate date temperature int id primary key this table this table contains information about temperature certain day write sql query find all dates id higher temperatures compared its previous dates yesterday return result table any order query result format following example example input weather table id recorddate temperature output id explanation temperature higher than previous day temperature higher than previous day
apply transform over each element array given integer array arr and mapping function fn return new array transformation applied each element returned array should be created such that returnedarrayi fnarri please solve without builtin arraymap method example input arr fn function plusonen return output explanation const newarray maparr plusone function increases each value array one example input arr fn function plusin return output explanation function increases each value index resides example input arr fn function constant return output explanation function always returns constraints arrlength arri fn returns number
long pressed name your friend typing his name into keyboard sometimes when typing character key might get long pressed and character will be typed or more times examine typed characters keyboard return true if possible that your friends name some characters possibly none being long pressed example input name alex typed aaleex output true explanation and alex long pressed example input name saeed typed ssaaedd output false explanation must have been pressed twice but not typed output constraints namelength typedlength name and typed consist only lowercase english letters
number atoms given string formula representing chemical formula return count each atom atomic element always starts uppercase character then zero or more lowercase letters representing name one or more digits representing that elements count may follow if count greater than if count no digits will follow example ho and ho possible but ho impossible two formulas concatenated together produce another formula example hohemg also formula formula placed parentheses and count optionally added also formula example ho and ho formulas return count all elements as string following form first name sorted order followed its count if that count more than followed second name sorted order followed its count if that count more than and so test cases generated so that all values output fit bit integer example input formula ho output ho explanation count elements example input formula mgoh output hmgo explanation count elements mg example input formula konso output knos explanation count elements constraints formulalength formula consists english letters digits and formula always valid
build matrix conditions given positive integer also given integer array rowconditions size where rowconditionsi abovei belowi and integer array colconditions size where colconditionsi lefti righti two arrays contain integers from have build matrix that contains each numbers from exactly once remaining cells should have value matrix should also satisfy following conditions number abovei should appear row that strictly above row which number belowi appears all from number lefti should appear column that strictly left column which number righti appears all from return any matrix that satisfies conditions if no answer exists return empty matrix example input rowconditions colconditions output explanation diagram above shows valid example matrix that satisfies all conditions row conditions following number row and number row so above matrix number row and number row so above matrix column conditions following number column and number column so left matrix number column and number column so left matrix note that there may be multiple correct answers example input rowconditions colconditions output explanation from first two conditions has be below but third conditions needs be above be satisfied no matrix can satisfy all conditions so return empty matrix constraints rowconditionslength colconditionslength rowconditionsilength colconditionsilength abovei belowi lefti righti abovei belowi lefti righti
kdiff pairs array given array integers nums and integer return number unique kdiff pairs array kdiff pair integer pair numsi numsj where following true numslength numsi numsj notice that val denotes absolute value val example input nums output explanation there two diff pairs array and although have two input should only return number unique pairs example input nums output explanation there four diff pairs array and example input nums output explanation there one diff pair array constraints numslength numsi
apply operations array given indexed array nums size consisting nonnegative integers need apply operations this array where ith operation indexed will apply following ith element nums if numsi numsi then multiply numsi and set numsi otherwise skip this operation after performing all operations shift all end array example array after shifting all its end return resulting array note that operations applied sequentially not all once example input nums output explanation do following operations nums and nums not equal so skip this operation nums and nums equal multiply nums and change nums array becomes nums and nums not equal so skip this operation nums and nums equal multiply nums and change nums array becomes nums and nums equal multiply nums and change nums array becomes after that shift end which gives array example input nums output explanation no operation can be applied just shift end constraints numslength numsi
maximum difference between increasing elements given indexed integer array nums size find maximum difference between numsi and numsj ie numsj numsi such that and numsi numsj return maximum difference if no such and exists return example input nums output explanation maximum difference occurs and numsj numsi note that and difference numsj numsi but so not valid example input nums output explanation there no and such that and numsi numsj example input nums output explanation maximum difference occurs and numsj numsi constraints numslength numsi
delete columns make sorted given array strings strs all same length strings can be arranged such that there one each line making grid example strs abc bce cae can be arranged as follows abc bce cae want delete columns that not sorted lexicographically above example indexed columns and sorted while column not so would delete column return number columns that will delete example input strs cbadafghi output explanation grid looks as follows cba daf ghi columns and sorted but column not so only need delete column example input strs ab output explanation grid looks as follows column only column and sorted so will not delete any columns example input strs zyxwvutsr output explanation grid looks as follows zyx wvu tsr all columns not sorted so will delete all constraints strslength strsilength strsi consists lowercase english letters
task scheduler ii given indexed array positive integers tasks representing tasks that need be completed order where tasksi represents type ith task also given positive integer space which represents minimum number days that must pass after completion task before another task same type can be performed each day until all tasks have been completed must either complete next task from tasks or take break return minimum number days needed complete all tasks example input tasks space output explanation one way complete all tasks days as follows day complete th task day complete st task day take break day take break day complete nd task day complete rd task day take break day complete th task day complete th task can be shown that tasks cannot be completed less than days example input tasks space output explanation one way complete all tasks days as follows day complete th task day complete st task day take break day take break day complete nd task day complete rd task can be shown that tasks cannot be completed less than days constraints taskslength tasksi space taskslength
decrypt string from alphabet integer mapping given string formed digits and want map english lowercase characters as follows characters represented respectively characters represented respectively return string formed after mapping test cases generated so that unique mapping will always exist example input output jkab explanation example input output acz constraints slength consists digits and letter will be valid string such that mapping always possible
longest uploaded prefix given stream videos each represented distinct number from that need upload server need implement data structure that calculates length longest uploaded prefix various points upload process consider be uploaded prefix if all videos range inclusive have been uploaded server longest uploaded prefix maximum value that satisfies this definition implement luprefix class luprefixint initializes object stream videos void uploadint video uploads video server int longest returns length longest uploaded prefix defined above example input luprefix upload longest upload longest upload longest output null null null null explanation luprefix server new luprefix initialize stream videos serverupload upload video serverlongest since video has not been uploaded yet there no prefix so return serverupload upload video serverlongest prefix longest uploaded prefix so return serverupload upload video serverlongest prefix longest uploaded prefix so return constraints video all values video distinct most calls total will be made upload and longest least one call will be made longest
longest common subpath there country cities numbered from this country there road connecting every pair cities there friends numbered from who traveling through country each one them will take path consisting some cities each path represented integer array that contains visited cities order path may contain city more than once but same city will not be listed consecutively given integer and integer array paths where pathsi integer array representing path ith friend return length longest common subpath that shared every friends path or if there no common subpath all subpath path contiguous sequence cities within that path example input paths output explanation longest common subpath example input paths output explanation there no common subpath shared three paths example input paths output explanation possible longest common subpaths and all have length constraints pathslength sumpathsilength pathsij same city not listed multiple times consecutively pathsi
number ways stay same place after some steps have pointer index array size arrlen each step can move position left position right array or stay same place pointer should not be placed outside array any time given two integers steps and arrlen return number ways such that your pointer still index after exactly steps steps since answer may be too large return modulo example input steps arrlen output explanation there differents ways stay index after steps right left stay stay right left right stay left stay stay stay example input steps arrlen output explanation there differents ways stay index after steps right left stay stay example input steps arrlen output constraints steps arrlen
video stitching given series video clips from sporting event that lasted time seconds these video clips can be overlapping each other and have varying lengths each video clip described array clips where clipsi starti endi indicates that ith clip started starti and ended endi can cut these clips into segments freely example clip can be cut into segments return minimum number clips needed so that can cut clips into segments that cover entire sporting event time if task impossible return example input clips time output explanation take clips total clips then can reconstruct sporting event as follows cut into segments now have segments which cover sporting event example input clips time output explanation cannot cover only and example input clips time output explanation can take clips and constraints clipslength starti endi time
find customer referee sql schema table customer column name type id int name varchar refereeid int id primary key column this table each row this table indicates id customer their name and id customer who referred them write sql query report names customer that not referred customer id return result table any order query result format following example example input customer table id name refereeid will null jane null alex bill null zack mark output name will jane bill zack
minimize malware spread ii given network nodes represented as adjacency matrix graph where ith node directly connected jth node if graphij some nodes initial initially infected malware whenever two nodes directly connected and least one those two nodes infected malware both nodes will be infected malware this spread malware will continue until no more nodes can be infected this manner suppose minitial final number nodes infected malware entire network after spread malware stops will remove exactly one node from initial completely removing and any connections from this node any other node return node that if removed would minimize minitial if multiple nodes could be removed minimize minitial return such node smallest index example input graph initial output example input graph initial output example input graph initial output constraints graphlength graphilength graphij or graphij graphji graphii initiallength initiali all integers initial unique
richest customer wealth given integer grid accounts where accountsij amount money ith customer has jth bank return wealth that richest customer has customers wealth amount money have all their bank accounts richest customer customer that has maximum wealth example input accounts output explanation st customer has wealth nd customer has wealth both customers considered richest wealth each so return example input accounts output explanation st customer has wealth nd customer has wealth rd customer has wealth nd customer richest wealth example input accounts output constraints accountslength accountsilength accountsij
shortest subarray be removed make array sorted given integer array arr remove subarray can be empty from arr such that remaining elements arr nondecreasing return length shortest subarray remove subarray contiguous subsequence array example input arr output explanation shortest subarray can remove length remaining elements after that will be which sorted another correct solution remove subarray example input arr output explanation since array strictly decreasing can only keep single element therefore need remove subarray length either or example input arr output explanation array already nondecreasing do not need remove any elements constraints arrlength arri
words within two edits dictionary given two string arrays queries and dictionary all words each array comprise lowercase english letters and have same length one edit can take word from queries and change any letter any other letter find all words from queries that after maximum two edits equal some word from dictionary return list all words from queries that match some word from dictionary after maximum two edits return words same order appear queries example input queries wordnoteantswood dictionary woodjokemoat output wordnotewood explanation changing word allows equal dictionary word wood changing and note changes joke would take more than edits ants equal dictionary word wood can remain unchanged edits and match corresponding dictionary word thus return wordnotewood example input queries yes dictionary not output explanation applying any two edits yes cannot make equal not thus return empty array constraints querieslength dictionarylength queriesilength dictionaryjlength all queriesi and dictionaryj composed lowercase english letters
powerful integers given three integers and bound return list all powerful integers that have value less than or equal bound integer powerful if can be represented as xi yj some integers and may return answer any order your answer each value should occur most once example input bound output explanation example input bound output constraints bound
unique number occurrences given array integers arr return true if number occurrences each value array unique or false otherwise example input arr output true explanation value has occurrences has and has no two values have same number occurrences example input arr output false example input arr output true constraints arrlength arri
cherry pickup given grid representing field cherries each cell one three possible integers means cell empty so can pass through means cell contains cherry that can pick up and pass through or means cell contains thorn that blocks your way return maximum number cherries can collect following rules below starting position and reaching moving right or down through valid path cells cells value or after reaching returning moving left or up through valid path cells when passing through path cell containing cherry pick up and cell becomes empty cell if there no valid path between and then no cherries can be collected example input grid output explanation player started and went down down right right reach cherries picked up during this single trip and matrix becomes then player went left up up left return home picking up one more cherry total number cherries picked up and this maximum possible example input grid output constraints gridlength gridilength gridij or grid gridn
as far from land as possible given grid containing only values and where represents water and represents land find water cell such that its distance nearest land cell maximized and return distance if no land or water exists grid return distance used this problem manhattan distance distance between two cells and example input grid output explanation cell as far as possible from all land distance example input grid output explanation cell as far as possible from all land distance constraints gridlength gridilength gridij or
minimum degree connected trio graph given undirected graph given integer which number nodes graph and array edges where each edgesi ui vi indicates that there undirected edge between ui and vi connected trio set three nodes where there edge between every pair them degree connected trio number edges where one endpoint trio and other not return minimum degree connected trio graph or if graph has no connected trios example input edges output explanation there exactly one trio which edges that form its degree bolded figure above example input edges output explanation there exactly three trios degree degree degree constraints edgesilength edgeslength ui vi ui vi there no repeated edges
course schedule ii there total numcourses courses have take labeled from numcourses given array prerequisites where prerequisitesi ai bi indicates that must take course bi first if want take course ai example pair indicates that take course have first take course return ordering courses should take finish all courses if there many valid answers return any them if impossible finish all courses return empty array example input numcourses prerequisites output explanation there total courses take take course should have finished course so correct course order example input numcourses prerequisites output explanation there total courses take take course should have finished both courses and both courses and should be taken after finished course so one correct course order another correct ordering example input numcourses prerequisites output constraints numcourses prerequisiteslength numcourses numcourses prerequisitesilength ai bi numcourses ai bi all pairs ai bi distinct
maximum nesting depth two valid parentheses strings string valid parentheses string denoted vps if and only if consists and characters only and empty string or can be written as ab concatenated where and vpss or can be written as where vps can similarly define nesting depth depths any vps as follows depth deptha maxdeptha depthb where and vpss depth deptha where vps example and vpss nesting depths and and and not vpss given vps seq split into two disjoint subsequences and such that and vpss and alength blength seqlength now choose any such and such that maxdeptha depthb minimum possible value return answer array length seqlength that encodes such choice and answeri if seqi part else answeri note that even though multiple answers may exist may return any them example input seq output example input seq output constraints seqsize
range product queries powers given positive integer there exists indexed array called powers composed minimum number powers that sum array sorted nondecreasing order and there only one way form array also given indexed integer array queries where queriesi lefti righti each queriesi represents query where have find product all powersj lefti righti return array answers equal length queries where answersi answer ith query since answer ith query may be too large each answersi should be returned modulo example input queries output explanation powers can be shown that powers cannot be smaller size answer st query powers powers answer nd query powers answer rd query powers powers powers powers each answer modulo yields same answer so returned example input queries output explanation powers answer only query powers answer modulo same so returned constraints querieslength starti endi powerslength
check if object instance class write function that checks if given value instance given class or superclass this problem object considered instance given class if that object has access that classs methods there no constraints data types that can be passed function example value or class could be undefined example input func checkifinstanceofnew date date output true explanation object returned date constructor definition instance date example input func class animal class dog extends animal return checkifinstanceofnew dog animal output true explanation class animal class dog extends animal checkifinstancenew dog animal true dog subclass animal therefore dog object instance both dog and animal example input func checkifinstanceofdate date output false explanation date constructor cannot logically be instance itself example input func checkifinstanceof number output true explanation number note that instanceof keyword would return false however still considered instance number because accesses number methods example tofixed
clumsy factorial factorial positive integer product all positive integers less than or equal example factorial make clumsy factorial using integers decreasing order swapping out multiply operations fixed rotation operations multiply divide add and subtract this order example clumsy however these operations still applied using usual order operations arithmetic do all multiplication and division steps before any addition or subtraction steps and multiplication and division steps processed left right additionally division that use floor division such that given integer return clumsy factorial example input output explanation example input output explanation constraints
random point nonoverlapping rectangles given array nonoverlapping axisaligned rectangles rects where rectsi ai bi xi yi indicates that ai bi bottomleft corner point ith rectangle and xi yi topright corner point ith rectangle design algorithm pick random integer point inside space covered one given rectangles point perimeter rectangle included space covered rectangle any integer point inside space covered one given rectangles should be equally likely be returned note that integer point point that has integer coordinates implement solution class solutionint rects initializes object given rectangles rects int pick returns random integer point inside space covered one given rectangles example input solution pick pick pick pick pick output null explanation solution solution new solution solutionpick return solutionpick return solutionpick return solutionpick return solutionpick return constraints rectslength rectsilength ai xi bi yi xi ai yi bi all rectangles do not overlap most calls will be made pick
kind deck cards given integer array deck where decki represents number written ith card partition cards into one or more groups such that each group has exactly cards where and all cards one group have same integer written them return true if such partition possible or false otherwise example input deck output true explanation possible partition example input deck output false explanation no possible partition constraints decklength decki
pyramid transition matrix stacking blocks form pyramid each block has color which represented single letter each row blocks contains one less block than row beneath and centered top make pyramid aesthetically pleasing there only specific triangular patterns that allowed triangular pattern consists single block stacked top two blocks patterns given as list threeletter strings allowed where first two characters pattern represent left and right bottom blocks respectively and third character top block example abc represents triangular pattern block stacked top left and right block note that this different from bac where left bottom and right bottom start bottom row blocks bottom given as single string that must use as base pyramid given bottom and allowed return true if can build pyramid all way top such that every triangular pattern pyramid allowed or false otherwise example input bottom bcd allowed bcccdeceafff output true explanation allowed triangular patterns shown right starting from bottom level can build ce level and then build level there three triangular patterns pyramid which bcc cde and cea all allowed example input bottom aaaa allowed aabaacbcdbbedef output false explanation allowed triangular patterns shown right starting from bottom level there multiple ways build level but trying all possibilites will get always stuck before building level constraints bottomlength allowedlength allowedilength letters all input strings from set all values allowed unique
sort array increasing frequency given array integers nums sort array increasing order based frequency values if multiple values have same frequency sort them decreasing order return sorted array example input nums output explanation has frequency has frequency and has frequency example input nums output explanation and both have frequency so sorted decreasing order example input nums output constraints numslength numsi
merge two arrays summing values given two integer arrays nums and nums numsi idi vali indicate that number id idi has value equal vali numsi idi vali indicate that number id idi has value equal vali each array contains unique ids and sorted ascending order id merge two arrays into one array that sorted ascending order id respecting following conditions only ids that appear least one two arrays should be included resulting array each id should be included only once and its value should be sum values this id two arrays if id does not exist one two arrays then its value that array considered be return resulting array returned array must be sorted ascending order id example input nums nums output explanation resulting array contains following id value this id id value this id id value this id id value this id example input nums nums output explanation there no common ids so just include each id its value resulting list constraints numslength numslength numsilength numsjlength idi vali both arrays contain unique ids both arrays strictly ascending order id
beautiful arrangement ii given two integers and construct list answer that contains different positive integers ranging from and obeys following requirement suppose this list answer then list has exactly distinct integers return list answer if there multiple valid answers return any them example input output explanation has three different positive integers ranging from and has exactly distinct integer example input output explanation has three different positive integers ranging from and has exactly distinct integers and constraints
minimum total space wasted resizing operations currently designing dynamic array given indexed integer array nums where numsi number elements that will be array time addition given integer maximum number times can resize array any size size array time sizet must be least numst because there needs be enough space array hold all elements space wasted time defined as sizet numst and total space wasted sum space wasted across every time where numslength return minimum total space wasted if can resize array most times note array can have any size start and does not count towards number resizing operations example input nums output explanation size can set initial size be total wasted space example input nums output explanation size can set initial size be and resize time total wasted space example input nums output explanation size can set initial size resize time and resize time total wasted space constraints numslength numsi numslength
insert into binary search tree given root node binary search tree bst and value insert into tree return root node bst after insertion guaranteed that new value does not exist original bst notice that there may exist multiple valid ways insertion as long as tree remains bst after insertion can return any them example input root val output explanation another accepted tree example input root val output nullnull example input root nullnullnullnullnullnull val output constraints number nodes tree will be range nodeval all values nodeval unique val its guaranteed that val does not exist original bst
shortest unsorted continuous subarray given integer array nums need find one continuous subarray such that if only sort this subarray nondecreasing order then whole array will be sorted nondecreasing order return shortest such subarray and output its length example input nums output explanation need sort ascending order make whole array sorted ascending order example input nums output example input nums output constraints numslength numsi follow up can solve time complexity
prison cells after days there prison cells row and each cell either occupied or vacant each day whether cell occupied or vacant changes according following rules if cell has two adjacent neighbors that both occupied or both vacant then cell becomes occupied otherwise becomes vacant note that because prison row first and last cells row cant have two adjacent neighbors given integer array cells where cellsi if ith cell occupied and cellsi if ith cell vacant and given integer return state prison after days ie such changes described above example input cells output explanation following table summarizes state prison each day day day day day day day day day example input cells output constraints cellslength cellsi either or
reordered power given integer reorder digits any order including original order such that leading digit not zero return true if and only if can do this so that resulting number power two example input output true example input output false constraints
removing minimum number magic beans given array positive integers beans where each integer represents number magic beans found particular magic bag remove any number beans possibly none from each bag such that number beans each remaining nonempty bag still containing least one bean equal once bean has been removed from bag not allowed return any bags return minimum number magic beans that have remove example input beans output explanation remove bean from bag only bean this results remaining bags then remove beans from bag beans this results remaining bags then remove bean from bag beans this results remaining bags removed total beans make remaining nonempty bags have equal number beans there no other solutions that remove beans or fewer example input beans output explanation remove beans from one bags beans this results remaining bags then remove beans from other bag beans this results remaining bags then remove beans from bag beans this results remaining bags removed total beans make remaining nonempty bags have equal number beans there no other solutions that removes beans or fewer constraints beanslength beansi
minimum addition make integer beautiful given two positive integers and target integer considered beautiful if sum its digits less than or equal target return minimum nonnegative integer such that beautiful input will be generated such that always possible make beautiful example input target output explanation initially and its digit sum after adding becomes and digit sum becomes can be shown that can not make beautiful adding nonnegative integer less than example input target output explanation initially and its digit sum after adding becomes and digit sum becomes can be shown that can not make beautiful adding nonnegative integer less than example input target output explanation initially and its digit sum which already smaller than or equal target constraints target input will be generated such that always possible make beautiful
find pivot index given array integers nums calculate pivot index this array pivot index index where sum all numbers strictly left index equal sum all numbers strictly indexs right if index left edge array then left sum because there no elements left this also applies right edge array return leftmost pivot index if no such index exists return example input nums output explanation pivot index left sum nums nums nums right sum nums nums example input nums output explanation there no index that satisfies conditions problem statement example input nums output explanation pivot index left sum no elements left index right sum nums nums constraints numslength numsi note this question same as httpsleetcodecomproblemsfindthemiddleindexinarray
find maximum number marked indices given indexed integer array nums initially all indices unmarked allowed make this operation any number times pick two different unmarked indices and such that numsi numsj then mark and return maximum possible number marked indices nums using above operation any number times example input nums output explanation first operation pick and operation allowed because nums nums then mark index and can be shown that theres no other valid operation so answer example input nums output explanation first operation pick and operation allowed because nums nums then mark index and second operation pick and operation allowed because nums nums then mark index and since there no other operation answer example input nums output explanation there no valid operation do so answer constraints numslength numsi
counter ii write function createcounter should accept initial integer init should return object three functions three functions increment increases current value and then returns decrement reduces current value and then returns reset sets current value init and then returns example input init calls incrementresetdecrement output explanation const counter createcounter counterincrement counterreset counterdecrement example input init calls incrementincrementdecrementresetreset output explanation const counter createcounter counterincrement counterincrement counterdecrement counterreset counterreset constraints init total calls not exceed
first unique character string given string find first nonrepeating character and return its index if does not exist return example input leetcode output example input loveleetcode output example input aabb output constraints slength consists only lowercase english letters
longest happy string string called happy if satisfies following conditions only contains letters and does not contain any aaa bbb or ccc as substring contains most occurrences letter contains most occurrences letter contains most occurrences letter given three integers and return longest possible happy string if there multiple longest happy strings return any them if there no such string return empty string substring contiguous sequence characters within string example input output ccaccbcc explanation ccbccacc would also be correct answer example input output aabaa explanation only correct answer this case constraints
function composition given array functions fn return new function fn that function composition array functions function composition fx gx hx fnx fghx function composition empty list functions identity function fx may assume each function array accepts one integer as input and returns one integer as output example input functions output explanation evaluating from right left starting example input functions output explanation evaluating from right left example input functions output explanation composition zero functions identity function constraints functionslength all functions accept and return single integer
remove one element make array strictly increasing given indexed integer array nums return true if can be made strictly increasing after removing exactly one element or false otherwise if array already strictly increasing return true array nums strictly increasing if numsi numsi each index numslength example input nums output true explanation removing index from nums becomes strictly increasing so return true example input nums output false explanation result removing element index result removing element index result removing element index result removing element index no resulting array strictly increasing so return false example input nums output false explanation result removing any element not strictly increasing so return false constraints numslength numsi
longest substring one repeating character given indexed string also given indexed string querycharacters length and indexed array integer indices queryindices length both which used describe queries ith query updates character index queryindicesi character querycharactersi return array lengths length where lengthsi length longest substring consisting only one repeating character after ith query performed example input babacc querycharacters bcb queryindices output explanation st query updates bbbacc longest substring consisting one repeating character bbb length nd query updates bbbccc longest substring consisting one repeating character can be bbb or ccc length rd query updates bbbbcc longest substring consisting one repeating character bbbb length thus return example input abyzz querycharacters aa queryindices output explanation st query updates abazz longest substring consisting one repeating character zz length nd query updates aaazz longest substring consisting one repeating character aaa length thus return constraints slength consists lowercase english letters querycharacterslength queryindiceslength querycharacters consists lowercase english letters queryindicesi slength
immediate food delivery ii sql schema table delivery column name type deliveryid int customerid int orderdate date customerprefdeliverydate date deliveryid primary key this table table holds information about food delivery customers that make orders some date and specify preferred delivery date same order date or after if customers preferred delivery date same as order date then order called immediate otherwise called scheduled first order customer order earliest order date that customer made guaranteed that customer has precisely one first order write sql query find percentage immediate orders first orders all customers rounded decimal places query result format following example example input delivery table deliveryid customerid orderdate customerprefdeliverydate output immediatepercentage explanation customer id has first order delivery id and scheduled customer id has first order delivery id and immediate customer id has first order delivery id and scheduled customer id has first order delivery id and immediate hence half customers have immediate first orders
number zerofilled subarrays given integer array nums return number subarrays filled subarray contiguous nonempty sequence elements within array example input nums output explanation there occurrences as subarray there occurrences as subarray there no occurrence subarray size more than filled therefore return example input nums output explanation there occurrences as subarray there occurrences as subarray there occurrence as subarray there no occurrence subarray size more than filled therefore return example input nums output explanation there no subarray filled therefore return constraints numslength numsi
maximum nesting depth parentheses string valid parentheses string denoted vps if meets one following empty string or single character not equal or can be written as ab concatenated where and vpss or can be written as where vps can similarly define nesting depth depths any vps as follows depth depthc where string single character not equal or deptha maxdeptha depthb where and vpss depth deptha where vps example and vpss nesting depths and and and not vpss given vps represented as string return nesting depth example input output explanation digit inside nested parentheses string example input output constraints slength consists digits and characters and guaranteed that parentheses expression vps
design number container system design number container system that can do following insert or replace number given index system return smallest index given number system implement numbercontainers class numbercontainers initializes number container system void changeint index int number fills container index number if there already number that index replace int findint number returns smallest index given number or if there no index that filled number system example input numbercontainers find change change change change find change find output null null null null null null explanation numbercontainers nc new numbercontainers ncfind there no index that filled number therefore return ncchange your container index will be filled number ncchange your container index will be filled number ncchange your container index will be filled number ncchange your container index will be filled number ncfind number indices and since smallest index that filled return ncchange your container index will be filled number note that index filled and then replaced ncfind number indices and smallest index that filled therefore return constraints index number most calls will be made total change and find
maximal network rank there infrastructure cities some number roads connecting these cities each roadsi ai bi indicates that there bidirectional road between cities ai and bi network rank two different cities defined as total number directly connected roads either city if road directly connected both cities only counted once maximal network rank infrastructure maximum network rank all pairs different cities given integer and array roads return maximal network rank entire infrastructure example input roads output explanation network rank cities and as there roads that connected either or road between and only counted once example input roads output explanation there roads that connected cities or example input roads output explanation network rank and notice that all cities do not have be connected constraints roadslength roadsilength ai bi ai bi each pair cities has most one road connecting them
merge between linked lists given two linked lists list and list sizes and respectively remove lists nodes from ath node bth node and put list their place blue edges and nodes following figure indicate result build result list and return its head example input list list output explanation remove nodes and and put entire list their place blue edges and nodes above figure indicate result example input list list output explanation blue edges and nodes above figure indicate result constraints listlength listlength listlength
construct palindrome strings given string and integer return true if can use all characters construct palindrome strings or false otherwise example input annabelle output true explanation can construct two palindromes using all characters some possible constructions anna elble anbna elle anellena example input leetcode output false explanation impossible construct palindromes using all characters example input true output true explanation only possible solution put each character separate string constraints slength consists lowercase english letters
find target indices after sorting array given indexed integer array nums and target element target target index index such that numsi target return list target indices nums after sorting nums nondecreasing order if there no target indices return empty list returned list must be sorted increasing order example input nums target output explanation after sorting nums indices where numsi and example input nums target output explanation after sorting nums index where numsi example input nums target output explanation after sorting nums index where numsi constraints numslength numsi target
check if array pairs divisible given array integers arr even length and integer want divide array into exactly pairs such that sum each pair divisible return true if can find way do that or false otherwise example input arr output true explanation pairs and example input arr output true explanation pairs and example input arr output false explanation can try all possible pairs see that there no way divide arr into pairs each sum divisible constraints arrlength even arri
maximum alternating subsequence sum alternating sum indexed array defined as sum elements even indices minus sum elements odd indices example alternating sum given array nums return maximum alternating sum any subsequence nums after reindexing elements subsequence subsequence array new array generated from original array deleting some elements possibly none without changing remaining elements relative order example subsequence underlined elements while not example input nums output explanation optimal choose subsequence alternating sum example input nums output explanation optimal choose subsequence alternating sum example input nums output explanation optimal choose subsequence alternating sum constraints numslength numsi
powx implement powx which calculates raised power ie xn example input output example input output example input output explanation constraints integer either not zero or xn
maximum difference remapping digit given integer num know that danny mittal will sneakily remap one possible digits another digit return difference between maximum and minimum values danny can make remapping exactly one digit num notes when danny remaps digit another digit danny replaces all occurrences num danny can remap digit itself which case num does not change danny can remap different digits obtaining minimum and maximum values respectively resulting number after remapping can contain leading zeroes mentioned danny mittal congratulate him being top weekly contest example input num output explanation achieve maximum value danny can remap digit digit yield achieve minimum value danny can remap digit digit yielding difference between these two numbers example input num output explanation maximum value that can be returned function if replaced and minimum value that can be returned function if replaced thus return constraints num
projection area shapes given grid where place some cubes that axisaligned and axes each value gridij represents tower cubes placed top cell view projection these cubes onto xy yz and zx planes projection like shadow that maps our dimensional figure dimensional plane viewing shadow when looking cubes from top front and side return total area all three projections example input grid output explanation here three projections shadows shape made each axisaligned plane example input grid output example input grid output constraints gridlength gridilength gridij
day year given string date representing gregorian calendar date formatted as yyyymmdd return day number year example input date output explanation given date th day year example input date output constraints datelength date date and all other dateis digits date represents calendar date between jan st and dec th
meeting rooms iii given integer there rooms numbered from given integer array meetings where meetingsi starti endi means that meeting will be held during halfclosed time interval starti endi all values starti unique meetings allocated rooms following manner each meeting will take place unused room lowest number if there no available rooms meeting will be delayed until room becomes free delayed meeting should have same duration as original meeting when room becomes unused meetings that have earlier original start time should be given room return number room that held most meetings if there multiple rooms return room lowest number halfclosed interval interval between and including and not including example input meetings output explanation time both rooms not being used first meeting starts room time only room not being used second meeting starts room time both rooms being used third meeting delayed time both rooms being used fourth meeting delayed time meeting room finishes third meeting starts room time period time meetings both rooms finish fourth meeting starts room time period both rooms and held meetings so return example input meetings output explanation time all three rooms not being used first meeting starts room time rooms and not being used second meeting starts room time only room not being used third meeting starts room time all three rooms being used fourth meeting delayed time meeting room finishes fourth meeting starts room time period time all three rooms being used fifth meeting delayed time meetings rooms and finish fifth meeting starts room time period room held meeting while rooms and each held meetings so return constraints meetingslength meetingsilength starti endi all values starti unique
find largest value each tree row given root binary tree return array largest value each row tree indexed example input root null output example input root output constraints number nodes tree will be range nodeval
maximum number nonoverlapping substrings given string lowercase letters need find maximum number nonempty substrings that meet following conditions substrings do not overlap that any two substrings sij and sxy either or true substring that contains certain character must also contain all occurrences find maximum number substrings that meet above conditions if there multiple solutions same number substrings return one minimum total length can be shown that there exists unique solution minimum total length notice that can return substrings any order example input adefaddaccc output efccc explanation following all possible substrings that meet conditions adefaddaccc adefadda ef ccc if choose first string cannot choose anything else and wed get only if choose adefadda left ccc which only one that doesnt overlap thus obtaining substrings notice also that its not optimal choose ef since can be split into two therefore optimal way choose efccc which gives us substrings no other solution same number substrings exist example input abbaccd output dbbcc explanation notice that while set substrings dabbacc also has length its considered incorrect since has larger total length constraints slength contains only lowercase english letters
maximum number points from grid queries given integer matrix grid and array queries size find array answer size such that each integer queriesi start top left cell matrix and repeat following process if queriesi strictly greater than value current cell that then get one point if your first time visiting this cell and can move any adjacent cell all directions up down left and right otherwise do not get any points and end this process after process answeri maximum number points can get note that each query allowed visit same cell multiple times return resulting array answer example input grid queries output explanation diagrams above show which cells visit get points each query example input grid queries output explanation can not get any points because value top left cell already greater than or equal constraints gridlength gridilength querieslength gridij queriesi
friend requests ii who has most friends sql schema table requestaccepted column name type requesterid int accepterid int acceptdate date requesterid accepterid primary key this table this table contains id user who sent request id user who received request and date when request accepted write sql query find people who have most friends and most friends number test cases generated so that only one person has most friends query result format following example example input requestaccepted table requesterid accepterid acceptdate output id num explanation person id friend people and so has three friends total which most number than any others follow up real world multiple people could have same most number friends could find all these people this case
left and right sum differences given indexed integer array nums find indexed integer array answer where answerlength numslength answeri leftsumi rightsumi where leftsumi sum elements left index array nums if there no such element leftsumi rightsumi sum elements right index array nums if there no such element rightsumi return array answer example input nums output explanation array leftsum and array rightsum array answer example input nums output explanation array leftsum and array rightsum array answer constraints numslength numsi
distinct subsequences given two strings and return number distinct subsequences which equals test cases generated so that answer fits bit signed integer example input rabbbit rabbit output explanation as shown below there ways can generate rabbit from rabbbit rabbbit rabbbit example input babgbag bag output explanation as shown below there ways can generate bag from babgbag babgbag babgbag babgbag babgbag constraints slength tlength and consist english letters
permutations ii given collection numbers nums that might contain duplicates return all possible unique permutations any order example input nums output example input nums output constraints numslength numsi
cyclically rotating grid given integer matrix grid where and both even integers and integer matrix composed several layers which shown below image where each color its own layer cyclic rotation matrix done cyclically rotating each layer matrix cyclically rotate layer once each element layer will take place adjacent element counterclockwise direction example rotation shown below return matrix after applying cyclic rotations example input grid output explanation figures above represent grid every state example input grid output explanation figures above represent grid every state constraints gridlength gridilength both and even integers gridij
rearrange array elements sign given indexed integer array nums even length consisting equal number positive and negative integers should rearrange elements nums such that modified array follows given conditions every consecutive pair integers have opposite signs all integers same sign order which present nums preserved rearranged array begins positive integer return modified array after rearranging elements satisfy aforementioned conditions example input nums output explanation positive integers nums negative integers only possible way rearrange them such that satisfy all conditions other ways such as incorrect because do not satisfy one or more conditions example input nums output explanation only positive integer and only negative integer nums so nums rearranged constraints numslength numslength even numsi nums consists equal number positive and negative integers
partitioning into minimum number decibinary numbers decimal number called decibinary if each its digits either or without any leading zeros example and decibinary while and not given string that represents positive decimal integer return minimum number positive decibinary numbers needed so that sum up example input output explanation example input output example input output constraints nlength consists only digits does not contain any leading zeros and represents positive integer
jump game given integer array nums initially positioned arrays first index and each element array represents your maximum jump length that position return true if can reach last index or false otherwise example input nums output true explanation jump step from index then steps last index example input nums output false explanation will always arrive index no matter what its maximum jump length which makes impossible reach last index constraints numslength numsi
concatenation consecutive binary numbers given integer return decimal value binary string formed concatenating binary representations order modulo example input output explanation binary corresponds decimal value example input output explanation binary and corresponds and after concatenating them have which corresponds decimal value example input output explanation concatenation results decimal value that after modulo result constraints
find maximum divisibility score given two indexed integer arrays nums and divisors divisibility score divisorsi number indices such that numsj divisible divisorsi return integer divisorsi maximum divisibility score if there more than one integer maximum score return minimum them example input nums divisors output explanation divisibility score every element divisors divisibility score divisors since no number nums divisible divisibility score divisors since nums divisible divisibility score divisors since nums nums and nums divisible since divisors has maximum divisibility score return example input nums divisors output explanation divisibility score every element divisors divisibility score divisors since nums and nums divisible divisibility score divisors since nums and nums divisible divisibility score divisors since nums and nums divisible since divisors divisors and divisors all have maximum divisibility score return minimum them ie divisors example input nums divisors output explanation divisibility score every element divisors divisibility score divisors since no number nums divisible divisibility score divisors since no number nums divisible since divisors and divisors both have maximum divisibility score return minimum them ie divisors constraints numslength divisorslength numsi divisorsi
difference between maximum and minimum price sum there exists undirected and initially unrooted tree nodes indexed from given integer and integer array edges length where edgesi ai bi indicates that there edge between nodes ai and bi tree each node has associated price given integer array price where pricei price ith node price sum given path sum prices all nodes lying that path tree can be rooted any node root your choice incurred cost after choosing root difference between maximum and minimum price sum amongst all paths starting root return maximum possible cost amongst all possible root choices example input edges price output explanation diagram above denotes tree after rooting node first part colored red shows path maximum price sum second part colored blue shows path minimum price sum first path contains nodes prices and sum prices second path contains node price difference between maximum and minimum price sum can be proved that maximum cost example input edges price output explanation diagram above denotes tree after rooting node first part colored red shows path maximum price sum second part colored blue shows path minimum price sum first path contains nodes prices and sum prices second path contains node price difference between maximum and minimum price sum can be proved that maximum cost constraints edgeslength ai bi edges represents valid tree pricelength pricei
count servers that communicate given map server center represented as integer matrix grid where means that that cell there server and means that no server two servers said communicate if same row or same column return number servers that communicate any other server example input grid output explanation no servers can communicate others example input grid output explanation all three servers can communicate least one other server example input grid output explanation two servers first row can communicate each other two servers third column can communicate each other server right bottom corner cant communicate any other server constraints gridlength gridilength gridij or
count largest group given integer each number from grouped according sum its digits return number groups that have largest size example input output explanation there groups total grouped according sum its digits numbers from there groups largest size example input output explanation there groups size constraints
check if all integers range covered given integer array ranges and two integers left and right each rangesi starti endi represents inclusive interval between starti and endi return true if each integer inclusive range left right covered least one interval ranges return false otherwise integer covered interval rangesi starti endi if starti endi example input ranges left right output true explanation every integer between and covered covered first range and covered second range covered third range example input ranges left right output false explanation not covered any range constraints rangeslength starti endi left right
second minimum time reach destination city represented as bidirectional connected graph vertices where each vertex labeled from inclusive edges graph represented as integer array edges where each edgesi ui vi denotes bidirectional edge between vertex ui and vertex vi every vertex pair connected most one edge and no vertex has edge itself time taken traverse any edge time minutes each vertex has traffic signal which changes its color from green red and vice versa every change minutes all signals change same time can enter vertex any time but can leave vertex only when signal green cannot wait vertex if signal green second minimum value defined as smallest value strictly larger than minimum value example second minimum value and second minimum value given edges time and change return second minimum time will take go from vertex vertex notes can go through any vertex any number times including and can assume that when journey starts all signals have just turned green example input edges time change output explanation figure left shows given graph blue path figure right minimum time path time taken start time elapsed minutes time elapsed minutes time elapsed hence minimum time needed minutes red path shows path get second minimum time start time elapsed minutes time elapsed minutes time elapsed wait minutes time elapsed minutes time elapsed hence second minimum time minutes example input edges time change output explanation minimum time path time minutes second minimum time path time minutes constraints edgeslength min edgesilength ui vi ui vi there no duplicate edges each vertex can be reached directly or indirectly from every other vertex time change
shortest palindrome given string can convert palindrome adding characters front return shortest palindrome can find performing this transformation example input aacecaaa output aaacecaaa example input abcd output dcbabcd constraints slength consists lowercase english letters only
maximum sum nonoverlapping subarrays given integer array nums and integer find three nonoverlapping subarrays length maximum sum and return them return result as list indices representing starting position each interval indexed if there multiple answers return lexicographically smallest one example input nums output explanation subarrays correspond starting indices could have also taken but answer would be lexicographically larger example input nums output constraints numslength numsi floornumslength
group write code that enhances all arrays such that can call arraygroupbyfn method any array and will return grouped version array grouped array object where each key output fnarri and each value array containing all items original array that key provided callback fn will accept item array and return string key order each value list should be order items appear array any order keys acceptable please solve without lodashs groupby function example input array id id id fn function item return itemid output id id id explanation output from arraygroupbyfn selector function gets id out each item array there two objects id both those objects put first array there one object id that object put second array example input array fn function list return stringlist output explanation array can be any type this case selector function defines key as being first element array all arrays have as their first element so grouped together example input array fn function return stringn output true false explanation selector function splits array whether each number greater than constraints arraylength fn returns string
remove duplicate letters given string remove duplicate letters so that every letter appears once and only once must make sure your result smallest lexicographical order among all possible results example input bcabc output abc example input cbacdcbc output acdb constraints slength consists lowercase english letters note this question same as httpsleetcodecomproblemssmallestsubsequenceofdistinctcharacters
special array elements greater than or equal given array nums nonnegative integers nums considered special if there exists number such that there exactly numbers nums that greater than or equal notice that does not have be element nums return if array special otherwise return can be proven that if nums special value unique example input nums output explanation there values and that greater than or equal example input nums output explanation no numbers fit criteria if there should be numbers but there if there should be number but there if there should be numbers but there cannot be greater since there only numbers nums example input nums output explanation there values that greater than or equal constraints numslength numsi
bus routes given array routes representing bus routes where routesi bus route that ith bus repeats forever example if routes this means that th bus travels sequence forever will start bus stop source not any bus initially and want go bus stop target can travel between bus stops buses only return least number buses must take travel from source target return if not possible example input routes source target output explanation best strategy take first bus bus stop then take second bus bus stop example input routes source target output constraints routeslength routesilength all values routesi unique sumroutesilength routesij source target
maximum subarray given integer array nums find subarray largest sum and return its sum example input nums output explanation subarray has largest sum example input nums output explanation subarray has largest sum example input nums output explanation subarray has largest sum constraints numslength numsi follow up if have figured out solution try coding another solution using divide and conquer approach which more subtle
sum nodes evenvalued grandparent given root binary tree return sum values nodes evenvalued grandparent if there no nodes evenvalued grandparent return grandparent node parent its parent if exists example input root nullnullnullnull output explanation red nodes nodes evenvalue grandparent while blue nodes evenvalue grandparents example input root output constraints number nodes tree range nodeval
three equal parts given array arr which consists only zeros and ones divide array into three nonempty parts such that all these parts represent same binary value if possible return any such that arr arr arri first part arri arri arrj second part and arrj arrj arrarrlength third part all three parts have equal binary values if not possible return note that entire part used when considering what binary value represents example represents decimal not also leading zeros allowed so and represent same value example input arr output example input arr output example input arr output constraints arrlength arri or
permutation string given two strings and return true if contains permutation or false otherwise other words return true if one ss permutations substring example input ab eidbaooo output true explanation contains one permutation ba example input ab eidboaoo output false constraints slength slength and consist lowercase english letters
maximum points archery competition alice and bob opponents archery competition competition has set following rules alice first shoots numarrows arrows and then bob shoots numarrows arrows points then calculated as follows target has integer scoring sections ranging from inclusive each section target score between say alice and bob have shot ak and bk arrows that section respectively if ak bk then alice takes points if ak bk then bob takes points however if ak bk then nobody takes points example if alice and bob both shot arrows section score then alice takes points other hand if alice shot arrows section score and bob shot arrows that same section then bob takes points given integer numarrows and integer array alicearrows size which represents number arrows alice shot each scoring section from now bob wants maximize total number points can obtain return array bobarrows which represents number arrows bob shot each scoring section from sum values bobarrows should equal numarrows if there multiple ways bob earn maximum total points return any one them example input numarrows alicearrows output explanation table above shows how competition scored bob earns total point can be shown that bob cannot obtain score higher than points example input numarrows alicearrows output explanation table above shows how competition scored bob earns total point can be shown that bob cannot obtain score higher than points constraints numarrows alicearrowslength bobarrowslength alicearrowsi bobarrowsi numarrows sumalicearrowsi numarrows
sum floored pairs given integer array nums return sum floornumsi numsj all pairs indices numslength array since answer may be too large return modulo floor function returns integer part division example input nums output explanation floor floor floor floor floor floor floor floor floor calculate floor division every pair indices array then sum them up example input nums output constraints numslength numsi
remove all occurrences substring given two strings and part perform following operation until all occurrences substring part removed find leftmost occurrence substring part and remove from return after removing all occurrences part substring contiguous sequence characters string example input daabcbaabcbc part abc output dab explanation following operations done daabcbaabcbc remove abc starting index so dabaabcbc dabaabcbc remove abc starting index so dababc dababc remove abc starting index so dab now has no occurrences abc example input axxxxyyyyb part xy output ab explanation following operations done axxxxyyyyb remove xy starting index so axxxyyyb axxxyyyb remove xy starting index so axxyyb axxyyb remove xy starting index so axyb axyb remove xy starting index so ab now has no occurrences xy constraints slength partlength and part consists lowercase english letters
find kth smallest pair distance distance pair integers and defined as absolute difference between and given integer array nums and integer return kth smallest distance among all pairs numsi and numsj where numslength example input nums output explanation here all pairs then st smallest distance pair and its distance example input nums output example input nums output constraints numslength numsi
matrix given binary matrix mat return distance nearest each cell distance between two adjacent cells example input mat output example input mat output constraints matlength matilength matij either or there least one mat
my calendar iii kbooking happens when events have some nonempty intersection ie there some time that common all events given some events starttime endtime after each given event return integer representing maximum kbooking between all previous events implement mycalendarthree class mycalendarthree initializes object int bookint starttime int endtime returns integer representing largest integer such that there exists kbooking calendar example input mycalendarthree book book book book book book output null explanation mycalendarthree mycalendarthree new mycalendarthree mycalendarthreebook return mycalendarthreebook return mycalendarthreebook return mycalendarthreebook return mycalendarthreebook return mycalendarthreebook return constraints starttime endtime most calls will be made book
minimum reverse operations given integer and integer range representing indexed array arr length where all positions set except position which set also given integer array banned containing some positions from array ith position banned arrbannedi and bannedi can perform multiple operations arr operation can choose subarray size and reverse subarray however arr should never go any positions banned other words after each operation arrbannedi remains return array ans where each from ansi minimum number reverse operations needed bring position arr or if impossible subarray contiguous nonempty sequence elements within array values ansi independent all reverse array array containing values reverse order example input banned output explanation this case so there only one possible reverse operation can perform which reversing whole array initially placed position so amount operations need position can never place banned positions so answer positions and finally one reverse operation can bring index so answer position example input banned output explanation this case initially position so answer that position can perform reverse operations size currently located position so need reverse subarray leave that position but reversing that subarray makes position have which shouldnt happen so cant move from position making result all other positions example input banned output explanation this case can only perform reverse operations size so never changes its position constraints bannedlength bannedi bannedi all values banned unique
removing minimum and maximum from array given indexed array distinct integers nums there element nums that has lowest value and element that has highest value call them minimum and maximum respectively your goal remove both these elements from array deletion defined as either removing element from front array or removing element from back array return minimum number deletions would take remove both minimum and maximum element from array example input nums output explanation minimum element array nums which maximum element array nums which can remove both minimum and maximum removing elements from front and elements from back this results deletions which minimum number possible example input nums output explanation minimum element array nums which maximum element array nums which can remove both minimum and maximum removing elements from front this results only deletions which minimum number possible example input nums output explanation there only one element array which makes both minimum and maximum element can remove deletion constraints numslength numsi integers nums distinct
deepest leaves sum given root binary tree return sum values its deepest leaves example input root nullnullnullnullnull output example input root nullnullnullnull output constraints number nodes tree range nodeval
multiply strings given two nonnegative integers num and num represented as strings return product num and num also represented as string note must not use any builtin biginteger library or convert inputs integer directly example input num num output example input num num output constraints numlength numlength num and num consist digits only both num and num do not contain any leading zero except number itself
making file names unique given array strings names size will create folders your file system such that ith minute will create folder name namesi since two files cannot have same name if enter folder name that previously used system will have suffix addition its name form where smallest positive integer such that obtained name remains unique return array strings length where ansi actual name system will assign ith folder when create example input names pesfifagtapes output pesfifagtapes explanation lets see how file system creates folder names pes not assigned before remains pes fifa not assigned before remains fifa gta not assigned before remains gta pes not assigned before remains pes example input names gtagtagtaavalon output gtagtagtaavalon explanation lets see how file system creates folder names gta not assigned before remains gta gta not assigned before remains gta gta name reserved system adds since gta also reserved systems put becomes gta avalon not assigned before remains avalon example input names onepieceonepieceonepieceonepieceonepiece output onepieceonepieceonepieceonepieceonepiece explanation when last folder created smallest positive valid and becomes onepiece constraints nameslength namesilength namesi consists lowercase english letters digits andor round brackets
peak index mountain array array arr mountain if following properties hold arrlength there exists some arrlength such that arr arr arri arri arri arri arrarrlength given mountain array arr return index such that arr arr arri arri arri arrarrlength must solve ologarrlength time complexity example input arr output example input arr output example input arr output constraints arrlength arri arr guaranteed be mountain array
longest subarray after deleting one element given binary array nums should delete one element from return size longest nonempty subarray containing only resulting array return if there no such subarray example input nums output explanation after deleting number position contains numbers value example input nums output explanation after deleting number position longest subarray value example input nums output explanation must delete one element constraints numslength numsi either or
take each character from left and right given string consisting characters and and nonnegative integer each minute may take either leftmost character or rightmost character return minimum number minutes needed take least each character or return if not possible take each character example input aabaaaacaabc output explanation take three characters from left now have two characters and one character take five characters from right now have four characters two characters and two characters total minutes needed can be proven that minimum number minutes needed example input output explanation not possible take one or so return constraints slength consists only letters and slength
reverse words string iii given string reverse order characters each word within sentence while still preserving whitespace and initial word order example input lets take leetcode contest output stel ekat edocteel tsetnoc example input god ding output dog gnid constraints slength contains printable ascii characters does not contain any leading or trailing spaces there least one word all words separated single space
shortest subarray sum least given integer array nums and integer return length shortest nonempty subarray nums sum least if there no such subarray return subarray contiguous part array example input nums output example input nums output example input nums output constraints numslength numsi
reverse string ii given string and integer reverse first characters every characters counting from start string if there fewer than characters left reverse all them if there less than but greater than or equal characters then reverse first characters and leave other as original example input abcdefg output bacdfeg example input abcd output bacd constraints slength consists only lowercase english letters
capacity ship packages within days conveyor belt has packages that must be shipped from one port another within days days ith package conveyor belt has weight weightsi each day load ship packages conveyor belt order given weights may not load more weight than maximum weight capacity ship return least weight capacity ship that will result all packages conveyor belt being shipped within days days example input weights days output explanation ship capacity minimum ship all packages days like this st day nd day rd day th day th day note that cargo must be shipped order given so using ship capacity and splitting packages into parts like not allowed example input weights days output explanation ship capacity minimum ship all packages days like this st day nd day rd day example input weights days output explanation st day nd day rd day th day constraints days weightslength weightsi
sum numbers units digit given two integers num and consider set positive integers following properties units digit each integer sum integers num return minimum possible size such set or if no such set exists note set can contain multiple instances same integer and sum empty set considered units digit number rightmost digit number example input num output explanation one valid set as sum and each integer has units digit another valid set can be shown that minimum possible size valid set example input num output explanation not possible obtain sum using only integers that have units digit example input num output explanation sum empty set considered constraints num
count number ideal arrays given two integers and maxvalue which used describe ideal array indexed integer array arr length considered ideal if following conditions hold every arri value from maxvalue every arri divisible arri return number distinct ideal arrays length since answer may be very large return modulo example input maxvalue output explanation following possible ideal arrays arrays starting value arrays arrays starting value arrays arrays starting value array arrays starting value array arrays starting value array there total distinct ideal arrays example input maxvalue output explanation following possible ideal arrays arrays starting value arrays no other distinct values array nd distinct value arrays nd distinct value arrays arrays starting value array arrays starting value array there total distinct ideal arrays constraints maxvalue
binary number alternating bits given positive integer check whether has alternating bits namely if two adjacent bits will always have different values example input output true explanation binary representation example input output false explanation binary representation example input output false explanation binary representation constraints
all nodes distance binary tree given root binary tree value target node target and integer return array values all nodes that have distance from target node can return answer any order example input root nullnull target output explanation nodes that distance from target node value have values and example input root target output constraints number nodes tree range nodeval all values nodeval unique target value one nodes tree
numbers most given digit set given array digits which sorted nondecreasing order can write numbers using each digitsi as many times as want example if digits may write numbers such as and return number positive integers that can be generated that less than or equal given integer example input digits output explanation numbers that can be written example input digits output explanation can write one digit numbers two digit numbers three digit numbers four digit numbers five digit numbers six digit numbers seven digit numbers eight digit numbers and nine digit numbers total this integers that can be written using digits array example input digits output constraints digitslength digitsilength digitsi digit from all values digits unique digits sorted nondecreasing order
process restricted friend requests given integer indicating number people network each person labeled from also given indexed integer array restrictions where restrictionsi xi yi means that person xi and person yi cannot become friends either directly or indirectly through other people initially no one friends each other given list friend requests as indexed integer array requests where requestsj uj vj friend request between person uj and person vj friend request successful if uj and vj can be friends each friend request processed given order ie requestsj occurs before requestsj and upon successful request uj and vj become direct friends all future friend requests return boolean array result where each resultj true if jth friend request successful or false if not note if uj and vj already direct friends request still successful example input restrictions requests output truefalse explanation request person and person can be friends so become direct friends request person and person cannot be friends since person and person would be indirect friends example input restrictions requests output truefalse explanation request person and person can be friends so become direct friends request person and person cannot be friends since person and person would be indirect friends example input restrictions requests output truefalsetruefalse explanation request person and person can be friends so become direct friends request person and person cannot be friends since directly restricted request person and person can be friends so become direct friends request person and person cannot be friends since person and person would be indirect friends constraints restrictionslength restrictionsilength xi yi xi yi requestslength requestsjlength uj vj uj vj
egg drop eggs and floors given two identical eggs and have access building floors labeled from know that there exists floor where such that any egg dropped floor higher than will break and any egg dropped or below floor will not break each move may take unbroken egg and drop from any floor where if egg breaks can no longer use however if egg does not break may reuse future moves return minimum number moves that need determine certainty what value example input output explanation can drop first egg from floor and second egg from floor if first egg breaks know that if second egg breaks but first egg didnt know that otherwise if both eggs survive know that example input output explanation one optimal strategy drop st egg floor if breaks know between and drop nd egg starting from floor and going up one time find within more drops total drops if st egg does not break drop st egg again floor if breaks know between and drop nd egg starting from floor and going up one time find within more drops total drops if st egg does not break again follow similar process dropping st egg from floors and regardless outcome takes most drops determine constraints
minimum cost move chips same position have chips where position ith chip positioni need move all chips same position one step can change position ith chip from positioni positioni or positioni cost positioni or positioni cost return minimum cost needed move all chips same position example input position output explanation first step move chip position position cost second step move chip position position cost total cost example input position output explanation can move two chips position position each move has cost total cost example input position output constraints positionlength positioni
reverse linked list ii given head singly linked list and two integers left and right where left right reverse nodes list from position left position right and return reversed list example input head left right output example input head left right output constraints number nodes list nodeval left right follow up could do one pass
rotate list given head linked list rotate list right places example input head output example input head output constraints number nodes list range nodeval
word search given grid characters board and string word return true if word exists grid word can be constructed from letters sequentially adjacent cells where adjacent cells horizontally or vertically neighboring same letter cell may not be used more than once example input board abcesfcsadee word abcced output true example input board abcesfcsadee word see output true example input board abcesfcsadee word abcb output false constraints boardlength boardilength wordlength board and word consists only lowercase and uppercase english letters follow up could use search pruning make your solution faster larger board
binary search given array integers nums which sorted ascending order and integer target write function search target nums if target exists then return its index otherwise return must write algorithm olog runtime complexity example input nums target output explanation exists nums and its index example input nums target output explanation does not exist nums so return constraints numslength numsi target all integers nums unique nums sorted ascending order
decode ways ii message containing letters from az can be encoded into numbers using following mapping decode encoded message all digits must be grouped then mapped back into letters using reverse mapping above there may be multiple ways example can be mapped into aajf grouping kjf grouping note that grouping invalid because cannot be mapped into since different from addition mapping above encoded message may contain character which can represent any digit from excluded example encoded message may represent any encoded messages or decoding equivalent decoding any encoded messages can represent given string consisting digits and characters return number ways decode since answer may be very large return modulo example input output explanation encoded message can represent any encoded messages or each these can be decoded strings and respectively hence there total ways decode example input output explanation encoded message can represent any encoded messages or each these encoded messages have ways be decoded eg can be decoded aa or hence there total ways decode example input output explanation encoded message can represent any encoded messages or and have ways being decoded but and only have way hence there total ways decode constraints slength si digit or
number matching subsequences given string and array strings words return number wordsi that subsequence subsequence string new string generated from original string some characters can be none deleted without changing relative order remaining characters example ace subsequence abcde example input abcde words abbacdace output explanation there three strings words that subsequence acd ace example input dsahjpjauf words ahjpjaujaahbwzgqnuktnmlanowax output constraints slength wordslength wordsilength and wordsi consist only lowercase english letters
expression add operators given string num that contains only digits and integer target return all possibilities insert binary operators andor between digits num so that resultant expression evaluates target value note that operands returned expressions should not contain leading zeros example input num target output explanation both and evaluate example input num target output explanation both and evaluate example input num target output explanation there no expressions that can be created from evaluate constraints numlength num consists only digits target
count number nice subarrays given array integers nums and integer continuous subarray called nice if there odd numbers return number nice subarrays example input nums output explanation only subarrays odd numbers and example input nums output explanation there no odd numbers array example input nums output constraints numslength numsi numslength
count nice pairs array given array nums that consists nonnegative integers let us define revx as reverse nonnegative integer example rev and rev pair indices nice if satisfies all following conditions numslength numsi revnumsj numsj revnumsi return number nice pairs indices since that number can be too large return modulo example input nums output explanation two pairs rev rev rev rev example input nums output constraints numslength numsi
word break ii given string and dictionary strings worddict add spaces construct sentence where each word valid dictionary word return all such possible sentences any order note that same word dictionary may be reused multiple times segmentation example input catsanddog worddict catcatsandsanddog output cats and dogcat sand dog example input pineapplepenapple worddict applepenapplepenpinepineapple output pine apple pen applepineapple pen applepine applepen apple explanation note that allowed reuse dictionary word example input catsandog worddict catsdogsandandcat output constraints slength worddictlength worddictilength and worddicti consist only lowercase english letters all strings worddict unique input generated way that length answer doesnt exceed
prime palindrome given integer return smallest prime palindrome greater than or equal integer prime if has exactly two divisors and itself note that not prime number example and all primes integer palindrome if reads same from left right as does from right left example and palindromes test cases generated so that answer always exists and range example input output example input output example input output constraints
second highest salary sql schema table employee column name type id int salary int id primary key column this table each row this table contains information about salary employee write sql query report second highest salary from employee table if there no second highest salary query should report null query result format following example example input employee table id salary output secondhighestsalary example input employee table id salary output secondhighestsalary null
removing stars from string given string which contains stars one operation can choose star remove closest nonstar character its left as well as remove star itself return string after all stars have been removed note input will be generated such that operation always possible can be shown that resulting string will always be unique example input leetcode output lecoe explanation performing removals from left right closest character st star leetcode becomes leecode closest character nd star leecode becomes lecode closest character rd star lecode becomes lecoe there no more stars so return lecoe example input erase output explanation entire string removed so return empty string constraints slength consists lowercase english letters and stars operation above can be performed
find punishment number integer given positive integer return punishment number punishment number defined as sum squares all integers such that decimal representation can be partitioned into contiguous substrings such that sum integer values these substrings equals example input output explanation there exactly integers that satisfy conditions statement since since and can be partitioned into since and can be partitioned into hence punishment number example input output explanation there exactly integers that satisfy conditions statement since since and can be partitioned into since and can be partitioned into since and can be partitioned into hence punishment number constraints
maximum total beauty gardens alice caretaker gardens and wants plant flowers maximize total beauty all her gardens given indexed integer array flowers size where flowersi number flowers already planted ith garden flowers that already planted cannot be removed then given another integer newflowers which maximum number flowers that alice can additionally plant also given integers target full and partial garden considered complete if has least target flowers total beauty gardens then determined as sum following number complete gardens multiplied full minimum number flowers any incomplete gardens multiplied partial if there no incomplete gardens then this value will be return maximum total beauty that alice can obtain after planting most newflowers flowers example input flowers newflowers target full partial output explanation alice can plant flowers th garden flowers st garden flower nd garden flower rd garden gardens will then be planted total flowers there garden that complete minimum number flowers incomplete gardens thus total beauty no other way planting flowers can obtain total beauty higher than example input flowers newflowers target full partial output explanation alice can plant flowers th garden flowers st garden flowers nd garden flowers rd garden gardens will then be planted total flowers there gardens that complete minimum number flowers incomplete gardens thus total beauty no other way planting flowers can obtain total beauty higher than note that alice could make all gardens complete but this case would obtain lower total beauty constraints flowerslength flowersi target newflowers full partial
rectangle area given coordinates two rectilinear rectangles plane return total area covered two rectangles first rectangle defined its bottomleft corner ax ay and its topright corner ax ay second rectangle defined its bottomleft corner bx and its topright corner bx example input ax ay ax ay bx bx output example input ax ay ax ay bx bx output constraints ax ax ay ay bx bx
employee bonus sql schema table employee column name type empid int name varchar supervisor int salary int empid primary key column this table each row this table indicates name and id employee addition their salary and id their manager table bonus column name type empid int bonus int empid primary key column this table empid foreign key empid from employee table each row this table contains id employee and their respective bonus write sql query report name and bonus amount each employee bonus less than return result table any order query result format following example example input employee table empid name supervisor salary brad null john dan thomas bonus table empid bonus output name bonus brad null john null dan
sum all subset xor totals xor total array defined as bitwise xor all its elements or if array empty example xor total array xor xor given array nums return sum all xor totals every subset nums note subsets same elements should be counted multiple times array subset array if can be obtained from deleting some possibly zero elements example input nums output explanation subsets empty subset has xor total has xor total has xor total has xor total xor example input nums output explanation subsets empty subset has xor total has xor total has xor total has xor total has xor total xor has xor total xor has xor total xor has xor total xor xor example input nums output explanation sum all xor totals every subset constraints numslength numsi
minimum length string after deleting similar ends given string consisting only characters and asked apply following algorithm string any number times pick nonempty prefix from string where all characters prefix equal pick nonempty suffix from string where all characters this suffix equal prefix and suffix should not intersect any index characters from prefix and suffix must be same delete both prefix and suffix return minimum length after performing above operation any number times possibly zero times example input ca output explanation cant remove any characters so string stays as example input cabaabac output explanation optimal sequence operations take prefix and suffix and remove them abaaba take prefix and suffix and remove them baab take prefix and suffix and remove them aa take prefix and suffix and remove them example input aabccabba output explanation optimal sequence operations take prefix aa and suffix and remove them bccabb take prefix and suffix bb and remove them cca constraints slength only consists characters and
compare version numbers given two version numbers version and version compare them version numbers consist one or more revisions joined dot each revision consists digits and may contain leading zeros every revision contains least one character revisions indexed from left right leftmost revision being revision next revision being revision and so example and valid version numbers compare version numbers compare their revisions lefttoright order revisions compared using their integer value ignoring any leading zeros this means that revisions and considered equal if version number does not specify revision index then treat revision as example version less than version because their revision same but their revision and respectively and return following if version version return if version version return otherwise return example input version version output explanation ignoring leading zeroes both and represent same integer example input version version output explanation version does not specify revision which means treated as example input version version output explanation versions revision while versions revision so version version constraints versionlength versionlength version and version only contain digits and version and version valid version numbers all given revisions version and version can be stored bit integer
bulb switcher there bulbs that initially off first turn all bulbs then turn off every second bulb third round toggle every third bulb turning if its off or turning off if its ith round toggle every bulb nth round only toggle last bulb return number bulbs that after rounds example input output explanation first three bulbs off off off after first round three bulbs after second round three bulbs off after third round three bulbs off off so should return because there only one bulb example input output example input output constraints
check if word equals summation two words letter value letter its position alphabet starting from ie etc numerical value some string lowercase english letters concatenation letter values each letter which then converted into integer example if acb concatenate each letters letter value resulting after converting get given three strings firstword secondword and targetword each consisting lowercase english letters through inclusive return true if summation numerical values firstword and secondword equals numerical value targetword or false otherwise example input firstword acb secondword cba targetword cdb output true explanation numerical value firstword acb numerical value secondword cba numerical value targetword cdb return true because example input firstword aaa secondword targetword aab output false explanation numerical value firstword aaa numerical value secondword numerical value targetword aab return false because example input firstword aaa secondword targetword aaaa output true explanation numerical value firstword aaa numerical value secondword numerical value targetword aaaa return true because constraints firstwordlength secondwordlength targetwordlength firstword secondword and targetword consist lowercase english letters from inclusive
remove covered intervals given array intervals where intervalsi li ri represent interval li ri remove all intervals that covered another interval list interval covered interval if and only if and return number remaining intervals example input intervals output explanation interval covered therefore removed example input intervals output constraints intervalslength intervalsilength li ri all given intervals unique
nondecreasing subsequences given integer array nums return all different possible nondecreasing subsequences given array least two elements may return answer any order example input nums output example input nums output constraints numslength numsi
largest palindrome product given integer return largest palindromic integer that can be represented as product two ndigits integers since answer can be very large return modulo example input output explanation example input output constraints
next greater node linked list given head linked list nodes each node list find value next greater node that each node find value first node that next and has strictly larger value than return integer array answer where answeri value next greater node ith node indexed if ith node does not have next greater node set answeri example input head output example input head output constraints number nodes list nodeval
sort colors given array nums objects colored red white or blue sort them inplace so that objects same color adjacent colors order red white and blue will use integers and represent color red white and blue respectively must solve this problem without using librarys sort function example input nums output example input nums output constraints numslength numsi either or follow up could come up onepass algorithm using only constant extra space
best time buy and sell stock transaction fee given array prices where pricesi price given stock ith day and integer fee representing transaction fee find maximum profit can achieve may complete as many transactions as like but need pay transaction fee each transaction note may not engage multiple transactions simultaneously ie must sell stock before buy again example input prices fee output explanation maximum profit can be achieved buying prices selling prices buying prices selling prices total profit example input prices fee output constraints priceslength pricesi fee
maximum number fish grid given indexed matrix grid size where represents land cell if gridrc or water cell containing gridrc fish if gridrc fisher can start any water cell and can do following operations any number times catch all fish cell or move any adjacent water cell return maximum number fish fisher can catch if chooses his starting cell optimally or if no water cell exists adjacent cell cell one cells or if exists example input grid output explanation fisher can start cell and collect fish then move cell and collect fish example input grid output explanation fisher can start cells or and collect single fish constraints gridlength gridilength gridij
reformat date given date string form day month year where day set st nd rd th th st month set jan feb mar apr may jun jul aug sep oct nov dec year range convert date string format yyyymmdd where yyyy denotes digit year mm denotes digit month dd denotes digit day example input date th oct output example input date th jun output example input date th may output constraints given dates guaranteed be valid so no error handling necessary
count negative numbers sorted matrix given matrix grid which sorted nonincreasing order both rowwise and columnwise return number negative numbers grid example input grid output explanation there negatives number matrix example input grid output constraints gridlength gridilength gridij follow up could find solution
find all good strings given strings and size and string evil return number good strings good string has size alphabetically greater than or equal alphabetically smaller than or equal and does not contain string evil as substring since answer can be huge number return this modulo example input aa da evil output explanation there good strings starting aaacadaz then there good strings starting cacccdcz and finally there one good string starting da example input leetcode leetgoes evil leet output explanation all strings greater than or equal and smaller than or equal start prefix leet therefore there not any good string example input gx gz evil output constraints slength slength evillength all strings consist lowercase english letters
minimum string length after removing substrings given string consisting only uppercase english letters can apply some operations this string where one operation can remove any occurrence one substrings ab or cd from return minimum possible length resulting string that can obtain note that string concatenates after removing substring and could produce new ab or cd substrings example input abfcacdb output explanation can do following operations remove substring abfcacdb so fcacdb remove substring fcacdb so fcab remove substring fcab so fc so resulting length string can be shown that minimum length that can obtain example input acbbd output explanation cannot do any operations string so length remains same constraints slength consists only uppercase english letters
cut off trees golf event asked cut off all trees forest golf event forest represented as matrix this matrix means cell cannot be walked through represents empty cell that can be walked through number greater than represents tree cell that can be walked through and this number trees height one step can walk any four directions north east south and west if standing cell tree can choose whether cut off must cut off trees order from shortest tallest when cut off tree value its cell becomes empty cell starting from point return minimum steps need walk cut off all trees if cannot cut off all trees return note input generated such that no two trees have same height and there least one tree needs be cut off example input forest output explanation following path above allows cut off trees from shortest tallest steps example input forest output explanation trees bottom row cannot be accessed as middle row blocked example input forest output explanation can follow same path as example cut off all trees note that can cut off first tree before making any steps constraints forestlength forestilength forestij heights all trees distinct
maximum xor element from array given array nums consisting nonnegative integers also given queries array where queriesi xi mi answer ith query maximum bitwise xor value xi and any element nums that does not exceed mi other words answer maxnumsj xor xi all such that numsj mi if all elements nums larger than mi then answer return integer array answer where answerlength querieslength and answeri answer ith query example input nums queries output explanation and only two integers not greater than xor and xor larger two xor xor example input nums queries output constraints numslength querieslength queriesilength numsj xi mi
get maximum score given two sorted arrays distinct integers nums and nums valid path defined as follows choose array nums or nums traverse from index traverse current array from left right if reading any value that present nums and nums allowed change your path other array only one repeated value considered valid path score defined as sum uniques values valid path return maximum score can obtain all possible valid paths since answer may be too large return modulo example input nums nums output explanation valid paths starting from nums starting from nums maximum obtained path green example input nums nums output explanation maximum sum obtained path example input nums nums output explanation there no common elements between nums and nums maximum sum obtained path constraints numslength numslength numsi numsi nums and nums strictly increasing
minimum distance target element given integer array nums indexed and two integers target and start find index such that numsi target and absi start minimized note that absx absolute value return absi start guaranteed that target exists nums example input nums target start output explanation nums only value equal target so answer abs example input nums target start output explanation nums only value equal target so answer abs example input nums target start output explanation every value nums but nums minimizes absi start which abs constraints numslength numsi start numslength target nums
intersection two linked lists given heads two singly linkedlists heada and headb return node which two lists intersect if two linked lists have no intersection all return null example following two linked lists begin intersect node test cases generated such that there no cycles anywhere entire linked structure note that linked lists must retain their original structure after function returns custom judge inputs judge given as follows your program not given these inputs intersectval value node where intersection occurs this if there no intersected node lista first linked list listb second linked list skipa number nodes skip ahead lista starting from head get intersected node skipb number nodes skip ahead listb starting from head get intersected node judge will then create linked structure based these inputs and pass two heads heada and headb your program if correctly return intersected node then your solution will be accepted example input intersectval lista listb skipa skipb output intersected explanation intersected nodes value note that this must not be if two lists intersect from head reads as from head reads as there nodes before intersected node there nodes before intersected node note that intersected nodes value not because nodes value and nd node and rd node different node references other words point two different locations memory while nodes value and rd node and th node point same location memory example input intersectval lista listb skipa skipb output intersected explanation intersected nodes value note that this must not be if two lists intersect from head reads as from head reads as there nodes before intersected node there node before intersected node example input intersectval lista listb skipa skipb output no intersection explanation from head reads as from head reads as since two lists do not intersect intersectval must be while skipa and skipb can be arbitrary values explanation two lists do not intersect so return null constraints number nodes lista number nodes listb nodeval skipa skipb intersectval if lista and listb do not intersect intersectval listaskipa listbskipb if lista and listb intersect follow up could write solution that runs om time and use only memory
kconcatenation maximum sum given integer array arr and integer modify array repeating times example if arr and then modified array will be return maximum subarray sum modified array note that length subarray can be and its sum that case as answer can be very large return answer modulo example input arr output example input arr output example input arr output constraints arrlength arri
replace elements array given indexed array nums that consists distinct positive integers apply operations this array where ith operation replace number operationsi operationsi guaranteed that ith operation operationsi exists nums operationsi does not exist nums return array obtained after applying all operations example input nums operations output explanation perform following operations nums replace number nums becomes replace number nums becomes replace number nums becomes return final array example input nums operations output explanation perform following operations nums replace number nums becomes replace number nums becomes replace number nums becomes return array constraints numslength operationslength all values nums distinct operationsilength numsi operationsi operationsi operationsi will exist nums when applying ith operation operationsi will not exist nums when applying ith operation
element appearing more than sorted array given integer array sorted nondecreasing order there exactly one integer array that occurs more than time return that integer example input arr output example input arr output constraints arrlength arri
predict winner given integer array nums two players playing game this array player and player player and player take turns player starting first both players start game score each turn player takes one numbers from either end array ie nums or numsnumslength which reduces size array player adds chosen number their score game ends when there no more elements array return true if player can win game if scores both players equal then player still winner and should also return true may assume that both players playing optimally example input nums output false explanation initially player can choose between and if chooses or then player can choose from or and if player chooses then player will be left or so final score player and player hence player will never be winner and need return false example input nums output true explanation player first chooses then player has choose between and no matter which number player choose player can choose finally player has more score than player so need return true representing player can win constraints numslength numsi
sort integers number bits given integer array arr sort integers array ascending order number their binary representation and case two or more integers have same number have sort them ascending order return array after sorting example input arr output explantion only integer bits all have bit have bits has bits sorted array bits example input arr output explantion all integers have bit binary representation should just sort them ascending order constraints arrlength arri
count salary categories sql schema table accounts column name type accountid int income int accountid primary key this table each row contains information about monthly income one bank account write sql query report number bank accounts each salary category salary categories low salary all salaries strictly less than average salary all salaries inclusive range high salary all salaries strictly greater than result table must contain all three categories if there no accounts category then report return result table any order query result format following example example input accounts table accountid income output category accountscount low salary average salary high salary explanation low salary account average salary no accounts high salary accounts and
implement queue using stacks implement first first out fifo queue using only two stacks implemented queue should support all functions normal queue push peek pop and empty implement myqueue class void pushint pushes element back queue int pop removes element from front queue and returns int peek returns element front queue boolean empty returns true if queue empty false otherwise notes must use only standard operations stack which means only push top peekpop from top size and empty operations valid depending your language stack may not be supported natively may simulate stack using list or deque doubleended queue as long as use only stacks standard operations example input myqueue push push peek pop empty output null null null false explanation myqueue myqueue new myqueue myqueuepush queue myqueuepush queue leftmost front queue myqueuepeek return myqueuepop return queue myqueueempty return false constraints most calls will be made push pop peek and empty all calls pop and peek valid followup can implement queue such that each operation amortized time complexity other words performing operations will take overall time even if one those operations may take longer
minimum difficulty job schedule want schedule list jobs days jobs dependent ie work ith job have finish all jobs where have finish least one task every day difficulty job schedule sum difficulties each day days difficulty day maximum difficulty job done that day given integer array jobdifficulty and integer difficulty ith job jobdifficultyi return minimum difficulty job schedule if cannot find schedule jobs return example input jobdifficulty output explanation first day can finish first jobs total difficulty second day can finish last job total difficulty difficulty schedule example input jobdifficulty output explanation if finish job per day will still have free day cannot find schedule given jobs example input jobdifficulty output explanation schedule one job per day total difficulty will be constraints jobdifficultylength jobdifficultyi
number ways separate numbers wrote down many positive integers string called num however realized that forgot add commas seperate different numbers remember that list integers nondecreasing and that no integer had leading zeros return number possible lists integers that could have written down get string num since answer may be large return modulo example input num output explanation could have written down numbers example input num output explanation no numbers can have leading zeros and all numbers must be positive example input num output explanation no numbers can have leading zeros and all numbers must be positive constraints numlength num consists digits through
two sum given array integers nums and integer target return indices two numbers such that add up target may assume that each input would have exactly one solution and may not use same element twice can return answer any order example input nums target output explanation because nums nums return example input nums target output example input nums target output constraints numslength numsi target only one valid answer exists followup can come up algorithm that less than time complexity
minimum operations make subsequence given array target that consists distinct integers and another integer array arr that can have duplicates one operation can insert any integer any position arr example if arr can add middle and make note that can insert integer very beginning or end array return minimum number operations needed make target subsequence arr subsequence array new array generated from original array deleting some elements possibly none without changing remaining elements relative order example subsequence underlined elements while not example input target arr output explanation can add and such way that makes arr then target will be subsequence arr example input target arr output constraints targetlength arrlength targeti arri target contains no duplicates
regular expression matching given input string and pattern implement regular expression matching support and where matches any single character matches zero or more preceding element matching should cover entire input string not partial example input aa output false explanation does not match entire string aa example input aa output true explanation means zero or more preceding element therefore repeating once becomes aa example input ab output true explanation means zero or more any character constraints slength plength contains only lowercase english letters contains only lowercase english letters and guaranteed each appearance character there will be previous valid character match
binary tree level order traversal given root binary tree return level order traversal its nodes values ie from left right level level example input root nullnull output example input root output example input root output constraints number nodes tree range nodeval
split message based limit given string message and positive integer limit must split message into one or more parts based limit each resulting part should have suffix ab where be replaced total number parts and be replaced index part starting from and going up additionally length each resulting part including its suffix should be equal limit except last part whose length can be most limit resulting parts should be formed such that when their suffixes removed and all concatenated order should be equal message also result should contain as few parts as possible return parts message would be split into as array strings if impossible split message as required return empty array example input message this really very awesome message limit output this really very awesome message explanation first parts take characters each from beginning message next parts take characters each finish splitting message this example each part including last has length can be shown not possible split message into less than parts example input message short message limit output short message explanation under given constraints string can be split into two parts first part comprises first characters and has length next part comprises last characters and has length constraints messagelength message consists only lowercase english letters and limit
maximum number vowels substring given length given string and integer return maximum number vowel letters any substring length vowel letters english and example input abciiidef output explanation substring iii contains vowel letters example input aeiou output explanation any substring length contains vowels example input leetcode output explanation lee eet and ode contain vowels constraints slength consists lowercase english letters slength
minimum number swaps make binary string alternating given binary string return minimum number character swaps make alternating or if impossible string called alternating if no two adjacent characters equal example strings and alternating while string not any two characters may be swapped even if not adjacent example input output explanation swap positions and string now alternating example input output explanation string already alternating no swaps needed example input output constraints slength si either or
rotating box given matrix characters box representing sideview box each cell box one following stone stationary obstacle empty box rotated degrees clockwise causing some stones fall due gravity each stone falls down until lands obstacle another stone or bottom box gravity does not affect obstacles positions and inertia from boxs rotation does not affect stones horizontal positions guaranteed that each stone box rests obstacle another stone or bottom box return matrix representing box after rotation described above example input box output example input box output example input box output constraints boxlength boxilength boxij either or
confirmation rate sql schema table signups column name type userid int timestamp datetime userid primary key this table each row contains information about signup time user id userid table confirmations column name type userid int timestamp datetime action enum userid timestamp primary key this table userid foreign key reference signups table action enum type confirmed timeout each row this table indicates that user id userid requested confirmation message timestamp and that confirmation message either confirmed confirmed or expired without confirming timeout confirmation rate user number confirmed messages divided total number requested confirmation messages confirmation rate user that did not request any confirmation messages round confirmation rate two decimal places write sql query find confirmation rate each user return result table any order query result format following example example input signups table userid timestamp confirmations table userid timestamp action timeout timeout confirmed confirmed confirmed confirmed timeout output userid confirmationrate explanation user did not request any confirmation messages confirmation rate user made requests and both timed out confirmation rate user made requests and all confirmed confirmation rate user made requests where one confirmed and other timed out confirmation rate
array prototype last write code that enhances all arrays such that can call arraylast method any array and will return last element if there no elements array should return example input nums output explanation calling numslast should return last element example input nums output explanation because there no elements return constraints arrlength arri
subsets given integer array nums unique elements return all possible subsets power set solution set must not contain duplicate subsets return solution any order example input nums output example input nums output constraints numslength numsi all numbers nums unique
arithmetic slices integer array called arithmetic if consists least three elements and if difference between any two consecutive elements same example and arithmetic sequences given integer array nums return number arithmetic subarrays nums subarray contiguous subsequence array example input nums output explanation have arithmetic slices nums and itself example input nums output constraints numslength numsi
thousand separator given integer add dot as thousands separator and return string format example input output example input output constraints
reshape matrix matlab there handy function called reshape which can reshape matrix into new one different size keeping its original data given matrix mat and two integers and representing number rows and number columns wanted reshaped matrix reshaped matrix should be filled all elements original matrix same rowtraversing order as if reshape operation given parameters possible and legal output new reshaped matrix otherwise output original matrix example input mat output example input mat output constraints matlength matilength matij
count vowels permutation given integer your task count how many strings length can be formed under following rules each character lower case vowel each vowel may only be followed each vowel may only be followed or each vowel may not be followed another each vowel may only be followed or each vowel may only be followed since answer may be too large return modulo example input output explanation all possible strings and example input output explanation all possible strings ae ea ei ia ie io iu oi ou and ua example input output constraints
maximum depth binary tree given root binary tree return its maximum depth binary trees maximum depth number nodes along longest path from root node down farthest leaf node example input root nullnull output example input root null output constraints number nodes tree range nodeval
swap longest repeated character substring given string text can swap two characters text return length longest substring repeated characters example input text ababa output explanation can swap first last or last first then longest repeated character substring aaa length example input text aaabaaa output explanation swap last or first and get longest repeated character substring aaaaaa length example input text aaaaa output explanation no need swap longest repeated character substring aaaaa length constraints textlength text consist lowercase english characters only
maximum area piece cake after horizontal and vertical cuts given rectangular cake size and two arrays integers horizontalcuts and verticalcuts where horizontalcutsi distance from top rectangular cake ith horizontal cut and similarly and verticalcutsj distance from left rectangular cake jth vertical cut return maximum area piece cake after cut each horizontal and vertical position provided arrays horizontalcuts and verticalcuts since answer can be large number return this modulo example input horizontalcuts verticalcuts output explanation figure above represents given rectangular cake red lines horizontal and vertical cuts after cut cake green piece cake has maximum area example input horizontalcuts verticalcuts output explanation figure above represents given rectangular cake red lines horizontal and vertical cuts after cut cake green and yellow pieces cake have maximum area example input horizontalcuts verticalcuts output constraints horizontalcutslength minh verticalcutslength minw horizontalcutsi verticalcutsi all elements horizontalcuts distinct all elements verticalcuts distinct
combination sum ii given collection candidate numbers candidates and target number target find all unique combinations candidates where candidate numbers sum target each number candidates may only be used once combination note solution set must not contain duplicate combinations example input candidates target output example input candidates target output constraints candidateslength candidatesi target
add minimum number rungs given strictly increasing integer array rungs that represents height rungs ladder currently floor height and want reach last rung also given integer dist can only climb next highest rung if distance between where currently floor or rung and next rung most dist able insert rungs any positive integer height if rung not already there return minimum number rungs that must be added ladder order climb last rung example input rungs dist output explanation currently cannot reach last rung add rungs heights and climb this ladder ladder will now have rungs example input rungs dist output explanation this ladder can be climbed without adding additional rungs example input rungs dist output explanation currently cannot reach first rung from ground add rung height climb this ladder ladder will now have rungs constraints rungslength rungsi dist rungs strictly increasing
simplify path given string path which absolute path starting slash file or directory unixstyle file system convert simplified canonical path unixstyle file system period refers current directory double period refers directory up level and any multiple consecutive slashes ie treated as single slash this problem any other format periods such as treated as filedirectory names canonical path should have following format path starts single slash any two directories separated single slash path does not end trailing path only contains directories path from root directory target file or directory ie no period or double period return simplified canonical path example input path home output home explanation note that there no trailing slash after last directory name example input path output explanation going one level up from root directory noop as root level highest level can go example input path homefoo output homefoo explanation canonical path multiple consecutive slashes replaced single one constraints pathlength path consists english letters digits period slash or path valid absolute unix path
continuous subarray sum given integer array nums and integer return true if nums has good subarray or false otherwise good subarray subarray where its length least two and sum elements subarray multiple note that subarray contiguous part array integer multiple if there exists integer such that always multiple example input nums output true explanation continuous subarray size whose elements sum up example input nums output true explanation continuous subarray size whose elements sum up multiple because and integer example input nums output false constraints numslength numsi sumnumsi
house robber ii professional robber planning rob houses along street each house has certain amount money stashed all houses this place arranged circle that means first house neighbor last one meanwhile adjacent houses have security system connected and will automatically contact police if two adjacent houses broken into same night given integer array nums representing amount money each house return maximum amount money can rob tonight without alerting police example input nums output explanation cannot rob house money and then rob house money because adjacent houses example input nums output explanation rob house money and then rob house money total amount can rob example input nums output constraints numslength numsi
number smooth descent periods stock given integer array prices representing daily price history stock where pricesi stock price ith day smooth descent period stock consists one or more contiguous days such that price each day lower than price preceding day exactly first day period exempted from this rule return number smooth descent periods example input prices output explanation there smooth descent periods and note that period one day smooth descent period definition example input prices output explanation there smooth descent periods and note that not smooth descent period as example input prices output explanation there smooth descent period constraints priceslength pricesi
can make arithmetic progression from sequence sequence numbers called arithmetic progression if difference between any two consecutive elements same given array numbers arr return true if array can be rearranged form arithmetic progression otherwise return false example input arr output true explanation can reorder elements as or differences and respectively between each consecutive elements example input arr output false explanation there no way reorder elements obtain arithmetic progression constraints arrlength arri
minimum fuel cost report capital there tree ie connected undirected graph no cycles structure country network consisting cities numbered from and exactly roads capital city city given integer array roads where roadsi ai bi denotes that there exists bidirectional road connecting cities ai and bi there meeting representatives each city meeting capital city there car each city given integer seats that indicates number seats each car representative can use car their city travel or change car and ride another representative cost traveling between two cities one liter fuel return minimum number liters fuel reach capital city example input roads seats output explanation representative goes directly capital liter fuel representative goes directly capital liter fuel representative goes directly capital liter fuel costs liters fuel minimum can be proven that minimum number liters fuel needed example input roads seats output explanation representative goes directly city liter fuel representative and representative go together city liter fuel representative and representative go together capital liter fuel representative goes directly capital liter fuel representative goes directly capital liter fuel representative goes directly city liter fuel representative and representative go together capital liter fuel costs liters fuel minimum can be proven that minimum number liters fuel needed example input roads seats output explanation no representatives need travel capital city constraints roadslength roadsilength ai bi ai bi roads represents valid tree seats
circular sentence sentence list words that separated single space no leading or trailing spaces example hello world hello hello world hello world all sentences words consist only uppercase and lowercase english letters uppercase and lowercase english letters considered different sentence circular if last character word equal first character next word last character last word equal first character first word example leetcode exercises sound delightful eetcode leetcode eats soul all circular sentences however leetcode cool happy leetcode leetcode and like leetcode not circular sentences given string sentence return true if circular otherwise return false example input sentence leetcode exercises sound delightful output true explanation words sentence leetcode exercises sound delightful leetcodes last character equal exercisess first character exercisess last character equal sounds first character sounds last character equal delightfuls first character delightfuls last character equal leetcodes first character sentence circular example input sentence eetcode output true explanation words sentence eetcode eetcodes last character equal eetcodes first character sentence circular example input sentence leetcode cool output false explanation words sentence leetcode cool leetcodes last character not equal iss first character sentence not circular constraints sentencelength sentence consist only lowercase and uppercase english letters and spaces words sentence separated single space there no leading or trailing spaces
group anagrams given array strings strs group anagrams together can return answer any order anagram word or phrase formed rearranging letters different word or phrase typically using all original letters exactly once example input strs eatteatanatenatbat output batnattanateeattea example input strs output example input strs output constraints strslength strsilength strsi consists lowercase english letters
word subsets given two string arrays words and words string subset string if every letter occurs including multiplicity example wrr subset warrior but not subset world string from words universal if every string words subset return array all universal strings words may return answer any order example input words amazonapplefacebookgoogleleetcode words eo output facebookgoogleleetcode example input words amazonapplefacebookgoogleleetcode words le output applegoogleleetcode constraints wordslength wordslength wordsilength wordsilength wordsi and wordsi consist only lowercase english letters all strings words unique
delete operation two strings given two strings word and word return minimum number steps required make word and word same one step can delete exactly one character either string example input word sea word eat output explanation need one step make sea ea and another step make eat ea example input word leetcode word etco output constraints wordlength wordlength word and word consist only lowercase english letters
create hello world function write function createhelloworld should return new function that always returns hello world example input args output hello world explanation const createhelloworld hello world function returned createhelloworld should always return hello world example input args null output hello world explanation const createhelloworld null hello world any arguments could be passed function but should still always return hello world constraints argslength
maximum number events that can be attended given array events where eventsi startdayi enddayi every event starts startdayi and ends enddayi can attend event any day where starttimei endtimei can only attend one event any time return maximum number events can attend example input events output explanation can attend all three events one way attend them all as shown attend first event day attend second event day attend third event day example input events output constraints eventslength eventsilength startdayi enddayi
check if number has equal digit count and digit value given indexed string num length consisting digits return true if every index range digit occurs numi times num otherwise return false example input num output true explanation num digit occurs once num num digit occurs twice num num digit occurs once num num digit occurs zero times num condition holds true every index so return true example input num output false explanation num digit should occur zero times but actually occurs twice num num digit should occur three times but actually occurs zero times num num digit occurs zero times num indices and both violate condition so return false constraints numlength num consists digits
reformat phone number given phone number as string number number consists digits spaces andor dashes would like reformat phone number certain manner firstly remove all spaces and dashes then group digits from left right into blocks length until there or fewer digits final digits then grouped as follows digits single block length digits single block length digits two blocks length each blocks then joined dashes notice that reformatting process should never produce any blocks length and produce most two blocks length return phone number after formatting example input number output explanation digits step there more than digits so group next digits st block step there digits remaining so put them single block length nd block joining blocks gives example input number output explanation digits step there more than digits so group next digits st block step there digits left so split them into two blocks length blocks and joining blocks gives example input number output explanation digits step st block step nd block step there digits left so put them single block length rd block joining blocks gives constraints numberlength number consists digits and characters and there least two digits number
word break given string and dictionary strings worddict return true if can be segmented into spaceseparated sequence one or more dictionary words note that same word dictionary may be reused multiple times segmentation example input leetcode worddict leetcode output true explanation return true because leetcode can be segmented as leet code example input applepenapple worddict applepen output true explanation return true because applepenapple can be segmented as apple pen apple note that allowed reuse dictionary word example input catsandog worddict catsdogsandandcat output false constraints slength worddictlength worddictilength and worddicti consist only lowercase english letters all strings worddict unique
longest duplicate substring given string consider all duplicated substrings contiguous substrings that occur or more times occurrences may overlap return any duplicated substring that has longest possible length if does not have duplicated substring answer example input banana output ana example input abcd output constraints slength consists lowercase english letters
ones and zeroes given array binary strings strs and two integers and return size largest subset strs such that there most and subset set subset set if all elements also elements example input strs output explanation largest subset most and so answer other valid but smaller subsets include and invalid subset because contains greater than maximum example input strs output explanation largest subset so answer constraints strslength strsilength strsi consists only digits and
score after flipping matrix given binary matrix grid move consists choosing any row or column and toggling each value that row or column ie changing all and all every row matrix interpreted as binary number and score matrix sum these numbers return highest possible score after making any number moves including zero moves example input grid output explanation example input grid output constraints gridlength gridilength gridij either or
average salary excluding minimum and maximum salary given array unique integers salary where salaryi salary ith employee return average salary employees excluding minimum and maximum salary answers within actual answer will be accepted example input salary output explanation minimum salary and maximum salary and respectively average salary excluding minimum and maximum salary example input salary output explanation minimum salary and maximum salary and respectively average salary excluding minimum and maximum salary constraints salarylength salaryi all integers salary unique
delivering boxes from storage ports have task delivering some boxes from storage their ports using only one ship however this ship has limit number boxes and total weight that can carry given array boxes where boxesi portsi weighti and three integers portscount maxboxes and maxweight portsi port where need deliver ith box and weightsi weight ith box portscount number ports maxboxes and maxweight respective box and weight limits ship boxes need be delivered order given ship will follow these steps ship will take some number boxes from boxes queue not violating maxboxes and maxweight constraints each loaded box order ship will make trip port box needs be delivered and deliver if ship already correct port no trip needed and box can immediately be delivered ship then makes return trip storage take more boxes from queue ship must end storage after all boxes have been delivered return minimum number trips ship needs make deliver all boxes their respective ports example input boxes portscount maxboxes maxweight output explanation optimal strategy as follows ship takes all boxes queue goes port then port then port again then returns storage trips so total number trips note that first and third boxes cannot be delivered together because boxes need be delivered order ie second box needs be delivered port before third box example input boxes portscount maxboxes maxweight output explanation optimal strategy as follows ship takes first box goes port then returns storage trips ship takes second third and fourth boxes goes port then returns storage trips ship takes fifth box goes port then returns storage trips so total number trips example input boxes portscount maxboxes maxweight output explanation optimal strategy as follows ship takes first and second boxes goes port then returns storage trips ship takes third and fourth boxes goes port then returns storage trips ship takes fifth and sixth boxes goes port then returns storage trips so total number trips constraints boxeslength portscount maxboxes maxweight portsi portscount weightsi maxweight
debounce given function fn and time milliseconds return debounced version that function debounced function function whose execution delayed milliseconds and whose execution cancelled if called again within that window time debounced function should also recieve passed parameters example lets say ms and function called ms ms and ms first function calls would be cancelled and rd function call would be executed ms if instead ms st call would be cancelled nd would be executed ms and rd would be executed ms above diagram shows how debounce will transform events each rectangle represents ms and debounce time ms each color represents different set inputs please solve without using lodashs debounce function example input calls inputs inputs output inputs explanation let start datenow function loginputs consolelogdatenow start inputs const dlog debouncelog settimeout dlog settimeout dlog st call cancelled nd call because nd call occurred before ms nd call delayed ms and executed ms inputs example input calls inputs inputs output inputs inputs explanation st call delayed until ms inputs nd call delayed until ms inputs example input calls inputs inputs inputs output inputs inputs explanation st call delayed ms and ran ms inputs nd call cancelled rd call rd call delayed ms and ran ms inputs constraints callslength callsit callsiinputslength
minimum area rectangle given array points xy plane points where pointsi xi yi return minimum area rectangle formed from these points sides parallel and axes if there not any such rectangle return example input points output example input points output constraints pointslength pointsilength xi yi all given points unique
count square sum triples square triple abc triple where and integers and given integer return number square triples such that example input output explanation square triples and example input output explanation square triples and constraints
reaching points given four integers sx sy tx and ty return true if possible convert point sx sy point tx ty through some operations or false otherwise allowed operation some point convert either or example input sx sy tx ty output true explanation one series moves that transforms starting point target example input sx sy tx ty output false example input sx sy tx ty output true constraints sx sy tx ty
employees missing information sql schema table employees column name type employeeid int name varchar employeeid primary key this table each row this table indicates name employee whose id employeeid table salaries column name type employeeid int salary int employeeid primary key this table each row this table indicates salary employee whose id employeeid write sql query report ids all employees missing information information employee missing if employees name missing or employees salary missing return result table ordered employeeid ascending order query result format following example example input employees table employeeid name crew haven kristian salaries table employeeid salary output employeeid explanation employees and working this company name employee missing salary employee missing
number valid clock times given string length called time representing current time digital clock format hhmm earliest possible time and latest possible time string time digits represented symbol unknown and must be replaced digit from return integer answer number valid clock times that can be created replacing every digit from example input time output explanation can replace either or producing or note that cannot replace since time invalid total have two choices example input time output explanation each can be replaced any digit from so have total choices example input time output explanation there possible choices hours and possible choices minutes total have choices constraints time valid string length format hhmm hh mm some digits might be replaced and need be replaced digits from
dice roll simulation die simulator generates random number from each roll introduced constraint generator such that cannot roll number more than rollmaxi indexed consecutive times given array integers rollmax and integer return number distinct sequences that can be obtained exact rolls since answer may be too large return modulo two sequences considered different if least one element differs from each other example input rollmax output explanation there will be rolls die if there no constraints die there possible combinations this case looking rollmax array numbers and appear most once consecutively therefore sequences and cannot occur so final answer example input rollmax output example input rollmax output constraints rollmaxlength rollmaxi
maximum binary tree ii maximum tree tree where every node has value greater than any other value its subtree given root maximum binary tree and integer val just as previous problem given tree constructed from list root constructa recursively following constructa routine if empty return null otherwise let ai be largest element create root node value ai left child root will be constructa ai right child root will be constructai ai aalength return root note that not given directly only root node root constructa suppose copy value val appended guaranteed that has unique values return constructb example input root nullnull val output nullnullnull explanation example input root null val output nullnull explanation example input root null val output null explanation constraints number nodes tree range nodeval all values tree unique val
delete greatest value each row given matrix grid consisting positive integers perform following operation until grid becomes empty delete element greatest value from each row if multiple such elements exist delete any them add maximum deleted elements answer note that number columns decreases one after each operation return answer after performing operations described above example input grid output explanation diagram above shows removed values each step first operation remove from first row and from second row notice that there two cells value and can remove any them add answer second operation remove from first row and from second row add answer third operation remove from first row and from second row add answer final answer example input grid output explanation diagram above shows removed values each step first operation remove from first row add answer final answer constraints gridlength gridilength gridij
count vowel strings ranges given indexed array strings words and array integers queries each query queriesi li ri asks us find number strings present range li ri both inclusive words that start and end vowel return array ans size querieslength where ansi answer ith query note that vowel letters and example input words ababcbeceaae queries output explanation strings starting and ending vowel aba ece aa and answer query strings aba and ece query strings ece aa query return example input words aei queries output explanation every string satisfies conditions so return constraints wordslength wordsilength wordsi consists only lowercase english letters sumwordsilength querieslength li ri wordslength
sum root leaf binary numbers given root binary tree where each node has value or each roottoleaf path represents binary number starting most significant bit example if path then this could represent binary which all leaves tree consider numbers represented path from root that leaf return sum these numbers test cases generated so that answer fits bits integer example input root output explanation example input root output constraints number nodes tree range nodeval or
minimum operations make univalue grid given integer grid size and integer one operation can add or subtract from any element grid univalue grid grid where all elements equal return minimum number operations make grid univalue if not possible return example input grid output explanation can make every element equal doing following add once subtract from once subtract from twice total operations used example input grid output explanation can make every element equal example input grid output explanation impossible make every element equal constraints gridlength gridilength gridij
remove linked list elements given head linked list and integer val remove all nodes linked list that has nodeval val and return new head example input head val output example input head val output example input head val output constraints number nodes list range nodeval val
max dot product two subsequences given two arrays nums and nums return maximum dot product between nonempty subsequences nums and nums same length subsequence array new array which formed from original array deleting some can be none characters without disturbing relative positions remaining characters ie subsequence while not example input nums nums output explanation take subsequence from nums and subsequence from nums their dot product example input nums nums output explanation take subsequence from nums and subsequence from nums their dot product example input nums nums output explanation take subsequence from nums and subsequence from nums their dot product constraints numslength numslength numsi numsi
count square submatrices all ones given matrix ones and zeros return how many square submatrices have all ones example input matrix output explanation there squares side there squares side there square side total number squares example input matrix output explanation there squares side there square side total number squares constraints arrlength arrlength arrij
prime subtraction operation given indexed integer array nums length can perform following operation as many times as want pick index that havent picked before and pick prime strictly less than numsi then subtract from numsi return true if can make nums strictly increasing array using above operation and false otherwise strictly increasing array array whose each element strictly greater than its preceding element example input nums output true explanation first operation pick and and then subtract from nums so that nums becomes second operation subtract from nums so nums becomes equal after second operation nums sorted strictly increasing order so answer true example input nums output true explanation initially nums sorted strictly increasing order so dont need make any operations example input nums output false explanation can be proven that there no way perform operations make nums sorted strictly increasing order so answer false constraints numslength numsi numslength
partition array into three parts equal sum given array integers arr return true if can partition array into three nonempty parts equal sums formally can partition array if can find indexes arr arr arri arri arri arrj arrj arrj arrarrlength example input arr output true explanation example input arr output false example input arr output true explanation constraints arrlength arri
stone game ii alice and bob continue their games piles stones there number piles arranged row and each pile has positive integer number stones pilesi objective game end most stones alice and bob take turns alice starting first initially each players turn that player can take all stones first remaining piles where then set maxm game continues until all stones have been taken assuming alice and bob play optimally return maximum number stones alice can get example input piles output explanation if alice takes one pile beginning bob takes two piles then alice takes piles again alice can get piles total if alice takes two piles beginning then bob can take all three piles left this case alice get piles total so return since its larger example input piles output constraints pileslength pilesi
water and jug problem given two jugs capacities jugcapacity and jugcapacity liters there infinite amount water supply available determine whether possible measure exactly targetcapacity liters using these two jugs if targetcapacity liters water measurable must have targetcapacity liters water contained within one or both buckets end operations allowed fill any jugs water empty any jugs pour water from one jug into another till other jug completely full or first jug itself empty example input jugcapacity jugcapacity targetcapacity output true explanation famous die hard example example input jugcapacity jugcapacity targetcapacity output false example input jugcapacity jugcapacity targetcapacity output true constraints jugcapacity jugcapacity targetcapacity
xor queries subarray given array arr positive integers also given array queries where queriesi lefti righti each query compute xor elements from lefti righti that arrlefti xor arrlefti xor xor arrrighti return array answer where answeri answer ith query example input arr queries output explanation binary representation elements array xor values queries xor xor xor xor xor example input arr queries output constraints arrlength querieslength arri queriesilength lefti righti arrlength
largest magic square magic square grid filled integers such that every row sum every column sum and both diagonal sums all equal integers magic square do not have be distinct every grid trivially magic square given integer grid return size ie side length largest magic square that can be found within this grid example input grid output explanation largest magic square has size every row sum column sum and diagonal sum this magic square equal row sums column sums diagonal sums example input grid output constraints gridlength gridilength gridij
advantage shuffle given two integer arrays nums and nums both same length advantage nums respect nums number indices which numsi numsi return any permutation nums that maximizes its advantage respect nums example input nums nums output example input nums nums output constraints numslength numslength numslength numsi numsi
maximum length subarray positive product given array integers nums find maximum length subarray where product all its elements positive subarray array consecutive sequence zero or more values taken out that array return maximum length subarray positive product example input nums output explanation array nums already has positive product example input nums output explanation longest subarray positive product which has product notice that cannot include subarray since thatll make product which not positive example input nums output explanation longest subarray positive product or constraints numslength numsi
missing number given array nums containing distinct numbers range return only number range that missing from array example input nums output explanation since there numbers so all numbers range missing number range since does not appear nums example input nums output explanation since there numbers so all numbers range missing number range since does not appear nums example input nums output explanation since there numbers so all numbers range missing number range since does not appear nums constraints numslength numsi all numbers nums unique follow up could implement solution using only extra space complexity and runtime complexity
random pick index given integer array nums possible duplicates randomly output index given target number can assume that given target number must exist array implement solution class solutionint nums initializes object array nums int pickint target picks random index from nums where numsi target if there multiple valid then each index should have equal probability returning example input solution pick pick pick output null explanation solution solution new solution solutionpick should return either index or randomly each index should have equal probability returning solutionpick should return since array only nums equal solutionpick should return either index or randomly each index should have equal probability returning constraints numslength numsi target integer from nums most calls will be made pick
big countries sql schema table world column name type name varchar continent varchar area int population int gdp bigint name primary key column this table each row this table gives information about name country continent which belongs its area population and its gdp value country big if has area least three million ie km or has population least twentyfive million ie write sql query report name population and area big countries return result table any order query result format following example example input world table name continent area population gdp afghanistan asia albania europe algeria africa andorra europe angola africa output name population area afghanistan algeria
min cost connect all points given array points representing integer coordinates some points dplane where pointsi xi yi cost connecting two points xi yi and xj yj manhattan distance between them xi xj yi yj where val denotes absolute value val return minimum cost make all points connected all points connected if there exactly one simple path between any two points example input points output explanation can connect points as shown above get minimum cost notice that there unique path between every pair points example input points output constraints pointslength xi yi all pairs xi yi distinct
rotate function given integer array nums length assume arrk be array obtained rotating nums positions clockwise define rotation function nums as follow fk arrk arrk arrkn return maximum value fn test cases generated so that answer fits bit integer example input nums output explanation so maximum value example input nums output constraints numslength numsi
find all anagrams string given two strings and return array all start indices ps anagrams may return answer any order anagram word or phrase formed rearranging letters different word or phrase typically using all original letters exactly once example input cbaebabacd abc output explanation substring start index cba which anagram abc substring start index bac which anagram abc example input abab ab output explanation substring start index ab which anagram ab substring start index ba which anagram ab substring start index ab which anagram ab constraints slength plength and consist lowercase english letters
find losers circular game there friends that playing game friends sitting circle and numbered from clockwise order more formally moving clockwise from ith friend brings ith friend and moving clockwise from nth friend brings st friend rules game as follows st friend receives ball after that st friend passes friend who steps away from them clockwise direction after that friend who receives ball should pass friend who steps away from them clockwise direction after that friend who receives ball should pass friend who steps away from them clockwise direction and so and so forth other words ith turn friend holding ball should pass friend who steps away from them clockwise direction game finished when some friend receives ball second time losers game friends who did not receive ball entire game given number friends and integer return array answer which contains losers game ascending order example input output explanation game goes as follows start st friend and pass ball friend who steps away from them rd friend rd friend passes ball friend who steps away from them nd friend nd friend passes ball friend who steps away from them rd friend game ends as rd friend receives ball second time example input output explanation game goes as follows start st friend and pass ball friend who steps away from them st friend game ends as st friend receives ball second time constraints
xor operation array given integer and integer start define array nums where numsi start indexed and numslength return bitwise xor all elements nums example input start output explanation array nums equal where where corresponds bitwise xor operator example input start output explanation array nums equal where constraints start numslength
prime arrangements return number permutations so that prime numbers prime indices indexed recall that integer prime if and only if greater than and cannot be written as product two positive integers both smaller than since answer may be large return answer modulo example input output explanation example valid permutation but not because prime number index example input output constraints
super egg drop given identical eggs and have access building floors labeled from know that there exists floor where such that any egg dropped floor higher than will break and any egg dropped or below floor will not break each move may take unbroken egg and drop from any floor where if egg breaks can no longer use however if egg does not break may reuse future moves return minimum number moves that need determine certainty what value example input output explanation drop egg from floor if breaks know that otherwise drop egg from floor if breaks know that if does not break then know hence need minimum moves determine certainty what value example input output example input output constraints
reachable nodes restrictions there undirected tree nodes labeled from and edges given integer array edges length where edgesi ai bi indicates that there edge between nodes ai and bi tree also given integer array restricted which represents restricted nodes return maximum number nodes can reach from node without visiting restricted node note that node will not be restricted node example input edges restricted output explanation diagram above shows tree have that only nodes that can be reached from node without visiting restricted node example input edges restricted output explanation diagram above shows tree have that only nodes that can be reached from node without visiting restricted node constraints edgeslength edgesilength ai bi ai bi edges represents valid tree restrictedlength restrictedi all values restricted unique
making large island given binary matrix grid allowed change most one be return size largest island grid after applying this operation island directionally connected group example input grid output explanation change one and connect two then get island area example input grid output explanation change and make island bigger only one island area example input grid output explanation cant change any only one island area constraints gridlength gridilength gridij either or
maximum swap given integer num can swap two digits most once get maximum valued number return maximum valued number can get example input num output explanation swap number and number example input num output explanation no swap constraints num
sum ii given four integer arrays nums nums nums and nums all length return number tuples such that numsi numsj numsk numsl example input nums nums nums nums output explanation two tuples nums nums nums nums nums nums nums nums example input nums nums nums nums output constraints numslength numslength numslength numslength numsi numsi numsi numsi
minimum number work sessions finish tasks there tasks assigned task times represented as integer array tasks length where ith task takes tasksi hours finish work session when work most sessiontime consecutive hours and then take break should finish given tasks way that satisfies following conditions if start task work session must complete same work session can start new task immediately after finishing previous one may complete tasks any order given tasks and sessiontime return minimum number work sessions needed finish all tasks following conditions above tests generated such that sessiontime greater than or equal maximum element tasksi example input tasks sessiontime output explanation can finish tasks two work sessions first work session finish first and second tasks hours second work session finish third task hours example input tasks sessiontime output explanation can finish tasks two work sessions first work session finish all tasks except last one hours second work session finish last task hour example input tasks sessiontime output explanation can finish all tasks one work session constraints taskslength tasksi maxtasksi sessiontime
range addition ii given matrix initialized all and array operations ops where opsi ai bi means mxy should be incremented one all ai and bi count and return number maximum integers matrix after performing all operations example input ops output explanation maximum integer and there four so return example input ops output example input ops output constraints opslength opsilength ai bi
reorganize string given string rearrange characters so that any two adjacent characters not same return any possible rearrangement or return if not possible example input aab output aba example input aaab output constraints slength consists lowercase english letters
minimum skips arrive meeting time given integer hoursbefore number hours have travel your meeting arrive your meeting have travel through roads road lengths given as integer array dist length where disti describes length ith road kilometers addition given integer speed which speed kmh will travel after travel road must rest and wait next integer hour before can begin traveling next road note that do not have rest after traveling last road because already meeting example if traveling road takes hours must wait until hour mark before traveling next road if traveling road takes exactly hours do not need wait however allowed skip some rests be able arrive time meaning do not need wait next integer hour note that this means may finish traveling future roads different hour marks example suppose traveling first road takes hours and traveling second road takes hours skipping rest after first road will mean finish traveling second road right hour mark letting start traveling third road immediately return minimum number skips required arrive meeting time or if impossible example input dist speed hoursbefore output explanation without skipping any rests will arrive hours can skip first rest arrive hours note that second rest shortened because finish traveling second road integer hour due skipping first rest example input dist speed hoursbefore output explanation without skipping any rests will arrive hours can skip first and third rest arrive hours example input dist speed hoursbefore output explanation impossible arrive meeting time even if skip all rests constraints distlength disti speed hoursbefore
valid tictactoe state given tictactoe board as string array board return true if and only if possible reach this board position during course valid tictactoe game board array that consists characters and character represents empty square here rules tictactoe players take turns placing characters into empty squares first player always places characters while second player always places characters and characters always placed into empty squares never filled ones game ends when there three same nonempty character filling any row column or diagonal game also ends if all squares nonempty no more moves can be played if game over example input board output false explanation first player always plays example input board xox output false explanation players take turns making moves example input board xoxo oxox output true constraints boardlength boardilength boardij either or
delete columns make sorted iii given array strings strs all same length may choose any deletion indices and delete all characters those indices each string example if have strs abcdefuvwxyz and deletion indices then final array after deletions bef vyz suppose chose set deletion indices answer such that after deletions final array has every string row lexicographic order ie strs strs strsstrslength and strs strs strsstrslength and so return minimum possible value answerlength example input strs babcabbazb output explanation after deleting columns and final array strs bc az both these rows individually lexicographic order ie strs strs and strs strs note that strs strs array strs not necessarily lexicographic order example input strs edcba output explanation if delete less than columns only row will not be lexicographically sorted example input strs ghidefabc output explanation all rows already lexicographically sorted constraints strslength strsilength strsi consists lowercase english letters
longest chunked palindrome decomposition given string text should split substrings subtext subtext subtextk such that subtexti nonempty string concatenation all substrings equal text ie subtext subtext subtextk text subtexti subtextk all valid values ie return largest possible value example input text ghiabcdefhelloadamhelloabcdefghi output explanation can split string ghiabcdefhelloadamhelloabcdefghi example input text merchant output explanation can split string merchant example input text antaprezatepzapreanta output explanation can split string antaprezatepzapreanta constraints textlength text consists only lowercase english characters
filter restaurants veganfriendly price and distance given array restaurants where restaurantsi idi ratingi veganfriendlyi pricei distancei have filter restaurants using three filters veganfriendly filter will be either true meaning should only include restaurants veganfriendlyi set true or false meaning can include any restaurant addition have filters maxprice and maxdistance which maximum value price and distance restaurants should consider respectively return array restaurant ids after filtering ordered rating from highest lowest restaurants same rating order them id from highest lowest simplicity veganfriendlyi and veganfriendly take value when true and when false example input restaurants veganfriendly maxprice maxdistance output explanation restaurants restaurant id rating veganfriendly price distance restaurant id rating veganfriendly price distance restaurant id rating veganfriendly price distance restaurant id rating veganfriendly price distance restaurant id rating veganfriendly price distance after filter restaurants veganfriendly maxprice and maxdistance have restaurant restaurant and restaurant ordered rating from highest lowest example input restaurants veganfriendly maxprice maxdistance output explanation restaurants same as example but this case filter veganfriendly therefore all restaurants considered example input restaurants veganfriendly maxprice maxdistance output constraints restaurantslength restaurantsilength idi ratingi pricei distancei maxprice maxdistance veganfriendlyi and veganfriendly or all idi distinct
kth symbol grammar build table rows indexed start writing st row now every subsequent row look previous row and replace each occurrence and each occurrence example st row nd row and rd row given two integer and return kth indexed symbol nth row table rows example input output explanation row example input output explanation row row example input output explanation row row constraints
split array into consecutive subsequences given integer array nums that sorted nondecreasing order determine if possible split nums into one or more subsequences such that both following conditions true each subsequence consecutive increasing sequence ie each integer exactly one more than previous integer all subsequences have length or more return true if can split nums according above conditions or false otherwise subsequence array new array that formed from original array deleting some can be none elements without disturbing relative positions remaining elements ie subsequence while not example input nums output true explanation nums can be split into following subsequences example input nums output true explanation nums can be split into following subsequences example input nums output false explanation impossible split nums into consecutive increasing subsequences length or more constraints numslength numsi nums sorted nondecreasing order
binary tree inorder traversal given root binary tree return inorder traversal its nodes values example input root null output example input root output example input root output constraints number nodes tree range nodeval follow up recursive solution trivial could do iteratively
broken calculator there broken calculator that has integer startvalue its display initially one operation can multiply number display or subtract from number display given two integers startvalue and target return minimum number operations needed display target calculator example input startvalue target output explanation use double operation and then decrement operation example input startvalue target output explanation use decrement and then double example input startvalue target output explanation use double decrement and double constraints startvalue target
falling squares there several squares being dropped onto xaxis plane given integer array positions where positionsi lefti sidelengthi represents ith square side length sidelengthi that dropped its left edge aligned xcoordinate lefti each square dropped one time from height above any landed squares then falls downward negative direction until either lands top side another square or xaxis square brushing leftright side another square does not count as landing once lands freezes place and cannot be moved after each square dropped must record height current tallest stack squares return integer array ans where ansi represents height described above after dropping ith square example input positions output explanation after first drop tallest stack square height after second drop tallest stack squares and height after third drop tallest stack still squares and height thus return answer example input positions output explanation after first drop tallest stack square height after second drop tallest stack either square or square both heights thus return answer note that square only brushes right side square which does not count as landing constraints positionslength lefti sidelengthi
queries quality and percentage sql schema table queries column name type queryname varchar result varchar position int rating int there no primary key this table may have duplicate rows this table contains information collected from some queries database position column has value from rating column has value from query rating less than poor query define query quality as average ratio between query rating and its position also define poor query percentage as percentage all queries rating less than write sql query find each queryname quality and poorquerypercentage both quality and poorquerypercentage should be rounded decimal places return result table any order query result format following example example input queries table queryname result position rating dog golden retriever dog german shepherd dog mule cat shirazi cat siamese cat sphynx output queryname quality poorquerypercentage dog cat explanation dog queries quality dog queries poor querypercentage cat queries quality equals cat queries poor querypercentage
time needed inform all employees company has employees unique id each employee from head company one headid each employee has one direct manager given manager array where manageri direct manager ith employee managerheadid also guaranteed that subordination relationships have tree structure head company wants inform all company employees urgent piece news will inform his direct subordinates and will inform their subordinates and so until all employees know about urgent news ith employee needs informtimei minutes inform all his direct subordinates ie after informtimei minutes all his direct subordinates can start spreading news return number minutes needed inform all employees about urgent news example input headid manager informtime output explanation head company only employee company example input headid manager informtime output explanation head company id direct manager all employees company and needs minute inform them all tree structure employees company shown constraints headid managerlength manageri managerheadid informtimelength informtimei informtimei if employee has no subordinates guaranteed that all employees can be informed
letter case permutation given string can transform every letter individually be lowercase or uppercase create another string return list all possible strings could create return output any order example input ab output abababab example input output zz constraints slength consists lowercase english letters uppercase english letters and digits
ksimilar strings strings and ksimilar some nonnegative integer if can swap positions two letters exactly times so that resulting string equals given two anagrams and return smallest which and ksimilar example input ab ba output explanation two string similar because can use one swap change ab ba example input abc bca output explanation two strings similar because can use two swaps change abc bac bca constraints slength slength slength and contain only lowercase letters from set anagram
binary tree zigzag level order traversal given root binary tree return zigzag level order traversal its nodes values ie from left right then right left next level and alternate between example input root nullnull output example input root output example input root output constraints number nodes tree range nodeval
remove nodes from linked list given head linked list remove every node which has node strictly greater value anywhere right side return head modified linked list example input head output explanation nodes that should be removed and node right node node right node node right node example input head output explanation every node has value so no nodes removed constraints number nodes given list range nodeval
minimum number days disconnect island given binary grid grid where represents land and represents water island maximal directionally horizontal or vertical connected group grid said be connected if have exactly one island otherwise said disconnected one day allowed change any single land cell into water cell return minimum number days disconnect grid example input grid output explanation need least days get disconnected grid change land grid and grid water and get disconnected island example input grid output explanation grid full water also disconnected islands constraints gridlength gridilength gridij either or
number valid move combinations chessboard there chessboard containing pieces rooks queens or bishops given string array pieces length where piecesi describes type rook queen or bishop ith piece addition given integer array positions also length where positionsi ri ci indicates that ith piece currently based coordinate ri ci chessboard when making move piece choose destination square that piece will travel toward and stop rook can only travel horizontally or vertically from direction or queen can only travel horizontally vertically or diagonally from direction bishop can only travel diagonally from direction must make move every piece board simultaneously move combination consists all moves performed all given pieces every second each piece will instantaneously travel one square towards their destination if not already all pieces start traveling th second move combination invalid if given time two or more pieces occupy same square return number valid move combinations notes no two pieces will start same square may choose square piece already as its destination if two pieces directly adjacent each other valid them move past each other and swap positions one second example input pieces rook positions output explanation image above shows possible squares piece can move example input pieces queen positions output explanation image above shows possible squares piece can move example input pieces bishop positions output explanation image above shows possible squares piece can move constraints pieceslength positionslength pieces only contains strings rook queen and bishop there will be most one queen chessboard xi yi each positionsi distinct
number times binary string prefixaligned have indexed binary string length where all bits initially will flip all bits this binary string ie change them from one one given indexed integer array flips where flipsi indicates that bit index will be flipped ith step binary string prefixaligned if after ith step all bits inclusive range ones and all other bits zeros return number times binary string prefixaligned during flipping process example input flips output explanation binary string initially after applying step string becomes which not prefixaligned after applying step string becomes which not prefixaligned after applying step string becomes which not prefixaligned after applying step string becomes which prefixaligned after applying step string becomes which prefixaligned can see that string prefixaligned times so return example input flips output explanation binary string initially after applying step string becomes which not prefixaligned after applying step string becomes which not prefixaligned after applying step string becomes which not prefixaligned after applying step string becomes which prefixaligned can see that string prefixaligned time so return constraints flipslength flips permutation integers range
interval list intersections given two lists closed intervals firstlist and secondlist where firstlisti starti endi and secondlistj startj endj each list intervals pairwise disjoint and sorted order return intersection these two interval lists closed interval denotes set real numbers intersection two closed intervals set real numbers that either empty or represented as closed interval example intersection and example input firstlist secondlist output example input firstlist secondlist output constraints firstlistlength secondlistlength firstlistlength secondlistlength starti endi endi starti startj endj endj startj
global and local inversions given integer array nums length which represents permutation all integers range number global inversions number different pairs where numsi numsj number local inversions number indices where numsi numsi return true if number global inversions equal number local inversions example input nums output true explanation there global inversion and local inversion example input nums output false explanation there global inversions and local inversion constraints numslength numsi all integers nums unique nums permutation all numbers range
cracking safe there safe protected password password sequence digits where each digit can be range safe has peculiar way checking password when enter sequence checks most recent digits that entered each time type digit example correct password and enter after typing most recent digits which incorrect after typing most recent digits which incorrect after typing most recent digits which incorrect after typing most recent digits which incorrect after typing most recent digits which incorrect after typing most recent digits which correct and safe unlocks return any string minimum length that will unlock safe some point entering example input output explanation password single digit so enter each digit would also unlock safe example input output explanation each possible password typed starting from th digit typed starting from st digit typed starting from rd digit typed starting from nd digit thus will unlock safe and would also unlock safe constraints kn
custom sort string given two strings order and all characters order unique and sorted some custom order previously permute characters so that match order that order sorted more specifically if character occurs before character order then should occur before permuted string return any permutation that satisfies this property example input order cba abcd output cbad explanation appear order so order should be and since does not appear order can be any position returned string dcba cdba cbda also valid outputs example input order cbafg abcd output cbad constraints orderlength slength order and consist lowercase english letters all characters order unique
find all groups farmland given indexed binary matrix land where represents hectare forested land and represents hectare farmland keep land organized there designated rectangular areas hectares that consist entirely farmland these rectangular areas called groups no two groups adjacent meaning farmland one group not fourdirectionally adjacent another farmland different group land can be represented coordinate system where top left corner land and bottom right corner land find coordinates top left and bottom right corner each group farmland group farmland top left corner and bottom right corner represented length array return array containing length arrays described above each group farmland land if there no groups farmland return empty array may return answer any order example input land output explanation first group has top left corner land and bottom right corner land second group has top left corner land and bottom right corner land example input land output explanation first group has top left corner land and bottom right corner land example input land output explanation there no groups farmland constraints landlength landilength land consists only and groups farmland rectangular shape
design browser history have browser one tab where start homepage and can visit another url get back history number steps or move forward history number steps implement browserhistory class browserhistorystring homepage initializes object homepage browser void visitstring url visits url from current page clears up all forward history string backint steps move steps back history if can only return steps history and steps will return only steps return current url after moving back history most steps string forwardint steps move steps forward history if can only forward steps history and steps will forward only steps return current url after forwarding history most steps example input browserhistoryvisitvisitvisitbackbackforwardvisitforwardbackback leetcodecomgooglecomfacebookcomyoutubecomlinkedincom output nullnullnullnullfacebookcomgooglecomfacebookcomnulllinkedincomgooglecomleetcodecom explanation browserhistory browserhistory new browserhistoryleetcodecom browserhistoryvisitgooglecom leetcodecom visit googlecom browserhistoryvisitfacebookcom googlecom visit facebookcom browserhistoryvisityoutubecom facebookcom visit youtubecom browserhistoryback youtubecom move back facebookcom return facebookcom browserhistoryback facebookcom move back googlecom return googlecom browserhistoryforward googlecom move forward facebookcom return facebookcom browserhistoryvisitlinkedincom facebookcom visit linkedincom browserhistoryforward linkedincom cannot move forward any steps browserhistoryback linkedincom move back two steps facebookcom then googlecom return googlecom browserhistoryback googlecom can move back only one step leetcodecom return leetcodecom constraints homepagelength urllength steps homepage and url consist or lower case english letters most calls will be made visit back and forward
rearranging fruits have two fruit baskets containing fruits each given two indexed integer arrays basket and basket representing cost fruit each basket want make both baskets equal do so can use following operation as many times as want chose two indices and and swap ith fruit basket jth fruit basket cost swap minbasketibasketj two baskets considered equal if sorting them according fruit cost makes them exactly same baskets return minimum cost make both baskets equal or if impossible example input basket basket output explanation swap index basket index basket which has cost now basket and basket rearranging both arrays makes them equal example input basket basket output explanation can be shown that impossible make both baskets equal constraints basketlength bakstelength basketlength basketibasketi
minimum sum four digit number after splitting digits given positive integer num consisting exactly four digits split num into two new integers new and new using digits found num leading zeros allowed new and new and all digits found num must be used example given num have following digits two one and one some possible pairs new new and return minimum possible sum new and new example input num output explanation some possible pairs new new etc minimum sum can be obtained pair example input num output explanation some possible pairs new new etc minimum sum can be obtained pair constraints num
minimum moves reach target score playing game integers start integer and want reach integer target one move can either increment current integer one ie double current integer ie can use increment operation any number times however can only use double operation most maxdoubles times given two integers target and maxdoubles return minimum number moves needed reach target starting example input target maxdoubles output explanation keep incrementing until reach target example input target maxdoubles output explanation initially increment times so double once so increment once so double again so increment once so example input target maxdoubles output explanation initially increment once so double once so increment once so double again so constraints target maxdoubles
furthest building can reach given integer array heights representing heights buildings some bricks and some ladders start your journey from building and move next building possibly using bricks or ladders while moving from building building indexed if current buildings height greater than or equal next buildings height do not need ladder or bricks if current buildings height less than next buildings height can either use one ladder or hi hi bricks return furthest building index indexed can reach if use given ladders and bricks optimally example input heights bricks ladders output explanation starting building can follow these steps go building without using ladders nor bricks since go building using bricks must use either bricks or ladders because go building without using ladders nor bricks since go building using your only ladder must use either bricks or ladders because impossible go beyond building because do not have any more bricks or ladders example input heights bricks ladders output example input heights bricks ladders output constraints heightslength heightsi bricks ladders heightslength
count ways group overlapping ranges given integer array ranges where rangesi starti endi denotes that all integers between starti and endi both inclusive contained ith range split ranges into two possibly empty groups such that each range belongs exactly one group any two overlapping ranges must belong same group two ranges said be overlapping if there exists least one integer that present both ranges example and overlapping because and occur both ranges return total number ways split ranges into two groups since answer may be very large return modulo example input ranges output explanation two ranges overlapping so must be same group thus there two possible ways put both ranges together group put both ranges together group example input ranges output explanation ranges and overlapping so must be same group again ranges and also overlapping so must also be same group thus there four possible ways group them all ranges group all ranges group ranges and group and group ranges and group and group constraints rangeslength rangesilength starti endi
all paths from source target given directed acyclic graph dag nodes labeled from find all possible paths from node node and return them any order graph given as follows graphi list all nodes can visit from node ie there directed edge from node node graphij example input graph output explanation there two paths and example input graph output constraints graphlength graphij graphij ie there will be no selfloops all elements graphi unique input graph guaranteed be dag
shortest impossible sequence rolls given integer array rolls length and integer roll sided dice numbered from times where result ith roll rollsi return length shortest sequence rolls that cannot be taken from rolls sequence rolls length len result rolling sided dice len times note that sequence taken does not have be consecutive as long as order example input rolls output explanation every sequence rolls length can be taken from rolls every sequence rolls length can be taken from rolls sequence cannot be taken from rolls so return note that there other sequences that cannot be taken from rolls example input rolls output explanation every sequence rolls length can be taken from rolls sequence cannot be taken from rolls so return note that there other sequences that cannot be taken from rolls but shortest example input rolls output explanation sequence cannot be taken from rolls so return note that there other sequences that cannot be taken from rolls but shortest constraints rollslength rollsi
highest ranked items within price range given indexed integer array grid size that represents map items shop integers grid represent following represents wall that cannot pass through represents empty cell that can freely move and from all other positive integers represent price item that cell may also freely move and from these item cells takes step travel between adjacent grid cells also given integer arrays pricing and start where pricing low high and start row col indicates that start position row col and interested only items price range low high inclusive further given integer interested positions highestranked items whose prices within given price range rank determined first these criteria that different distance defined as length shortest path from start shorter distance has higher rank price lower price has higher rank but must be price range row number smaller row number has higher rank column number smaller column number has higher rank return highestranked items within price range sorted their rank highest lowest if there fewer than reachable items within price range return all them example input grid pricing start output explanation start price range can take items from and ranks these items distance distance distance distance thus highest ranked items price range and example input grid pricing start output explanation start price range can take items from and ranks these items distance price distance price distance distance thus highest ranked items price range and example input grid pricing start output explanation start price range can take items from and ranks these items distance distance thus highest ranked items price range and note that but there only reachable items within price range constraints gridlength gridilength gridij pricinglength low high startlength row col gridrowcol
largest divisible subset given set distinct positive integers nums return largest subset answer such that every pair answeri answerj elements this subset satisfies answeri answerj or answerj answeri if there multiple solutions return any them example input nums output explanation also accepted example input nums output constraints numslength numsi all integers nums unique
subarray sum equals given array integers nums and integer return total number subarrays whose sum equals subarray contiguous nonempty sequence elements within array example input nums output example input nums output constraints numslength numsi
number ways buy pens and pencils given integer total indicating amount money have also given two integers cost and cost indicating price pen and pencil respectively can spend part or all your money buy multiple quantities or none each kind writing utensil return number distinct ways can buy some number pens and pencils example input total cost cost output explanation price pen and price pencil if buy pens can buy or pencils if buy pen can buy or pencils if buy pens cannot buy any pencils total number ways buy pens and pencils example input total cost cost output explanation price both pens and pencils which cost more than total so cannot buy any writing utensils therefore there only way buy pens and pencils constraints total cost cost
throttle given function fn and time milliseconds return throttled version that function throttled function first called without delay and then time interval milliseconds cant be executed but should store latest function arguments provided call fn them after end delay instance ms and function called ms ms and ms first function call would block calling functions following milliseconds second function call would save arguments and third call arguments should overwrite currently stored arguments from second call because second and third calls called before ms once delay has passed throttled function should be called latest arguments provided during delay period and should also create another delay period ms above diagram shows how throttle will transform events each rectangle represents ms and throttle time ms each color represents different set inputs example input calls tinputs output tinputs explanation st call always called without delay example input calls tinputstinputs output tinputstinputs explanation st called function arguments without delay nd called ms within delay period because ms ms ms so next call can be reached ms therefore save arguments from nd call use them callback st call example input calls tinputstinputstinputst inputst inputs output tinputstinputstinputstinputs explanation st called function arguments without delay nd called ms within delay period because ms ms ms so should only save arguments rd also called within delay period and because need just latest function arguments overwrite previous ones after delay period do callback ms saved arguments that callback makes another delay period ms ms ms so that next function can be called ms th called ms delay period so should be called as callback ms that will create another delay period ms ms ms th called ms but after ms so should be called immediately and should create another delay period ms ms ms constraints callslength callsit callsiinputsi callsiinputslength
minimum deletions make string balanced given string consisting only characters and can delete any number characters make balanced balanced if there no pair indices ij such that and si and sj return minimum number deletions needed make balanced example input aababbab output explanation can either delete characters indexed positions and aababbab aaabbb or delete characters indexed positions and aababbab aabbbb example input bbaaaaabb output explanation only solution delete first two characters constraints slength si or
restore array from adjacent pairs there integer array nums that consists unique elements but have forgotten however do remember every pair adjacent elements nums given integer array adjacentpairs size where each adjacentpairsi ui vi indicates that elements ui and vi adjacent nums guaranteed that every adjacent pair elements numsi and numsi will exist adjacentpairs either as numsi numsi or numsi numsi pairs can appear any order return original array nums if there multiple solutions return any them example input adjacentpairs output explanation this array has all its adjacent pairs adjacentpairs notice that adjacentpairsi may not be lefttoright order example input adjacentpairs output explanation there can be negative numbers another solution which would also be accepted example input adjacentpairs output constraints numslength adjacentpairslength adjacentpairsilength numsi ui vi there exists some nums that has adjacentpairs as its pairs
perfect squares given integer return least number perfect square numbers that sum perfect square integer that square integer other words product some integer itself example and perfect squares while and not example input output explanation example input output explanation constraints
construct string repeat limit given string and integer repeatlimit construct new string repeatlimitedstring using characters such that no letter appears more than repeatlimit times row do not have use all characters from return lexicographically largest repeatlimitedstring possible string lexicographically larger than string if first position where and differ string has letter that appears later alphabet than corresponding letter if first minalength blength characters do not differ then longer string lexicographically larger one example input cczazcc repeatlimit output zzcccac explanation use all characters from construct repeatlimitedstring zzcccac letter appears most time row letter appears most times row letter appears most times row hence no letter appears more than repeatlimit times row and string valid repeatlimitedstring string lexicographically largest repeatlimitedstring possible so return zzcccac note that string zzcccca lexicographically larger but letter appears more than times row so not valid repeatlimitedstring example input aababab repeatlimit output bbabaa explanation use only some characters from construct repeatlimitedstring bbabaa letter appears most times row letter appears most times row hence no letter appears more than repeatlimit times row and string valid repeatlimitedstring string lexicographically largest repeatlimitedstring possible so return bbabaa note that string bbabaaa lexicographically larger but letter appears more than times row so not valid repeatlimitedstring constraints repeatlimit slength consists lowercase english letters
find original array prefix xor given integer array pref size find and return array arr size that satisfies prefi arr arr arri note that denotes bitwisexor operation can be proven that answer unique example input pref output explanation from array have following pref pref pref pref pref example input pref output explanation have pref arr constraints preflength prefi
verifying alien dictionary alien language surprisingly also use english lowercase letters but possibly different order order alphabet some permutation lowercase letters given sequence words written alien language and order alphabet return true if and only if given words sorted lexicographically this alien language example input words helloleetcode order hlabcdefgijkmnopqrstuvwxyz output true explanation as comes before this language then sequence sorted example input words wordworldrow order worldabcefghijkmnpqstuvxyz output false explanation as comes after this language then words words hence sequence unsorted example input words appleapp order abcdefghijklmnopqrstuvwxyz output false explanation first three characters app match and second string shorter size according lexicographical rules apple app because where defined as blank character which less than any other character more info constraints wordslength wordsilength orderlength all characters wordsi and order english lowercase letters
parse lisp expression given string expression representing lisplike expression return integer value syntax these expressions given as follows expression either integer let expression add expression mult expression or assigned variable expressions always evaluate single integer integer could be positive or negative let expression takes form let vn en expr where let always string let then there one or more pairs alternating variables and expressions meaning that first variable assigned value expression second variable assigned value expression and so sequentially and then value this let expression value expression expr add expression takes form add where add always string add there always two expressions and result addition evaluation and evaluation mult expression takes form mult where mult always string mult there always two expressions and result multiplication evaluation and evaluation this question will use smaller subset variable names variable starts lowercase letter then zero or more lowercase letters or digits additionally your convenience names add let and mult protected and will never be used as variable names finally there concept scope when expression variable name evaluated within context that evaluation innermost scope terms parentheses checked first value that variable and then outer scopes checked sequentially guaranteed that every expression legal please see examples more details scope example input expression let mult let add output explanation expression add when checking value variable check from innermost scope outermost context variable trying evaluate since found first value example input expression let output explanation assignment let statements processed sequentially example input expression let add add output explanation first add evaluates as and assigned second add evaluates as constraints expressionlength there no leading or trailing spaces expression all tokens separated single space expression answer and all intermediate calculations that answer guaranteed fit bit integer expression guaranteed be legal and evaluate integer
game play analysis iv sql schema table activity column name type playerid int deviceid int eventdate date gamesplayed int playerid eventdate primary key this table this table shows activity players some games each row record player who logged and played number games possibly before logging out someday using some device write sql query report fraction players that logged again day after day first logged rounded decimal places other words need count number players that logged least two consecutive days starting from their first login date then divide that number total number players query result format following example example input activity table playerid deviceid eventdate gamesplayed output fraction explanation only player id logged back after first day had logged so answer
max chunks make sorted ii given integer array arr split arr into some number chunks ie partitions and individually sort each chunk after concatenating them result should equal sorted array return largest number chunks can make sort array example input arr output explanation splitting into two or more chunks will not return required result example splitting into will result which isnt sorted example input arr output explanation can split into two chunks such as however splitting into highest number chunks possible constraints arrlength arri
find mode binary search tree given root binary search tree bst duplicates return all modes ie most frequently occurred element if tree has more than one mode return them any order assume bst defined as follows left subtree node contains only nodes keys less than or equal nodes key right subtree node contains only nodes keys greater than or equal nodes key both left and right subtrees must also be binary search trees example input root null output example input root output constraints number nodes tree range nodeval follow up could do that without using any extra space assume that implicit stack space incurred due recursion does not count
shortest path binary matrix given binary matrix grid return length shortest clear path matrix if there no clear path return clear path binary matrix path from topleft cell ie bottomright cell ie such that all visited cells path all adjacent cells path directionally connected ie different and share edge or corner length clear path number visited cells this path example input grid output example input grid output example input grid output constraints gridlength gridilength gridij or
exam room there exam room seats single row labeled from when student enters room must sit seat that maximizes distance closest person if there multiple such seats sit seat lowest number if no one room then student sits seat number design class that simulates mentioned exam room implement examroom class examroomint initializes object exam room number seats int seat returns label seat which next student will set void leaveint indicates that student sitting seat will leave room guaranteed that there will be student sitting seat example input examroom seat seat seat seat leave seat output null null explanation examroom examroom new examroom examroomseat return no one room then student sits seat number examroomseat return student sits last seat number examroomseat return student sits last seat number examroomseat return student sits last seat number examroomleave examroomseat return student sits last seat number constraints guaranteed that there student sitting seat most calls will be made seat and leave
find winner tic tac toe game tictactoe played two players and grid rules tictactoe players take turns placing characters into empty squares first player always places characters while second player always places characters and characters always placed into empty squares never filled ones game ends when there three same nonempty character filling any row column or diagonal game also ends if all squares nonempty no more moves can be played if game over given integer array moves where movesi rowi coli indicates that ith move will be played gridrowicoli return winner game if exists or case game ends draw return draw if there still movements play return pending can assume that moves valid ie follows rules tictactoe grid initially empty and will play first example input moves output explanation wins always play first example input moves output explanation wins example input moves output draw explanation game ends draw since there no moves make constraints moveslength movesilength rowi coli there no repeated elements moves moves follow rules tic tac toe
count unique characters all substrings given string lets define function countuniquecharss that returns number unique characters example calling countuniquecharss if leetcode then unique characters since appear only once therefore countuniquecharss given string return sum countuniquecharst where substring test cases generated such that answer fits bit integer notice that some substrings can be repeated so this case have count repeated ones too example input abc output explanation all possible substrings abcabbc and abc every substring composed only unique letters sum lengths all substring example input aba output explanation same as example except countuniquecharsaba example input leetcode output constraints slength consists uppercase english letters only
construct binary tree from preorder and inorder traversal given two integer arrays preorder and inorder where preorder preorder traversal binary tree and inorder inorder traversal same tree construct and return binary tree example input preorder inorder output nullnull example input preorder inorder output constraints preorderlength inorderlength preorderlength preorderi inorderi preorder and inorder consist unique values each value inorder also appears preorder preorder guaranteed be preorder traversal tree inorder guaranteed be inorder traversal tree
complement base integer complement integer integer get when flip all and all its binary representation example integer binary and its complement which integer given integer return its complement example input output explanation binary complement binary which base example input output explanation binary complement binary which base example input output explanation binary complement binary which base constraints note this question same as httpsleetcodecomproblemsnumbercomplement
moving stones until consecutive ii there some stones different positions xaxis given integer array stones positions stones call stone endpoint stone if has smallest or largest position one move pick up endpoint stone and move unoccupied position so that no longer endpoint stone particular if stones say stones cannot move endpoint stone position since moving any position such as or will still keep that stone as endpoint stone game ends when cannot make any more moves ie stones three consecutive positions return integer array answer length where answer minimum number moves can play and answer maximum number moves can play example input stones output explanation can move one move finish game or can move two moves finish game example input stones output explanation can move then finish game or can move finish game notice cannot move finish game because that would be illegal move constraints stoneslength stonesi all values stones unique
convert base given integer return binary string representing its representation base note that returned string should not have leading zeros unless string example input output explantion example input output explantion example input output explantion constraints
lru cache design data structure that follows constraints least recently used lru cache implement lrucache class lrucacheint capacity initialize lru cache positive size capacity int getint key return value key if key exists otherwise return void putint key int value update value key if key exists otherwise add keyvalue pair cache if number keys exceeds capacity from this operation evict least recently used key functions get and put must each run average time complexity example input lrucache put put get put get put get get get output null null null null null explanation lrucache lrucache new lrucache lrucacheput cache lrucacheput cache lrucacheget return lrucacheput lru key evicts key cache lrucacheget returns not found lrucacheput lru key evicts key cache lrucacheget return not found lrucacheget return lrucacheget return constraints capacity key value most calls will be made get and put
filling bookcase shelves given array books where booksi thicknessi heighti indicates thickness and height ith book also given integer shelfwidth want place these books order onto bookcase shelves that have total width shelfwidth choose some books place this shelf such that sum their thickness less than or equal shelfwidth then build another level shelf bookcase so that total height bookcase has increased maximum height books just put down repeat this process until there no more books place note that each step above process order books place same order as given sequence books example if have ordered list books might place first and second book onto first shelf third book second shelf and fourth and fifth book last shelf return minimum possible height that total bookshelf can be after placing shelves this manner example input books shelfwidth output explanation sum heights shelves notice that book number does not have be first shelf example input books shelfwidth output constraints bookslength thicknessi shelfwidth heighti
department highest salary sql schema table employee column name type id int name varchar salary int departmentid int id primary key column this table departmentid foreign key id from department table each row this table indicates id name and salary employee also contains id their department table department column name type id int name varchar id primary key column this table guaranteed that department name not null each row this table indicates id department and its name write sql query find employees who have highest salary each departments return result table any order query result format following example example input employee table id name salary departmentid joe jim henry sam max department table id name sales output department employee salary jim sales henry max explanation max and jim both have highest salary department and henry has highest salary sales department
kth smallest lexicographical order given two integers and return kth lexicographically smallest integer range example input output explanation lexicographical order so second smallest number example input output constraints
queries permutation key given array queries positive integers between and have process all queriesi from iquerieslength according following rules beginning have permutation pm current find position queriesi permutation indexing from and then move this beginning permutation notice that position queriesi result queriesi return array containing result given queries example input queries output explanation queries processed as follow queriesi position then move beginning resulting queriesi position then move beginning resulting queriesi position then move beginning resulting queriesi position then move beginning resulting therefore array containing result example input queries output example input queries output constraints querieslength queriesi
remove zero sum consecutive nodes from linked list given head linked list repeatedly delete consecutive sequences nodes that sum until there no such sequences after doing so return head final linked list may return any such answer note that examples below all sequences serializations listnode objects example input head output note answer would also be accepted example input head output example input head output constraints given linked list will contain between and nodes each node linked list has nodeval
palindromic substrings given string return number palindromic substrings string palindrome when reads same backward as forward substring contiguous sequence characters within string example input abc output explanation three palindromic strings example input aaa output explanation six palindromic strings aa aa aaa constraints slength consists lowercase english letters
monotonic array array monotonic if either monotone increasing or monotone decreasing array nums monotone increasing if all numsi numsj array nums monotone decreasing if all numsi numsj given integer array nums return true if given array monotonic or false otherwise example input nums output true example input nums output true example input nums output false constraints numslength numsi
count operations obtain zero given two nonnegative integers num and num one operation if num num must subtract num from num otherwise subtract num from num example if num and num subtract num from num thus obtaining num and num however if num and num after one operation num and num return number operations required make either num or num example input num num output explanation operation num num since num num subtract num from num and get num num operation num num since num num subtract num from num operation num num since num num subtract num from num now num and num since num do not need perform any further operations so total number operations required example input num num output explanation operation num num since num num subtract num from num and get num now num and num since num done so total number operations required constraints num num
maximize score after operations given nums array positive integers size must perform operations this array ith operation indexed will choose two elements and receive score gcdx remove and from nums return maximum score can receive after performing operations function gcdx greatest common divisor and example input nums output explanation optimal choice operations gcd example input nums output explanation optimal choice operations gcd gcd example input nums output explanation optimal choice operations gcd gcd gcd constraints numslength numsi
number strings that appear as substrings word given array strings patterns and string word return number strings patterns that exist as substring word substring contiguous sequence characters within string example input patterns aabcbcd word abc output explanation appears as substring abc abc appears as substring abc bc appears as substring abc does not appear as substring abc strings patterns appear as substring word example input patterns abc word aaaaabbbbb output explanation appears as substring aaaaabbbbb appears as substring aaaaabbbbb does not appear as substring aaaaabbbbb strings patterns appear as substring word example input patterns aaa word ab output explanation each patterns appears as substring word ab constraints patternslength patternsilength wordlength patternsi and word consist lowercase english letters
bitwise xor all pairings given two indexed arrays nums and nums consisting nonnegative integers there exists another array nums which contains bitwise xor all pairings integers between nums and nums every integer nums paired every integer nums exactly once return bitwise xor all integers nums example input nums nums output explanation possible nums array bitwise xor all these numbers so return example input nums nums output explanation all possible pairs bitwise xors nums nums nums nums nums nums and nums nums thus one possible nums array so return constraints numslength numslength numsi numsj
find pairs smallest sums given two integer arrays nums and nums sorted ascending order and integer define pair which consists one element from first array and one element from second array return pairs uk vk smallest sums example input nums nums output explanation first pairs returned from sequence example input nums nums output explanation first pairs returned from sequence example input nums nums output explanation all possible pairs returned from sequence constraints numslength numslength numsi numsi nums and nums both sorted ascending order
product sales analysis sql schema table sales column name type saleid int productid int year int quantity int price int saleid year primary key this table productid foreign key product table each row this table shows sale product productid certain year note that price per unit table product column name type productid int productname varchar productid primary key this table each row this table indicates product name each product write sql query that reports productname year and price each saleid sales table return resulting table any order query result format following example example input sales table saleid productid year quantity price product table productid productname nokia apple samsung output productname year price nokia nokia apple explanation from saleid can conclude that nokia sold year from saleid can conclude that nokia sold year from saleid can conclude that apple sold year
counting bits given integer return array ans length such that each ansi number binary representation example input output explanation example input output explanation constraints follow up very easy come up solution runtime log can do linear time and possibly single pass can do without using any builtin function ie like builtinpopcount
department top three salaries sql schema table employee column name type id int name varchar salary int departmentid int id primary key column this table departmentid foreign key id from department table each row this table indicates id name and salary employee also contains id their department table department column name type id int name varchar id primary key column this table each row this table indicates id department and its name companys executives interested seeing who earns most money each companys departments high earner department employee who has salary top three unique salaries that department write sql query find employees who high earners each departments return result table any order query result format following example example input employee table id name salary departmentid joe henry sam max janet randy will department table id name sales output department employee salary max joe randy will sales henry sales sam explanation department max earns highest unique salary both randy and joe earn secondhighest unique salary will earns thirdhighest unique salary sales department henry earns highest salary sam earns secondhighest salary there no thirdhighest salary as there only two employees
minimum flips make or equal given positives numbers and return minimum flips required some bits and make or bitwise or operation flip operation consists change any single bit or change bit their binary representation example input output explanation after flips such that or example input output example input output constraints
four divisors given integer array nums return sum divisors integers that array that have exactly four divisors if there no such integer array return example input nums output explanation has divisors has divisors has divisors answer sum divisors only example input nums output example input nums output constraints numslength numsi
replace substring balanced string given string length containing only four kinds characters and string said be balanced if each its characters appears times where length string return minimum length substring that can be replaced any other string same length make balanced if already balanced return example input qwer output explanation already balanced example input qqwe output explanation need replace so that rqwe or qrwe balanced example input qqqw output explanation can replace first qq er constraints slength multiple contains only and
detect capital define usage capitals word be right when one following cases holds all letters this word capitals like usa all letters this word not capitals like leetcode only first letter this word capital like google given string word return true if usage capitals right example input word usa output true example input word flag output false constraints wordlength word consists lowercase and uppercase english letters
coordinate maximum network quality given array network towers towers where towersi xi yi qi denotes ith network tower location xi yi and quality factor qi all coordinates integral coordinates xy plane and distance between two coordinates euclidean distance also given integer radius where tower reachable if distance less than or equal radius outside that distance signal becomes garbled and tower not reachable signal quality ith tower coordinate calculated formula qi d where distance between tower and coordinate network quality coordinate sum signal qualities from all reachable towers return array cx cy representing integral coordinate cx cy where network quality maximum if there multiple coordinates same network quality return lexicographically minimum nonnegative coordinate note coordinate lexicographically smaller than if either or and val greatest integer less than or equal val floor function example input towers radius output explanation coordinate total quality quality from results sqrt  quality from results sqrt  quality from results sqrt  no other coordinate has higher network quality example input towers radius output explanation since there only one tower network quality highest right towers location example input towers radius output explanation coordinate has highest network quality constraints towerslength towersilength xi yi qi radius
nth tribonacci number tribonacci sequence tn defined as follows and tn tn tn tn given return value tn example input output explanation example input output constraints answer guaranteed fit within bit integer ie answer
compare strings frequency smallest character let function fs be frequency lexicographically smallest character nonempty string example if dcce then fs because lexicographically smallest character which has frequency given array strings words and another array query strings queries each query queriesi count number words words such that fqueriesi fw each words return integer array answer where each answeri answer ith query example input queries cbd words zaaaz output explanation first query have fcbd fzaaaz so fcbd fzaaaz example input queries bbbcc words aaaaaaaaaa output explanation first query only fbbb faaaa second query both faaa and faaaa both fcc constraints querieslength wordslength queriesilength wordsilength queriesij wordsij consist lowercase english letters
convert object json string given object return valid json string that object may assume object only inludes strings integers arrays objects booleans and null returned string should not include extra spaces order keys should be same as order returned objectkeys please solve without using builtin jsonstringify method example input object yx output yx explanation return json representation note that order keys should be same as order returned objectkeys example input object astrbctruednull output astrbctruednull explanation primitives json strings numbers booleans and null example input object keyabnullhello output keyabnullhello explanation objects and arrays can include other objects and arrays example input object true output true explanation primitive types valid inputs constraints object includes strings integers booleans arrays objects and null jsonstringifyobjectlength maxnestinglevel all strings will only contain alphanumeric characters
maximum value given index bounded array given three positive integers index and maxsum want construct array nums indexed that satisfies following conditions numslength numsi positive integer where absnumsi numsi where sum all elements nums does not exceed maxsum numsindex maximized return numsindex constructed array note that absx equals if and otherwise example input index maxsum output explanation nums one array that satisfies all conditions there no arrays that satisfy all conditions and have nums so maximum nums example input index maxsum output constraints maxsum index
human traffic stadium sql schema table stadium column name type id int visitdate date people int visitdate primary key this table each row this table contains visit date and visit id stadium number people during visit no two rows will have same visitdate and as id increases dates increase as well write sql query display records three or more rows consecutive ids and number people greater than or equal each return result table ordered visitdate ascending order query result format following example example input stadium table id visitdate people output id visitdate people explanation four rows ids and have consecutive ids and each them has people attended note that row included even though visitdate not next day after row rows ids and not included because need least three consecutive ids
flatten nested list iterator given nested list integers nestedlist each element either integer or list whose elements may also be integers or other lists implement iterator flatten implement nestediterator class nestediteratorlistnestedinteger nestedlist initializes iterator nested list nestedlist int next returns next integer nested list boolean hasnext returns true if there still some integers nested list and false otherwise your code will be tested following pseudocode initialize iterator nestedlist res while iteratorhasnext append iteratornext end res return res if res matches expected flattened list then your code will be judged as correct example input nestedlist output explanation calling next repeatedly until hasnext returns false order elements returned next should be example input nestedlist output explanation calling next repeatedly until hasnext returns false order elements returned next should be constraints nestedlistlength values integers nested list range
hindex given array integers citations where citationsi number citations researcher received their ith paper return researchers hindex according definition hindex wikipedia hindex defined as maximum value such that given researcher has published least papers that have each been cited least times example input citations output explanation means researcher has papers total and each them had received citations respectively since researcher has papers least citations each and remaining two no more than citations each their hindex example input citations output constraints citationslength citationsi
shortest bridge given binary matrix grid where represents land and represents water island directionally connected group not connected any other there exactly two islands grid may change connect two islands form one island return smallest number must flip connect two islands example input grid output example input grid output example input grid output constraints gridlength gridilength gridij either or there exactly two islands grid
lowest common ancestor binary tree given binary tree find lowest common ancestor lca two given nodes tree according definition lca wikipedia the lowest common ancestor defined between two nodes and as lowest node that has both and as descendants where allow node be descendant itself example input root nullnull output explanation lca nodes and example input root nullnull output explanation lca nodes and since node can be descendant itself according lca definition example input root output constraints number nodes tree range nodeval all nodeval unique and will exist tree
basic calculator ii given string which represents expression evaluate this expression and return its value integer division should truncate toward zero may assume that given expression always valid all intermediate results will be range note not allowed use any builtin function which evaluates strings as mathematical expressions such as eval example input output example input output example input output constraints slength consists integers and operators separated some number spaces represents valid expression all integers expression nonnegative integers range answer guaranteed fit bit integer
smallest klength subsequence occurrences letter given string integer letter letter and integer repetition return lexicographically smallest subsequence length that has letter letter appear least repetition times test cases generated so that letter appears least repetition times subsequence string that can be derived from another string deleting some or no characters without changing order remaining characters string lexicographically smaller than string if first position where and differ string has letter that appears earlier alphabet than corresponding letter example input leet letter repetition output eet explanation there four subsequences length that have letter appear least time lee from leet let from leet let from leet eet from leet lexicographically smallest subsequence among them eet example input leetcode letter repetition output ecde explanation ecde lexicographically smallest subsequence length that has letter appear least times example input bb letter repetition output bb explanation bb only subsequence length that has letter appear least times constraints repetition slength consists lowercase english letters letter lowercase english letter and appears least repetition times
destination city given array paths where pathsi cityai citybi means there exists direct path going from cityai citybi return destination city that city without any path outgoing another city guaranteed that graph paths forms line without any loop therefore there will be exactly one destination city example input paths londonnew yorknew yorklimalimasao paulo output sao paulo explanation starting london city will reach sao paulo city which destination city your trip consist london new york lima sao paulo example input paths bcdbca output explanation all possible trips clearly destination city example input paths az output constraints pathslength pathsilength cityailength citybilength cityai citybi all strings consist lowercase and uppercase english letters and space character
max value equation given array points containing coordinates points plane sorted xvalues where pointsi xi yi such that xi xj all pointslength also given integer return maximum value equation yi yj xi xj where xi xj and pointslength guaranteed that there exists least one pair points that satisfy constraint xi xj example input points output explanation first two points satisfy condition xi xj and if calculate equation get third and fourth points also satisfy condition and give value no other pairs satisfy condition so return max and example input points output explanation only first two points have absolute difference or less xvalues and give value constraints pointslength pointsilength xi yi xi xj all pointslength xi form strictly increasing sequence
minimum time complete all tasks there computer that can run unlimited number tasks same time given integer array tasks where tasksi starti endi durationi indicates that ith task should run total durationi seconds not necessarily continuous within inclusive time range starti endi may turn computer only when needs run task can also turn off if idle return minimum time during which computer should be turned complete all tasks example input tasks output explanation first task can be run inclusive time range second task can be run inclusive time range third task can be run two inclusive time ranges and computer will be total seconds example input tasks output explanation first task can be run inclusive time range second task can be run inclusive time ranges and third task can be run two inclusive time range computer will be total seconds constraints taskslength tasksilength starti endi durationi endi starti
two sum ii input array sorted given indexed array integers numbers that already sorted nondecreasing order find two numbers such that add up specific target number let these two numbers be numbersindex and numbersindex where index index numberslength return indices two numbers index and index added one as integer array index index length tests generated such that there exactly one solution may not use same element twice your solution must use only constant extra space example input numbers target output explanation sum and therefore index index return example input numbers target output explanation sum and therefore index index return example input numbers target output explanation sum and therefore index index return constraints numberslength numbersi numbers sorted nondecreasing order target tests generated such that there exactly one solution
paint house iii there row houses small city each house must be painted one colors labeled from some houses that have been painted last summer should not be painted again neighborhood maximal group continuous houses that painted same color example houses contains neighborhoods given array houses matrix cost and integer target where housesi color house and if house not painted yet costij cost paint house color return minimum cost painting all remaining houses such way that there exactly target neighborhoods if not possible return example input houses cost target output explanation paint houses this way this array contains target neighborhoods cost paint all houses example input houses cost target output explanation some houses already painted paint houses this way this array contains target neighborhoods cost paint first and last house example input houses cost target output explanation houses already painted total neighborhoods different target constraints houseslength costlength costilength target housesi costij
maximum building height want build new buildings city new buildings will be built line and labeled from however there city restrictions heights new buildings height each building must be nonnegative integer height first building must be height difference between any two adjacent buildings cannot exceed additionally there city restrictions maximum height specific buildings these restrictions given as integer array restrictions where restrictionsi idi maxheighti indicates that building idi must have height less than or equal maxheighti guaranteed that each building will appear most once restrictions and building will not be restrictions return maximum possible height tallest building example input restrictions output explanation green area image indicates maximum allowed height each building can build buildings heights and tallest building has height example input restrictions output explanation green area image indicates maximum allowed height each building can build buildings heights and tallest building has height example input restrictions output explanation green area image indicates maximum allowed height each building can build buildings heights and tallest building has height constraints restrictionslength minn idi idi unique maxheighti
smallest string swaps given string and array pairs indices string pairs where pairsi indicates indicesindexed string can swap characters any pair indices given pairs any number times return lexicographically smallest string that can be changed after using swaps example input dcab pairs output bacd explaination swap and bcad swap and bacd example input dcab pairs output abcd explaination swap and bcad swap and acbd swap and abcd example input cba pairs output abc explaination swap and bca swap and bac swap and abc constraints slength pairslength pairsi pairsi slength only contains lower case english letters
max increase keep city skyline there city composed blocks where each block contains single building shaped like vertical square prism given indexed integer matrix grid where gridrc represents height building located block row and column citys skyline outer contour formed all building when viewing side city from distance skyline from each cardinal direction north east south and west may be different allowed increase height any number buildings any amount amount can be different per building height height building can also be increased however increasing height building should not affect citys skyline from any cardinal direction return maximum total sum that height buildings can be increased without changing citys skyline from any cardinal direction example input grid output explanation building heights shown center above image skylines when viewed from each cardinal direction drawn red grid after increasing height buildings without affecting skylines gridnew example input grid output explanation increasing height any building will result skyline changing constraints gridlength gridrlength gridrc
insert delete getrandom implement randomizedset class randomizedset initializes randomizedset object bool insertint val inserts item val into set if not present returns true if item not present false otherwise bool removeint val removes item val from set if present returns true if item present false otherwise int getrandom returns random element from current set elements its guaranteed that least one element exists when this method called each element must have same probability being returned must implement functions class such that each function works average time complexity example input randomizedset insert remove insert getrandom remove insert getrandom output null true false true true false explanation randomizedset randomizedset new randomizedset randomizedsetinsert inserts set returns true as inserted successfully randomizedsetremove returns false as does not exist set randomizedsetinsert inserts set returns true set now contains randomizedsetgetrandom getrandom should return either or randomly randomizedsetremove removes from set returns true set now contains randomizedsetinsert already set so return false randomizedsetgetrandom since only number set getrandom will always return constraints val most calls will be made insert remove and getrandom there will be least one element data structure when getrandom called
delete node bst given root node reference bst and key delete node given key bst return root node reference possibly updated bst basically deletion can be divided into two stages search node remove if node found delete node example input root null key output nullnull explanation given key delete so find node value and delete one valid answer nullnull shown above bst please notice that another valid answer nullnull and its also accepted example input root null key output null explanation tree does not contain node value example input root key output constraints number nodes tree range nodeval each node has unique value root valid binary search tree key follow up could solve time complexity oheight tree
minimum moves equal array elements given integer array nums size return minimum number moves required make all array elements equal one move can increment elements array example input nums output explanation only three moves needed remember each move increments two elements example input nums output constraints numslength numslength numsi answer guaranteed fit bit integer
longest wellperforming interval given hours list number hours worked per day given employee day considered be tiring day if and only if number hours worked strictly greater than wellperforming interval interval days which number tiring days strictly larger than number nontiring days return length longest wellperforming interval example input hours output explanation longest wellperforming interval example input hours output constraints hourslength hoursi
longest absolute file path suppose have file system that stores both files and directories example one system represented following picture here have dir as only directory root dir contains two subdirectories subdir and subdir subdir contains file fileext and subdirectory subsubdir subdir contains subdirectory subsubdir which contains file fileext text form looks like this representing tab character dir subdir fileext subsubdir subdir subsubdir fileext if write this representation code will look like this dirntsubdirnttfileextnttsubsubdirntsubdirnttsubsubdirntttfileext note that and newline and tab characters every file and directory has unique absolute path file system which order directories that must be opened reach filedirectory itself all concatenated using above example absolute path fileext dirsubdirsubsubdirfileext each directory name consists letters digits andor spaces each file name form nameextension where name and extension consist letters digits andor spaces given string input representing file system explained format return length longest absolute path file abstracted file system if there no file system return note that testcases generated such that file system valid and no file or directory name has length example input input dirntsubdirntsubdirnttfileext output explanation have only one file and absolute path dirsubdirfileext length example input input dirntsubdirnttfileextnttsubsubdirntsubdirnttsubsubdirntttfileext output explanation have two files dirsubdirfileext length dirsubdirsubsubdirfileext length return since longest absolute path file example input input output explanation do not have any files just single directory named constraints inputlength input may contain lowercase or uppercase english letters new line character tab character dot space and digits all file and directory names have positive length
find valid matrix given row and column sums given two arrays rowsum and colsum nonnegative integers where rowsumi sum elements ith row and colsumj sum elements jth column matrix other words do not know elements matrix but do know sums each row and column find any matrix nonnegative integers size rowsumlength colsumlength that satisfies rowsum and colsum requirements return array representing any matrix that fulfills requirements its guaranteed that least one matrix that fulfills requirements exists example input rowsum colsum output explanation th row rowsum st row rowsum th column colsum st column colsum row and column sums match and all matrix elements nonnegative another possible matrix example input rowsum colsum output constraints rowsumlength colsumlength rowsumi colsumi sumrowsum sumcolsum
minimum moves make array complementary given integer array nums even length and integer limit one move can replace any integer from nums another integer between and limit inclusive array nums complementary if all indices indexed numsi numsn equals same number example array complementary because all indices numsi numsn return minimum number moves required make nums complementary example input nums limit output explanation move can change nums underlined elements changed nums nums nums nums nums nums nums nums therefore numsi numsni every so nums complementary example input nums limit output explanation moves can change nums cannot change any number since limit example input nums limit output explanation nums already complementary constraints numslength numsi limit even
decode xored array there hidden integer array arr that consists nonnegative integers encoded into another integer array encoded length such that encodedi arri xor arri example if arr then encoded given encoded array also given integer first that first element arr ie arr return original array arr can be proved that answer exists and unique example input encoded first output explanation if arr then first and encoded xor xor xor example input encoded first output constraints encodedlength encodedi first
fancy sequence write api that generates fancy sequences using append addall and multall operations implement fancy class fancy initializes object empty sequence void appendval appends integer val end sequence void addallinc increments all existing values sequence integer inc void multallm multiplies all existing values sequence integer int getindexidx gets current value index idx indexed sequence modulo if index greater or equal than length sequence return example input fancy append addall append multall getindex addall append multall getindex getindex getindex output null null null null null null null null explanation fancy fancy new fancy fancyappend fancy sequence fancyaddall fancy sequence fancyappend fancy sequence fancymultall fancy sequence fancygetindex return fancyaddall fancy sequence fancyappend fancy sequence fancymultall fancy sequence fancygetindex return fancygetindex return fancygetindex return constraints val inc idx most calls total will be made append addall multall and getindex
next greater element ii given circular integer array nums ie next element numsnumslength nums return next greater number every element nums next greater number number first greater number its traversingorder next array which means could search circularly find its next greater number if doesnt exist return this number example input nums output explanation first next greater number number cant find next greater number second next greater number needs search circularly which also example input nums output constraints numslength numsi
largest triangle area given array points xy plane points where pointsi xi yi return area largest triangle that can be formed any three different points answers within actual answer will be accepted example input points output explanation five points shown above figure red triangle largest example input points output constraints pointslength xi yi all given points unique
flatten multilevel doubly linked list given doubly linked list which contains nodes that have next pointer previous pointer and additional child pointer this child pointer may or may not point separate doubly linked list also containing these special nodes these child lists may have one or more children their own and so produce multilevel data structure as shown example below given head first level list flatten list so that all nodes appear singlelevel doubly linked list let curr be node child list nodes child list should appear after curr and before currnext flattened list return head flattened list nodes list must have all their child pointers set null example input head nullnullnullnullnull output explanation multilevel linked list input shown after flattening multilevel linked list becomes example input head null output explanation multilevel linked list input shown after flattening multilevel linked list becomes example input head output explanation there could be empty list input constraints number nodes will not exceed nodeval how multilevel linked list represented test cases use multilevel linked list from example above null null null serialization each level as follows null null null serialize all levels together will add nulls each level signify no node connects upper node previous level serialization becomes null null null null null null merging serialization each level and removing trailing nulls obtain nullnullnullnullnull
robot return origin there robot starting position origin plane given sequence its moves judge if this robot ends up after completes its moves given string moves that represents move sequence robot where movesi represents its ith move valid moves right left up and down return true if robot returns origin after finishes all its moves or false otherwise note way that robot facing irrelevant will always make robot move right once will always make move left etc also assume that magnitude robots movement same each move example input moves ud output true explanation robot moves up once and then down once all moves have same magnitude so ended up origin where started therefore return true example input moves ll output false explanation robot moves left twice ends up two moves left origin return false because not origin end its moves constraints moveslength moves only contains characters and
longest palindromic subsequence given string find longest palindromic subsequences length subsequence sequence that can be derived from another sequence deleting some or no elements without changing order remaining elements example input bbbab output explanation one possible longest palindromic subsequence bbbb example input cbbd output explanation one possible longest palindromic subsequence bb constraints slength consists only lowercase english letters
subtract product and sum digits integer given integer number return difference between product its digits and sum its digits example input output explanation product digits sum digits result example input output explanation product digits sum digits result constraints
minimum moves convert string given string consisting characters which either or move defined as selecting three consecutive characters and converting them note that if move applied character will stay same return minimum number moves required so that all characters converted example input xxx output explanation xxx ooo select all characters and convert them one move example input xxox output explanation xxox ooox oooo select first characters first move and convert them then select last characters and convert them so that final string contains all os example input oooo output explanation there no xs convert constraints slength si either or
array reduce transformation given integer array nums reducer function fn and initial value init return reduced array reduced array created applying following operation val fninit nums val fnval nums val fnval nums until every element array has been processed final value val returned if length array should return init please solve without using builtin arrayreduce method example input nums fn function sumaccum curr return accum curr init output explanation initially value init nums nums nums nums final answer example input nums fn function sumaccum curr return accum curr curr init output explanation initially value init nums nums nums nums final answer example input nums fn function sumaccum curr return init output explanation empty arrays answer always init constraints numslength numsi init
largest plus sign given integer have binary grid grid all values initially except some indices given array mines ith element array mines defined as minesi xi yi where gridxiyi return order largest axisaligned plus sign contained grid if there none return axisaligned plus sign order has some center gridrc along four arms length going up down left and right and made note that there could be or beyond arms plus sign only relevant area plus sign checked example input mines output explanation above grid largest plus sign can only be order one them shown example input mines output explanation there no plus sign so return constraints mineslength xi yi all pairs xi yi unique
car fleet ii there cars traveling different speeds same direction along onelane road given array cars length where carsi positioni speedi represents positioni distance between ith car and beginning road meters guaranteed that positioni positioni speedi initial speed ith car meters per second simplicity cars can be considered as points moving along number line two cars collide when occupy same position once car collides another car unite and form single car fleet cars formed fleet will have same position and same speed which initial speed slowest car fleet return array answer where answeri time seconds which ith car collides next car or if car does not collide next car answers within actual answers accepted example input cars output explanation after exactly one second first car will collide second car and form car fleet speed ms after exactly seconds third car will collide fourth car and form car fleet speed ms example input cars output constraints carslength positioni speedi positioni positioni
latest login sql schema table logins column name type userid int timestamp datetime userid timestamp primary key this table each row contains information about login time user id userid write sql query report latest login all users year do not include users who did not login return result table any order query result format following example example input logins table userid timestamp output userid laststamp explanation user logged into their account times but only once so include this login result table user logged into their account times once february and once december include only latest one december result table user logged into their account times but only once so include this login result table user did not login so do not include them result table
rabbits forest there forest unknown number rabbits asked rabbits how many rabbits have same color as and collected answers integer array answers where answersi answer ith rabbit given array answers return minimum number rabbits that could be forest example input answers output explanation two rabbits that answered could both be same color say red rabbit that answered cant be red or answers would be inconsistent say rabbit that answered blue then there should be other blue rabbits forest that didnt answer into array smallest possible number rabbits forest therefore that answered plus that didnt example input answers output constraints answerslength answersi
number excellent pairs given indexed positive integer array nums and positive integer pair numbers num num called excellent if following conditions satisfied both numbers num and num exist array nums sum number set bits num or num and num and num greater than or equal where or bitwise or operation and and bitwise and operation return number distinct excellent pairs two pairs and considered distinct if either or example and distinct note that pair num num such that num num can also be excellent if have least one occurrence num array example input nums output explanation excellent pairs following and and or both equal binary total number set bits which greater than or equal and and equal binary and or equal binary total number set bits and and equal binary and or equal binary total number set bits so number excellent pairs example input nums output explanation there no excellent pairs this array constraints numslength numsi
minimum time repair cars given integer array ranks representing ranks some mechanics ranksi rank ith mechanic mechanic rank can repair cars minutes also given integer cars representing total number cars waiting garage be repaired return minimum time taken repair all cars note all mechanics can repair cars simultaneously example input ranks cars output explanation first mechanic will repair two cars time required minutes second mechanic will repair two cars time required minutes third mechanic will repair two cars time required minutes fourth mechanic will repair four cars time required minutes can be proved that cars cannot be repaired less than minutes example input ranks cars output explanation first mechanic will repair one car time required minutes second mechanic will repair four cars time required minutes third mechanic will repair one car time required minutes can be proved that cars cannot be repaired less than minutes constraints rankslength ranksi cars
find city smallest number neighbors threshold distance there cities numbered from given array edges where edgesi fromi toi weighti represents bidirectional and weighted edge between cities fromi and toi and given integer distancethreshold return city smallest number cities that reachable through some path and whose distance most distancethreshold if there multiple such cities return city greatest number notice that distance path connecting cities and equal sum edges weights along that path example input edges distancethreshold output explanation figure above describes graph neighboring cities distancethreshold each city city city city city city city city city city city city city city city cities and have neighboring cities distancethreshold but have return city since has greatest number example input edges distancethreshold output explanation figure above describes graph neighboring cities distancethreshold each city city city city city city city city city city city city city city city city city has neighboring city distancethreshold constraints edgeslength edgesilength fromi toi weighti distancethreshold all pairs fromi toi distinct
minimize maximum array given indexed array nums comprising nonnegative integers one operation must choose integer such that and numsi decrease numsi increase numsi return minimum possible value maximum integer nums after performing any number operations example input nums output explanation one set optimal operations as follows choose and nums becomes choose and nums becomes choose and nums becomes maximum integer nums can be shown that maximum number cannot be less than therefore return example input nums output explanation optimal leave nums as and since maximum value return constraints numslength numsi
match substring after replacement given two strings and sub also given character array mappings where mappingsi oldi newi indicates that may perform following operation any number times replace character oldi sub newi each character sub cannot be replaced more than once return true if possible make sub substring replacing zero or more characters according mappings otherwise return false substring contiguous nonempty sequence characters within string example input foolebar sub leet mappings ett output true explanation replace first sub and sub now sub le substring so return true example input fooleetbar sub fl mappings output false explanation string fl not substring and no replacements can be made note that cannot replace example input fooltbar sub leetd mappings ettdbpb output true explanation replace first and second sub and sub now sub ltb substring so return true constraints sublength slength mappingslength mappingsilength oldi newi and sub consist uppercase and lowercase english letters and digits oldi and newi either uppercase or lowercase english letters or digits
determine whether matrix can be obtained rotation given two binary matrices mat and target return true if possible make mat equal target rotating mat degree increments or false otherwise example input mat target output true explanation can rotate mat degrees clockwise make mat equal target example input mat target output false explanation impossible make mat equal target rotating mat example input mat target output true explanation can rotate mat degrees clockwise two times make mat equal target constraints matlength targetlength matilength targetilength matij and targetij either or
design ordered stream there stream idkey value pairs arriving arbitrary order where idkey integer between and and value string no two pairs have same id design stream that returns values increasing order their ids returning chunk list values after each insertion concatenation all chunks should result list sorted values implement orderedstream class orderedstreamint constructs stream take values string insertint idkey string value inserts pair idkey value into stream then returns largest possible chunk currently inserted values that appear next order example input orderedstream insert insert insert insert insert ccccc aaaaa bbbbb eeeee ddddd output null aaaaa bbbbb ccccc ddddd eeeee explanation note that values ordered id aaaaa bbbbb ccccc ddddd eeeee orderedstream os new orderedstream osinsert ccccc inserts ccccc returns osinsert aaaaa inserts aaaaa returns aaaaa osinsert bbbbb inserts bbbbb returns bbbbb ccccc osinsert eeeee inserts eeeee returns osinsert ddddd inserts ddddd returns ddddd eeeee concatentating all chunks returned aaaaa bbbbb ccccc ddddd eeeee aaaaa bbbbb ccccc ddddd eeeee resulting order same as order above constraints id valuelength value consists only lowercase letters each call insert will have unique id exactly calls will be made insert
minimum interval include each query given integer array intervals where intervalsi lefti righti describes ith interval starting lefti and ending righti inclusive size interval defined as number integers contains or more formally righti lefti also given integer array queries answer jth query size smallest interval such that lefti queriesj righti if no such interval exists answer return array containing answers queries example input intervals queries output explanation queries processed as follows query interval smallest interval containing answer query interval smallest interval containing answer query interval smallest interval containing answer query interval smallest interval containing answer example input intervals queries output explanation queries processed as follows query interval smallest interval containing answer query none intervals contain answer query interval smallest interval containing answer query interval smallest interval containing answer constraints intervalslength querieslength intervalsilength lefti righti queriesj
minimum cuts divide circle valid cut circle can be cut that represented straight line that touches two points edge circle and passes through its center or cut that represented straight line that touches one point edge circle and its center some valid and invalid cuts shown figures below given integer return minimum number cuts needed divide circle into equal slices example input output explanation above figure shows how cutting circle twice through middle divides into equal slices example input output explanation least cuts needed divide circle into equal slices can be shown that less than cuts cannot result slices equal size and shape also note that first cut will not divide circle into distinct parts constraints
minimum number moves seat everyone there seats and students room given array seats length where seatsi position ith seat also given array students length where studentsj position jth student may perform following move any number times increase or decrease position ith student ie moving ith student from position or return minimum number moves required move each student seat such that no two students same seat note that there may be multiple seats or students same position beginning example input seats students output explanation students moved as follows first student moved from from position position using move second student moved from from position position using moves third student moved from from position position using move total moves used example input seats students output explanation students moved as follows first student not moved second student moved from from position position using move third student moved from from position position using moves fourth student moved from from position position using moves total moves used example input seats students output explanation note that there two seats position and two seats position students moved as follows first student moved from from position position using move second student moved from from position position using moves third student not moved fourth student not moved total moves used constraints seatslength studentslength seatsi studentsj
number smallest unoccupied chair there party where friends numbered from attending there infinite number chairs this party that numbered from infinity when friend arrives party sit unoccupied chair smallest number example if chairs and occupied when friend comes will sit chair number when friend leaves party their chair becomes unoccupied moment leave if another friend arrives that same moment can sit that chair given indexed integer array times where timesi arrivali leavingi indicating arrival and leaving times ith friend respectively and integer targetfriend all arrival times distinct return chair number that friend numbered targetfriend will sit example input times targetfriend output explanation friend arrives time and sits chair friend arrives time and sits chair friend leaves time and chair becomes empty friend leaves time and chair becomes empty friend arrives time and sits chair since friend sat chair return example input times targetfriend output explanation friend arrives time and sits chair friend arrives time and sits chair friend arrives time and sits chair friend leaves time and chair becomes empty friend leaves time and chair becomes empty friend leaves time and chair becomes empty since friend sat chair return constraints timeslength timesilength arrivali leavingi targetfriend each arrivali time distinct
sliding window maximum given array integers nums there sliding window size which moving from very left array very right can only see numbers window each time sliding window moves right one position return max sliding window example input nums output explanation window position max example input nums output constraints numslength numsi numslength
network delay time given network nodes labeled from also given times list travel times as directed edges timesi ui vi wi where ui source node vi target node and wi time takes signal travel from source target will send signal from given node return minimum time takes all nodes receive signal if impossible all nodes receive signal return example input times output example input times output example input times output constraints timeslength timesilength ui vi ui vi wi all pairs ui vi unique ie no multiple edges
maximum segment sum after removals given two indexed integer arrays nums and removequeries both length ith query element nums index removequeriesi removed splitting nums into different segments segment contiguous sequence positive integers nums segment sum sum every element segment return integer array answer length where answeri maximum segment sum after applying ith removal note same index will not be removed more than once example input nums removequeries output explanation using indicate removed element answer as follows query remove th element nums becomes and maximum segment sum segment query remove rd element nums becomes and maximum segment sum segment query remove nd element nums becomes and maximum segment sum segment query remove th element nums becomes and maximum segment sum segment query remove st element nums becomes and maximum segment sum since there no segments finally return example input nums removequeries output explanation using indicate removed element answer as follows query remove rd element nums becomes and maximum segment sum segment query remove nd element nums becomes and maximum segment sum segment query remove st element nums becomes and maximum segment sum segment query remove th element nums becomes and maximum segment sum since there no segments finally return constraints numslength removequerieslength numsi removequeriesi all values removequeries unique
find users valid emails sql schema table users column name type userid int name varchar mail varchar userid primary key this table this table contains information users signed up website some emails invalid write sql query find users who have valid emails valid email has prefix name and domain where prefix name string that may contain letters upper or lower case digits underscore period andor dash prefix name must start letter domain leetcodecom return result table any order query result format following example example input users table userid name mail winston winstonleetcodecom jonathan jonathanisgreat annabelle bellaleetcodecom sally sallycomeleetcodecom marwan quarzleetcodecom david davidgmailcom shapiro shapoleetcodecom output userid name mail winston winstonleetcodecom annabelle bellaleetcodecom sally sallycomeleetcodecom explanation mail user does not have domain mail user has sign which not allowed mail user does not have leetcode domain mail user starts period
max number ksum pairs given integer array nums and integer one operation can pick two numbers from array whose sum equals and remove them from array return maximum number operations can perform array example input nums output explanation starting nums remove numbers and then nums remove numbers and then nums there no more pairs that sum up hence total operations example input nums output explanation starting nums remove first two then nums there no more pairs that sum up hence total operation constraints numslength numsi
find all kdistant indices array given indexed integer array nums and two integers key and kdistant index index nums which there exists least one index such that and numsj key return list all kdistant indices sorted increasing order example input nums key output explanation here nums key and nums key index and so there no where and numsj key thus not kdistant index index and nums key so kdistant index index and nums key so kdistant index index and nums key so kdistant index index and nums key so kdistant index index and nums key so kdistant index index and nums key so kdistant index thus return which sorted increasing order example input nums key output explanation all indices nums there exists some index such that and numsj key so every index kdistant index hence return constraints numslength numsi key integer from array nums numslength
number burgers no waste ingredients given two integers tomatoslices and cheeseslices ingredients different burgers as follows jumbo burger tomato slices and cheese slice small burger tomato slices and cheese slice return totaljumbo totalsmall so that number remaining tomatoslices equal and number remaining cheeseslices equal if not possible make remaining tomatoslices and cheeseslices equal return example input tomatoslices cheeseslices output explantion make one jumbo burger and small burgers need tomato and cheese there will be no remaining ingredients example input tomatoslices cheeseslices output explantion there will be no way use all ingredients make small and jumbo burgers example input tomatoslices cheeseslices output explantion making jumbo burger there will be cheese remaining and making small burgers there will be cheese remaining constraints tomatoslices cheeseslices
minimum time difference given list hour clock time points hhmm format return minimum minutes difference between any two timepoints list example input timepoints output example input timepoints output constraints timepointslength timepointsi format hhmm
all oone data structure design data structure store strings count ability return strings minimum and maximum counts implement allone class allone initializes object data structure incstring key increments count string key if key does not exist data structure insert count decstring key decrements count string key if count key after decrement remove from data structure guaranteed that key exists data structure before decrement getmaxkey returns one keys maximal count if no element exists return empty string getminkey returns one keys minimum count if no element exists return empty string note that each function must run average time complexity example input allone inc inc getmaxkey getminkey inc getmaxkey getminkey hello hello leet output null null null hello hello null hello leet explanation allone allone new allone alloneinchello alloneinchello allonegetmaxkey return hello allonegetminkey return hello alloneincleet allonegetmaxkey return hello allonegetminkey return leet constraints keylength key consists lowercase english letters guaranteed that each call dec key existing data structure most calls will be made inc dec getmaxkey and getminkey
maximum xor two numbers array given integer array nums return maximum result numsi xor numsj where example input nums output explanation maximum result xor example input nums output constraints numslength numsi
sum digits base given integer base and base return sum digits after converting from base base after converting each digit should be interpreted as base number and sum should be returned base example input output explanation base expressed base example input output explanation already base constraints
design skiplist design skiplist without using any builtin libraries skiplist data structure that takes ologn time add erase and search comparing treap and redblack tree which has same function and performance code length skiplist can be comparatively short and idea behind skiplists just simple linked lists example have skiplist containing and want add and into skiplist works this way artyom kalinin cc bysa via wikimedia commons can see there many layers skiplist each layer sorted linked list help top layers add erase and search can be faster than can be proven that average time complexity each operation ologn and space complexity see more about skiplist httpsenwikipediaorgwikiskiplist implement skiplist class skiplist initializes object skiplist bool searchint target returns true if integer target exists skiplist or false otherwise void addint num inserts value num into skiplist bool eraseint num removes value num from skiplist and returns true if num does not exist skiplist do nothing and return false if there exist multiple num values removing any one them fine note that duplicates may exist skiplist your code needs handle this situation example input skiplist add add add search add search erase erase search output null null null null false null true false true false explanation skiplist skiplist new skiplist skiplistadd skiplistadd skiplistadd skiplistsearch return false skiplistadd skiplistsearch return true skiplisterase return false not skiplist skiplisterase return true skiplistsearch return false has already been erased constraints num target most calls will be made search add and erase
count prefixes given string given string array words and string where wordsi and comprise only lowercase english letters return number strings words that prefix prefix string substring that occurs beginning string substring contiguous sequence characters within string example input words abcabbcabc abc output explanation strings words which prefix abc ab and abc thus number strings words which prefix example input words aa aa output explanation both strings prefix note that same string can occur multiple times words and should be counted each time constraints wordslength wordsilength slength wordsi and consist lowercase english letters only
fruit into baskets visiting farm that has single row fruit trees arranged from left right trees represented integer array fruits where fruitsi type fruit ith tree produces want collect as much fruit as possible however owner has some strict rules that must follow only have two baskets and each basket can only hold single type fruit there no limit amount fruit each basket can hold starting from any tree your choice must pick exactly one fruit from every tree including start tree while moving right picked fruits must fit one your baskets once reach tree fruit that cannot fit your baskets must stop given integer array fruits return maximum number fruits can pick example input fruits output explanation can pick from all trees example input fruits output explanation can pick from trees if had started first tree would only pick from trees example input fruits output explanation can pick from trees if had started first tree would only pick from trees constraints fruitslength fruitsi fruitslength
maximum number robots within budget have robots given two indexed integer arrays chargetimes and runningcosts both length ith robot costs chargetimesi units charge and costs runningcostsi units run also given integer budget total cost running chosen robots equal maxchargetimes sumrunningcosts where maxchargetimes largest charge cost among robots and sumrunningcosts sum running costs among robots return maximum number consecutive robots can run such that total cost does not exceed budget example input chargetimes runningcosts budget output explanation possible run all individual and consecutive pairs robots within budget obtain answer consider first robots total cost will be max sum which less than can be shown that not possible run more than consecutive robots within budget so return example input chargetimes runningcosts budget output explanation no robot can be run that does not exceed budget so return constraints chargetimeslength runningcostslength chargetimesi runningcostsi budget
best time buy and sell stock cooldown given array prices where pricesi price given stock ith day find maximum profit can achieve may complete as many transactions as like ie buy one and sell one share stock multiple times following restrictions after sell your stock cannot buy stock next day ie cooldown one day note may not engage multiple transactions simultaneously ie must sell stock before buy again example input prices output explanation transactions buy sell cooldown buy sell example input prices output constraints priceslength pricesi
count number ways place houses there street plots where there plots each side street plots each side numbered from each plot house can be placed return number ways houses can be placed such that no two houses adjacent each other same side street since answer may be very large return modulo note that if house placed ith plot one side street house can also be placed ith plot other side street example input output explanation possible arrangements all plots empty house placed one side street house placed other side street two houses placed one each side street example input output explanation possible arrangements shown diagram above constraints
minimum cost homecoming robot grid there grid where topleft cell and bottomright cell given integer array startpos where startpos startrow startcol indicates that initially robot cell startrow startcol also given integer array homepos where homepos homerow homecol indicates that its home cell homerow homecol robot needs go its home can move one cell four directions left right up or down and can not move outside boundary every move incurs some cost further given two indexed integer arrays rowcosts length and colcosts length if robot moves up or down into cell whose row then this move costs rowcostsr if robot moves left or right into cell whose column then this move costs colcostsc return minimum total cost this robot return home example input startpos homepos rowcosts colcosts output explanation one optimal path that starting from goes down this move costs rowcosts goes right this move costs colcosts goes right this move costs colcosts goes right this move costs colcosts total cost example input startpos homepos rowcosts colcosts output explanation robot already its home since no moves occur total cost constraints rowcostslength colcostslength rowcostsr colcostsc startposlength homeposlength startrow homerow startcol homecol
beautiful arrangement suppose have integers labeled through permutation those integers perm indexed considered beautiful arrangement if every either following true permi divisible divisible permi given integer return number beautiful arrangements that can construct example input output explanation first beautiful arrangement perm divisible perm divisible second beautiful arrangement perm divisible divisible perm example input output constraints
sort array parity ii given array integers nums half integers nums odd and other half even sort array so that whenever numsi odd odd and whenever numsi even even return any answer array that satisfies this condition example input nums output explanation would also have been accepted example input nums output constraints numslength numslength even half integers nums even numsi follow up could solve inplace
merge two binary trees given two binary trees root and root imagine that when put one them cover other some nodes two trees overlapped while others not need merge two trees into new binary tree merge rule that if two nodes overlap then sum node values up as new value merged node otherwise not null node will be used as node new tree return merged tree note merging process must start from root nodes both trees example input root root nullnull output null example input root root output constraints number nodes both trees range nodeval
final prices special discount shop given integer array prices where pricesi price ith item shop there special discount items shop if buy ith item then will receive discount equivalent pricesj where minimum index such that and pricesj pricesi otherwise will not receive any discount all return integer array answer where answeri final price will pay ith item shop considering special discount example input prices output explanation item price will receive discount equivalent prices therefore final price will pay item price will receive discount equivalent prices therefore final price will pay item price will receive discount equivalent prices therefore final price will pay items and will not receive any discount all example input prices output explanation this case all items will not receive any discount all example input prices output constraints priceslength pricesi
battleships board given matrix board where each cell battleship or empty return number battleships board battleships can only be placed horizontally or vertically board other words can only be made shape row columns or rows column where can be any size least one horizontal or vertical cell separates between two battleships ie there no adjacent battleships example input board xxxx output example input board output constraints boardlength boardilength boardij either or follow up could do onepass using only extra memory and without modifying values board
uncommon words from two sentences sentence string singlespace separated words where each word consists only lowercase letters word uncommon if appears exactly once one sentences and does not appear other sentence given two sentences and return list all uncommon words may return answer any order example input this apple sweet this apple sour output sweetsour example input apple apple banana output banana constraints slength slength and consist lowercase english letters and spaces and do not have leading or trailing spaces all words and separated single space
nary tree postorder traversal given root nary tree return postorder traversal its nodes values narytree input serialization represented their level order traversal each group children separated null value see examples example input root nullnull output example input root nullnullnullnullnullnullnullnullnullnullnull output constraints number nodes tree range nodeval height nary tree less than or equal follow up recursive solution trivial could do iteratively
sum all odd length subarrays given array positive integers arr return sum all possible oddlength subarrays arr subarray contiguous subsequence array example input arr output explanation oddlength subarrays arr and their sums if add all these together get example input arr output explanation there only subarrays odd length and their sum example input arr output constraints arrlength arri follow up could solve this problem time complexity
grid game given indexed array grid size where gridrc represents number points position matrix two robots playing game this matrix both robots initially start and want reach each robot may only move right or down start game first robot moves from collecting all points from cells its path all cells traversed path gridrc set then second robot moves from collecting points its path note that their paths may intersect one another first robot wants minimize number points collected second robot contrast second robot wants maximize number points collects if both robots play optimally return number points collected second robot example input grid output explanation optimal path taken first robot shown red and optimal path taken second robot shown blue cells visited first robot set second robot will collect points example input grid output explanation optimal path taken first robot shown red and optimal path taken second robot shown blue cells visited first robot set second robot will collect points example input grid output explanation optimal path taken first robot shown red and optimal path taken second robot shown blue cells visited first robot set second robot will collect points constraints gridlength gridrlength gridrc
add two numbers given two nonempty linked lists representing two nonnegative integers digits stored reverse order and each their nodes contains single digit add two numbers and return sum as linked list may assume two numbers do not contain any leading zero except number itself example input output explanation example input output example input output constraints number nodes each linked list range nodeval guaranteed that list represents number that does not have leading zeros
smallest sufficient team project have list required skills reqskills and list people ith person peoplei contains list skills that person has consider sufficient team set people such that every required skill reqskills there least one person team who has that skill can represent these teams index each person example team represents people skills people people and people return any sufficient team smallest possible size represented index each person may return answer any order guaranteed answer exists example input reqskills javanodejsreactjs people javanodejsnodejsreactjs output example input reqskills algorithmsmathjavareactjscsharpaws people algorithmsmathjavaalgorithmsmathreactjsjavacsharpawsreactjscsharpcsharpmathawsjava output constraints reqskillslength reqskillsilength reqskillsi consists lowercase english letters all strings reqskills unique peoplelength peopleilength peopleijlength peopleij consists lowercase english letters all strings peoplei unique every skill peoplei skill reqskills guaranteed sufficient team exists
binary tree paths given root binary tree return all roottoleaf paths any order leaf node no children example input root null output example input root output constraints number nodes tree range nodeval
minimize malware spread given network nodes represented as adjacency matrix graph where ith node directly connected jth node if graphij some nodes initial initially infected malware whenever two nodes directly connected and least one those two nodes infected malware both nodes will be infected malware this spread malware will continue until no more nodes can be infected this manner suppose minitial final number nodes infected malware entire network after spread malware stops will remove exactly one node from initial return node that if removed would minimize minitial if multiple nodes could be removed minimize minitial return such node smallest index note that if node removed from initial list infected nodes might still be infected later due malware spread example input graph initial output example input graph initial output example input graph initial output constraints graphlength graphilength graphij or graphij graphji graphii initiallength initiali all integers initial unique
count pairs similar strings given indexed string array words two strings similar if consist same characters example abca and cba similar since both consist characters and however abacba and bcfd not similar since do not consist same characters return number pairs such that wordlength and two strings wordsi and wordsj similar example input words abaaabbabcdbacaabc output explanation there pairs that satisfy conditions and both words and words only consist characters and and both words and words only consist characters and example input words aabbabba output explanation there pairs that satisfy conditions and both words and words only consist characters and and both words and words only consist characters and and both words and words only consist characters and example input words nbacbadba output explanation since there does not exist any pair that satisfies conditions return constraints wordslength wordsilength wordsi consist only lowercase english letters
min max game given indexed integer array nums whose length power apply following algorithm nums let be length nums if end process otherwise create new indexed integer array newnums length every even index where assign value newnumsi as minnums nums every odd index where assign value newnumsi as maxnums nums replace array nums newnums repeat entire process starting from step return last number that remains nums after applying algorithm example input nums output explanation following arrays results applying algorithm repeatedly first nums second nums third nums last remaining number so return example input nums output explanation already last remaining number so return constraints numslength numsi numslength power
difference between element sum and digit sum array given positive integer array nums element sum sum all elements nums digit sum sum all digits not necessarily distinct that appear nums return absolute difference between element sum and digit sum nums note that absolute difference between two integers and defined as example input nums output explanation element sum nums digit sum nums absolute difference between element sum and digit sum example input nums output explanation element sum nums digit sum nums absolute difference between element sum and digit sum constraints numslength numsi
validate binary search tree given root binary tree determine if valid binary search tree bst valid bst defined as follows left subtree node contains only nodes keys less than nodes key right subtree node contains only nodes keys greater than nodes key both left and right subtrees must also be binary search trees example input root output true example input root nullnull output false explanation root nodes value but its right childs value constraints number nodes tree range nodeval
number ways divide long corridor along long library corridor there line seats and decorative plants given indexed string corridor length consisting letters and where each represents seat and each represents plant one room divider has already been installed left index and another right index additional room dividers can be installed each position between indices and most one divider can be installed divide corridor into nonoverlapping sections where each section has exactly two seats any number plants there may be multiple ways perform division two ways different if there position room divider installed first way but not second way return number ways divide corridor since answer may be very large return modulo if there no way return example input corridor ssppsps output explanation there different ways divide corridor black bars above image indicate two room dividers already installed note that each ways each section has exactly two seats example input corridor ppspsp output explanation there only way divide corridor not installing any additional dividers installing any would create some section that does not have exactly two seats example input corridor output explanation there no way divide corridor because there will always be section that does not have exactly two seats constraints corridorlength corridori either or
minimum number operations make array continuous given integer array nums one operation can replace any element nums any integer nums considered continuous if both following conditions fulfilled all elements nums unique difference between maximum element and minimum element nums equals numslength example nums continuous but nums not continuous return minimum number operations make nums continuous example input nums output explanation nums already continuous example input nums output explanation one possible solution change last element resulting array which continuous example input nums output explanation one possible solution change second element change third element change fourth element resulting array which continuous constraints numslength numsi
minimum suffix flips given indexed binary string target length have another binary string length that initially set all zeros want make equal target one operation can pick index where and flip all bits inclusive range flip means changing and return minimum number operations needed make equal target example input target output explanation initially choose index choose index choose index need least flip operations form target example input target output explanation initially choose index choose index choose index need least flip operations form target example input target output explanation do not need any operations since initial already equals target constraints targetlength targeti either or
minimum time collect all apples tree given undirected tree consisting vertices numbered from which has some apples their vertices spend second walk over one edge tree return minimum time seconds have spend collect all apples tree starting vertex and coming back this vertex edges undirected tree given array edges where edgesi ai bi means that exists edge connecting vertices ai and bi additionally there boolean array hasapple where hasapplei true means that vertex has apple otherwise does not have any apple example input edges hasapple falsefalsetruefalsetruetruefalse output explanation figure above represents given tree where red vertices have apple one optimal path collect all apples shown green arrows example input edges hasapple falsefalsetruefalsefalsetruefalse output explanation figure above represents given tree where red vertices have apple one optimal path collect all apples shown green arrows example input edges hasapple falsefalsefalsefalsefalsefalsefalse output constraints edgeslength edgesilength ai bi hasapplelength
reformat department table sql schema table department column name type id int revenue int month varchar id month primary key this table table has information about revenue each department per month month has values janfebmaraprmayjunjulaugsepoctnovdec write sql query reformat table such that there department id column and revenue column each month return result table any order query result format following example example input department table id revenue month jan jan feb feb mar output id janrevenue febrevenue marrevenue decrevenue null null null null null null null explanation revenue from apr dec null note that result table has columns department id months
happy number write algorithm determine if number happy happy number number defined following process starting any positive integer replace number sum squares its digits repeat process until number equals where will stay or loops endlessly cycle which does not include those numbers which this process ends happy return true if happy number and false if not example input output true explanation example input output false constraints
maximum sum circular subarray given circular integer array nums length return maximum possible sum nonempty subarray nums circular array means end array connects beginning array formally next element numsi numsi and previous element numsi numsi subarray may only include each element fixed buffer nums most once formally subarray numsi numsi numsj there does not exist example input nums output explanation subarray has maximum sum example input nums output explanation subarray has maximum sum example input nums output explanation subarray has maximum sum constraints numslength numsi
reward top students given two string arrays positivefeedback and negativefeedback containing words denoting positive and negative feedback respectively note that no word both positive and negative initially every student has points each positive word feedback report increases points student whereas each negative word decreases points given feedback reports represented indexed string array report and indexed integer array studentid where studentidi represents id student who has received feedback report reporti id each student unique given integer return top students after ranking them nonincreasing order their points case more than one student has same points one lower id ranks higher example input positivefeedback smartbrilliantstudious negativefeedback not report this student studiousthe student smart studentid output explanation both students have positive feedback and points but since student has lower id ranks higher example input positivefeedback smartbrilliantstudious negativefeedback not report this student not studiousthe student smart studentid output explanation student id has positive feedback and negative feedback so has points student id has positive feedback so has points since student has more points returned constraints positivefeedbacklength negativefeedbacklength positivefeedbackilength negativefeedbackjlength both positivefeedbacki and negativefeedbackj consists lowercase english letters no word present both positivefeedback and negativefeedback reportlength studentidlength reporti consists lowercase english letters and spaces there single space between consecutive words reporti reportilength studentidi all values studentidi unique
sender largest word count have chat log messages given two string arrays messages and senders where messagesi message sent sendersi message list words that separated single space no leading or trailing spaces word count sender total number words sent sender note that sender may send more than one message return sender largest word count if there more than one sender largest word count return one lexicographically largest name note uppercase letters come before lowercase letters lexicographical order alice and alice distinct example input messages hello usertwooohi userthreewonderful day alicenice day userthree senders aliceusertwouserthreealice output alice explanation alice sends total words usertwo sends total words userthree sends total words since alice has largest word count return alice example input messages how leetcode everyoneleetcode useful practice senders bobcharlie output charlie explanation bob sends total words charlie sends total words since there tie largest word count return sender lexicographically larger name charlie constraints messageslength senderslength messagesilength sendersilength messagesi consists uppercase and lowercase english letters and all words messagesi separated single space messagesi does not have leading or trailing spaces sendersi consists uppercase and lowercase english letters only
minimum sum squared difference given two positive indexed integer arrays nums and nums both length sum squared difference arrays nums and nums defined as sum numsi numsi each also given two positive integers and can modify any elements nums or most times similarly can modify any elements nums or most times return minimum sum squared difference after modifying array nums most times and modifying array nums most times note allowed modify array elements become negative integers example input nums nums output explanation elements nums and nums cannot be modified because and sum square difference will be example input nums nums output explanation one way obtain minimum sum square difference increase nums once increase nums once minimum sum square difference will be note that there other ways obtain minimum sum square difference but there no way obtain sum smaller than constraints numslength numslength numsi numsi
super pow your task calculate ab mod where positive integer and extremely large positive integer given form array example input output example input output example input output constraints blength bi does not contain leading zeros
decrease elements make array zigzag given array nums integers move consists choosing any element and decreasing array zigzag array if either every evenindexed element greater than adjacent elements ie or every oddindexed element greater than adjacent elements ie return minimum number moves transform given array nums into zigzag array example input nums output explanation can decrease or example input nums output constraints numslength numsi
total cost hire workers given indexed integer array costs where costsi cost hiring ith worker also given two integers and candidates want hire exactly workers according following rules will run sessions and hire exactly one worker each session each hiring session choose worker lowest cost from either first candidates workers or last candidates workers break tie smallest index example if costs and candidates then first hiring session will choose th worker because have lowest cost second hiring session will choose st worker because have same lowest cost as th worker but have smallest index please note that indexing may be changed process if there fewer than candidates workers remaining choose worker lowest cost among them break tie smallest index worker can only be chosen once return total cost hire exactly workers example input costs candidates output explanation hire workers total total cost initially first hiring round choose worker from lowest cost and break tie smallest index which total cost second hiring round choose worker from lowest cost index total cost third hiring round choose worker from lowest cost index total cost notice that worker index common first and last four workers total hiring cost example input costs candidates output explanation hire workers total total cost initially first hiring round choose worker from lowest cost and break tie smallest index which total cost notice that workers index and common first and last workers second hiring round choose worker from lowest cost index total cost third hiring round there less than three candidates choose worker from remaining workers lowest cost index total cost total hiring cost constraints costslength costsi candidates costslength
minimize result adding parentheses expression given indexed string expression form numnum where num and num represent positive integers add pair parentheses expression such that after addition parentheses expression valid mathematical expression and evaluates smallest possible value left parenthesis must be added left and right parenthesis must be added right return expression after adding pair parentheses such that expression evaluates smallest possible value if there multiple answers that yield same result return any them input has been generated such that original value expression and value expression after adding any pair parentheses that meets requirements fits within signed bit integer example input expression output explanation expression evaluates note that invalid because right parenthesis must be right can be shown that smallest possible value example input expression output explanation expression evaluates example input expression output explanation expression evaluates constraints expressionlength expression consists digits from and expression starts and ends digits expression contains exactly one original value expression and value expression after adding any pair parentheses that meets requirements fits within signed bit integer
longest continuous increasing subsequence given unsorted array integers nums return length longest continuous increasing subsequence ie subarray subsequence must be strictly increasing continuous increasing subsequence defined two indices and such that numsl numsl numsr numsr and each numsi numsi example input nums output explanation longest continuous increasing subsequence length even though increasing subsequence not continuous as elements and separated element example input nums output explanation longest continuous increasing subsequence length note that must be strictly increasing constraints numslength numsi
image smoother image smoother filter size that can be applied each cell image rounding down average cell and eight surrounding cells ie average nine cells blue smoother if one or more surrounding cells cell not present do not consider average ie average four cells red smoother given integer matrix img representing grayscale image return image after applying smoother each cell example input img output explanation points floor floor points floor floor point floor floor example input img output explanation points floor floor points floor floor point floor floor constraints imglength imgilength imgij
max consecutive ones iii given binary array nums and integer return maximum number consecutive array if can flip most example input nums output explanation bolded numbers flipped from longest subarray underlined example input nums output explanation bolded numbers flipped from longest subarray underlined constraints numslength numsi either or numslength
count number distinct integers after reverse operations given array nums consisting positive integers have take each integer array reverse its digits and add end array should apply this operation original integers nums return number distinct integers final array example input nums output explanation after including reverse each number resulting array reversed integers that added end array underlined note that integer after reversing becomes which just number distinct integers this array numbers and example input nums output explanation after including reverse each number resulting array number distinct integers this array number constraints numslength numsi
rearrange products table sql schema table products column name type productid int store int store int store int productid primary key this table each row this table indicates products price different stores store store and store if product not available store price will be null that stores column write sql query rearrange products table so that each row has productid store price if product not available store do not include row that productid and store combination result table return result table any order query result format following example example input products table productid store store store null output productid store price store store store store store explanation product available all three stores prices and respectively product available store price and store price product not available store
make array strictly increasing given two integer arrays arr and arr return minimum number operations possibly zero needed make arr strictly increasing one operation can choose two indices arrlength and arrlength and do assignment arri arrj if there no way make arr strictly increasing return example input arr arr output explanation replace then arr example input arr arr output explanation replace and then replace arr example input arr arr output explanation cant make arr strictly increasing constraints arrlength arrlength arri arri
divisor game alice and bob take turns playing game alice starting first initially there number chalkboard each players turn that player makes move consisting choosing any and replacing number chalkboard also if player cannot make move lose game return true if and only if alice wins game assuming both players play optimally example input output true explanation alice chooses and bob has no more moves example input output false explanation alice chooses bob chooses and alice has no more moves constraints
nth digit given integer return nth digit infinite integer sequence example input output example input output explanation th digit sequence which part number constraints
employees whose manager left company sql schema table employees column name type employeeid int name varchar managerid int salary int employeeid primary key this table this table contains information about employees their salary and id their manager some employees do not have manager managerid null write sql query report ids employees whose salary strictly less than and whose manager left company when manager leaves company their information deleted from employees table but reports still have their managerid set manager that left return result table ordered employeeid query result format following example example input employees table employeeid name managerid salary mila antonella null emery null kalel mikaela null joziah output employeeid explanation employees salary less than kalel and joziah kalels manager employee who still company joziah joziahs manager employee who left company because there no row employee as deleted
clone graph given reference node connected undirected graph return deep copy clone graph each node graph contains value int and list listnode its neighbors class node public int val public listnode neighbors test case format simplicity each nodes value same as nodes index indexed example first node val second node val and so graph represented test case using adjacency list adjacency list collection unordered lists used represent finite graph each list describes set neighbors node graph given node will always be first node val must return copy given node as reference cloned graph example input adjlist output explanation there nodes graph st node val neighbors nd node val and th node val nd node val neighbors st node val and rd node val rd node val neighbors nd node val and th node val th node val neighbors st node val and rd node val example input adjlist output explanation note that input contains one empty list graph consists only one node val and does not have any neighbors example input adjlist output explanation this empty graph does not have any nodes constraints number nodes graph range nodeval nodeval unique each node there no repeated edges and no selfloops graph graph connected and all nodes can be visited starting from given node
number beautiful partitions given string that consists digits and two integers and minlength partition called beautiful if partitioned into nonintersecting substrings each substring has length least minlength each substring starts prime digit and ends nonprime digit prime digits and and rest digits nonprime return number beautiful partitions since answer may be very large return modulo substring contiguous sequence characters within string example input minlength output explanation there exists three ways create beautiful partition example input minlength output explanation there exists one way create beautiful partition example input minlength output explanation there exists one way create beautiful partition constraints minlength slength consists digits
minimum number steps make two strings anagram ii given two strings and one step can append any character either or return minimum number steps make and anagrams each other anagram string string that contains same characters different or same ordering example input leetcode coats output explanation steps can append letters as onto leetcode forming leetcodeas steps can append letters leede onto coats forming coatsleede leetcodeas and coatsleede now anagrams each other used total steps can be shown that there no way make them anagrams each other less than steps example input night thing output explanation given strings already anagrams each other thus do not need any further steps constraints slength tlength and consist lowercase english letters
call function custom context enhance all functions have callpolyfill method method accepts object obj as its first parameter and any number additional arguments obj becomes this context function additional arguments passed function that callpolyfill method belongs example if had function function taxprice taxrate const totalcost price taxrate consolelogthe cost thisitem totalcost calling this function like tax will log cost undefined this because this context not defined however calling function like taxcallpolyfillitem salad will log cost salad this context appropriately set and function logged appropriate output please solve this without using builtin functioncall method example input fn function addb return thisa args output explanation fncallpolyfilla callpolyfill sets this context passed as argument example input fn function taxprice taxrate return cost thisitem price taxrate args item burger output cost burger explanation callpolyfill sets this context item burger and passed as additional arguments constraints typeof args object and args null argslength jsonstringifyargslength
power four given integer return true if power four otherwise return false integer power four if there exists integer such that example input output true example input output false example input output true constraints follow up could solve without loopsrecursion
maximize topmost element after moves given indexed integer array nums representing contents pile where nums topmost element pile one move can perform either following if pile not empty remove topmost element pile if there one or more removed elements add any one them back onto pile this element becomes new topmost element also given integer which denotes total number moves be made return maximum value topmost element pile possible after exactly moves case not possible obtain nonempty pile after moves return example input nums output explanation one ways can end top pile after moves as follows step remove topmost element pile becomes step remove topmost element pile becomes step remove topmost element pile becomes step add back onto pile pile becomes note that this not only way end top pile can be shown that largest answer possible after moves example input nums output explanation first move our only option pop topmost element pile since not possible obtain nonempty pile after one move return constraints numslength numsi
minimum number moves make palindrome given string consisting only lowercase english letters one move can select any two adjacent characters and swap them return minimum number moves needed make palindrome note that input will be generated such that can always be converted palindrome example input aabb output explanation can obtain two palindromes from abba and baab can obtain abba from moves aabb abab abba can obtain baab from moves aabb abab baab thus minimum number moves needed make palindrome example input letelt output explanation one palindromes can obtain from moves lettel one ways can obtain letelt letetl lettel other palindromes such as tleelt can also be obtained moves can be shown that not possible obtain palindrome less than moves constraints slength consists only lowercase english letters can be converted palindrome using finite number moves
probability two boxes having same number distinct balls given balls distinct colors will be given integer array balls size where ballsi number balls color all balls will be shuffled uniformly random then will distribute first balls first box and remaining balls other box please read explanation second example carefully please note that two boxes considered different example if have two balls colors and and two boxes and then distribution considered different than distribution please read explanation first example carefully return probability that two boxes have same number distinct balls answers within actual value will be accepted as correct example input balls output explanation only ways divide balls equally ball color box and ball color box ball color box and ball color box both ways number distinct colors each box equal probability example input balls output explanation have set balls this set balls will be shuffled randomly and may have one distinct shuffles equal probability ie after that add first two balls first box and second two balls second box can see that these possible random distributions have same number distinct colors balls each box probability example input balls output explanation set balls hard display all possible random shuffles this set but easy check that them will have same number distinct colors each box probability constraints ballslength ballsi sumballs even
minimum increment make array unique given integer array nums one move can pick index where numslength and increment numsi return minimum number moves make every value nums unique test cases generated so that answer fits bit integer example input nums output explanation after move array could be example input nums output explanation after moves array could be can be shown or less moves that impossible array have all unique values constraints numslength numsi
minimum score changing two elements given indexed integer array nums low score nums minimum value numsi numsj over all numslength high score nums maximum value numsi numsj over all numslength score nums sum high and low scores nums minimize score nums can change value most two elements nums return minimum possible score after changing value most two elements nums note that denotes absolute value example input nums output explanation change value nums and nums so that nums becomes now value numsi numsj always equal so return example input nums output explanation change nums and nums be now nums becomes our low score achieved when and which case numsi numsj our high score achieved when and which case numsi numsj sum our high and low score which can prove be minimal constraints numslength numsi
delete duplicate emails sql schema table person column name type id int email varchar id primary key column this table each row this table contains email emails will not contain uppercase letters write sql query delete all duplicate emails keeping only one unique email smallest id note that supposed write delete statement and not select one after running your script answer shown person table driver will first compile and run your piece code and then show person table final order person table does not matter query result format following example example input person table id email johnexamplecom bobexamplecom johnexamplecom output id email johnexamplecom bobexamplecom explanation johnexamplecom repeated two times keep row smallest id
number subarrays lcm equal given integer array nums and integer return number subarrays nums where least common multiple subarrays elements subarray contiguous nonempty sequence elements within array least common multiple array smallest positive integer that divisible all array elements example input nums output explanation subarrays nums where least common multiple all subarrays elements example input nums output explanation there no subarrays nums where least common multiple all subarrays elements constraints numslength numsi
form array concatenating subarrays another array given integer array groups length also given integer array nums asked if can choose disjoint subarrays from array nums such that ith subarray equal groupsi indexed and if ith subarray appears before ith subarray nums ie subarrays must be same order as groups return true if can do this task and false otherwise note that subarrays disjoint if and only if there no index such that numsk belongs more than one subarray subarray contiguous sequence elements within array example input groups nums output true explanation can choose th subarray as and st one as these subarrays disjoint as share no common numsk element example input groups nums output false explanation note that choosing subarrays and incorrect because not same order as groups must come before example input groups nums output false explanation note that choosing subarrays and invalid because not disjoint share common elements nums indexed constraints groupslength groupsilength sumgroupsilength numslength groupsij numsk
constrained subsequence sum given integer array nums and integer return maximum sum nonempty subsequence that array such that every two consecutive integers subsequence numsi and numsj where condition satisfied subsequence array obtained deleting some number elements can be zero from array leaving remaining elements their original order example input nums output explanation subsequence example input nums output explanation subsequence must be nonempty so choose largest number example input nums output explanation subsequence constraints numslength numsi
valid phone numbers given text file filetxt that contains list phone numbers one per line write oneliner bash script print all valid phone numbers may assume that valid phone number must appear one following two formats xxx xxxxxxx or xxxxxxxxxx means digit may also assume each line text file must not contain leading or trailing white spaces example assume that filetxt has following content your script should output following valid phone numbers
best sightseeing pair given integer array values where valuesi represents value ith sightseeing spot two sightseeing spots and have distance between them score pair sightseeing spots valuesi valuesj sum values sightseeing spots minus distance between them return maximum score pair sightseeing spots example input values output explanation valuesi valuesj example input values output constraints valueslength valuesi
minimum path sum given grid filled nonnegative numbers find path from top left bottom right which minimizes sum all numbers along its path note can only move either down or right any point time example input grid output explanation because path minimizes sum example input grid output constraints gridlength gridilength gridij
angle between hands clock given two numbers hour and minutes return smaller angle degrees formed between hour and minute hand answers within actual value will be accepted as correct example input hour minutes output example input hour minutes output example input hour minutes output constraints hour minutes
minimum time make rope colorful alice has balloons arranged rope given indexed string colors where colorsi color ith balloon alice wants rope be colorful does not want two consecutive balloons be same color so asks bob help bob can remove some balloons from rope make colorful given indexed integer array neededtime where neededtimei time seconds that bob needs remove ith balloon from rope return minimum time bob needs make rope colorful example input colors abaac neededtime output explanation above image blue red and green bob can remove blue balloon index this takes seconds there no longer two consecutive balloons same color total time example input colors abc neededtime output explanation rope already colorful bob does not need remove any balloons from rope example input colors aabaa neededtime output explanation bob will remove ballons indices and each ballon takes second remove there no longer two consecutive balloons same color total time constraints colorslength neededtimelength neededtimei colors contains only lowercase english letters
maximum deletions string given string consisting only lowercase english letters one operation can delete entire string or delete first letters if first letters equal following letters any range slength example if ababc then one operation could delete first two letters get abc since first two letters and following two letters both equal ab return maximum number operations needed delete all example input abcabcdabc output explanation delete first letters abc since next letters equal now abcdabc delete all letters used operations so return can be proven that maximum number operations needed note that second operation cannot delete abc again because next occurrence abc does not happen next letters example input aaabaab output explanation delete first letter since next letter equal now aabaab delete first letters aab since next letters equal now aab delete first letter since next letter equal now ab delete all letters used operations so return can be proven that maximum number operations needed example input aaaaa output explanation each operation can delete first letter constraints slength consists only lowercase english letters
find value mysterious function closest target winston given above mysterious function func has integer array arr and integer target and wants find values and that make value funcarr target minimum possible return minimum possible value funcarr target notice that func should be called values and where arrlength example input arr target output explanation calling func all pairs lr winston got following results value closest and thus minimum difference example input arr target output explanation winston called func all possible values lr and always got thus min difference example input arr target output constraints arrlength arri target
maximum count positive integer and negative integer given array nums sorted nondecreasing order return maximum between number positive integers and number negative integers other words if number positive integers nums pos and number negative integers neg then return maximum pos and neg note that neither positive nor negative example input nums output explanation there positive integers and negative integers maximum count among them example input nums output explanation there positive integers and negative integers maximum count among them example input nums output explanation there positive integers and negative integers maximum count among them constraints numslength numsi nums sorted nondecreasing order follow up can solve problem ologn time complexity
maximum product subarray given integer array nums find subarray that has largest product and return product test cases generated so that answer will fit bit integer example input nums output explanation has largest product example input nums output explanation result cannot be because not subarray constraints numslength numsi product any prefix or suffix nums guaranteed fit bit integer
change minimum characters satisfy one three conditions given two strings and that consist lowercase letters one operation can change any character or any lowercase letter your goal satisfy one following three conditions every letter strictly less than every letter alphabet every letter strictly less than every letter alphabet both and consist only one distinct letter return minimum number operations needed achieve your goal example input aba caa output explanation consider best way make each condition true change ccc operations then every letter less than every letter change bbb and aaa operations then every letter less than every letter change aaa and aaa operations then and consist one distinct letter best way done operations either condition or condition example input dabadd cda output explanation best way make condition true changing eee constraints alength blength and consist only lowercase letters
remove palindromic subsequences given string consisting only letters and single step can remove one palindromic subsequence from return minimum number steps make given string empty string subsequence given string if generated deleting some characters given string without changing its order note that subsequence does not necessarily need be contiguous string called palindrome if one that reads same backward as well as forward example input ababa output explanation already palindrome so its entirety can be removed single step example input abb output explanation abb bb remove palindromic subsequence then bb example input baabb output explanation baabb remove palindromic subsequence baab then constraints slength si either or
base given integer num return string its base representation example input num output example input num output constraints num
count nodes highest score there binary tree rooted consisting nodes nodes labeled from given indexed integer array parents representing tree where parentsi parent node since node root parents each node has score find score node consider if node and edges connected removed tree would become one or more nonempty subtrees size subtree number nodes score node product sizes all those subtrees return number nodes that have highest score example input parents output explanation score node score node score node score node score node highest score and three nodes node node and node have highest score example input parents output explanation score node score node score node highest score and two nodes node and node have highest score constraints parentslength parents parentsi parents represents valid binary tree
divide two integers given two integers dividend and divisor divide two integers without using multiplication division and mod operator integer division should truncate toward zero which means losing its fractional part example would be truncated and would be truncated return quotient after dividing dividend divisor note assume dealing environment that could only store integers within bit signed integer range this problem if quotient strictly greater than then return and if quotient strictly less than then return example input dividend divisor output explanation which truncated example input dividend divisor output explanation which truncated constraints dividend divisor divisor
maximum twin sum linked list linked list size where even ith node indexed linked list known as twin nith node if example if then node twin node and node twin node these only nodes twins twin sum defined as sum node and its twin given head linked list even length return maximum twin sum linked list example input head output explanation nodes and twins nodes and respectively all have twin sum there no other nodes twins linked list thus maximum twin sum linked list example input head output explanation nodes twins present this linked list node twin node having twin sum node twin node having twin sum thus maximum twin sum linked list max example input head output explanation there only one node twin linked list having twin sum constraints number nodes list even integer range nodeval
arithmetic slices ii subsequence given integer array nums return number all arithmetic subsequences nums sequence numbers called arithmetic if consists least three elements and if difference between any two consecutive elements same example and arithmetic sequences example not arithmetic sequence subsequence array sequence that can be formed removing some elements possibly none array example subsequence test cases generated so that answer fits bit integer example input nums output explanation all arithmetic subsequence slices example input nums output explanation any subsequence this array arithmetic constraints numslength numsi
tuple same product given array nums distinct positive integers return number tuples such that where and elements nums and example input nums output explanation there valid tuples example input nums output explanation there valid tuples constraints numslength numsi all elements nums distinct
shifting letters ii given string lowercase english letters and integer array shifts where shiftsi starti endi directioni every shift characters from index starti index endi inclusive forward if directioni or shift characters backward if directioni shifting character forward means replacing next letter alphabet wrapping around so that becomes similarly shifting character backward means replacing previous letter alphabet wrapping around so that becomes return final string after all such shifts applied example input abc shifts output ace explanation firstly shift characters from index index backward now zac secondly shift characters from index index forward now zbd finally shift characters from index index forward now ace example input dztz shifts output catz explanation firstly shift characters from index index backward now cztz finally shift characters from index index forward now catz constraints slength shiftslength shiftsilength starti endi slength directioni consists lowercase english letters
number unique good subsequences given binary string binary subsequence binary considered good if not empty and has no leading zeros exception find number unique good subsequences binary example if binary then all good subsequences so unique good subsequences and note that subsequences and not good because have leading zeros return number unique good subsequences binary since answer may be very large return modulo subsequence sequence that can be derived from another sequence deleting some or no elements without changing order remaining elements example input binary output explanation good subsequences binary unique good subsequences and example input binary output explanation good subsequences binary unique good subsequences and example input binary output explanation good subsequences binary unique good subsequences and constraints binarylength binary consists only and
number subarrays odd sum given array integers arr return number subarrays odd sum since answer can be very large return modulo example input arr output explanation all subarrays all subarrays sum odd sums so answer example input arr output explanation all subarrays all subarrays sum all subarrays have even sum and answer example input arr output constraints arrlength arri
widest vertical area between two points containing no points given points plane where pointsi xi yi return widest vertical area between two points such that no points inside area vertical area area fixedwidth extending infinitely along yaxis ie infinite height widest vertical area one maximum width note that points edge vertical area not considered included area example input points output explanation both red and blue area optimal example input points output constraints pointslength pointsilength xi yi
find score all prefixes array define conversion array conver array arr as follows converi arri maxarri where maxarri maximum value arrj over also define score array arr as sum values conversion array arr given indexed integer array nums length return array ans length where ansi score prefix numsi example input nums output explanation prefix conversion array hence score prefix conversion array hence score prefix conversion array hence score prefix conversion array hence score prefix conversion array hence score example input nums output explanation prefix conversion array hence score prefix conversion array hence score prefix conversion array hence score prefix conversion array hence score prefix conversion array hence score prefix conversion array hence score constraints numslength numsi
largest color value directed graph there directed graph colored nodes and edges nodes numbered from given string colors where colorsi lowercase english letter representing color ith node this graph indexed also given array edges where edgesj aj bj indicates that there directed edge from node aj node bj valid path graph sequence nodes xk such that there directed edge from xi xi every color value path number nodes that colored most frequently occurring color along that path return largest color value any valid path given graph or if graph contains cycle example input colors abaca edges output explanation path contains nodes that colored red above image example input colors edges output explanation there cycle from constraints colorslength edgeslength colors consists lowercase english letters aj bj
toeplitz matrix given matrix return true if matrix toeplitz otherwise return false matrix toeplitz if every diagonal from topleft bottomright has same elements example input matrix output true explanation above grid diagonals each diagonal all elements same so answer true example input matrix output false explanation diagonal has different elements constraints matrixlength matrixilength matrixij follow up what if matrix stored disk and memory limited such that can only load most one row matrix into memory once what if matrix so large that can only load up partial row into memory once
count number consistent strings given string allowed consisting distinct characters and array strings words string consistent if all characters string appear string allowed return number consistent strings array words example input allowed ab words adbdaaabbaabadab output explanation strings aaab and baa consistent since only contain characters and example input allowed abc words abcabacbcabc output explanation all strings consistent example input allowed cad words ccacdbbabacbadacd output explanation strings cc acd ac and consistent constraints wordslength allowedlength wordsilength characters allowed distinct wordsi and allowed contain only lowercase english letters
distinct prime factors product array given array positive integers nums return number distinct prime factors product elements nums note that number greater than called prime if divisible only and itself integer val factor another integer val if val val integer example input nums output explanation product all elements nums there distinct prime factors so return example input nums output explanation product all elements nums there distinct prime factor so return constraints numslength numsi
destroying asteroids given integer mass which represents original mass planet further given integer array asteroids where asteroidsi mass ith asteroid can arrange planet collide asteroids any arbitrary order if mass planet greater than or equal mass asteroid asteroid destroyed and planet gains mass asteroid otherwise planet destroyed return true if all asteroids can be destroyed otherwise return false example input mass asteroids output true explanation one way order asteroids planet collides asteroid mass new planet mass planet collides asteroid mass new planet mass planet collides asteroid mass new planet mass planet collides asteroid mass new planet mass planet collides asteroid mass new planet mass all asteroids destroyed example input mass asteroids output false explanation planet cannot ever gain enough mass destroy asteroid mass after planet destroys other asteroids will have mass this less than so collision would not destroy last asteroid constraints mass asteroidslength asteroidsi
queens that can attack king indexed chessboard there can be multiple black queens ad one white king given integer array queens where queensi xqueeni yqueeni represents position ith black queen chessboard also given integer array king length where king xking yking represents position white king return coordinates black queens that can directly attack king may return answer any order example input queens king output explanation diagram above shows three queens that can directly attack king and three queens that cannot attack king ie marked red dashes example input queens king output explanation diagram above shows three queens that can directly attack king and three queens that cannot attack king ie marked red dashes constraints queenslength queensilength kinglength xqueeni yqueeni xking yking all given positions unique
monthly transactions sql schema table transactions column name type id int country varchar state enum amount int transdate date id primary key this table table has information about incoming transactions state column enum type approved declined write sql query find each month and country number transactions and their total amount number approved transactions and their total amount return result table any order query result format following example example input transactions table id country state amount transdate us approved us declined us approved de approved output month country transcount approvedcount transtotalamount approvedtotalamount us us de
last substring lexicographical order given string return last substring lexicographical order example input abab output bab explanation substrings ab aba abab ba bab lexicographically maximum substring bab example input leetcode output tcode constraints slength contains only lowercase english letters
maximum number weeks which can work there projects numbered from given integer array milestones where each milestonesi denotes number milestones ith project has can work projects following these two rules every week will finish exactly one milestone one project must work every week cannot work two milestones from same project two consecutive weeks once all milestones all projects finished or if only milestones that can work will cause violate above rules will stop working note that may not be able finish every projects milestones due these constraints return maximum number weeks would be able work projects without violating rules mentioned above example input milestones output explanation one possible scenario during st week will work milestone project during nd week will work milestone project during rd week will work milestone project during th week will work milestone project during th week will work milestone project during th week will work milestone project total number weeks example input milestones output explanation one possible scenario during st week will work milestone project during nd week will work milestone project during rd week will work milestone project during th week will work milestone project during th week will work milestone project during th week will work milestone project during th week will work milestone project total number weeks note that cannot work last milestone project th week because would violate rules thus one milestone project will remain unfinished constraints milestoneslength milestonesi
length last word given string consisting words and spaces return length last word string word maximal substring consisting nonspace characters only example input hello world output explanation last word world length example input fly me moon output explanation last word moon length example input luffy still joyboy output explanation last word joyboy length constraints slength consists only english letters and spaces there will be least one word
maximum number groups getting fresh donuts there donuts shop that bakes donuts batches batchsize have rule where must serve all donuts batch before serving any donuts next batch given integer batchsize and integer array groups where groupsi denotes that there group groupsi customers that will visit shop each customer will get exactly one donut when group visits shop all customers group must be served before serving any following groups group will be happy if all get fresh donuts that first customer group does not receive donut that left over from previous group can freely rearrange ordering groups return maximum possible number happy groups after rearranging groups example input batchsize groups output explanation can arrange groups as then st nd th and th groups will be happy example input batchsize groups output constraints batchsize groupslength groupsi
map highest peak given integer matrix iswater size that represents map land and water cells if iswaterij cell land cell if iswaterij cell water cell must assign each cell height way that follows these rules height each cell must be nonnegative if cell water cell its height must be any two adjacent cells must have absolute height difference most cell adjacent another cell if former directly north east south or west latter ie their sides touching find assignment heights such that maximum height matrix maximized return integer matrix height size where heightij cell js height if there multiple solutions return any them example input iswater output explanation image shows assigned heights each cell blue cell water cell and green cells land cells example input iswater output explanation height maximum possible height any assignment any height assignment that has maximum height while still meeting rules will also be accepted constraints iswaterlength iswaterilength iswaterij or there least one water cell
average waiting time there restaurant single chef given array customers where customersi arrivali timei arrivali arrival time ith customer arrival times sorted nondecreasing order timei time needed prepare order ith customer when customer arrives gives chef his order and chef starts preparing once idle customer waits till chef finishes preparing his order chef does not prepare food more than one customer time chef prepares food customers order given input return average waiting time all customers solutions within from actual answer considered accepted example input customers output explanation first customer arrives time chef takes his order and starts preparing immediately time and finishes time so waiting time first customer second customer arrives time chef takes his order and starts preparing time and finishes time so waiting time second customer third customer arrives time chef takes his order and starts preparing time and finishes time so waiting time third customer so average waiting time example input customers output explanation first customer arrives time chef takes his order and starts preparing immediately time and finishes time so waiting time first customer second customer arrives time chef takes his order and starts preparing time and finishes time so waiting time second customer third customer arrives time chef takes his order and starts preparing time and finishes time so waiting time third customer fourth customer arrives time chef takes his order and starts preparing immediately time and finishes time so waiting time fourth customer so average waiting time constraints customerslength arrivali timei arrivali arrivali
flip binary tree match preorder traversal given root binary tree nodes where each node uniquely assigned value from also given sequence values voyage which desired preorder traversal binary tree any node binary tree can be flipped swapping its left and right subtrees example flipping node will have following effect flip smallest number nodes so that preorder traversal tree matches voyage return list values all flipped nodes may return answer any order if impossible flip nodes tree make preorder traversal match voyage return list example input root voyage output explanation impossible flip nodes such that preorder traversal matches voyage example input root voyage output explanation flipping node swaps nodes and so preorder traversal matches voyage example input root voyage output explanation trees preorder traversal already matches voyage so no nodes need be flipped constraints number nodes tree voyagelength nodeval voyagei all values tree unique all values voyage unique
maximum consecutive floors without special floors alice manages company and has rented some floors building as office space alice has decided some these floors should be special floors used relaxation only given two integers bottom and top which denote that alice has rented all floors from bottom top inclusive also given integer array special where speciali denotes special floor that alice has designated relaxation return maximum number consecutive floors without special floor example input bottom top special output explanation following ranges inclusive consecutive floors without special floor total amount floors total amount floor total amount floors therefore return maximum number which floors example input bottom top special output explanation every floor rented special floor so return constraints speciallength bottom speciali top all values special unique
maximum score words formed letters given list words list single letters might be repeating and score every character return maximum score any valid set words formed using given letters wordsi cannot be used two or more times not necessary use all characters letters and each letter can only be used once score letters given score score score respectively example input words dogcatdadgood letters aacdddgoo score output explanation score given letters can form words dad and good score words dad and dog only get score example input words xxxzaxbxcx letters zabcxxx score output explanation score given letters can form words ax bx and cx score word xxxz only get score example input words leetcode letters letcod score output explanation letter can only be used once constraints wordslength wordsilength letterslength lettersilength scorelength scorei wordsi lettersi contains only lower case english letters
minimize xor given two positive integers num and num find positive integer such that has same number set bits as num and value xor num minimal note that xor bitwise xor operation return integer test cases generated such that uniquely determined number set bits integer number its binary representation example input num num output explanation binary representations num and num and respectively integer has same number set bits as num and value xor minimal example input num num output explanation binary representations num and num and respectively integer has same number set bits as num and value xor minimal constraints num num
check if every row and column contains all numbers matrix valid if every row and every column contains all integers from inclusive given integer matrix matrix return true if matrix valid otherwise return false example input matrix output true explanation this case and every row and column contains numbers and hence return true example input matrix output false explanation this case but first row and first column do not contain numbers or hence return false constraints matrixlength matrixilength matrixij
longest valid parentheses given string containing just characters and return length longest valid wellformed parentheses substring example input output explanation longest valid parentheses substring example input output explanation longest valid parentheses substring example input output constraints slength si or
dinner plate stacks have infinite number stacks arranged row and numbered left right from each stacks has same maximum capacity implement dinnerplates class dinnerplatesint capacity initializes object maximum capacity stacks capacity void pushint val pushes given integer val into leftmost stack size less than capacity int pop returns value top rightmost nonempty stack and removes from that stack and returns if all stacks empty int popatstackint index returns value top stack given index index and removes from that stack or returns if stack that given index empty example input dinnerplates push push push push push popatstack push push popatstack popatstack pop pop pop pop pop output null null null null null null null null explanation dinnerplates dinnerplates initialize capacity dpush dpush dpush dpush dpush stacks now    dpopatstack returns stacks now    dpush stacks now    dpush stacks now    dpopatstack returns stacks now    dpopatstack returns stacks now    dpop returns stacks now   dpop returns stacks now   dpop returns stacks now  dpop returns there no stacks dpop returns there still no stacks constraints capacity val index most calls will be made push pop and popatstack
map sum pairs design map that allows do following maps string key given value returns sum values that have key prefix equal given string implement mapsum class mapsum initializes mapsum object void insertstring key int val inserts keyval pair into map if key already existed original keyvalue pair will be overridden new one int sumstring prefix returns sum all pairs value whose key starts prefix example input mapsum insert sum insert sum apple ap app ap output null null null explanation mapsum mapsum new mapsum mapsuminsertapple mapsumsumap return apple mapsuminsertapp mapsumsumap return apple app constraints keylength prefixlength key and prefix consist only lowercase english letters val most calls will be made insert and sum
find median from data stream median middle value ordered integer list if size list even there no middle value and median mean two middle values example arr median example arr median implement medianfinder class medianfinder initializes medianfinder object void addnumint num adds integer num from data stream data structure double findmedian returns median all elements so far answers within actual answer will be accepted example input medianfinder addnum addnum findmedian addnum findmedian output null null null null explanation medianfinder medianfinder new medianfinder medianfinderaddnum arr medianfinderaddnum arr medianfinderfindmedian return ie medianfinderaddnum arr medianfinderfindmedian return constraints num there will be least one element data structure before calling findmedian most calls will be made addnum and findmedian follow up if all integer numbers from stream range how would optimize your solution if all integer numbers from stream range how would optimize your solution
node highest edge score given directed graph nodes labeled from where each node has exactly one outgoing edge graph represented given indexed integer array edges length where edgesi indicates that there directed edge from node node edgesi edge score node defined as sum labels all nodes that have edge pointing return node highest edge score if multiple nodes have same edge score return node smallest index example input edges output explanation nodes and have edge pointing node edge score node node has edge pointing node edge score node node has edge pointing node edge score node nodes and have edge pointing node edge score node node has highest edge score so return example input edges output explanation nodes and have edge pointing node edge score node nodes and have edge pointing node edge score node nodes and both have edge score since node has smaller index return constraints edgeslength edgesi edgesi
stone game there several stones arranged row and each stone has associated value which integer given array stonevalue each round game alice divides row into two nonempty rows ie left row and right row then bob calculates value each row which sum values all stones this row bob throws away row which has maximum value and alices score increases value remaining row if value two rows equal bob lets alice decide which row will be thrown away next round starts remaining row game ends when there only one stone remaining alices initially zero return maximum score that alice can obtain example input stonevalue output explanation first round alice divides row left row has value and right row has value bob throws away right row and alices score now second round alice divides row this time bob throws away left row and alices score becomes last round alice has only one choice divide row which bob throws away right row and alices score now game ends because only one stone remaining row example input stonevalue output example input stonevalue output constraints stonevaluelength stonevaluei
list products ordered period sql schema table products column name type productid int productname varchar productcategory varchar productid primary key this table this table contains data about companys products table orders column name type productid int orderdate date unit int there no primary key this table may have duplicate rows productid foreign key products table unit number products ordered orderdate write sql query get names products that have least units ordered february and their amount return result table any order query result format following example example input products table productid productname productcategory leetcode solutions book jewels stringology book hp laptop lenovo laptop leetcode kit tshirt orders table productid orderdate unit output productname unit leetcode solutions leetcode kit explanation products productid ordered february total products productid ordered february total products productid ordered february total products productid not ordered february products productid ordered february total
count special quadruplets given indexed integer array nums return number distinct quadruplets such that numsa numsb numsc numsd and example input nums output explanation only quadruplet that satisfies requirement because example input nums output explanation there no such quadruplets example input nums output explanation quadruplets that satisfy requirement constraints numslength numsi
longest common prefix write function find longest common prefix string amongst array strings if there no common prefix return empty string example input strs flowerflowflight output fl example input strs dogracecarcar output explanation there no common prefix among input strings constraints strslength strsilength strsi consists only lowercase english letters
how many numbers smaller than current number given array nums each numsi find out how many numbers array smaller than that each numsi have count number valid js such that and numsj numsi return answer array example input nums output explanation nums there exist four smaller numbers than and nums does not exist any smaller number than nums there exist one smaller number than nums there exist one smaller number than nums there exist three smaller numbers than and example input nums output example input nums output constraints numslength numsi
lexicographically smallest string after applying operations given string even length consisting digits from and two integers and can apply either following two operations any number times and any order add all odd indices indexed digits post cycled back example if and becomes rotate right positions example if and becomes return lexicographically smallest string can obtain applying above operations any number times string lexicographically smaller than string same length if first position where and differ string has letter that appears earlier alphabet than corresponding letter example lexicographically smaller than because first position differ third letter and comes before example input output explanation can apply following operations start rotate add add rotate add add rotate add there no way obtain string that lexicographically smaller then example input output explanation can apply following operations start rotate add rotate there no way obtain string that lexicographically smaller then example input output explanation there no sequence operations that will give us lexicographically smaller string than constraints slength slength even consists digits from only slength
amount time binary tree be infected given root binary tree unique values and integer start minute infection starts from node value start each minute node becomes infected if node currently uninfected node adjacent infected node return number minutes needed entire tree be infected example input root null start output explanation following nodes infected during minute node minute nodes and minute node minute node minute nodes and takes minutes whole tree be infected so return example input root start output explanation minute only node tree infected so return constraints number nodes tree range nodeval each node has unique value node value start exists tree
maximum number occurrences substring given string return maximum number occurrences any substring under following rules number unique characters substring must be less than or equal maxletters substring size must be between minsize and maxsize inclusive example input aababcaab maxletters minsize maxsize output explanation substring aab has occurrences original string satisfies conditions unique letters and size between minsize and maxsize example input aaaa maxletters minsize maxsize output explanation substring aaa occur times string can overlap constraints slength maxletters minsize maxsize min slength consists only lowercase english letters
balance binary search tree given root binary search tree return balanced binary search tree same node values if there more than one answer return any them binary search tree balanced if depth two subtrees every node never differs more than example input root nullnullnullnullnull output nullnullnull explanation this not only correct answer null also correct example input root output constraints number nodes tree range nodeval
minimum replacements sort array given indexed integer array nums one operation can replace any element array any two elements that sum example consider nums one operation can replace nums and and convert nums return minimum number operations make array that sorted nondecreasing order example input nums output explanation here steps sort array nondecreasing order from replace and so array becomes from replace and so array becomes there steps sort array nondecreasing order therefore return example input nums output explanation array already nondecreasing order therefore return constraints numslength numsi
closest dessert cost would like make dessert and preparing buy ingredients have ice cream base flavors and types toppings choose from must follow these rules when making your dessert there must be exactly one ice cream base can add one or more types topping or have no toppings all there most two each type topping given three inputs basecosts integer array length where each basecostsi represents price ith ice cream base flavor toppingcosts integer array length where each toppingcostsi price one ith topping target integer representing your target price dessert want make dessert total cost as close target as possible return closest possible cost dessert target if there multiple return lower one example input basecosts toppingcosts target output explanation consider following combination all indexed choose base cost take topping cost take topping cost total example input basecosts toppingcosts target output explanation consider following combination all indexed choose base cost take topping cost take topping cost take topping cost total cannot make dessert total cost example input basecosts toppingcosts target output explanation possible make desserts cost and return as lower cost constraints basecostslength toppingcostslength basecostsi toppingcostsi target
word frequency write bash script calculate frequency each word text file wordstxt simplicity sake may assume wordstxt contains only lowercase characters and space characters each word must consist lowercase characters only words separated one or more whitespace characters example assume that wordstxt has following content day sunny sunny your script should output following sorted descending frequency sunny day note dont worry about handling ties guaranteed that each words frequency count unique could write oneline using unix pipes
check if all least length places away given binary array nums and integer return true if all least places away from each other otherwise return false example input nums output true explanation each least places away from each other example input nums output false explanation second and third only one apart from each other constraints numslength numslength numsi or
kth largest element stream design class find kth largest element stream note that kth largest element sorted order not kth distinct element implement kthlargest class kthlargestint int nums initializes object integer and stream integers nums int addint val appends integer val stream and returns element representing kth largest element stream example input kthlargest add add add add add output null explanation kthlargest kthlargest new kthlargest kthlargestadd return kthlargestadd return kthlargestadd return kthlargestadd return kthlargestadd return constraints numslength numsi val most calls will be made add guaranteed that there will be least elements array when search kth element
form smallest number from two digit arrays given two arrays unique digits nums and nums return smallest number that contains least one digit from each array example input nums nums output explanation number contains digit from nums and digit from nums can be proven that smallest number can have example input nums nums output explanation number contains digit which exists both arrays constraints numslength numslength numsi numsi all digits each array unique
palindrome partitioning iii given string containing lowercase letters and integer need first change some characters other lowercase english letters then divide into nonempty disjoint substrings such that each substring palindrome return minimal number characters that need change divide string example input abc output explanation can split string into ab and and change character ab make palindrome example input aabbc output explanation can split string into aa bb and all them palindrome example input leetcode output constraints slength only contains lowercase english letters
bulls and cows playing bulls and cows game your friend write down secret number and ask your friend guess what number when your friend makes guess provide hint following info number bulls which digits guess that correct position number cows which digits guess that your secret number but located wrong position specifically nonbull digits guess that could be rearranged such that become bulls given secret number secret and your friends guess guess return hint your friends guess hint should be formatted as xayb where number bulls and number cows note that both secret and guess may contain duplicate digits example input secret guess output ab explanation bulls connected and cows underlined example input secret guess output ab explanation bulls connected and cows underlined or note that only one two unmatched counted as cow since nonbull digits can only be rearranged allow one be bull constraints secretlength guesslength secretlength guesslength secret and guess consist digits only
find subsequence length largest sum given integer array nums and integer want find subsequence nums length that has largest sum return any such subsequence as integer array length subsequence array that can be derived from another array deleting some or no elements without changing order remaining elements example input nums output explanation subsequence has largest sum example input nums output explanation subsequence has largest sum example input nums output explanation subsequence has largest sum another possible subsequence constraints numslength numsi numslength
minimum number swaps make string balanced given indexed string even length string consists exactly opening brackets and closing brackets string called balanced if and only if empty string or can be written as ab where both and balanced strings or can be written as where balanced string may swap brackets any two indices any number times return minimum number swaps make balanced example input output explanation can make string balanced swapping index index resulting string example input output explanation can do following make string balanced swap index index swap index index resulting string example input output explanation string already balanced constraints slength even si either or number opening brackets equals and number closing brackets equals
longest substring all vowels order string considered beautiful if satisfies following conditions each english vowels must appear least once letters must be sorted alphabetical order ie all as before es all es before etc example strings aeiou and aaaaaaeiiiioou considered beautiful but uaeio aeoiu and aaaeeeooo not beautiful given string word consisting english vowels return length longest beautiful substring word if no such substring exists return substring contiguous sequence characters string example input word aeiaaioaaaaeiiiiouuuooaauuaeiu output explanation longest beautiful substring word aaaaeiiiiouuu length example input word aeeeiiiioooauuuaeiou output explanation longest beautiful substring word aeiou length example input word output explanation there no beautiful substring so return constraints wordlength word consists characters and
sqrtx given nonnegative integer return square root rounded down nearest integer returned integer should be nonnegative as well must not use any builtin exponent function or operator example do not use powx or python example input output explanation square root so return example input output explanation square root and since round down nearest integer returned constraints
stone game vi alice and bob take turns playing game alice starting first there stones pile each players turn can remove stone from pile and receive points based stones value alice and bob may value stones differently given two integer arrays length alicevalues and bobvalues each alicevaluesi and bobvaluesi represents how alice and bob respectively value ith stone winner person most points after all stones chosen if both players have same amount points game results draw both players will play optimally both players know others values determine result game and if alice wins return if bob wins return if game results draw return example input alicevalues bobvalues output explanation if alice takes stone indexed first alice will receive points bob can only choose stone and will only receive points alice wins example input alicevalues bobvalues output explanation if alice takes stone and bob takes stone will both have point draw example input alicevalues bobvalues output explanation regardless how alice plays bob will be able have more points than alice example if alice takes stone bob can take stone and alice takes stone alice will have points bobs bob wins constraints alicevalueslength bobvalueslength alicevaluesi bobvaluesi
longest word dictionary given array strings words representing english dictionary return longest word words that can be built one character time other words words if there more than one possible answer return longest word smallest lexicographical order if there no answer return empty string note that word should be built from left right each additional character being added end previous word example input words wwoworworlworld output world explanation word world can be built one character time wo wor and worl example input words abananaappapplapapplyapple output apple explanation both apply and apple can be built from other words dictionary however apple lexicographically smaller than apply constraints wordslength wordsilength wordsi consists lowercase english letters
minimum number days make bouquets given integer array bloomday integer and integer want make bouquets make bouquet need use adjacent flowers from garden garden consists flowers ith flower will bloom bloomdayi and then can be used exactly one bouquet return minimum number days need wait be able make bouquets from garden if impossible make bouquets return example input bloomday output explanation let us see what happened first three days means flower bloomed and means flower did not bloom garden need bouquets each should contain flower after day can only make one bouquet after day can only make two bouquets after day can make bouquets answer example input bloomday output explanation need bouquets each has flowers that means need flowers only have flowers so impossible get needed bouquets and return example input bloomday output explanation need bouquets each should have flowers here garden after and days after day can make one bouquet first three flowers that bloomed cannot make another bouquet from last three flowers that bloomed because not adjacent after day obvious that can make two bouquets different ways constraints bloomdaylength bloomdayi
dungeon game demons had captured princess and imprisoned her bottomright corner dungeon dungeon consists rooms laid out grid our valiant knight initially positioned topleft room and must fight his way through dungeon rescue princess knight has initial health point represented positive integer if any point his health point drops or below dies immediately some rooms guarded demons represented negative integers so knight loses health upon entering these rooms other rooms either empty represented as or contain magic orbs that increase knights health represented positive integers reach princess as quickly as possible knight decides move only rightward or downward each step return knights minimum initial health so that can rescue princess note that any room can contain threats or powerups even first room knight enters and bottomright room where princess imprisoned example input dungeon output explanation initial health knight must be least if follows optimal path right right down down example input dungeon output constraints dungeonlength dungeonilength dungeonij
minimum changes make alternating binary string given string consisting only characters and one operation can change any or vice versa string called alternating if no two adjacent characters equal example string alternating while string not return minimum number operations needed make alternating example input output explanation if change last character will be which alternating example input output explanation already alternating example input output explanation need two operations reach or constraints slength si either or
minimum size subarray sum given array positive integers nums and positive integer target return minimal length subarray whose sum greater than or equal target if there no such subarray return instead example input target nums output explanation subarray has minimal length under problem constraint example input target nums output example input target nums output constraints target numslength numsi follow up if have figured out solution try coding another solution which time complexity logn
maximum number moves grid given indexed matrix grid consisting positive integers can start any cell first column matrix and traverse grid following way from cell row col can move any cells row col row col and row col such that value cell move should be strictly bigger than value current cell return maximum number moves that can perform example input grid output explanation can start cell and make following moves can be shown that maximum number moves that can be made example input grid output explanation starting from any cell first column cannot perform any moves constraints gridlength gridilength gridij
reconstruct original digits from english given string containing outoforder english representation digits return digits ascending order example input owoztneoer output example input fviefuro output constraints slength si one characters egfihonsrutwvxz guaranteed be valid
number unique subjects taught each teacher sql schema table teacher column name type teacherid int subjectid int deptid int subjectid deptid primary key this table each row this table indicates that teacher teacherid teaches subject subjectid department deptid write sql query report number unique subjects each teacher teaches university return result table any order query result format shown following example example input teacher table teacherid subjectid deptid output teacherid cnt explanation teacher teach subject departments and teach subject department teacher teach subject department teach subject department teach subject department teach subject department
minimum space wasted from packaging have packages that trying place boxes one package each box there suppliers that each produce boxes different sizes infinite supply package can be placed box if size package less than or equal size box package sizes given as integer array packages where packagesi size ith package suppliers given as integer array boxes where boxesj array box sizes that jth supplier produces want choose single supplier and use boxes from them such that total wasted space minimized each package box define space wasted be size box size package total wasted space sum space wasted all boxes example if have fit packages sizes and supplier offers boxes sizes can fit packages size and size into two boxes size and package size into box size this would result waste return minimum total wasted space choosing box supplier optimally or if impossible fit all packages inside boxes since answer may be large return modulo example input packages boxes output explanation optimal choose first supplier using two size boxes and one size box total waste example input packages boxes output explanation there no box that package size can fit example input packages boxes output explanation optimal choose third supplier using two size boxes two size boxes and two size boxes total waste constraints packageslength boxeslength packagesi boxesjlength boxesjk sumboxesjlength elements boxesj distinct
rotate array given integer array nums rotate array right steps where nonnegative example input nums output explanation rotate steps right rotate steps right rotate steps right example input nums output explanation rotate steps right rotate steps right constraints numslength numsi follow up try come up as many solutions as can there least three different ways solve this problem could do inplace extra space
expressive words sometimes people repeat letters represent extra feeling example hello heeellooo hi hiiii these strings like heeellooo have groups adjacent letters that all same eee ll ooo given string and array query strings words query word stretchy if can be made be equal any number applications following extension operation choose group consisting characters and add some number characters group so that size group three or more example starting hello could do extension group get hellooo but cannot get helloo since group oo has size less than three also could do another extension like ll lllll get helllllooo if helllllooo then query word hello would be stretchy because these two extension operations query hello hellooo helllllooo return number query strings that stretchy example input heeellooo words hello hi helo output explanation can extend and word hello get heeellooo cant extend helo get heeellooo because group ll not size or more example input zzzzzyyyyy words zzyyzyzyy output constraints slength wordslength wordsilength and wordsi consist lowercase letters
smallest subsequence distinct characters given string return lexicographically smallest subsequence that contains all distinct characters exactly once example input bcabc output abc example input cbacdcbc output acdb constraints slength consists lowercase english letters note this question same as httpsleetcodecomproblemsremoveduplicateletters
queries number points inside circle given array points where pointsi xi yi coordinates ith point plane multiple points can have same coordinates also given array queries where queriesj xj yj rj describes circle centered xj yj radius rj each query queriesj compute number points inside jth circle points border circle considered inside return array answer where answerj answer jth query example input points queries output explanation points and circles shown above queries green circle queries red circle and queries blue circle example input points queries output explanation points and circles shown above queries green queries red queries blue and queries purple constraints pointslength pointsilength xi yi querieslength queriesjlength xj yj rj all coordinates integers follow up could find answer each query better complexity than
minimize maximum pair sum array pair sum pair ab equal maximum pair sum largest pair sum list pairs example if have pairs and maximum pair sum would be max max given array nums even length pair up elements nums into pairs such that each element nums exactly one pair and maximum pair sum minimized return minimized maximum pair sum after optimally pairing up elements example input nums output explanation elements can be paired up into pairs and maximum pair sum max max example input nums output explanation elements can be paired up into pairs and maximum pair sum max max constraints numslength even numsi
check if matrix xmatrix square matrix said be xmatrix if both following conditions hold all elements diagonals matrix nonzero all other elements given integer array grid size representing square matrix return true if grid xmatrix otherwise return false example input grid output true explanation refer diagram above xmatrix should have green elements diagonals be nonzero and red elements be thus grid xmatrix example input grid output false explanation refer diagram above xmatrix should have green elements diagonals be nonzero and red elements be thus grid not xmatrix constraints gridlength gridilength gridij
couples holding hands there couples sitting seats arranged row and want hold hands people and seats represented integer array row where rowi id person sitting ith seat couples numbered order first couple being second couple being and so last couple being return minimum number swaps so that every couple sitting side side swap consists choosing any two people then stand up and switch seats example input row output explanation only need swap second row and third row person example input row output explanation all couples already seated side side constraints rowlength even rowi all elements row unique
maximum score node sequence there undirected graph nodes numbered from given indexed integer array scores length where scoresi denotes score node also given integer array edges where edgesi ai bi denotes that there exists undirected edge connecting nodes ai and bi node sequence valid if meets following conditions there edge connecting every pair adjacent nodes sequence no node appears more than once sequence score node sequence defined as sum scores nodes sequence return maximum score valid node sequence length if no such sequence exists return example input scores edges output explanation figure above shows graph and chosen node sequence score node sequence can be shown that no other node sequence has score more than note that sequences and also valid and have score sequence not valid since no edge connects nodes and example input scores edges output explanation figure above shows graph there no valid node sequences length so return constraints scoreslength scoresi edgeslength edgesilength ai bi ai bi there no duplicate edges
statistics from large sample given large sample integers range since sample so large represented array count where countk number times that appears sample calculate following statistics minimum minimum element sample maximum maximum element sample mean average sample calculated as total sum all elements divided total number elements median if sample has odd number elements then median middle element once sample sorted if sample has even number elements then median average two middle elements once sample sorted mode number that appears most sample guaranteed be unique return statistics sample as array floatingpoint numbers minimum maximum mean median mode answers within actual answer will be accepted example input count output explanation sample represented count minimum and maximum and respectively mean since size sample even median average two middle elements and which mode as appears most sample example input count output explanation sample represented count minimum and maximum and respectively mean display purposes output shows rounded number since size sample odd median middle element mode as appears most sample constraints countlength counti sumcount mode sample that count represents unique
number subarrays size and average greater than or equal threshold given array integers arr and two integers and threshold return number subarrays size and average greater than or equal threshold example input arr threshold output explanation subarrays and have averages and respectively all other subarrays size have averages less than threshold example input arr threshold output explanation first subarrays size have averages greater than note that averages not integers constraints arrlength arri arrlength threshold
final value variable after performing operations there programming language only four operations and one variable and increments value variable and decrements value variable initially value given array strings operations containing list operations return final value after performing all operations example input operations xxx output explanation operations performed as follows initially decremented incremented incremented example input operations xxx output explanation operations performed as follows initially incremented incremented incremented example input operations xxxx output explanation operations performed as follows initially incremented incremented decremented decremented constraints operationslength operationsi will be either or
subdomain visit count website domain discussleetcodecom consists various subdomains top level have com next level have leetcodecom and lowest level discussleetcodecom when visit domain like discussleetcodecom will also visit parent domains leetcodecom and com implicitly countpaired domain domain that has one two formats rep ddd or rep dd where rep number visits domain and ddd domain itself example discussleetcodecom countpaired domain that indicates that discussleetcodecom visited times given array countpaired domains cpdomains return array countpaired domains each subdomain input may return answer any order example input cpdomains discussleetcodecom output leetcodecom discussleetcodecom com explanation only have one website domain discussleetcodecom as discussed above subdomain leetcodecom and com will also be visited so will all be visited times example input cpdomains googlemailcom yahoocom intelmailcom wikiorg output mailcom yahoocom googlemailcom wikiorg org intelmailcom com explanation will visit googlemailcom times yahoocom times intelmailcom once and wikiorg times subdomains will visit mailcom times com times and org times constraints cpdomainlength cpdomainilength cpdomaini follows either repi dididi format or repi didi format repi integer range di di and di consist lowercase english letters
form largest integer digits that add up target given array integers cost and integer target return maximum integer can paint under following rules cost painting digit given costi indexed total cost used must be equal target integer does not have digits since answer may be very large return as string if there no way paint any integer given condition return example input cost target output explanation cost paint digit and digit then cost could also paint but largest number digit cost example input cost target output explanation cost paint digit and digit then cost example input cost target output explanation impossible paint any integer total cost equal target constraints costlength costi target
swim rising water given integer matrix grid where each value gridij represents elevation that point rain starts fall time depth water everywhere can swim from square another directionally adjacent square if and only if elevation both squares individually most can swim infinite distances zero time course must stay within boundaries grid during your swim return least time until can reach bottom right square if start top left square example input grid output explanation time grid location cannot go anywhere else because directionally adjacent neighbors have higher elevation than cannot reach point until time when depth water can swim anywhere inside grid example input grid output explanation final route shown need wait until time so that and connected constraints gridlength gridilength gridij each value gridij unique
number valid words each puzzle respect given puzzle string word valid if both following conditions satisfied word contains first letter puzzle each letter word that letter puzzle example if puzzle abcdefg then valid words faced cabbage and baggage while invalid words beefed does not include and based includes which not puzzle return array answer where answeri number words given word list words that valid respect puzzle puzzlesi example input words aaaaasasableabilityacttactoraccess puzzles aboveyzabrodyzabsluteabsoryzactreszgaswxyz output explanation valid word aboveyz aaaa valid word abrodyz aaaa valid words abslute aaaa asas able valid words absoryz aaaa asas valid words actresz aaaa asas actt access there no valid words gaswxyz cause none words list contains letter example input words applepleasplease puzzles aelwxyzaelpxyzaelpsxysaelpxyxaelpsy output constraints wordslength wordsilength puzzleslength puzzlesilength wordsi and puzzlesi consist lowercase english letters each puzzlesi does not contain repeated characters
find first and last position element sorted array given array integers nums sorted nondecreasing order find starting and ending position given target value if target not found array return must write algorithm olog runtime complexity example input nums target output example input nums target output example input nums target output constraints numslength numsi nums nondecreasing array target
online majority element subarray design data structure that efficiently finds majority element given subarray majority element subarray element that occurs threshold times or more subarray implementing majoritychecker class majoritycheckerint arr initializes instance class given array arr int queryint left int right int threshold returns element subarray arrleftright that occurs least threshold times or if no such element exists example input majoritychecker query query query output null explanation majoritychecker majoritychecker new majoritychecker majoritycheckerquery return majoritycheckerquery return majoritycheckerquery return constraints arrlength arri left right arrlength threshold right left threshold right left most calls will be made query
check if straight line given array coordinates coordinatesi where represents coordinate point check if these points make straight line xy plane example input coordinates output true example input coordinates output false constraints coordinateslength coordinatesilength coordinatesi coordinatesi coordinates contains no duplicate point
minimum difference sums after removal elements given indexed integer array nums consisting elements allowed remove any subsequence elements size exactly from nums remaining elements will be divided into two equal parts first elements belonging first part and their sum sumfirst next elements belonging second part and their sum sumsecond difference sums two parts denoted as sumfirst sumsecond example if sumfirst and sumsecond their difference similarly if sumfirst and sumsecond their difference return minimum difference possible between sums two parts after removal elements example input nums output explanation here nums has elements so thus have remove element from nums and divide array into two equal parts if remove nums array will be difference sums two parts will be if remove nums array will be difference sums two parts will be if remove nums array will be difference sums two parts will be minimum difference between sums two parts min example input nums output explanation here so must remove elements and divide remaining array into two parts containing two elements each if remove nums and nums resultant array will be difference sums will be obtain minimum difference should remove nums and nums resultant array becomes difference sums two parts can be shown that not possible obtain difference smaller than constraints numslength numsi
distribute repeating integers given array integers nums where there most unique values array also given array customer order quantities quantity where quantityi amount integers ith customer ordered determine if possible distribute nums such that ith customer gets exactly quantityi integers integers ith customer gets all equal and every customer satisfied return true if possible distribute nums according above conditions example input nums quantity output false explanation th customer cannot be given two different integers example input nums quantity output true explanation th customer given integers not used example input nums quantity output true explanation th customer given and st customer given constraints numslength numsi quantitylength quantityi there most unique values nums
find words that can be formed characters given array strings words and string chars string good if can be formed characters from chars each character can only be used once return sum lengths all good strings words example input words catbthattree chars atach output explanation strings that can be formed cat and hat so answer example input words helloworldleetcode chars welldonehoneyr output explanation strings that can be formed hello and world so answer constraints wordslength wordsilength charslength wordsi and chars consist lowercase english letters
memoize ii given function fn return memoized version that function memoized function function that will never be called twice same inputs instead will return cached value fn can be any function and there no constraints what type values accepts inputs considered identical if each other example input getinputs fn function return output valcallsvalcallsvalcalls explanation const inputs getinputs const memoized memoizefn const arr inputs memoizedarr inputs and required call fn inputs but those inputs seen before so no call fn required inputs and required another call fn total example input getinputs fn function return output valcallsvalcallsvalcalls explanation merging two empty objects will always result empty object may seem like there should only be call fn because cachehits however none those objects each other example input getinputs const return oooooo fn function return output valcallsvalcallsvalcalls explanation merging two empty objects will always result empty object nd and rd third function calls result cachehit this because every object passed identical constraints inputslength inputsflatlength inputsij nan
text justification given array strings words and width maxwidth format text such that each line has exactly maxwidth characters and fully left and right justified should pack your words greedy approach that pack as many words as can each line pad extra spaces when necessary so that each line has exactly maxwidth characters extra spaces between words should be distributed as evenly as possible if number spaces line does not divide evenly between words empty slots left will be assigned more spaces than slots right last line text should be leftjustified and no extra space inserted between words note word defined as character sequence consisting nonspace characters only each words length guaranteed be greater than and not exceed maxwidth input array words contains least one word example input words this example text justification maxwidth output this example text justification example input words whatmustbeacknowledgmentshallbe maxwidth output what must be acknowledgment shall be explanation note that last line shall be instead shall be because last line must be leftjustified instead fullyjustified note that second line also leftjustified because contains only one word example input words scienceiswhatweunderstandwellenoughtoexplaintoacomputerartiseverythingelsewedo maxwidth output science what understand well enough explain computer art everything else do constraints wordslength wordsilength wordsi consists only english letters and symbols maxwidth wordsilength maxwidth
number adjacent elements same color there indexed array nums length initially all elements uncolored has value given integer array queries where queriesi indexi colori each query color index indexi color colori array nums return array answer same length as queries where answeri number adjacent elements same color after ith query more formally answeri number indices such that and numsj numsj and numsj after ith query example input queries output explanation initially array nums where denotes uncolored elements array after st query nums count adjacent elements same color after nd query nums count adjacent elements same color after rd query nums count adjacent elements same color after th query nums count adjacent elements same color after th query nums count adjacent elements same color example input queries output explanation initially array nums where denotes uncolored elements array after st query nums count adjacent elements same color constraints querieslength queriesilength indexi colori
find unique binary string given array strings nums containing unique binary strings each length return binary string length that does not appear nums if there multiple answers may return any them example input nums output explanation does not appear nums would also be correct example input nums output explanation does not appear nums would also be correct example input nums output explanation does not appear nums and would also be correct constraints numslength numsilength numsi either or all strings nums unique
strongest values array given array integers arr and integer value arri said be stronger than value arrj if arri arrj where median array if arri arrj then arri said be stronger than arrj if arri arrj return list strongest values array return answer any arbitrary order median middle value ordered integer list more formally if length list median element position sorted list indexed arr and median obtained sorting array arr and median arrm where median arr and median obtained sorting array arr and median arrm where median example input arr output explanation median elements array sorted strongest strongest elements also accepted answer please note that although but stronger than because example input arr output explanation median elements array sorted strongest strongest elements example input arr output explanation median elements array sorted strongest any permutation accepted constraints arrlength arri arrlength
replace all digits characters given indexed string that has lowercase english letters its even indices and digits its odd indices there function shiftc where character and digit that returns xth character after example shifta and shiftx every odd index want replace digit si shiftsi si return after replacing all digits guaranteed that shiftsi si will never exceed example input ace output abcdef explanation digits replaced as follows shifta shiftc shifte example input abcde output abbdcfdhe explanation digits replaced as follows shifta shiftb shiftc shiftd constraints slength consists only lowercase english letters and digits shiftsi si all odd indices
circle and rectangle overlapping given circle represented as radius xcenter ycenter and axisaligned rectangle represented as where coordinates bottomleft corner and coordinates topright corner rectangle return true if circle and rectangle overlapped otherwise return false other words check if there any point xi yi that belongs circle and rectangle same time example input radius xcenter ycenter output true explanation circle and rectangle share point example input radius xcenter ycenter output false example input radius xcenter ycenter output true constraints radius xcenter ycenter
maximum number words can type there malfunctioning keyboard where some letter keys do not work all other keys keyboard work properly given string text words separated single space no leading or trailing spaces and string brokenletters all distinct letter keys that broken return number words text can fully type using this keyboard example input text hello world brokenletters ad output explanation cannot type world because key broken example input text leet code brokenletters lt output explanation cannot type leet because and keys broken example input text leet code brokenletters output explanation cannot type either word because key broken constraints textlength brokenletterslength text consists words separated single space without any leading or trailing spaces each word only consists lowercase english letters brokenletters consists distinct lowercase english letters
number great partitions given array nums consisting positive integers and integer partition array into two ordered groups such that each element exactly one group partition called great if sum elements each group greater than or equal return number distinct great partitions since answer may be too large return modulo two partitions considered distinct if some element numsi different groups two partitions example input nums output explanation great partitions and example input nums output explanation there no great partitions this array example input nums output explanation can either put nums first partition or second partition great partitions will be and constraints numslength numsi
chalkboard xor game given array integers nums represents numbers written chalkboard alice and bob take turns erasing exactly one number from chalkboard alice starting first if erasing number causes bitwise xor all elements chalkboard become then that player loses bitwise xor one element that element itself and bitwise xor no elements also if any player starts their turn bitwise xor all elements chalkboard equal then that player wins return true if and only if alice wins game assuming both players play optimally example input nums output false explanation alice has two choices erase or erase if erases nums array becomes bitwise xor all elements chalkboard xor now bob can remove any element wants because alice will be one erase last element and will lose if alice erases first now nums become bitwise xor all elements chalkboard xor alice will lose example input nums output true example input nums output true constraints numslength numsi
check knight tour configuration there knight chessboard valid configuration knight starts topleft cell board and visits every cell board exactly once given integer matrix grid consisting distinct integers from range where gridrowcol indicates that cell row col gridrowcolth cell that knight visited moves indexed return true if grid represents valid configuration knights movements or false otherwise note that valid knight move consists moving two squares vertically and one square horizontally or two squares horizontally and one square vertically figure below illustrates all possible eight moves knight from some cell example input grid output true explanation above diagram represents grid can be shown that valid configuration example input grid output false explanation above diagram represents grid th move knight not valid considering its position after th move constraints gridlength gridilength gridrowcol all integers grid unique
two sum iv input bst given root binary search tree and integer return true if there exist two elements bst such that their sum equal or false otherwise example input root null output true example input root null output false constraints number nodes tree range nodeval root guaranteed be valid binary search tree
combinations given two integers and return all possible combinations numbers chosen from range may return answer any order example input output explanation there choose total combinations note that combinations unordered ie and considered be same combination example input output explanation there choose total combination constraints
cherry pickup ii given rows cols matrix grid representing field cherries where gridij represents number cherries that can collect from cell have two robots that can collect cherries robot located topleft corner and robot located topright corner cols return maximum number cherries collection using both robots following rules below from cell robots can move cell or when any robot passes through cell picks up all cherries and cell becomes empty cell when both robots stay same cell only one takes cherries both robots cannot move outside grid any moment both robots should reach bottom row grid example input grid output explanation path robot and described color green and blue respectively cherries taken robot cherries taken robot total cherries example input grid output explanation path robot and described color green and blue respectively cherries taken robot cherries taken robot total cherries constraints rows gridlength cols gridilength rows cols gridij
tallest billboard installing billboard and want have largest height billboard will have two steel supports one each side each steel support must be equal height given collection rods that can be welded together example if have rods lengths and can weld them together make support length return largest possible height your billboard installation if cannot support billboard return example input rods output explanation have two disjoint subsets and which have same sum example input rods output explanation have two disjoint subsets and which have same sum example input rods output explanation billboard cannot be supported so return constraints rodslength rodsi sumrodsi
number subarrays bounded maximum given integer array nums and two integers left and right return number contiguous nonempty subarrays such that value maximum array element that subarray range left right test cases generated so that answer will fit bit integer example input nums left right output explanation there three subarrays that meet requirements example input nums left right output constraints numslength numsi left right
count increasing quadruplets given indexed integer array nums size containing all numbers from return number increasing quadruplets quadruplet increasing if and numsi numsk numsj numsl example input nums output explanation when and numsi numsk numsj numsl when and numsi numsk numsj numsl there no other quadruplets so return example input nums output explanation there exists only one quadruplet but since numsj numsk return constraints numslength numsi numslength all integers nums unique nums permutation
count collisions monkeys polygon there regular convex polygon vertices vertices labeled from clockwise direction and each vertex has exactly one monkey following figure shows convex polygon vertices each monkey moves simultaneously neighboring vertex neighboring vertex vertex can be vertex clockwise direction or vertex counterclockwise direction collision happens if least two monkeys reside same vertex after movement or intersect edge return number ways monkeys can move so that least one collision happens since answer may be very large return modulo note that each monkey can only move once example input output explanation there total possible movements two ways such that collide some point monkey moves clockwise direction monkey moves anticlockwise direction monkey moves clockwise direction monkeys and collide monkey moves anticlockwise direction monkey moves anticlockwise direction monkey moves clockwise direction monkeys and collide can be shown total movements result collision example input output explanation can be shown that there ways monkeys collide constraints
minimum index sum two lists given two arrays strings list and list find common strings least index sum common string string that appeared both list and list common string least index sum common string such that if appeared listi and listj then should be minimum value among all other common strings return all common strings least index sum return answer any order example input list shoguntapioca expressburger kingkfc list piattithe grill torrey pineshungry hunter steakhouseshogun output shogun explanation only common string shogun example input list shoguntapioca expressburger kingkfc list kfcshogunburger king output shogun explanation common string least index sum shogun index sum example input list happysadgood list sadhappygood output sadhappy explanation there three common strings happy index sum sad index sum good index sum strings least index sum sad and happy constraints listlength listlength listilength listilength listi and listi consist spaces and english letters all strings list unique all strings list unique there least common string between list and list
find winner array game given integer array arr distinct integers and integer game will be played between first two elements array ie arr and arr each round game compare arr arr larger integer wins and remains position and smaller integer moves end array game ends when integer wins consecutive rounds return integer which will win game guaranteed that there will be winner game example input arr output explanation lets see rounds game round arr winner wincount so can see that rounds will be played and winner because wins consecutive games example input arr output explanation will win first rounds consecutively constraints arrlength arri arr contains distinct integers
validate binary tree nodes have binary tree nodes numbered from where node has two children leftchildi and rightchildi return true if and only if all given nodes form exactly one valid binary tree if node has no left child then leftchildi will equal similarly right child note that nodes have no values and that only use node numbers this problem example input leftchild rightchild output true example input leftchild rightchild output false example input leftchild rightchild output false constraints leftchildlength rightchildlength leftchildi rightchildi
add digits given integer num repeatedly add all its digits until result has only one digit and return example input num output explanation process since has only one digit return example input num output constraints num follow up could do without any looprecursion runtime
perfect rectangle given array rectangles where rectanglesi xi yi ai bi represents axisaligned rectangle bottomleft point rectangle xi yi and topright point ai bi return true if all rectangles together form exact cover rectangular region example input rectangles output true explanation all rectangles together form exact cover rectangular region example input rectangles output false explanation because there gap between two rectangular regions example input rectangles output false explanation because two rectangles overlap each other constraints rectangleslength rectanglesilength xi yi ai bi
coin change ii given integer array coins representing coins different denominations and integer amount representing total amount money return number combinations that make up that amount if that amount money cannot be made up any combination coins return may assume that have infinite number each kind coin answer guaranteed fit into signed bit integer example input amount coins output explanation there four ways make up amount example input amount coins output explanation amount cannot be made up just coins example input amount coins output constraints coinslength coinsi all values coins unique amount
subsequence given two strings and return true if subsequence or false otherwise subsequence string new string that formed from original string deleting some can be none characters without disturbing relative positions remaining characters ie ace subsequence abcde while aec not example input abc ahbgdc output true example input axc ahbgdc output false constraints slength tlength and consist only lowercase english letters follow up suppose there lots incoming say sk where and want check one one see if has its subsequence this scenario how would change your code
number ways paint grid have grid size and want paint each cell grid exactly one three colors red yellow or green while making sure that no two adjacent cells have same color ie no two cells that share vertical or horizontal sides have same color given number rows grid return number ways can paint this grid as answer may grow large answer must be computed modulo example input output explanation there possible way paint grid as shown example input output constraints gridlength
pseudopalindromic paths binary tree given binary tree where node values digits from path binary tree said be pseudopalindromic if least one permutation node values path palindrome return number pseudopalindromic paths going from root node leaf nodes example input root null output explanation figure above represents given binary tree there three paths going from root node leaf nodes red path green path and path among these paths only red path and green path pseudopalindromic paths since red path can be rearranged palindrome and green path can be rearranged palindrome example input root nullnullnullnullnull output explanation figure above represents given binary tree there three paths going from root node leaf nodes green path path and path among these paths only green path pseudopalindromic since can be rearranged palindrome example input root output constraints number nodes tree range nodeval
minimum amount time collect garbage given indexed array strings garbage where garbagei represents assortment garbage ith house garbagei consists only characters and representing one unit metal paper and glass garbage respectively picking up one unit any type garbage takes minute also given indexed integer array travel where traveli number minutes needed go from house house there three garbage trucks city each responsible picking up one type garbage each garbage truck starts house and must visit each house order however do not need visit every house only one garbage truck may be used any given moment while one truck driving or picking up garbage other two trucks cannot do anything return minimum number minutes needed pick up all garbage example input garbage gpgpgg travel output explanation paper garbage truck travels from house house collects paper garbage house travels from house house collects paper garbage house altogether takes minutes pick up all paper garbage glass garbage truck collects glass garbage house travels from house house travels from house house collects glass garbage house travels from house house collects glass garbage house altogether takes minutes pick up all glass garbage since there no metal garbage do not need consider metal garbage truck therefore takes total minutes collect all garbage example input garbage mmmpgmgp travel output explanation metal garbage truck takes minutes pick up all metal garbage paper garbage truck takes minutes pick up all paper garbage glass garbage truck takes minutes pick up all glass garbage takes total minutes collect all garbage constraints garbagelength garbagei consists only letters and garbageilength travellength garbagelength traveli
number full rounds have played participating online chess tournament there chess round that starts every minutes first round day starts and after every minutes new round starts example second round starts fourth round starts and seventh round starts given two strings logintime and logouttime where logintime time will login game and logouttime time will logout from game if logouttime earlier than logintime this means have played from logintime midnight and from midnight logouttime return number full chess rounds have played tournament note all given times follow hour clock that means first round day starts and last round day starts example input logintime logouttime output explanation played one full round from did not play full round from because logged after began did not play full round from because logged out before ended example input logintime logouttime output explanation played full rounds from and full rounds from constraints logintime and logouttime format hhmm hh mm logintime and logouttime not equal
count good triplets array given two indexed arrays nums and nums length both which permutations good triplet set distinct values which present increasing order position both nums and nums other words if consider posv as index value nums and posv as index value nums then good triplet will be set where such that posx posy posz and posx posy posz return total number good triplets example input nums nums output explanation there triplets xyz such that posx posy posz and out those triplets only triplet satisfies posx posy posz hence there only good triplet example input nums nums output explanation good triplets and constraints numslength numslength numsi numsi nums and nums permutations
remove element given integer array nums and integer val remove all occurrences val nums inplace order elements may be changed then return number elements nums which not equal val consider number elements nums which not equal val be get accepted need do following things change array nums such that first elements nums contain elements which not equal val remaining elements nums not important as well as size nums return custom judge judge will test your solution following code int nums input array int val value remove int expectednums expected answer correct length sorted no values equaling val int removeelementnums val calls your implementation assert expectednumslength sortnums sort first elements nums int actuallength assert numsi expectednumsi if all assertions pass then your solution will be accepted example input nums val output nums explanation your function should return first two elements nums being does not matter what leave beyond returned hence underscores example input nums val output nums explanation your function should return first five elements nums containing and note that five elements can be returned any order does not matter what leave beyond returned hence underscores constraints numslength numsi val
replace employee id unique identifier sql schema table employees column name type id int name varchar id primary key this table each row this table contains id and name employee company table employeeuni column name type id int uniqueid int id uniqueid primary key this table each row this table contains id and corresponding unique id employee company write sql query show unique id each user if user does not have unique id replace just show null return result table any order query result format following example example input employees table id name alice bob meir winston jonathan employeeuni table id uniqueid output uniqueid name null alice null bob meir winston jonathan explanation alice and bob do not have unique id will show null instead unique id meir unique id winston unique id jonathan
house robber professional robber planning rob houses along street each house has certain amount money stashed only constraint stopping from robbing each them that adjacent houses have security systems connected and will automatically contact police if two adjacent houses broken into same night given integer array nums representing amount money each house return maximum amount money can rob tonight without alerting police example input nums output explanation rob house money and then rob house money total amount can rob example input nums output explanation rob house money rob house money and rob house money total amount can rob constraints numslength numsi
total appeal string appeal string number distinct characters found string example appeal abbca because has distinct characters and given string return total appeal all its substrings substring contiguous sequence characters within string example input abbca output explanation following substrings abbca substrings length have appeal and respectively sum substrings length ab bb bc ca have appeal and respectively sum substrings length abb bbc bca have appeal and respectively sum substrings length abbc bbca have appeal and respectively sum substrings length abbca has appeal sum total sum example input code output explanation following substrings code substrings length have appeal and respectively sum substrings length co od de have appeal and respectively sum substrings length cod ode have appeal and respectively sum substrings length code has appeal sum total sum constraints slength consists lowercase english letters
minimum operations convert number given indexed integer array nums containing distinct numbers integer start and integer goal there integer that initially set start and want perform operations such that converted goal can perform following operation repeatedly number if then any index array numslength can set any following numsi numsi numsi bitwisexor note that can use each numsi any number times any order operations that set be out range valid but no more operations can be done afterward return minimum number operations needed convert start into goal and if not possible example input nums start goal output explanation can go from following operations example input nums start goal output explanation can go from following operations note that last operation sets out range which valid example input nums start goal output explanation there no way convert into constraints numslength numsi goal start start goal all integers nums distinct
splitting string into descending consecutive values given string that consists only digits check if can split into two or more nonempty substrings such that numerical values substrings descending order and difference between numerical values every two adjacent substrings equal example string can be split into numerical values values descending order and adjacent values differ so this way valid another example string can be split into or however all ways invalid because have numerical values and respectively all which not descending order return true if possible split as described above or false otherwise substring contiguous sequence characters string example input output false explanation there no valid way split example input output true explanation can be split into numerical values values descending order adjacent values differing example input output false explanation there no valid way split constraints slength only consists digits
count repetitions define str as string str which consists string concatenated times example str abc abcabcabc define that string can be obtained from string if can remove some characters from such that becomes example abc can be obtained from abdbec based our definition removing bolded underlined characters given two strings and and two integers and have two strings str and str return maximum integer such that str str can be obtained from str example input acb ab output example input acb acb output constraints slength slength and consist lowercase english letters
eliminate maximum number monsters playing video game where defending your city from group monsters given indexed integer array dist size where disti initial distance kilometers ith monster from city monsters walk toward city constant speed speed each monster given integer array speed size where speedi speed ith monster kilometers per minute have weapon that once fully charged can eliminate single monster however weapon takes one minute chargethe weapon fully charged very start lose when any monster reaches your city if monster reaches city exact moment weapon fully charged counts as loss and game ends before can use your weapon return maximum number monsters that can eliminate before lose or if can eliminate all monsters before reach city example input dist speed output explanation beginning distances monsters eliminate first monster after minute distances monsters eliminate second monster after minute distances monsters xx eliminate thrid monster all monsters can be eliminated example input dist speed output explanation beginning distances monsters eliminate first monster after minute distances monsters so lose can only eliminate monster example input dist speed output explanation beginning distances monsters eliminate first monster after minute distances monsters so lose can only eliminate monster constraints distlength speedlength disti speedi
target sum given integer array nums and integer target want build expression out nums adding one symbols and before each integer nums and then concatenate all integers example if nums can add before and before and concatenate them build expression return number different expressions that can build which evaluates target example input nums target output explanation there ways assign symbols make sum nums be target example input nums target output constraints numslength numsi sumnumsi target
minimum moves reach target rotations nn grid there snake that spans cells and starts moving from top left corner and grid has empty cells represented zeros and blocked cells represented ones snake wants reach lower right corner and one move snake can move one cell right if there no blocked cells there this move keeps horizontalvertical position snake as move down one cell if there no blocked cells there this move keeps horizontalvertical position snake as rotate clockwise if its horizontal position and two cells under both empty that case snake moves from and and rotate counterclockwise if its vertical position and two cells its right both empty that case snake moves from and and return minimum number moves reach target if there no way reach target return example input grid output explanation one possible solution right right rotate clockwise right down down down down rotate counterclockwise right down example input grid output constraints gridij guaranteed that snake starts empty cells
last stone weight given array integers stones where stonesi weight ith stone playing game stones each turn choose heaviest two stones and smash them together suppose heaviest two stones have weights and result this smash if both stones destroyed and if stone weight destroyed and stone weight has new weight end game there most one stone left return weight last remaining stone if there no stones left return example input stones output explanation combine and get so array converts then combine and get so array converts then combine and get so array converts then combine and get so array converts then thats value last stone example input stones output constraints stoneslength stonesi
largest submatrix rearrangements given binary matrix matrix size and allowed rearrange columns matrix any order return area largest submatrix within matrix where every element submatrix after reordering columns optimally example input matrix output explanation can rearrange columns as shown above largest submatrix bold has area example input matrix output explanation can rearrange columns as shown above largest submatrix bold has area example input matrix output explanation notice that must rearrange entire columns and there no way make submatrix larger than area constraints matrixlength matrixilength matrixij either or
longest zigzag path binary tree given root binary tree zigzag path binary tree defined as follow choose any node binary tree and direction right or left if current direction right move right child current node otherwise move left child change direction from right left or from left right repeat second and third steps until cant move tree zigzag length defined as number nodes visited single node has length return longest zigzag path contained that tree example input root nullnullnullnullnullnullnull output explanation longest zigzag path blue nodes right left right example input root nullnullnullnull output explanation longest zigzag path blue nodes left right left right example input root output constraints number nodes tree range nodeval
sort students their kth score there class students and exams given indexed integer matrix score where each row represents one student and scoreij denotes score ith student got jth exam matrix score contains distinct integers only also given integer sort students ie rows matrix their scores kth indexed exam from highest lowest return matrix after sorting example input score output explanation above diagram denotes student while denotes exam student index scored exam which highest score so got first place student index scored exam which second highest score so got second place student index scored exam which lowest score so got third place example input score output explanation above diagram denotes student while denotes exam student index scored exam which highest score so got first place student index scored exam which lowest score so got second place constraints scorelength scoreilength scoreij score consists distinct integers
mirror reflection there special square room mirrors each four walls except southwest corner there receptors each remaining corners numbered and square room has walls length and laser ray from southwest corner first meets east wall distance from th receptor given two integers and return number receptor that ray meets first test cases guaranteed so that ray will meet receptor eventually example input output explanation ray meets receptor first time gets reflected back left wall example input output constraints
rank scores sql schema table scores column name type id int score decimal id primary key this table each row this table contains score game score floating point value two decimal places write sql query rank scores ranking should be calculated according following rules scores should be ranked from highest lowest if there tie between two scores both should have same ranking after tie next ranking number should be next consecutive integer value other words there should be no holes between ranks return result table ordered score descending order query result format following example example input scores table id score output score rank
score parentheses given balanced parentheses string return score string score balanced parentheses string based following rule has score ab has score where and balanced parentheses strings has score where balanced parentheses string example input output example input output example input output constraints slength consists only and balanced parentheses string
longest string chain given array words where each word consists lowercase english letters worda predecessor wordb if and only if can insert exactly one letter anywhere worda without changing order other characters make equal wordb example abc predecessor abac while cba not predecessor bcad word chain sequence words word word wordk where word predecessor word word predecessor word and so single word trivially word chain return length longest possible word chain words chosen from given list words example input words abbabcabdabdca output explanation one longest word chains ababdabdca example input words xbcpcxbcfxbcxbcpcxbc output explanation all words can be put word chain xb xbc cxbc pcxbc pcxbcf example input words abcddbqca output explanation trivial word chain abcd one longest word chains abcddbqca not valid word chain because ordering letters changed constraints wordslength wordsilength wordsi only consists lowercase english letters
all elements two binary search trees given two binary search trees root and root return list containing all integers from both trees sorted ascending order example input root root output example input root null root output constraints number nodes each tree range nodeval
find two nonoverlapping subarrays each target sum given array integers arr and integer target have find two nonoverlapping subarrays arr each sum equal target there can be multiple answers so have find answer where sum lengths two subarrays minimum return minimum sum lengths two required subarrays or return if cannot find such two subarrays example input arr target output explanation only two subarrays have sum and sum their lengths example input arr target output explanation although have three nonoverlapping subarrays sum and but will choose first and third subarrays as sum their lengths example input arr target output explanation have only one subarray sum constraints arrlength arri target
divisible elements subarrays given integer array nums and two integers and return number distinct subarrays which have most elements divisible two arrays nums and nums said be distinct if different lengths or there exists least one index where numsi numsi subarray defined as nonempty contiguous sequence elements array example input nums output explanation elements indices and divisible distinct subarrays which have most elements divisible and note that subarrays and occur more than once nums but should each be counted only once subarray should not be counted because has elements that divisible example input nums output explanation all element nums divisible also every subarray nums will have most elements that divisible since all subarrays distinct total number subarrays satisfying all constraints constraints numslength numsi numslength follow up can solve this problem time complexity
minimum lines represent line chart given integer array stockprices where stockpricesi dayi pricei indicates price stock day dayi pricei line chart created from array plotting points xy plane xaxis representing day and yaxis representing price and connecting adjacent points one such example shown below return minimum number lines needed represent line chart example input stockprices output explanation diagram above represents input xaxis representing day and yaxis representing price following lines can be drawn represent line chart line red from passing through and line blue from line green from passing through and can be shown that not possible represent line chart using less than lines example input stockprices output explanation as shown diagram above line chart can be represented single line constraints stockpriceslength stockpricesilength dayi pricei all dayi distinct
evaluate division given array variable pairs equations and array real numbers values where equationsi ai bi and valuesi represent equation ai bi valuesi each ai or bi string that represents single variable also given some queries where queriesj cj dj represents jth query where must find answer cj dj return answers all queries if single answer cannot be determined return note input always valid may assume that evaluating queries will not result division zero and that there no contradiction example input equations abbc values queries acbaaeaaxx output explanation given queries return example input equations abbcbccd values queries accbbccdcdbc output example input equations ab values queries abbaacxy output constraints equationslength equationsilength ailength bilength valueslength equationslength valuesi querieslength queriesilength cjlength djlength ai bi cj dj consist lower case english letters and digits
substrings size three distinct characters string good if there no repeated characters given string return number good substrings length three note that if there multiple occurrences same substring every occurrence should be counted substring contiguous sequence characters string example input xyzzaz output explanation there substrings size xyz yzz zza and zaz only good substring length xyz example input aababcabc output explanation there substrings size aab aba bab abc bca cab and abc good substrings abc bca cab and abc constraints slength consists lowercase english letters
minimum cost change final value expression given valid boolean expression as string expression consisting characters bitwise and operator bitwise or operator and example and not valid while and valid expressions return minimum cost change final value expression example if expression its value want apply operations so that new expression evaluates cost changing final value expression number operations performed expression types operations described as follows turn into turn into turn into turn into note does not take precedence over order calculation evaluate parentheses first then lefttoright order example input expression output explanation can turn into changing using operation new expression evaluates example input expression output explanation can turn into using operations new expression evaluates example input expression output explanation can turn into using operation new expression evaluates constraints expressionlength expression only contains and all parentheses properly matched there will be no empty parentheses ie not substring expression
maximum number events that can be attended ii given array events where eventsi startdayi enddayi valuei ith event starts startdayi and ends enddayi and if attend this event will receive value valuei also given integer which represents maximum number events can attend can only attend one event time if choose attend event must attend entire event note that end day inclusive that cannot attend two events where one them starts and other ends same day return maximum sum values that can receive attending events example input events output explanation choose green events and indexed total value example input events output explanation choose event total value notice that cannot attend any other event as overlap and that do not have attend events example input events output explanation although events do not overlap can only attend events pick highest valued three constraints eventslength eventslength startdayi enddayi valuei
most popular video creator given two string arrays creators and ids and integer array views all length ith video platform created creatori has id idsi and has viewsi views popularity creator sum number views all creators videos find creator highest popularity and id their most viewed video if multiple creators have highest popularity find all them if multiple videos have highest view count creator find lexicographically smallest id return array strings answer where answeri creatori idi means that creatori has highest popularity and idi id their most popular video answer can be returned any order example input creators alicebobalicechris ids onetwothreefour views output aliceonebobtwo explanation popularity alice popularity bob popularity chris alice and bob most popular creators bob video highest view count two alice videos highest view count one and three since one lexicographically smaller than three included answer example input creators alicealicealice ids abc views output aliceb explanation videos id and have highest view count since lexicographically smaller than included answer constraints creatorslength idslength viewslength creatorsilength idsilength creatorsi and idsi consist only lowercase english letters viewsi
next greater element iii given positive integer find smallest integer which has exactly same digits existing integer and greater value than if no such positive integer exists return note that returned integer should fit bit integer if there valid answer but does not fit bit integer return example input output example input output constraints
transpose matrix given integer array matrix return transpose matrix transpose matrix matrix flipped over its main diagonal switching matrixs row and column indices example input matrix output example input matrix output constraints matrixlength matrixilength matrixij
selling pieces wood given two integers and that represent height and width rectangular piece wood also given integer array prices where pricesi hi wi pricei indicates can sell rectangular piece wood height hi and width wi pricei dollars cut piece wood must make vertical or horizontal cut across entire height or width piece split into two smaller pieces after cutting piece wood into some number smaller pieces can sell pieces according prices may sell multiple pieces same shape and do not have sell all shapes grain wood makes difference so cannot rotate piece swap its height and width return maximum money can earn after cutting piece wood note that can cut piece wood as many times as want example input prices output explanation diagram above shows possible scenario consists pieces wood shaped selling price piece wood shaped selling price piece wood shaped selling price this obtains total money earned can be shown that maximum amount money that can be earned example input prices output explanation diagram above shows possible scenario consists pieces wood shaped selling price piece wood shaped selling price this obtains total money earned can be shown that maximum amount money that can be earned notice that cannot rotate piece wood obtain piece wood constraints priceslength pricesilength hi wi pricei all shapes wood hi wi pairwise distinct
most beautiful item each query given integer array items where itemsi pricei beautyi denotes price and beauty item respectively also given indexed integer array queries each queriesj want determine maximum beauty item whose price less than or equal queriesj if no such item exists then answer this query return array answer same length as queries where answerj answer jth query example input items queries output explanation queries only item which has price hence answer this query queries items which can be considered and maximum beauty among them queries and queries items which can be considered and maximum beauty among them queries and queries all items can be considered hence answer them maximum beauty all items ie example input items queries output explanation price every item equal so choose item maximum beauty note that multiple items can have same price andor beauty example input items queries output explanation no item has price less than or equal so no item can be chosen hence answer query constraints itemslength querieslength itemsilength pricei beautyi queriesj
divide array sets consecutive numbers given array integers nums and positive integer check whether possible divide this array into sets consecutive numbers return true if possible otherwise return false example input nums output true explanation array can be divided into and example input nums output true explanation array can be divided into and example input nums output false explanation each array should be divided subarrays size constraints numslength numsi note this question same as httpsleetcodecomproblemshandofstraights
lexicographically smallest beautiful string string beautiful if consists first letters english lowercase alphabet does not contain any substring length or more which palindrome given beautiful string length and positive integer return lexicographically smallest string length which larger than and beautiful if there no such string return empty string string lexicographically larger than string same length if first position where and differ has character strictly larger than corresponding character example abcd lexicographically larger than abcc because first position differ fourth character and greater than example input abcz output abda explanation string abda beautiful and lexicographically larger than string abcz can be proven that there no string that lexicographically larger than string abcz beautiful and lexicographically smaller than string abda example input dc output explanation can be proven that there no string that lexicographically larger than string dc and beautiful constraints slength beautiful string
fraction recurring decimal given two integers representing numerator and denominator fraction return fraction string format if fractional part repeating enclose repeating part parentheses if multiple answers possible return any them guaranteed that length answer string less than all given inputs example input numerator denominator output example input numerator denominator output example input numerator denominator output constraints numerator denominator denominator
minimum insertion steps make string palindrome given string one step can insert any character any index string return minimum number steps make palindrome palindrome string one that reads same backward as well as forward example input zzazz output explanation string zzazz already palindrome do not need any insertions example input mbadm output explanation string can be mbdadbm or mdbabdm example input leetcode output explanation inserting characters string becomes leetcodocteel constraints slength consists lowercase english letters
two out three given three integer arrays nums nums and nums return distinct array containing all values that present least two out three arrays may return values any order example input nums nums nums output explanation values that present least two arrays all three arrays nums and nums example input nums nums nums output explanation values that present least two arrays nums and nums nums and nums nums and nums example input nums nums nums output explanation no value present least two arrays constraints numslength numslength numslength numsi numsj numsk
grid illumination there grid size where each cell this grid has lamp that initially turned off given array lamp positions lamps where lampsi rowi coli indicates that lamp gridrowicoli turned even if same lamp listed more than once turned when lamp turned illuminates its cell and all other cells same row column or diagonal also given another array queries where queriesj rowj colj jth query determine whether gridrowjcolj illuminated or not after answering jth query turn off lamp gridrowjcolj and its adjacent lamps if exist lamp adjacent if its cell shares either side or corner gridrowjcolj return array integers ans where ansj should be if cell jth query illuminated or if lamp not example input lamps queries output explanation have initial grid all lamps turned off above picture see grid after turning lamp grid then turning lamp grid th query asks if lamp grid illuminated or not blue square illuminated so set ans then turn off all lamps red square st query asks if lamp grid illuminated or not blue square not illuminated so set ans then turn off all lamps red rectangle example input lamps queries output example input lamps queries output constraints lampslength querieslength lampsilength rowi coli queriesjlength rowj colj
maximum employees be invited meeting company organizing meeting and has list employees waiting be invited have arranged large circular table capable seating any number employees employees numbered from each employee has favorite person and will attend meeting only if can sit next their favorite person table favorite person employee not themself given indexed integer array favorite where favoritei denotes favorite person ith employee return maximum number employees that can be invited meeting example input favorite output explanation above figure shows how company can invite employees and and seat them round table all employees cannot be invited because employee cannot sit beside employees and simultaneously note that company can also invite employees and and give them their desired seats maximum number employees that can be invited meeting example input favorite output explanation each employee favorite person least one other employee and only way company can invite them if invite every employee seating arrangement will be same as that figure given example employee will sit between employees and employee will sit between employees and employee will sit between employees and maximum number employees that can be invited meeting example input favorite output explanation above figure shows how company will invite employees and and seat them round table employee cannot be invited because two spots next their favorite employee taken so company leaves them out meeting maximum number employees that can be invited meeting constraints favoritelength favoritei favoritei
minimize hamming distance after swap operations given two integer arrays source and target both length also given array allowedswaps where each allowedswapsi ai bi indicates that allowed swap elements index ai and index bi indexed array source note that can swap elements specific pair indices multiple times and any order hamming distance two arrays same length source and target number positions where elements different formally number indices where sourcei targeti indexed return minimum hamming distance source and target after performing any amount swap operations array source example input source target allowedswaps output explanation source can be transformed following way swap indices and source swap indices and source hamming distance source and target as differ position index example input source target allowedswaps output explanation there no allowed swaps hamming distance source and target as differ positions index and index example input source target allowedswaps output constraints sourcelength targetlength sourcei targeti allowedswapslength allowedswapsilength ai bi ai bi
number good subsets given integer array nums call subset nums good if its product can be represented as product one or more distinct prime numbers example if nums and good subsets products and respectively and not good subsets products and respectively return number different good subsets nums modulo subset nums any array that can be obtained deleting some possibly none or all elements from nums two subsets different if and only if chosen indices delete different example input nums output explanation good subsets product which product distinct prime product which product distinct primes and product which product distinct prime product which product distinct prime product which product distinct primes and product which product distinct prime example input nums output explanation good subsets product which product distinct prime product which product distinct primes and product which product distinct primes and product which product distinct prime product which product distinct primes and constraints numslength numsi
longest uncommon subsequence given two strings and return length longest uncommon subsequence between and if longest uncommon subsequence does not exist return uncommon subsequence between two strings string that subsequence one but not other subsequence string string that can be obtained after deleting any number characters from example abc subsequence aebdc because can delete underlined characters aebdc get abc other subsequences aebdc include aebdc aeb and empty string example input aba cdc output explanation one longest uncommon subsequence aba because aba subsequence aba but not cdc note that cdc also longest uncommon subsequence example input aaa bbb output explanation longest uncommon subsequences aaa and bbb example input aaa aaa output explanation every subsequence string also subsequence string similarly every subsequence string also subsequence string constraints alength blength and consist lowercase english letters
count number maximum bitwiseor subsets given integer array nums find maximum possible bitwise or subset nums and return number different nonempty subsets maximum bitwise or array subset array if can be obtained from deleting some possibly zero elements two subsets considered different if indices elements chosen different bitwise or array equal or or or aalength indexed example input nums output explanation maximum possible bitwise or subset there subsets bitwise or example input nums output explanation all nonempty subsets have bitwise or there total subsets example input nums output explanation maximum possible bitwise or subset there subsets bitwise or constraints numslength numsi
checking existence edge length limited paths undirected graph nodes defined edgelist where edgelisti ui vi disi denotes edge between nodes ui and vi distance disi note that there may be multiple edges between two nodes given array queries where queriesj pj qj limitj your task determine each queriesj whether there path between pj and qj such that each edge path has distance strictly less than limitj return boolean array answer where answerlength querieslength and jth value answer true if there path queriesj true and false otherwise example input edgelist queries output falsetrue explanation above figure shows given graph note that there two overlapping edges between and distances and first query between and there no path where each distance less than thus return false this query second query there path two edges distances less than thus return true this query example input edgelist queries output truefalse explanation above figure shows given graph constraints edgelistlength querieslength edgelistilength queriesjlength ui vi pj qj ui vi pj qj disi limitj there may be multiple edges between two nodes
recover original array alice had indexed array arr consisting positive integers chose arbitrary positive integer and created two new indexed integer arrays lower and higher following manner loweri arri every index where higheri arri every index where unfortunately alice lost all three arrays however remembers integers that present arrays lower and higher but not array each integer belonged help alice and recover original array given array nums consisting integers where exactly integers present lower and remaining higher return original array arr case answer not unique return any valid array note test cases generated such that there exists least one valid array arr example input nums output explanation if arr and get lower and higher combining lower and higher gives us which permutation nums another valid possibility that arr and that case lower and higher example input nums output explanation if arr and get lower and higher combining lower and higher gives us which equal nums note that arr cannot be because that case only possible way obtain this invalid since must be positive example input nums output explanation only possible combination arr and using them get lower and higher constraints numslength numsi test cases generated such that there exists least one valid array arr
find kth bit nth binary string given two positive integers and binary string sn formed as follows si si reverseinvertsi where denotes concatenation operation reversex returns reversed string and invertx inverts all bits changes and changes example first four strings above sequence return kth bit sn guaranteed that valid given example input output explanation st bit example input output explanation th bit constraints
maximum product difference between two pairs product difference between two pairs and defined as example product difference between and given integer array nums choose four distinct indices and such that product difference between pairs numsw numsx and numsy numsz maximized return maximum such product difference example input nums output explanation can choose indices and first pair and indices and second pair product difference example input nums output explanation can choose indices and first pair and indices and second pair product difference constraints numslength numsi
spiral matrix ii given positive integer generate matrix filled elements from spiral order example input output example input output constraints
minimum common value given two integer arrays nums and nums sorted nondecreasing order return minimum integer common both arrays if there no common integer amongst nums and nums return note that integer said be common nums and nums if both arrays have least one occurrence that integer example input nums nums output explanation smallest element common both arrays so return example input nums nums output explanation there two common elements array and out which smallest so returned constraints numslength numslength numsi numsj both nums and nums sorted nondecreasing order
crawler log folder leetcode file system keeps log each time some user performs change folder operation operations described below move parent folder current folder if already main folder remain same folder remain same folder move child folder named this folder guaranteed always exist given list strings logs where logsi operation performed user ith step file system starts main folder then operations logs performed return minimum number operations needed go back main folder after change folder operations example input logs ddd output explanation use this change folder operation times and go back main folder example input logs dddd output example input logs output constraints logslength logsilength logsi contains lowercase english letters digits and logsi follows format described statement folder names consist lowercase english letters and digits
minimum operations make array equal have array arr length where arri all valid values ie one operation can select two indices and where and subtract from arrx and add arry ie perform arrx and arry goal make all elements array equal guaranteed that all elements array can be made equal using some operations given integer length array return minimum number operations needed make all elements arr equal example input output explanation arr first operation choose and this leads arr be second operation choose and again thus arr example input output constraints
replace all avoid consecutive repeating characters given string containing only lowercase english letters and character convert all characters into lowercase letters such that final string does not contain any consecutive repeating characters cannot modify non characters guaranteed that there no consecutive repeating characters given string except return final string after all conversions possibly zero have been made if there more than one solution return any them can be shown that answer always possible given constraints example input zs output azs explanation there solutions this problem from azs yzs all valid only invalid modification as string will consist consecutive repeating characters zzs example input ubvw output ubvaw explanation there solutions this problem only and invalid modifications as strings will consist consecutive repeating characters ubvvw and ubvww constraints slength consist lowercase english letters and
sort people given array strings names and array heights that consists distinct positive integers both arrays length each index namesi and heightsi denote name and height ith person return names sorted descending order peoples heights example input names maryjohnemma heights output maryemmajohn explanation mary tallest followed emma and john example input names alicebobbob heights output bobalicebob explanation first bob tallest followed alice and second bob constraints nameslength heightslength namesilength heightsi namesi consists lower and upper case english letters all values heights distinct
closest subsequence sum given integer array nums and integer goal want choose subsequence nums such that sum its elements closest possible goal that if sum subsequences elements sum then want minimize absolute difference abssum goal return minimum possible value abssum goal note that subsequence array array formed removing some elements possibly all or none original array example input nums goal output explanation choose whole array as subsequence sum this equal goal so absolute difference example input nums goal output explanation choose subsequence sum absolute difference abs abs which minimum example input nums goal output constraints numslength numsi goal
minimum cost split array given integer array nums and integer split array into some number nonempty subarrays cost split sum importance value each subarray split let trimmedsubarray be version subarray where all numbers which appear only once removed example trimmed importance value subarray trimmedsubarraylength example if subarray then trimmed importance value this subarray will be return minimum possible cost split nums subarray contiguous nonempty sequence elements within array example input nums output explanation split nums have two subarrays importance value importance value cost split can be shown that this minimum possible cost among all possible splits example input nums output explanation split nums have two subarrays importance value importance value cost split can be shown that this minimum possible cost among all possible splits example input nums output explanation split nums have one subarray importance value cost split can be shown that this minimum possible cost among all possible splits constraints numslength numsi numslength
shortest path visiting all nodes have undirected connected graph nodes labeled from given array graph where graphi list all nodes connected node edge return length shortest path that visits every node may start and stop any node may revisit nodes multiple times and may reuse edges example input graph output explanation one possible path example input graph output explanation one possible path constraints graphlength graphilength graphi does not contain if grapha contains then graphb contains input graph always connected
find triangular sum array given indexed integer array nums where numsi digit between and inclusive triangular sum nums value only element present nums after following process terminates let nums comprise elements if end process otherwise create new indexed integer array newnums length each index where assign value newnumsi as numsi numsi where denotes modulo operator replace array nums newnums repeat entire process starting from step return triangular sum nums example input nums output explanation above diagram depicts process from which obtain triangular sum array example input nums output explanation since there only one element nums triangular sum value that element itself constraints numslength numsi
merge sorted lists given array linkedlists lists each linkedlist sorted ascending order merge all linkedlists into one sorted linkedlist and return example input lists output explanation linkedlists merging them into one sorted list example input lists output example input lists output constraints listslength listsilength listsij listsi sorted ascending order sum listsilength will not exceed
find eventual safe states there directed graph nodes each node labeled from graph represented indexed integer array graph where graphi integer array nodes adjacent node meaning there edge from node each node graphi node terminal node if there no outgoing edges node safe node if every possible path starting from that node leads terminal node or another safe node return array containing all safe nodes graph answer should be sorted ascending order example input graph output explanation given graph shown above nodes and terminal nodes as there no outgoing edges from either them every path starting nodes and all lead either node or example input graph output explanation only node terminal node and every path starting node leads node constraints graphlength graphilength graphij graphi sorted strictly increasing order graph may contain selfloops number edges graph will be range
palindrome number given integer return true if palindrome and false otherwise example input output true explanation reads as from left right and from right left example input output false explanation from left right reads from right left becomes therefore not palindrome example input output false explanation reads from right left therefore not palindrome constraints follow up could solve without converting integer string
maximum path quality graph there undirected graph nodes numbered from inclusive given indexed integer array values where valuesi value ith node also given indexed integer array edges where each edgesj uj vj timej indicates that there undirected edge between nodes uj and vj and takes timej seconds travel between two nodes finally given integer maxtime valid path graph any path that starts node ends node and takes most maxtime seconds complete may visit same node multiple times quality valid path sum values unique nodes visited path each nodes value added most once sum return maximum quality valid path note there most four edges connected each node example input values edges maxtime output explanation one possible path total time taken nodes visited and giving maximal path quality example input values edges maxtime output explanation one possible path total time taken nodes visited and giving maximal path quality example input values edges maxtime output explanation one possible path total time taken nodes visited and giving maximal path quality constraints valueslength valuesi edgeslength edgesjlength uj vj timej maxtime all pairs uj vj unique there most four edges connected each node graph may not be connected
maximum average subarray given integer array nums consisting elements and integer find contiguous subarray whose length equal that has maximum average value and return this value any answer calculation error less than will be accepted example input nums output explanation maximum average example input nums output constraints numslength numsi
array elements not equal average neighbors given indexed array nums distinct integers want rearrange elements array such that every element rearranged array not equal average its neighbors more formally rearranged array should have property such that every range numslength numsi numsi not equal numsi return any rearrangement nums that meets requirements example input nums output explanation when numsi and average its neighbors when numsi and average its neighbors when numsi and average its neighbors example input nums output explanation when numsi and average its neighbors when numsi and average its neighbors when numsi and average its neighbors constraints numslength numsi
find xorbeauty array given indexed integer array nums effective value three indices and defined as numsi numsj numsk xorbeauty array xoring effective values all possible triplets indices where return xorbeauty nums note that val val bitwise or val and val val val bitwise and val and val example input nums output explanation triplets and their corresponding effective values listed below effective value effective value effective value effective value effective value effective value effective value effective value xorbeauty array will be bitwise xor all beauties example input nums output explanation xorbeauty given array constraints numslength numsi
keys keyboard there only one character screen notepad can perform one two operations this notepad each step copy all can copy all characters present screen partial copy not allowed paste can paste characters which copied last time given integer return minimum number operations get character exactly times screen example input output explanation initially have one character step use copy all operation step use paste operation get aa step use paste operation get aaa example input output constraints
minimum operations halve array sum given array nums positive integers one operation can choose any number from nums and reduce exactly half number note that may choose this reduced number future operations return minimum number operations reduce sum nums least half example input nums output explanation initial sum nums equal following one ways reduce sum least half pick number and reduce pick number and reduce pick number and reduce final array total sum sum nums has been reduced which least half initial sum overall operations used so return can be shown that cannot reduce sum least half less than operations example input nums output explanation initial sum nums equal following one ways reduce sum least half pick number and reduce pick number and reduce pick number and reduce final array total sum sum nums has been reduced which least half initial sum overall operations used so return can be shown that cannot reduce sum least half less than operations constraints numslength numsi
find minimum and maximum number nodes between critical points critical point linked list defined as either local maxima or local minima node local maxima if current node has value strictly greater than previous node and next node node local minima if current node has value strictly smaller than previous node and next node note that node can only be local maximaminima if there exists both previous node and next node given linked list head return array length containing mindistance maxdistance where mindistance minimum distance between any two distinct critical points and maxdistance maximum distance between any two distinct critical points if there fewer than two critical points return example input head output explanation there no critical points example input head output explanation there three critical points third node local minima because less than and fifth node local maxima because greater than and sixth node local minima because less than and minimum distance between fifth and sixth node mindistance maximum distance between third and sixth node maxdistance example input head output explanation there two critical points second node local maxima because greater than and fifth node local maxima because greater than and both minimum and maximum distances between second and fifth node thus mindistance and maxdistance note that last node not considered local maxima because does not have next node constraints number nodes list range nodeval
push dominoes there dominoes line and place each domino vertically upright beginning simultaneously push some dominoes either left or right after each second each domino that falling left pushes adjacent domino left similarly dominoes falling right push their adjacent dominoes standing right when vertical domino has dominoes falling from both sides stays still due balance forces purposes this question will consider that falling domino expends no additional force falling or already fallen domino given string dominoes representing initial state where dominoesi if ith domino has been pushed left dominoesi if ith domino has been pushed right and dominoesi if ith domino has not been pushed return string representing final state example input dominoes rrl output rrl explanation first domino expends no additional force second domino example input dominoes lrlrl output llrrllrrll constraints dominoeslength dominoesi either or
number substrings containing all three characters given string consisting only characters and return number substrings containing least one occurrence all these characters and example input abcabc output explanation substrings containing least one occurrence characters and abc abca abcab abcabc bca bcab bcabc cab cabc and abc again example input aaacb output explanation substrings containing least one occurrence characters and aaacb aacb and acb example input abc output constraints slength only consists or characters
zigzag conversion string paypalishiring written zigzag pattern given number rows like this may want display this pattern fixed font better legibility and then read line line pahnaplsiigyir write code that will take string and make this conversion given number rows string convertstring int numrows example input paypalishiring numrows output pahnaplsiigyir example input paypalishiring numrows output pinalsigyahrpi explanation example input numrows output constraints slength consists english letters lowercase and uppercase and numrows
largest values from labels there set items given two integer arrays values and labels where value and label ith element valuesi and labelsi respectively also given two integers numwanted and uselimit choose subset elements such that size subset less than or equal numwanted there most uselimit items same label score subset sum values subset return maximum score subset example input values labels numwanted uselimit output explanation subset chosen first third and fifth items example input values labels numwanted uselimit output explanation subset chosen first second and third items example input values labels numwanted uselimit output explanation subset chosen first and fourth items constraints valueslength labelslength valuesi labelsi numwanted uselimit
number common factors given two positive integers and return number common factors and integer common factor and if divides both and example input output explanation common factors and example input output explanation common factors and constraints
find prefix common array two arrays given two indexed integer permutations and length prefix common array and array such that ci equal count numbers that present or before index both and return prefix common array and sequence integers called permutation if contains all integers from exactly once example input output explanation no number common so and common and so and common and so and common and so example input output explanation no number common so only common and so and common and so constraints alength blength ai bi guaranteed that and both permutation integers
maximum performance team given two integers and and two integer arrays speed and efficiency both length there engineers numbered from speedi and efficiencyi represent speed and efficiency ith engineer respectively choose most different engineers out engineers form team maximum performance performance team sum their engineers speeds multiplied minimum efficiency among their engineers return maximum performance this team since answer can be huge number return modulo example input speed efficiency output explanation have maximum performance team selecting engineer speed and efficiency and engineer speed and efficiency that performance min example input speed efficiency output explanation this same example as first but can select engineer engineer and engineer get maximum performance team that performance min example input speed efficiency output constraints speedlength efficiencylength speedi efficiencyi
restaurant growth sql schema table customer column name type customerid int name varchar visitedon date amount int customerid visitedon primary key this table this table contains data about customer transactions restaurant visitedon date which customer id customerid has visited restaurant amount total paid customer restaurant owner and want analyze possible expansion there will be least one customer every day write sql query compute moving average how much customer paid seven days window ie current day days before averageamount should be rounded two decimal places return result table ordered visitedon ascending order query result format following example example input customer table customerid name visitedon amount jhon daniel jade khaled winston elvis anna maria jaze jhon jade output visitedon amount averageamount explanation st moving average from has averageamount nd moving average from has averageamount rd moving average from has averageamount th moving average from has averageamount
serialize and deserialize binary tree serialization process converting data structure or object into sequence bits so that can be stored file or memory buffer or transmitted across network connection link be reconstructed later same or another computer environment design algorithm serialize and deserialize binary tree there no restriction how your serializationdeserialization algorithm should work just need ensure that binary tree can be serialized string and this string can be deserialized original tree structure clarification inputoutput format same as how leetcode serializes binary tree do not necessarily need follow this format so please be creative and come up different approaches yourself example input root nullnull output nullnull example input root output constraints number nodes tree range nodeval
smallest subarrays maximum bitwise or given indexed array nums length consisting nonnegative integers each index from must determine size minimum sized nonempty subarray nums starting inclusive that has maximum possible bitwise or other words let bij be bitwise or subarray numsij need find smallest subarray starting such that bitwise or this subarray equal maxbik where bitwise or array bitwise or all numbers return integer array answer size where answeri length minimum sized subarray starting maximum bitwise or subarray contiguous nonempty sequence elements within array example input nums output explanation maximum possible bitwise or starting any index starting index shortest subarray that yields starting index shortest subarray that yields maximum bitwise or starting index shortest subarray that yields maximum bitwise or starting index shortest subarray that yields maximum bitwise or starting index shortest subarray that yields maximum bitwise or therefore return example input nums output explanation starting index shortest subarray that yields maximum bitwise or length starting index shortest subarray that yields maximum bitwise or length therefore return constraints numslength numsi
determine winner bowling game given two indexed integer arrays player and player that represent number pins that player and player hit bowling game respectively bowling game consists turns and number pins each turn exactly assume player hit xi pins ith turn value ith turn player xi if player hit pins any previous two turns otherwise xi score player sum values their turns return if score player more than score player if score player more than score player and case draw example input player player output explanation score player score player score player more than score player so player winner and answer example input player player output explanation score player score player score player more than score player so player winner and answer example input player player output explanation score player score player score player equals score player so there draw and answer constraints playerlength playerlength playeri playeri
minimum deletions make character frequencies unique string called good if there no two different characters that have same frequency given string return minimum number characters need delete make good frequency character string number times appears string example string aab frequency while frequency example input aab output explanation already good example input aaabbbcc output explanation can delete two bs resulting good string aaabcc another way delete one and one resulting good string aaabbc example input ceabaacb output explanation can delete both cs resulting good string eabaab note that only care about characters that still string end ie frequency ignored constraints slength contains only lowercase english letters
coin change given integer array coins representing coins different denominations and integer amount representing total amount money return fewest number coins that need make up that amount if that amount money cannot be made up any combination coins return may assume that have infinite number each kind coin example input coins amount output explanation example input coins amount output example input coins amount output constraints coinslength coinsi amount
minimum time visit cell grid given matrix grid consisting nonnegative integers where gridrowcol represents minimum time required be able visit cell row col which means can visit cell row col only when time visit greater than or equal gridrowcol standing topleft cell matrix th second and must move any adjacent cell four directions up down left and right each move make takes second return minimum time required which can visit bottomright cell matrix if cannot visit bottomright cell then return example input grid output explanation one paths that can take following cell move cell possible because grid move cell possible because grid move cell possible because grid move cell possible because grid move cell possible because grid move cell possible because grid move cell possible because grid final time can be shown that minimum time possible example input grid output explanation there no path from top left bottomright cell constraints gridlength gridilength gridij grid
check if move legal given indexed grid board where boardrc represents cell game board board free cells represented white cells represented and black cells represented each move this game consists choosing free cell and changing color playing as either white or black however move only legal if after changing cell becomes endpoint good line horizontal vertical or diagonal good line line three or more cells including endpoints where endpoints line one color and remaining cells middle opposite color no cells line free can find examples good lines figure below given two integers rmove and cmove and character color representing color playing as white or black return true if changing cell rmove cmove color color legal move or false if not legal example input board bwwwwbbwwwbbbw rmove cmove color output true explanation and represented colors blue white and black respectively and cell rmove cmove marked two good lines chosen cell as endpoint annotated above red rectangles example input board bwwwbbwwb rmove cmove color output false explanation while there good lines chosen cell as middle cell there no good lines chosen cell as endpoint constraints boardlength boardrlength rmove cmove boardrmovecmove color either or
swap adjacent lr string string composed and characters like rxxlrxrxl move consists either replacing one occurrence xl lx or replacing one occurrence rx xr given starting string start and ending string end return true if and only if there exists sequence moves transform one string other example input start rxxlrxrxl end xrlxxrrlx output true explanation can transform start end following these steps rxxlrxrxl xrxlrxrxl xrlxrxrxl xrlxxrrxl xrlxxrrlx example input start end output false constraints startlength startlength endlength both start and end will only consist characters and
count matches tournament given integer number teams tournament that has strange rules if current number teams even each team gets paired another team total matches played and teams advance next round if current number teams odd one team randomly advances tournament and rest gets paired total matches played and teams advance next round return number matches played tournament until winner decided example input output explanation details tournament st round teams matches and teams advance nd round teams matches and teams advance rd round teams matches and team declared winner total number matches example input output explanation details tournament st round teams matches and teams advance nd round teams matches and teams advance rd round teams matches and teams advance th round teams matches and team declared winner total number matches constraints
determine if two strings close two strings considered close if can attain one from other using following operations operation swap any two existing characters example abcde aecdb operation transform every occurrence one existing character into another existing character and do same other character example aacabb bbcbaa all as turn into bs and all bs turn into as can use operations either string as many times as necessary given two strings word and word return true if word and word close and false otherwise example input word abc word bca output true explanation can attain word from word operations apply operation abc acb apply operation acb bca example input word word aa output false explanation impossible attain word from word or vice versa any number operations example input word cabbba word abbccc output true explanation can attain word from word operations apply operation cabbba caabbb apply operation caabbb baaccc apply operation baaccc abbccc constraints wordlength wordlength word and word contain only lowercase english letters
single number iii given integer array nums which exactly two elements appear only once and all other elements appear exactly twice find two elements that appear only once can return answer any order must write algorithm that runs linear runtime complexity and uses only constant extra space example input nums output explanation also valid answer example input nums output example input nums output constraints numslength numsi each integer nums will appear twice only two integers will appear once
sum given integer array nums return all triplets numsi numsj numsk such that and and numsi numsj numsk notice that solution set must not contain duplicate triplets example input nums output explanation nums nums nums nums nums nums nums nums nums distinct triplets and notice that order output and order triplets does not matter example input nums output explanation only possible triplet does not sum up example input nums output explanation only possible triplet sums up constraints numslength numsi
linked list cycle ii given head linked list return node where cycle begins if there no cycle return null there cycle linked list if there some node list that can be reached again continuously following next pointer internally pos used denote index node that tails next pointer connected indexed if there no cycle note that pos not passed as parameter do not modify linked list example input head pos output tail connects node index explanation there cycle linked list where tail connects second node example input head pos output tail connects node index explanation there cycle linked list where tail connects first node example input head pos output no cycle explanation there no cycle linked list constraints number nodes list range nodeval pos or valid index linkedlist follow up can solve using ie constant memory
sort array given array integers nums sort array ascending order and return must solve problem without using any builtin functions onlogn time complexity and smallest space complexity possible example input nums output explanation after sorting array positions some numbers not changed example and while positions other numbers changed example and example input nums output explanation note that values nums not necessairly unique constraints numslength numsi
minimum limit balls bag given integer array nums where ith bag contains numsi balls also given integer maxoperations can perform following operation most maxoperations times take any bag balls and divide into two new bags positive number balls example bag balls can become two new bags and balls or two new bags and balls your penalty maximum number balls bag want minimize your penalty after operations return minimum possible penalty after performing operations example input nums maxoperations output explanation divide bag balls into two bags sizes and divide bag balls into two bags sizes and bag most number balls has balls so your penalty and should return example input nums maxoperations output explanation divide bag balls into two bags sizes and divide bag balls into two bags sizes and divide bag balls into two bags sizes and divide bag balls into two bags sizes and bag most number balls has balls so your penalty and should return constraints numslength maxoperations numsi
minimize maximum difference pairs given indexed integer array nums and integer find pairs indices nums such that maximum difference amongst all pairs minimized also ensure no index appears more than once amongst pairs note that pair elements index and difference this pair numsi numsj where represents absolute value return minimum maximum difference among all pairs define maximum empty set be zero example input nums output explanation first pair formed from indices and and second pair formed from indices and maximum difference maxnums nums nums nums max therefore return example input nums output explanation let indices and form pair difference that pair which minimum can attain constraints numslength numsi numslength
count unhappy friends given list preferences friends where always even each person preferencesi contains list friends sorted order preference other words friend earlier list more preferred than friend later list friends each list denoted integers from all friends divided into pairs pairings given list pairs where pairsi xi yi denotes xi paired yi and yi paired xi however this pairing may cause some friends be unhappy friend unhappy if paired and there exists friend who paired but prefers over and prefers over return number unhappy friends example input preferences pairs output explanation friend unhappy because paired but prefers over and prefers over friend unhappy because paired but prefers over and prefers over friends and happy example input preferences pairs output explanation both friends and happy example input preferences pairs output constraints even preferenceslength preferencesilength preferencesij preferencesi does not contain all values preferencesi unique pairslength pairsilength xi yi xi yi each person contained exactly one pair
count hills and valleys array given indexed integer array nums index part hill nums if closest nonequal neighbors smaller than numsi similarly index part valley nums if closest nonequal neighbors larger than numsi adjacent indices and part same hill or valley if numsi numsj note that index be part hill or valley must have nonequal neighbor both left and right index return number hills and valleys nums example input nums output explanation index there no nonequal neighbor left so index neither hill nor valley index closest nonequal neighbors and since and index hill index closest nonequal neighbors and since and index valley index closest nonequal neighbors and since and index valley but note that part same valley as index index closest nonequal neighbors and since and index hill index there no nonequal neighbor right so index neither hill nor valley there hills and valleys so return example input nums output explanation index there no nonequal neighbor left so index neither hill nor valley index there no nonequal neighbor left so index neither hill nor valley index closest nonequal neighbors and since and index neither hill nor valley index closest nonequal neighbors and since and index neither hill nor valley index closest nonequal neighbors and since and index neither hill nor valley index there no nonequal neighbor right so index neither hill nor valley there hills and valleys so return constraints numslength numsi
count distinct numbers board given positive integer that initially placed board every day days perform following procedure each number present board find all numbers such that then place those numbers board return number distinct integers present board after days have elapsed note once number placed board will remain until end stands modulo operation example example input output explanation initially present board next day and will be added since and after that day will be added board because end billion days distinct numbers board will be and example input output explanation since will be added board after billion days only two distinct numbers board and constraints
count number texts alice texting bob using her phone mapping digits letters shown figure below order add letter alice has press key corresponding digit times where position letter key example add letter alice has press four times similarly add letter alice has press twice note that digits and do not map any letters so alice does not use them however due error transmission bob did not receive alices text message but received string pressed keys instead example when alice sent message bob bob received string given string pressedkeys representing string received bob return total number possible text messages alice could have sent since answer may be very large return modulo example input pressedkeys output explanation possible text messages alice could have sent aaadd abdd badd cdd aaae abe bae and ce since there possible messages return example input pressedkeys output explanation there possible text messages alice could have sent since need return answer modulo return constraints pressedkeyslength pressedkeys only consists digits from
abbreviating product range given two positive integers left and right left right calculate product all integers inclusive range left right since product may be very large will abbreviate following these steps count all trailing zeros product and remove them let us denote this count as example there trailing zeros and there trailing zeros denote remaining number digits product as if then express product as presuf where pre denotes first digits product and suf denotes last digits product after removing all trailing zeros if keep unchanged example express as but represented as finally represent product as string presufec example will be represented as return string denoting abbreviated product all integers inclusive range left right example input left right output explanation product there no trailing zeros so remains same abbreviation will end since number digits which less than do not have abbreviate further thus final representation example input left right output explanation product there trailing zeros which remove get abbreviation will end number digits after removing trailing zeros so do not abbreviate further hence abbreviated product example input left right output explanation product constraints left right
minimum incompatibility given integer array nums and integer asked distribute this array into subsets equal size such that there no two equal elements same subset subsets incompatibility difference between maximum and minimum elements that array return minimum possible sum incompatibilities subsets after distributing array optimally or return if not possible subset group integers that appear array no particular order example input nums output explanation optimal distribution subsets and incompatibility note that and would result smaller sum but first subset contains equal elements example input nums output explanation optimal distribution subsets and incompatibility example input nums output explanation impossible distribute nums into subsets where no two elements equal same subset constraints numslength numslength divisible numsi numslength
remove outermost parentheses valid parentheses string either empty or where and valid parentheses strings and represents string concatenation example and all valid parentheses strings valid parentheses string primitive if nonempty and there does not exist way split into and nonempty valid parentheses strings given valid parentheses string consider its primitive decomposition pk where pi primitive valid parentheses strings return after removing outermost parentheses every primitive string primitive decomposition example input output explanation input string primitive decomposition after removing outer parentheses each part this example input output explanation input string primitive decomposition after removing outer parentheses each part this example input output explanation input string primitive decomposition after removing outer parentheses each part this constraints slength si either or valid parentheses string
zuma game playing variation game zuma this variation zuma there single row colored balls board where each ball can be colored red yellow blue green or white also have several colored balls your hand your goal clear all balls from board each turn pick any ball from your hand and insert between two balls row or either end row if there group three or more consecutive balls same color remove group balls from board if this removal causes more groups three or more same color form then continue removing each group until there none left if there no more balls board then win game repeat this process until either win or do not have any more balls your hand given string board representing row balls board and string hand representing balls your hand return minimum number balls have insert clear all balls from board if cannot clear all balls from board using balls your hand return example input board wrrbbw hand rb output explanation impossible clear all balls best can do insert so board becomes wrrrbbw wrrrbbw wbbw insert so board becomes wbbbw wbbbw ww there still balls remaining board and out balls insert example input board wwrrbbww hand wrbrw output explanation make board empty insert so board becomes wwrrrbbww wwrrrbbww wwbbww insert so board becomes wwbbbww wwbbbww wwww empty balls from your hand needed clear board example input board hand ggggg output explanation make board empty insert so board becomes gg insert so board becomes ggg ggg empty balls from your hand needed clear board constraints boardlength handlength board and hand consist characters and initial row balls board will not have any groups three or more consecutive balls same color
maximum side length square sum less than or equal threshold given matrix mat and integer threshold return maximum sidelength square sum less than or equal threshold or return if there no such square example input mat threshold output explanation maximum side length square sum less than as shown example input mat threshold output constraints matlength matilength matij threshold
populating next right pointers each node given perfect binary tree where all leaves same level and every parent has two children binary tree has following definition struct node int val node left node right node next populate each next pointer point its next right node if there no next right node next pointer should be set null initially all next pointers set null example input root output explanation given above perfect binary tree figure your function should populate each next pointer point its next right node just like figure serialized output level order as connected next pointers signifying end each level example input root output constraints number nodes tree range nodeval followup may only use constant extra space recursive approach fine may assume implicit stack space does not count as extra space this problem
insert delete getrandom duplicates allowed randomizedcollection data structure that contains collection numbers possibly duplicates ie multiset should support inserting and removing specific elements and also reporting random element implement randomizedcollection class randomizedcollection initializes empty randomizedcollection object bool insertint val inserts item val into multiset even if item already present returns true if item not present false otherwise bool removeint val removes item val from multiset if present returns true if item present false otherwise note that if val has multiple occurrences multiset only remove one them int getrandom returns random element from current multiset elements probability each element being returned linearly related number same values multiset contains must implement functions class such that each function works average time complexity note test cases generated such that getrandom will only be called if there least one item randomizedcollection example input randomizedcollection insert insert insert getrandom remove getrandom output null true false true true explanation randomizedcollection randomizedcollection new randomizedcollection randomizedcollectioninsert return true since collection does not contain inserts into collection randomizedcollectioninsert return false since collection contains inserts another into collection collection now contains randomizedcollectioninsert return true since collection does not contain inserts into collection collection now contains randomizedcollectiongetrandom getrandom should return probability or return probability randomizedcollectionremove return true since collection contains removes from collection collection now contains randomizedcollectiongetrandom getrandom should return or both equally likely constraints val most calls total will be made insert remove and getrandom there will be least one element data structure when getrandom called
partition array according given pivot given indexed integer array nums and integer pivot rearrange nums such that following conditions satisfied every element less than pivot appears before every element greater than pivot every element equal pivot appears between elements less than and greater than pivot relative order elements less than pivot and elements greater than pivot maintained more formally consider every pi pj where pi new position ith element and pj new position jth element elements less than pivot if and numsi pivot and numsj pivot then pi pj similarly elements greater than pivot if and numsi pivot and numsj pivot then pi pj return nums after rearrangement example input nums pivot output explanation elements and less than pivot so left side array elements and greater than pivot so right side array relative ordering elements less than and greater than pivot also maintained and respective orderings example input nums pivot output explanation element less than pivot so left side array elements and greater than pivot so right side array relative ordering elements less than and greater than pivot also maintained and respective orderings constraints numslength numsi pivot equals element nums
maximum running time computers have computers given integer and indexed integer array batteries where ith battery can run computer batteriesi minutes interested running all computers simultaneously using given batteries initially can insert most one battery into each computer after that and any integer time moment can remove battery from computer and insert another battery any number times inserted battery can be totally new battery or battery from another computer may assume that removing and inserting processes take no time note that batteries cannot be recharged return maximum number minutes can run all computers simultaneously example input batteries output explanation initially insert battery into first computer and battery into second computer after two minutes remove battery from second computer and insert battery instead note that battery can still run one minute end third minute battery drained and need remove from first computer and insert battery instead end fourth minute battery also drained and first computer no longer running can run two computers simultaneously most minutes so return example input batteries output explanation initially insert battery into first computer and battery into second computer after one minute battery and battery drained so need remove them and insert battery into first computer and battery into second computer after another minute battery and battery also drained so first and second computers no longer running can run two computers simultaneously most minutes so return constraints batterieslength batteriesi
find positive integer solution given equation given callable function fx hidden formula and value reverse engineer formula and return all positive integer pairs and where fxy may return pairs any order while exact formula hidden function monotonically increasing ie fx fx fx fx function interface defined like this interface customfunction public returns some positive integer fx two positive integers and based formula int fint int will judge your solution as follows judge has list hidden implementations customfunction along way generate answer key all valid pairs specific judge will receive two inputs functionid determine which implementation test your code and target judge will call your findsolution and compare your results answer key if your results match answer key your solution will be accepted example input functionid output explanation hidden formula functionid fx following positive integer values and make fx equal example input functionid output explanation hidden formula functionid fx following positive integer values and make fx equal constraints functionid guaranteed that solutions fx will be range also guaranteed that fx will fit bit signed integer if
convert integer sum two nozero integers nozero integer positive integer that does not contain any its decimal representation given integer return list two integers where and nozero integers test cases generated so that there least one valid solution if there many valid solutions can return any them example input output explanation let and both and nozero integers and example input output explanation let and both and nozero integers and note that there other valid answers as that can be accepted constraints
max points line given array points where pointsi xi yi represents point xy plane return maximum number points that lie same straight line example input points output example input points output constraints pointslength pointsilength xi yi all points unique
generate parentheses given pairs parentheses write function generate all combinations wellformed parentheses example input output example input output constraints
average value even numbers that divisible three given integer array nums positive integers return average value all even integers that divisible note that average elements sum elements divided and rounded down nearest integer example input nums output explanation and even numbers that divisible example input nums output explanation there no single number that satisfies requirement so return constraints numslength numsi
sum unique elements given integer array nums unique elements array elements that appear exactly once array return sum all unique elements nums example input nums output explanation unique elements and sum example input nums output explanation there no unique elements and sum example input nums output explanation unique elements and sum constraints numslength numsi
distribute coins binary tree given root binary tree nodes where each node tree has nodeval coins there coins total throughout whole tree one move may choose two adjacent nodes and move one coin from one node another move may be from parent child or from child parent return minimum number moves required make every node have exactly one coin example input root output explanation from root tree move one coin its left child and one coin its right child example input root output explanation from left child root move two coins root taking two moves then move one coin from root tree right child constraints number nodes tree nodeval sum all nodeval
number arithmetic triplets given indexed strictly increasing integer array nums and positive integer diff triplet arithmetic triplet if following conditions met numsj numsi diff and numsk numsj diff return number unique arithmetic triplets example input nums diff output explanation arithmetic triplet because both and arithmetic triplet because both and example input nums diff output explanation arithmetic triplet because both and arithmetic triplet because both and constraints numslength numsi diff nums strictly increasing
greatest common divisor strings two strings and say divides if and only if ie concatenated itself one or more times given two strings str and str return largest string such that divides both str and str example input str abcabc str abc output abc example input str ababab str abab output ab example input str leet str code output constraints strlength strlength str and str consist english uppercase letters
number enclaves given binary matrix grid where represents sea cell and represents land cell move consists walking from one land cell another adjacent directionally land cell or walking off boundary grid return number land cells grid which cannot walk off boundary grid any number moves example input grid output explanation there three that enclosed and one that not enclosed because its boundary example input grid output explanation all either boundary or can reach boundary constraints gridlength gridilength gridij either or
string compression ii runlength encoding string compression method that works replacing consecutive identical characters repeated or more times concatenation character and number marking count characters length run example compress string aabccc replace aa and replace ccc thus compressed string becomes abc notice that this problem not adding after single characters given string and integer need delete most characters from such that runlength encoded version has minimum length find minimum length runlength encoded version after deleting most characters example input aaabcccd output explanation compressing without deleting anything will give us abcd length deleting any characters or would most decrease length compressed string instance delete then will have abcccd which compressed abcd therefore optimal way delete and then compressed version will be ac length example input aabbaa output explanation if delete both characters resulting compressed string would be length example input aaaaaaaaaaa output explanation since zero cannot delete anything compressed string length constraints slength slength contains only lowercase english letters
max area island given binary matrix grid island group representing land connected directionally horizontal or vertical may assume all four edges grid surrounded water area island number cells value island return maximum area island grid if there no island return example input grid output explanation answer not because island must be connected directionally example input grid output constraints gridlength gridilength gridij either or
valid sudoku determine if sudoku board valid only filled cells need be validated according following rules each row must contain digits without repetition each column must contain digits without repetition each nine subboxes grid must contain digits without repetition note sudoku board partially filled could be valid but not necessarily solvable only filled cells need be validated according mentioned rules example input board output true example input board output false explanation same as example except top left corner being modified since there two top left subbox invalid constraints boardlength boardilength boardij digit or
balanced binary tree given binary tree determine if heightbalanced example input root nullnull output true example input root nullnull output false example input root output true constraints number nodes tree range nodeval
count collisions road there cars infinitely long road cars numbered from from left right and each car present unique point given indexed string directions length directionsi can be either or denoting whether ith car moving towards left towards right or staying its current point respectively each moving car has same speed number collisions can be calculated as follows when two cars moving opposite directions collide each other number collisions increases when moving car collides stationary car number collisions increases after collision cars involved can no longer move and will stay point where collided other than that cars cannot change their state or direction motion return total number collisions that will happen road example input directions rlrsll output explanation collisions that will happen road cars and will collide each other since moving opposite directions number collisions becomes cars and will collide each other since car stationary number collisions becomes cars and will collide each other since car stationary number collisions becomes cars and will collide each other after car collides car will stay point collision and get hit car number collisions becomes thus total number collisions that will happen road example input directions llrr output explanation no cars will collide each other thus total number collisions that will happen road constraints directionslength directionsi either or
course schedule there total numcourses courses have take labeled from numcourses given array prerequisites where prerequisitesi ai bi indicates that must take course bi first if want take course ai example pair indicates that take course have first take course return true if can finish all courses otherwise return false example input numcourses prerequisites output true explanation there total courses take take course should have finished course so possible example input numcourses prerequisites output false explanation there total courses take take course should have finished course and take course should also have finished course so impossible constraints numcourses prerequisiteslength prerequisitesilength ai bi numcourses all pairs prerequisitesi unique
game given integer array cards length have four cards each containing number range should arrange numbers these cards mathematical expression using operators and parentheses and get value restricted following rules division operator represents real division not integer division example every operation done between two numbers particular cannot use as unary operator example if cards expression not allowed cannot concatenate numbers together example if cards expression not valid return true if can get such expression that evaluates and false otherwise example input cards output true explanation example input cards output false constraints cardslength cardsi
find shortest superstring given array strings words return smallest string that contains each string words as substring if there multiple valid strings smallest length return any them may assume that no string words substring another string words example input words alexlovesleetcode output alexlovesleetcode explanation all permutations alexlovesleetcode would also be accepted example input words catgctaagtgctattcaatgcatc output gctaagttcatgcatc constraints wordslength wordsilength wordsi consists lowercase english letters all strings words unique
add one row tree given root binary tree and two integers val and depth add row nodes value val given depth depth note that root node depth adding rule given integer depth each not null tree node cur depth depth create two tree nodes value val as curs left subtree root and right subtree root curs original left subtree should be left subtree new left subtree root curs original right subtree should be right subtree new right subtree root if depth that means there no depth depth all then create tree node value val as new root whole original tree and original tree new roots left subtree example input root val depth output nullnull example input root null val depth output nullnullnull constraints number nodes tree range depth tree range nodeval val depth depth tree
delete nodes and return forest given root binary tree each node tree has distinct value after deleting all nodes value todelete left forest disjoint union trees return roots trees remaining forest may return result any order example input root todelete output null example input root null todelete output constraints number nodes given tree most each node has distinct value between and todeletelength todelete contains distinct values between and
smallest even multiple given positive integer return smallest positive integer that multiple both and example input output explanation smallest multiple both and example input output explanation smallest multiple both and note that number multiple itself constraints
substring concatenation all words given string and array strings words all strings words same length concatenated substring substring that contains all strings any permutation words concatenated example if words abcdef then abcdef abefcd cdabef cdefab efabcd and efcdab all concatenated strings acdbef not concatenated substring because not concatenation any permutation words return starting indices all concatenated substrings can return answer any order example input barfoothefoobarman words foobar output explanation since wordslength and wordsilength concatenated substring has be length substring starting barfoo concatenation barfoo which permutation words substring starting foobar concatenation foobar which permutation words output order does not matter returning fine too example input wordgoodgoodgoodbestword words wordgoodbestword output explanation since wordslength and wordsilength concatenated substring has be length there no substring length that equal concatenation any permutation words return empty array example input barfoofoobarthefoobarman words barfoothe output explanation since wordslength and wordsilength concatenated substring has be length substring starting foobarthe concatenation foobarthe which permutation words substring starting barthefoo concatenation barthefoo which permutation words substring starting thefoobar concatenation thefoobar which permutation words constraints slength wordslength wordsilength and wordsi consist lowercase english letters
design movie rental system have movie renting company consisting shops want implement renting system that supports searching booking and returning movies system should also support generating report currently rented movies each movie given as integer array entries where entriesi shopi moviei pricei indicates that there copy movie moviei shop shopi rental price pricei each shop carries most one copy movie moviei system should support following functions search finds cheapest shops that have unrented copy given movie shops should be sorted price ascending order and case tie one smaller shopi should appear first if there less than matching shops then all them should be returned if no shop has unrented copy then empty list should be returned rent rents unrented copy given movie from given shop drop drops off previously rented copy given movie given shop report returns cheapest rented movies possibly same movie id as list res where resj shopj moviej describes that jth cheapest rented movie moviej rented from shop shopj movies res should be sorted price ascending order and case tie one smaller shopj should appear first and if there still tie one smaller moviej should appear first if there fewer than rented movies then all them should be returned if no movies currently being rented then empty list should be returned implement movierentingsystem class movierentingsystemint int entries initializes movierentingsystem object shops and movies entries listinteger searchint movie returns list shops that have unrented copy given movie as described above void rentint shop int movie rents given movie from given shop void dropint shop int movie drops off previously rented movie given shop listlistinteger report returns list cheapest rented movies as described above note test cases will be generated such that rent will only be called if shop has unrented copy movie and drop will only be called if shop had previously rented out movie example input movierentingsystem search rent rent report drop search output null null null null explanation movierentingsystem movierentingsystem new movierentingsystem movierentingsystemsearch return movies id unrented shops and shop cheapest shop and same price so order shop number movierentingsystemrent rent movie from shop unrented movies shop now movierentingsystemrent rent movie from shop unrented movies shop now movierentingsystemreport return movie from shop cheapest followed movie from shop movierentingsystemdrop drop off movie shop unrented movies shop now movierentingsystemsearch return movies id unrented shops and shop cheapest followed shop constraints entrieslength shopi moviei pricei each shop carries most one copy movie moviei most calls total will be made search rent drop and report
rank transform array given array integers arr replace each element its rank rank represents how large element rank has following rules rank integer starting from larger element larger rank if two elements equal their rank must be same rank should be as small as possible example input arr output explanation largest element smallest second smallest third smallest example input arr output explanation same elements share same rank example input arr output constraints arrlength arri
search matrix ii write efficient algorithm that searches value target integer matrix matrix this matrix has following properties integers each row sorted ascending from left right integers each column sorted ascending from top bottom example input matrix target output true example input matrix target output false constraints matrixlength matrixilength matrixij all integers each row sorted ascending order all integers each column sorted ascending order target
number increasing paths grid given integer matrix grid where can move from cell any adjacent cell all directions return number strictly increasing paths grid such that can start from any cell and end any cell since answer may be very large return modulo two paths considered different if do not have exactly same sequence visited cells example input grid output explanation strictly increasing paths paths length paths length paths length total number paths example input grid output explanation strictly increasing paths paths length paths length total number paths constraints gridlength gridilength gridij
nested array generator given multidimensional array integers return generator object which yields integers same order as inorder traversal multidimensional array recursive data structure that contains both integers and other multidimensional arrays inorder traversal iterates over each array from left right yielding any integers encounters or applying inorder traversal any arrays encounters example input arr output explanation const generator inordertraversalarr generatornextvalue generatornextvalue generatornextvalue generatornextdone true example input arr output explanation there no integers so generator doesnt yield anything constraints arrflatlength arrflati maxnestingdepth can solve this without creating new flattened version array
percentage users attended contest sql schema table users column name type userid int username varchar userid primary key this table each row this table contains name and id user table register column name type contestid int userid int contestid userid primary key this table each row this table contains id user and contest registered into write sql query find percentage users registered each contest rounded two decimals return result table ordered percentage descending order case tie order contestid ascending order query result format following example example input users table userid username alice bob alex register table contestid userid output contestid percentage explanation all users registered contests and percentage and sort them answer table contestid ascending order alice and alex registered contest and percentage bob registered contest and percentage
customer placing largest number orders sql schema table orders column name type ordernumber int customernumber int ordernumber primary key this table this table contains information about order id and customer id write sql query find customernumber customer who has placed largest number orders test cases generated so that exactly one customer will have placed more orders than any other customer query result format following example example input orders table ordernumber customernumber output customernumber explanation customer number has two orders which greater than either customer or because each them only has one order so result customernumber follow up what if more than one customer has largest number orders can find all customernumber this case
alternating digit sum given positive integer each digit has sign according following rules most significant digit assigned positive sign each other digit has opposite sign its adjacent digits return sum all digits their corresponding sign example input output explanation example input output explanation example input output explanation constraints
number provinces there cities some them connected while some not if city connected directly city and city connected directly city then city connected indirectly city province group directly or indirectly connected cities and no other cities outside group given matrix isconnected where isconnectedij if ith city and jth city directly connected and isconnectedij otherwise return total number provinces example input isconnected output example input isconnected output constraints isconnectedlength isconnectedilength isconnectedij or isconnectedii isconnectedij isconnectedji
max sum rectangle no larger than given matrix matrix and integer return max sum rectangle matrix such that its sum no larger than guaranteed that there will be rectangle sum no larger than example input matrix output explanation because sum blue rectangle and max number no larger than example input matrix output constraints matrixlength matrixilength matrixij follow up what if number rows much larger than number columns
license key formatting given license key represented as string that consists only alphanumeric characters and dashes string separated into groups dashes also given integer want reformat string such that each group contains exactly characters except first group which could be shorter than but still must contain least one character furthermore there must be dash inserted between two groups and should convert all lowercase letters uppercase return reformatted license key example input fzew output fzew explanation string has been split into two parts each part has characters note that two extra dashes not needed and can be removed example input gj output gj explanation string has been split into three parts each part has characters except first part as could be shorter as mentioned above constraints slength consists english letters digits and dashes
next greater numerically balanced number integer numerically balanced if every digit number there exactly occurrences that digit given integer return smallest numerically balanced number strictly greater than example input output explanation numerically balanced since digit occurs times also smallest numerically balanced number strictly greater than example input output explanation numerically balanced since digit occurs time digit occurs times also smallest numerically balanced number strictly greater than note that cannot be answer because appeared more than times example input output explanation numerically balanced since digit occurs time digit occurs times also smallest numerically balanced number strictly greater than constraints
implement magic dictionary design data structure that initialized list different words provided string should determine if can change exactly one character this string match any word data structure implement magicdictionary class magicdictionary initializes object void builddictstring dictionary sets data structure array distinct strings dictionary bool searchstring searchword returns true if can change exactly one character searchword match any string data structure otherwise returns false example input magicdictionary builddict search search search search hello leetcode hello hhllo hell leetcoded output null null false true false false explanation magicdictionary magicdictionary new magicdictionary magicdictionarybuilddicthello leetcode magicdictionarysearchhello return false magicdictionarysearchhhllo can change second match hello so return true magicdictionarysearchhell return false magicdictionarysearchleetcoded return false constraints dictionarylength dictionaryilength dictionaryi consists only lowercase english letters all strings dictionary distinct searchwordlength searchword consists only lowercase english letters builddict will be called only once before search most calls will be made search
number weak characters game playing game that contains multiple characters and each characters has two main properties attack and defense given integer array properties where propertiesi attacki defensei represents properties ith character game character said be weak if any other character has both attack and defense levels strictly greater than this characters attack and defense levels more formally character said be weak if there exists another character where attackj attacki and defensej defensei return number weak characters example input properties output explanation no character has strictly greater attack and defense than other example input properties output explanation first character weak because second character has strictly greater attack and defense example input properties output explanation third character weak because second character has strictly greater attack and defense constraints propertieslength propertiesilength attacki defensei
product last numbers design algorithm that accepts stream integers and retrieves product last integers stream implement productofnumbers class productofnumbers initializes object empty stream void addint num appends integer num stream int getproductint returns product last numbers current list can assume that always current list has least numbers test cases generated so that any time product any contiguous sequence numbers will fit into single bit integer without overflowing example input productofnumbersaddaddaddaddaddgetproductgetproductgetproductaddgetproduct output nullnullnullnullnullnullnull explanation productofnumbers productofnumbers new productofnumbers productofnumbersadd productofnumbersadd productofnumbersadd productofnumbersadd productofnumbersadd productofnumbersgetproduct return product last numbers productofnumbersgetproduct return product last numbers productofnumbersgetproduct return product last numbers productofnumbersadd productofnumbersgetproduct return product last numbers constraints num most calls will be made add and getproduct product stream any point time will fit bit integer
article views sql schema table views column name type articleid int authorid int viewerid int viewdate date there no primary key this table may have duplicate rows each row this table indicates that some viewer viewed article written some author some date note that equal authorid and viewerid indicate same person write sql query find all authors that viewed least one their own articles return result table sorted id ascending order query result format following example example input views table articleid authorid viewerid viewdate output id
dining philosophers five silent philosophers sit round table bowls spaghetti forks placed between each pair adjacent philosophers each philosopher must alternately think and eat however philosopher can only eat spaghetti when have both left and right forks each fork can be held only one philosopher and so philosopher can use fork only if not being used another philosopher after individual philosopher finishes eating need put down both forks so that forks become available others philosopher can take fork their right or one their left as become available but cannot start eating before getting both forks eating not limited remaining amounts spaghetti or stomach space infinite supply and infinite demand assumed design discipline behaviour concurrent algorithm such that no philosopher will starve ie each can forever continue alternate between eating and thinking assuming that no philosopher can know when others may want eat or think problem statement and image above taken from wikipediaorg philosophers ids numbered from clockwise order implement function void wantstoeatphilosopher pickleftfork pickrightfork eat putleftfork putrightfork where philosopher id philosopher who wants eat pickleftfork and pickrightfork functions can call pick corresponding forks that philosopher eat function can call let philosopher eat once has picked both forks putleftfork and putrightfork functions can call put down corresponding forks that philosopher philosophers assumed be thinking as long as not asking eat function not being called their number five threads each representing philosopher will simultaneously use one object your class simulate process function may be called same philosopher more than once even before last call ends example input output explanation number times each philosopher will call function output array describes calls made functions controlling forks and eat function its format outputi three integers id philosopher specifies fork left right specifies operation pick put eat constraints
distant barcodes warehouse there row barcodes where ith barcode barcodesi rearrange barcodes so that no two adjacent barcodes equal may return any answer and guaranteed answer exists example input barcodes output example input barcodes output constraints barcodeslength barcodesi
length longest alphabetical continuous substring alphabetical continuous string string consisting consecutive letters alphabet other words any substring string abcdefghijklmnopqrstuvwxyz example abc alphabetical continuous string while acb and za not given string consisting lowercase letters only return length longest alphabetical continuous substring example input abacaba output explanation there distinct continuous substrings and ab ab longest continuous substring example input abcde output explanation abcde longest continuous substring constraints slength consists only english lowercase letters
find center star graph there undirected star graph consisting nodes labeled from star graph graph where there one center node and exactly edges that connect center node every other node given integer array edges where each edgesi ui vi indicates that there edge between nodes ui and vi return center given star graph example input edges output explanation as shown figure above node connected every other node so center example input edges output constraints edgeslength edgesilength ui vi ui vi given edges represent valid star graph
jump game given array integers arr and integer one step can jump from index index where arrlength and where and addition can only jump from index index if arri arrj and arri arrk all indices between and more formally mini maxi can choose any index array and start jumping return maximum number indices can visit notice that can not jump outside array any time example input arr output explanation can start index can jump as shown note that if start index can only jump index cannot jump index because cannot jump index because index between index and and similarly cannot jump from index index or index example input arr output explanation can start any index always cannot jump any index example input arr output explanation start index can visit all indicies constraints arrlength arri arrlength
guess word given array unique strings words where wordsi six letters long one word words chosen as secret word also given helper object master may call masterguessword where word sixletterlong string and must be from words masterguessword returns if word not from words or integer representing number exact matches value and position your guess secret word there parameter allowedguesses each test case where allowedguesses maximum number times can call masterguessword each test case should call masterguess secret word without exceeding maximum number allowed guesses will get either took too many guesses or did not find secret word if called masterguess more than allowedguesses times or if did not call masterguess secret word or guessed secret word correctly if called masterguess secret word number calls masterguess less than or equal allowedguesses test cases generated such that can guess secret word reasonable strategy other than using bruteforce method example input secret acckzz words acckzzccbazzeiowzzabcczz allowedguesses output guessed secret word correctly explanation masterguessaaaaaa returns because aaaaaa not wordlist masterguessacckzz returns because acckzz secret and has all matches masterguessccbazz returns because ccbazz has matches masterguesseiowzz returns because eiowzz has matches masterguessabcczz returns because abcczz has matches made calls masterguess and one them secret so pass test case example input secret hamada words hamadakhaled allowedguesses output guessed secret word correctly explanation since there two words can guess both constraints wordslength wordsilength wordsi consist lowercase english letters all strings wordlist unique secret exists words allowedguesses
longest increasing path matrix given integers matrix return length longest increasing path matrix from each cell can either move four directions left right up or down may not move diagonally or move outside boundary ie wraparound not allowed example input matrix output explanation longest increasing path example input matrix output explanation longest increasing path moving diagonally not allowed example input matrix output constraints matrixlength matrixilength matrixij
longest palindrome concatenating two letter words given array strings words each element words consists two lowercase english letters create longest possible palindrome selecting some elements from words and concatenating them any order each element can be selected most once return length longest palindrome that can create if impossible create any palindrome return palindrome string that reads same forward and backward example input words lcclgg output explanation one longest palindrome lc gg cl lcggcl length note that clgglc another longest palindrome that can be created example input words abtyytlcclab output explanation one longest palindrome ty lc cl yt tylcclyt length note that lcyttycl another longest palindrome that can be created example input words ccllxx output explanation one longest palindrome cc length note that ll another longest palindrome that can be created and so xx constraints wordslength wordsilength wordsi consists lowercase english letters
unique paths there robot grid robot initially located topleft corner ie grid robot tries move bottomright corner ie gridm robot can only move either down or right any point time given two integers and return number possible unique paths that robot can take reach bottomright corner test cases generated so that answer will be less than or equal example input output example input output explanation from topleft corner there total ways reach bottomright corner right down down down down right down right down constraints
game life according wikipedias article game life also known simply as life cellular automaton devised british mathematician john horton conway board made up grid cells where each cell has initial state live represented or dead represented each cell interacts its eight neighbors horizontal vertical diagonal using following four rules taken from above wikipedia article any live cell fewer than two live neighbors dies as if caused underpopulation any live cell two or three live neighbors lives next generation any live cell more than three live neighbors dies as if overpopulation any dead cell exactly three live neighbors becomes live cell as if reproduction next state created applying above rules simultaneously every cell current state where births and deaths occur simultaneously given current state grid board return next state example input board output example input board output constraints boardlength boardilength boardij or follow up could solve inplace remember that board needs be updated simultaneously cannot update some cells first and then use their updated values update other cells this question represent board using array principle board infinite which would cause problems when active area encroaches upon border array ie live cells reach border how would address these problems
count pairs nodes given undirected graph defined integer number nodes and integer array edges edges graph where edgesi ui vi indicates that there undirected edge between ui and vi also given integer array queries let incidenta be defined as number edges that connected either node or answer jth query number pairs nodes that satisfy both following conditions incidenta queriesj return array answers such that answerslength querieslength and answersj answer jth query note that there can be multiple edges between same two nodes example input edges queries output explanation calculations incidenta shown table above answers each queries as follows answers all pairs have incidenta value greater than answers all pairs except have incidenta value greater than example input edges queries output constraints edgeslength ui vi ui vi querieslength queriesj edgeslength
kth smallest number multiplication table nearly everyone has used multiplication table multiplication table size integer matrix mat where matij indexed given three integers and return kth smallest element multiplication table example input output explanation th smallest number example input output explanation th smallest number constraints
heaters winter coming during contest your first job design standard heater fixed warm radius warm all houses every house can be warmed as long as house within heaters warm radius range given positions houses and heaters horizontal line return minimum radius standard heaters so that those heaters could cover all houses notice that all heaters follow your radius standard and warm radius will same example input houses heaters output explanation only heater placed position and if use radius standard then all houses can be warmed example input houses heaters output explanation two heater placed position and need use radius standard then all houses can be warmed example input houses heaters output constraints houseslength heaterslength housesi heatersi
minimize deviation array given array nums positive integers can perform two types operations any element array any number times if element even divide example if array then can do this operation last element and array will be if element odd multiply example if array then can do this operation first element and array will be deviation array maximum difference between any two elements array return minimum deviation array can have after performing some number operations example input nums output explanation can transform array then then deviation will be example input nums output explanation can transform array after two operations then deviation will be example input nums output constraints numslength numsi
minimum number people teach social network consisting users and some friendships between users two users can communicate each other if know common language given integer array languages and array friendships where there languages numbered through languagesi set languages ith user knows and friendshipsi ui vi denotes friendship between users ui and vi can choose one language and teach some users so that all friends can communicate each other return minimum number users need teach note that friendships not transitive meaning if friend and friend this doesnt guarantee that friend example input languages friendships output explanation can either teach user second language or user first language example input languages friendships output explanation teach third language users and yielding two users teach constraints languageslength languagesilength languagesij ui vi languageslength friendshipslength all tuples ui vi unique languagesi contains only unique values
lower case given string return string after replacing every uppercase letter same lowercase letter example input hello output hello example input here output here example input lovely output lovely constraints slength consists printable ascii characters
maximum value string array value alphanumeric string can be defined as numeric representation string base if comprises digits only length string otherwise given array strs alphanumeric strings return maximum value any string strs example input strs alicbob output explanation alic consists both letters and digits so its value its length ie bob consists only letters so its value also its length ie consists only digits so its value its numeric equivalent ie also consists only digits so its value consists only digits so its value hence maximum value alic example input strs output explanation each string array has value hence return constraints strslength strsilength strsi consists only lowercase english letters and digits
delete node linked list there singlylinked list head and want delete node node given node be deleted node will not be given access first node head all values linked list unique and guaranteed that given node node not last node linked list delete given node note that deleting node do not mean removing from memory mean value given node should not exist linked list number nodes linked list should decrease one all values before node should be same order all values after node should be same order custom testing input should provide entire linked list head and node be given node node should not be last node list and should be actual node list will build linked list and pass node your function output will be entire list after calling your function example input head node output explanation given second node value linked list should become after calling your function example input head node output explanation given third node value linked list should become after calling your function constraints number nodes given list range nodeval value each node list unique node be deleted list and not tail node
all possible full binary trees given integer return list all possible full binary trees nodes each node each tree answer must have nodeval each element answer root node one possible tree may return final list trees any order full binary tree binary tree where each node has exactly or children example input output nullnullnullnullnullnullnullnullnullnullnullnull example input output constraints
matrix diagonal sum given square matrix mat return sum matrix diagonals only include sum all elements primary diagonal and all elements secondary diagonal that not part primary diagonal example input mat output explanation diagonals sum notice that element mat counted only once example input mat output example input mat output constraints matlength matilength matij
new game alice plays following game loosely based card game alice starts points and draws numbers while has less than points during each draw gains integer number points randomly from range maxpts where maxpts integer each draw independent and outcomes have equal probabilities alice stops drawing numbers when gets or more points return probability that alice has or fewer points answers within actual answer considered accepted example input maxpts output explanation alice gets single card then stops example input maxpts output explanation alice gets single card then stops out possibilities or below points example input maxpts output constraints maxpts
minimum cost cut stick given wooden stick length units stick labelled from example stick length labelled as follows given integer array cuts where cutsi denotes position should perform cut should perform cuts order can change order cuts as wish cost one cut length stick be cut total cost sum costs all cuts when cut stick will be split into two smaller sticks ie sum their lengths length stick before cut please refer first example better explanation return minimum total cost cuts example input cuts output explanation using cuts order as input leads following scenario first cut done rod length so cost second cut done rod length ie second part first cut third done rod length and last cut rod length total cost rearranging cuts be example will lead scenario total cost as shown example photo example input cuts output explanation if try given cuts ordering cost will be there much ordering total cost example order has total cost which minimum possible constraints cutslength minn cutsi all integers cuts array distinct
kth smallest instructions bob standing cell and wants reach destination row column can only travel right and down going help bob providing instructions him reach destination instructions represented as string where each character either meaning move horizontally go right or meaning move vertically go down multiple instructions will lead bob destination example if destination both hhhvv and hvhvh valid instructions however bob very picky bob has lucky number and wants kth lexicographically smallest instructions that will lead him destination indexed given integer array destination and integer return kth lexicographically smallest instructions that will take bob destination example input destination output hhhvv explanation all instructions that reach lexicographic order as follows hhhvv hhvhv hhvvh hvhhv hvhvh hvvhh vhhhv vhhvh vhvhh vvhhh example input destination output hhvhv example input destination output hhvvh constraints destinationlength row column ncrrow column row where ncra denotes choose
ambiguous coordinates had some dimensional coordinates like or then removed all commas decimal points and spaces and ended up string example becomes and becomes return list strings representing all possibilities what our original coordinates could have been our original representation never had extraneous zeroes so never started numbers like or any other number that can be represented fewer digits also decimal point within number never occurs without least one digit occurring before so never started numbers like final answer list can be returned any order all coordinates final answer have exactly one space between them occurring after comma example input output example input output explanation or not allowed example input output constraints slength and sslength rest digits
calculate delayed arrival time given positive integer arrivaltime denoting arrival time train hours and another positive integer delayedtime denoting amount delay hours return time when train will arrive station note that time this problem hours format example input arrivaltime delayedtime output explanation arrival time train hours delayed hours now will reach hours example input arrivaltime delayedtime output explanation arrival time train hours delayed hours now will reach which denoted hours format so return constraints arrivaltime delayedtime
count palindromic subsequences given string digits return number palindromic subsequences having length since answer may be very large return modulo note string palindromic if reads same forward and backward subsequence string that can be derived from another string deleting some or no characters without changing order remaining characters example input output explanation there possible subsequences length two them both equal palindromic example input output explanation all subsequences which palindromic example input output explanation only two palindromic subsequences and constraints slength consists digits
reformat string given alphanumeric string alphanumeric string string consisting lowercase english letters and digits have find permutation string where no letter followed another letter and no digit followed another digit that no two adjacent characters have same type return reformatted string or return empty string if impossible reformat string example input abc output abc explanation no two adjacent characters have same type abc abc abc cab also valid permutations example input leetcode output explanation leetcode has only characters so cannot separate them digits example input output explanation has only digits so cannot separate them characters constraints slength consists only lowercase english letters andor digits
building ho there two kinds threads oxygen and hydrogen your goal group these threads form water molecules there barrier where each thread has wait until complete molecule can be formed hydrogen and oxygen threads will be given releasehydrogen and releaseoxygen methods respectively which will allow them pass barrier these threads should pass barrier groups three and must immediately bond each other form water molecule must guarantee that all threads from one molecule bond before any other threads from next molecule do other words if oxygen thread arrives barrier when no hydrogen threads present must wait two hydrogen threads if hydrogen thread arrives barrier when no other threads present must wait oxygen thread and another hydrogen thread do not have worry about matching threads up explicitly threads do not necessarily know which other threads paired up key that threads pass barriers complete sets thus if examine sequence threads that bind and divide them into groups three each group should contain one oxygen and two hydrogen threads write synchronization code oxygen and hydrogen molecules that enforces these constraints example input water hoh output hho explanation hoh and ohh also valid answers example input water oohhhh output hhohho explanation hohhho ohhhho hhohoh hohhoh ohhhoh hhoohh hohohh and ohhohh also valid answers constraints waterlength wateri either or there will be exactly water there will be exactly water
smallest number infinite set have set which contains all positive integers implement smallestinfiniteset class smallestinfiniteset initializes smallestinfiniteset object contain all positive integers int popsmallest removes and returns smallest integer contained infinite set void addbackint num adds positive integer num back into infinite set if not already infinite set example input smallestinfiniteset addback popsmallest popsmallest popsmallest addback popsmallest popsmallest popsmallest output null null null explanation smallestinfiniteset smallestinfiniteset new smallestinfiniteset smallestinfinitesetaddback already set so no change made smallestinfinitesetpopsmallest return since smallest number and remove from set smallestinfinitesetpopsmallest return and remove from set smallestinfinitesetpopsmallest return and remove from set smallestinfinitesetaddback added back set smallestinfinitesetpopsmallest return since added back set and smallest number and remove from set smallestinfinitesetpopsmallest return and remove from set smallestinfinitesetpopsmallest return and remove from set constraints num most calls will be made total popsmallest and addback
leafsimilar trees consider all leaves binary tree from left right order values those leaves form leaf value sequence example given tree above leaf value sequence two binary trees considered leafsimilar if their leaf value sequence same return true if and only if two given trees head nodes root and root leafsimilar example input root nullnull root nullnullnullnullnullnull output true example input root root output false constraints number nodes each tree will be range both given trees will have values range
image overlap given two images img and img represented as binary square matrices size binary matrix has only and as values translate one image however choose sliding all bits left right up andor down any number units then place top other image can then calculate overlap counting number positions that have both images note also that translation does not include any kind rotation any bits that translated outside matrix borders erased return largest possible overlap example input img img output explanation translate img right unit and down unit number positions that have both images shown red example input img img output example input img img output constraints imglength imgilength imglength imgilength imgij either or imgij either or
average selling price sql schema table prices column name type productid int startdate date enddate date price int productid startdate enddate primary key this table each row this table indicates price productid period from startdate enddate each productid there will be no two overlapping periods that means there will be no two intersecting periods same productid table unitssold column name type productid int purchasedate date units int there no primary key this table may contain duplicates each row this table indicates date units and productid each product sold write sql query find average selling price each product averageprice should be rounded decimal places return result table any order query result format following example example input prices table productid startdate enddate price unitssold table productid purchasedate units output productid averageprice explanation average selling price total price product number products sold average selling price product average selling price product
steps make array nondecreasing given indexed integer array nums one step remove all elements numsi where numsi numsi all numslength return number steps performed until nums becomes nondecreasing array example input nums output explanation following steps performed step becomes step becomes step becomes nondecreasing array therefore return example input nums output explanation nums already nondecreasing array therefore return constraints numslength numsi
wildcard matching given input string and pattern implement wildcard pattern matching support and where matches any single character matches any sequence characters including empty sequence matching should cover entire input string not partial example input aa output false explanation does not match entire string aa example input aa output true explanation matches any sequence example input cb output false explanation matches but second letter which does not match constraints slength plength contains only lowercase english letters contains only lowercase english letters or
longest increasing subsequence given integer array nums return length longest strictly increasing subsequence example input nums output explanation longest increasing subsequence therefore length example input nums output example input nums output constraints numslength numsi follow up can come up algorithm that runs logn time complexity
check if one string swap can make strings equal given two strings and equal length string swap operation where choose two indices string not necessarily different and swap characters these indices return true if possible make both strings equal performing most one string swap exactly one strings otherwise return false example input bank kanb output true explanation example swap first character last character make bank example input attack defend output false explanation impossible make them equal one string swap example input kelb kelb output true explanation two strings already equal so no string swap operation required constraints slength slength slength slength and consist only lowercase english letters
smallest value after replacing sum prime factors given positive integer continuously replace sum its prime factors note that if prime factor divides multiple times should be included sum as many times as divides return smallest value will take example input output explanation initially so replace so replace so replace smallest value will take example input output explanation initially smallest value will take constraints
unique length palindromic subsequences given string return number unique palindromes length three that subsequence note that even if there multiple ways obtain same subsequence still only counted once palindrome string that reads same forwards and backwards subsequence string new string generated from original string some characters can be none deleted without changing relative order remaining characters example ace subsequence abcde example input aabca output explanation palindromic subsequences length aba subsequence aabca aaa subsequence aabca aca subsequence aabca example input adc output explanation there no palindromic subsequences length adc example input bbcbaba output explanation palindromic subsequences length bbb subsequence bbcbaba bcb subsequence bbcbaba bab subsequence bbcbaba aba subsequence bbcbaba constraints slength consists only lowercase english letters
duplicate zeros given fixedlength integer array arr duplicate each occurrence zero shifting remaining elements right note that elements beyond length original array not written do above modifications input array place and do not return anything example input arr output explanation after calling your function input array modified example input arr output explanation after calling your function input array modified constraints arrlength arri
minimum consecutive cards pick up given integer array cards where cardsi represents value ith card pair cards matching if cards have same value return minimum number consecutive cards have pick up have pair matching cards among picked cards if impossible have matching cards return example input cards output explanation can pick up cards which contain matching pair cards value note that picking up cards also optimal example input cards output explanation there no way pick up set consecutive cards that contain pair matching cards constraints cardslength cardsi
add strings given two nonnegative integers num and num represented as string return sum num and num as string must solve problem without using any builtin library handling large integers such as biginteger must also not convert inputs integers directly example input num num output example input num num output example input num num output constraints numlength numlength num and num consist only digits num and num dont have any leading zeros except zero itself
binary search tree greater sum tree given root binary search tree bst convert greater tree such that every key original bst changed original key plus sum all keys greater than original key bst as reminder binary search tree tree that satisfies these constraints left subtree node contains only nodes keys less than nodes key right subtree node contains only nodes keys greater than nodes key both left and right subtrees must also be binary search trees example input root nullnullnullnullnullnull output nullnullnullnullnullnull example input root null output null constraints number nodes tree range nodeval all values tree unique note this question same as httpsleetcodecomproblemsconvertbsttogreatertree
count unreachable pairs nodes undirected graph given integer there undirected graph nodes numbered from given integer array edges where edgesi ai bi denotes that there exists undirected edge connecting nodes ai and bi return number pairs different nodes that unreachable from each other example input edges output explanation there no pairs nodes that unreachable from each other therefore return example input edges output explanation there pairs nodes that unreachable from each other therefore return constraints edgeslength edgesilength ai bi ai bi there no repeated edges
construct binary tree from inorder and postorder traversal given two integer arrays inorder and postorder where inorder inorder traversal binary tree and postorder postorder traversal same tree construct and return binary tree example input inorder postorder output nullnull example input inorder postorder output constraints inorderlength postorderlength inorderlength inorderi postorderi inorder and postorder consist unique values each value postorder also appears inorder inorder guaranteed be inorder traversal tree postorder guaranteed be postorder traversal tree
orderly queue given string and integer can choose one first letters and append end string return lexicographically smallest string could have after applying mentioned step any number moves example input cba output acb explanation first move move st character end obtaining string bac second move move st character end obtaining final result acb example input baaca output aaabc explanation first move move st character end obtaining string aacab second move move rd character end obtaining final result aaabc constraints slength consist lowercase english letters
magnetic force between two balls universe earth rick discovered special form magnetic force between two balls if put his new invented basket rick has empty baskets ith basket positioni morty has balls and needs distribute balls into baskets such that minimum magnetic force between any two balls maximum rick stated that magnetic force between two different balls positions and given integer array position and integer return required force example input position output explanation distributing balls into baskets and will make magnetic force between ball pairs minimum magnetic force cannot achieve larger minimum magnetic force than example input position output explanation can use baskets and constraints positionlength positioni all integers position distinct positionlength
design atm machine there atm machine that stores banknotes denominations and dollars initially atm empty user can use machine deposit or withdraw any amount money when withdrawing machine prioritizes using banknotes larger values example if want withdraw and there banknotes banknote and banknote then machine will use and banknotes however if try withdraw and there banknotes and banknote then withdraw request will be rejected because machine will first try use banknote and then be unable use banknotes complete remaining note that machine not allowed use banknotes instead banknote implement atm class atm initializes atm object void depositint banknotescount deposits new banknotes order and int withdrawint amount returns array length number banknotes that will be handed user order and and update number banknotes atm after withdrawing returns if not possible do not withdraw any banknotes this case example input atm deposit withdraw deposit withdraw withdraw output null null null explanation atm atm new atm atmdeposit deposits banknote banknotes and banknote atmwithdraw returns machine uses banknote and banknote banknotes left over machine atmdeposit deposits and banknote banknotes machine now atmwithdraw returns machine will try use banknote and then be unable complete remaining so withdraw request will be rejected since request rejected number banknotes machine not modified atmwithdraw returns machine uses banknote and banknote constraints banknotescountlength banknotescounti amount most calls total will be made withdraw and deposit least one call will be made each function withdraw and deposit
number ways reconstruct tree given array pairs where pairsi xi yi and there no duplicates xi yi let ways be number rooted trees that satisfy following conditions tree consists nodes whose values appeared pairs pair xi yi exists pairs if and only if xi ancestor yi or yi ancestor xi note tree does not have be binary tree two ways considered be different if there least one node that has different parents both ways return if ways if ways if ways rooted tree tree that has single root node and all edges oriented be outgoing from root ancestor node any node path from root that node excluding node itself root has no ancestors example input pairs output explanation there exactly one valid rooted tree which shown above figure example input pairs output explanation there multiple valid rooted trees three them shown above figures example input pairs output explanation there no valid rooted trees constraints pairslength xi yi elements pairs unique
implement trie prefix tree trie pronounced as try or prefix tree tree data structure used efficiently store and retrieve keys dataset strings there various applications this data structure such as autocomplete and spellchecker implement trie class trie initializes trie object void insertstring word inserts string word into trie boolean searchstring word returns true if string word trie ie inserted before and false otherwise boolean startswithstring prefix returns true if there previously inserted string word that has prefix prefix and false otherwise example input trie insert search search startswith insert search apple apple app app app app output null null true false true null true explanation trie trie new trie trieinsertapple triesearchapple return true triesearchapp return false triestartswithapp return true trieinsertapp triesearchapp return true constraints wordlength prefixlength word and prefix consist only lowercase english letters most calls total will be made insert search and startswith
pancake sorting given array integers arr sort array performing series pancake flips one pancake flip do following steps choose integer where arrlength reverse subarray arrk indexed example if arr and performed pancake flip choosing reverse subarray so arr after pancake flip return array kvalues corresponding sequence pancake flips that sort arr any valid answer that sorts array within arrlength flips will be judged as correct example input arr output explanation perform pancake flips values and starting state arr after st flip arr after nd flip arr after rd flip arr after th flip arr which sorted example input arr output explanation input already sorted so there no need flip anything note that other answers such as would also be accepted constraints arrlength arri arrlength all integers arr unique ie arr permutation integers from arrlength
reorder list given head singly linkedlist list can be represented as ln ln reorder list be following form ln ln ln may not modify values lists nodes only nodes themselves may be changed example input head output example input head output constraints number nodes list range nodeval
defuse bomb have bomb defuse and your time running out your informer will provide circular array code length and key decrypt code must replace every number all numbers replaced simultaneously if replace ith number sum next numbers if replace ith number sum previous numbers if replace ith number as code circular next element coden code and previous element code coden given circular array code and integer key return decrypted code defuse bomb example input code output explanation each number replaced sum next numbers decrypted code notice that numbers wrap around example input code output explanation when zero numbers replaced example input code output explanation decrypted code notice that numbers wrap around again if negative sum previous numbers constraints codelength codei
merge two sorted lists given heads two sorted linked lists list and list merge two lists one sorted list list should be made splicing together nodes first two lists return head merged linked list example input list list output example input list list output example input list list output constraints number nodes both lists range nodeval both list and list sorted nondecreasing order
number subsequences that satisfy given sum condition given array integers nums and integer target return number nonempty subsequences nums such that sum minimum and maximum element less or equal target since answer may be too large return modulo example input nums target output explanation there subsequences that satisfy condition min value max value target example input nums target output explanation there subsequences that satisfy condition nums can have repeated numbers example input nums target output explanation there nonempty subsequences two them do not satisfy condition number valid subsequences constraints numslength numsi target
closest points origin given array points where pointsi xi yi represents point xy plane and integer return closest points origin distance between two points xy plane euclidean distance ie x may return answer any order answer guaranteed be unique except order that example input points output explanation distance between and origin sqrt distance between and origin sqrt since sqrt sqrt closer origin only want closest points from origin so answer just example input points output explanation answer would also be accepted constraints pointslength xi yi
decode string given encoded string return its decoded string encoding rule kencodedstring where encodedstring inside square brackets being repeated exactly times note that guaranteed be positive integer may assume that input string always valid there no extra white spaces square brackets wellformed etc furthermore may assume that original data does not contain any digits and that digits only those repeat numbers example there will not be input like or test cases generated so that length output will never exceed example input abc output aaabcbc example input ac output accaccacc example input abccdef output abcabccdcdcdef constraints slength consists lowercase english letters digits and square brackets guaranteed be valid input all integers range
best time buy and sell stock ii given integer array prices where pricesi price given stock ith day each day may decide buy andor sell stock can only hold most one share stock any time however can buy then immediately sell same day find and return maximum profit can achieve example input prices output explanation buy day price and sell day price profit then buy day price and sell day price profit total profit example input prices output explanation buy day price and sell day price profit total profit example input prices output explanation there no way make positive profit so never buy stock achieve maximum profit constraints priceslength pricesi
maximum and sum array given integer array nums length and integer numslots such that numslots there numslots slots numbered from numslots have place all integers into slots such that each slot contains most two numbers and sum given placement sum bitwise and every number its respective slot number example and sum placing numbers into slot and into slot equal and and and and return maximum possible and sum nums given numslots slots example input nums numslots output explanation one possible placement into slot into slot and into slot this gives maximum and sum and and and and and and example input nums numslots output explanation one possible placement into slot into slot into slot into slot and into slot this gives maximum and sum and and and and and and note that slots and empty which permitted constraints numslength numslots numslots numsi
count sorted vowel strings given integer return number strings length that consist only vowels and lexicographically sorted string lexicographically sorted if all valid si same as or comes before si alphabet example input output explanation sorted strings that consist vowels only aeiou example input output explanation sorted strings that consist vowels only aaaeaiaoaueeeieoeuiiioiuooouuu note that ea not valid string since comes after alphabet example input output constraints
task scheduler given characters array tasks representing tasks cpu needs do where each letter represents different task tasks could be done any order each task done one unit time each unit time cpu could complete either one task or just be idle however there nonnegative integer that represents cooldown period between two same tasks same letter array that that there must be least units time between any two same tasks return least number units times that cpu will take finish all given tasks example input tasks aaabbb output explanation idle idle there least units time between any two same tasks example input tasks aaabbb output explanation this case any permutation size would work since aaabbb ababab bbbaaa and so example input tasks aaaaaabcdefg output explanation one possible solution idle idle idle idle constraints tasklength tasksi uppercase english letter integer range
project employees sql schema table project column name type projectid int employeeid int projectid employeeid primary key this table employeeid foreign key employee table each row this table indicates that employee employeeid working project projectid table employee column name type employeeid int name varchar experienceyears int employeeid primary key this table its guaranteed that experienceyears not null each row this table contains information about one employee write sql query that reports average experience years all employees each project rounded digits return result table any order query result format following example example input project table projectid employeeid employee table employeeid name experienceyears khaled ali john doe output projectid averageyears explanation average experience years first project and second project
find most competitive subsequence given integer array nums and positive integer return most competitive subsequence nums size arrays subsequence resulting sequence obtained erasing some possibly zero elements from array define that subsequence more competitive than subsequence same length if first position where and differ subsequence has number less than corresponding number example more competitive than because first position differ final number and less than example input nums output explanation among set every possible subsequence most competitive example input nums output constraints numslength numsi numslength
previous permutation one swap given array positive integers arr not necessarily distinct return lexicographically largest permutation that smaller than arr that can be made exactly one swap if cannot be done then return same array note that swap exchanges positions two numbers arri and arrj example input arr output explanation swapping and example input arr output explanation this already smallest permutation example input arr output explanation swapping and constraints arrlength arri
longest uncommon subsequence ii given array strings strs return length longest uncommon subsequence between them if longest uncommon subsequence does not exist return uncommon subsequence between array strings string that subsequence one string but not others subsequence string string that can be obtained after deleting any number characters from example abc subsequence aebdc because can delete underlined characters aebdc get abc other subsequences aebdc include aebdc aeb and empty string example input strs abacdceae output example input strs aaaaaaaa output constraints strslength strsilength strsi consists lowercase english letters
pizza slices there pizza slices varying size and your friends will take slices pizza as follows will pick any pizza slice your friend alice will pick next slice anticlockwise direction your pick your friend bob will pick next slice clockwise direction your pick repeat until there no more slices pizzas given integer array slices that represent sizes pizza slices clockwise direction return maximum possible sum slice sizes that can pick example input slices output explanation pick pizza slice size alice and bob will pick slices size and respectively then pick slices size finally alice and bob will pick slice size and respectively total example input slices output explanation pick pizza slice size each turn if pick slice size your partners will pick slices size constraints sliceslength sliceslength slicesi
find nearest point that has same or coordinate given two integers and which represent your current location cartesian grid also given array points where each pointsi ai bi represents that point exists ai bi point valid if shares same xcoordinate or same ycoordinate as your location return index indexed valid point smallest manhattan distance from your current location if there multiple return valid point smallest index if there no valid points return manhattan distance between two points and absx absy example input points output explanation all points only and valid valid points and have smallest manhattan distance from your current location distance has smallest index so return example input points output explanation answer allowed be same location as your current location example input points output explanation there no valid points constraints pointslength pointsilength ai bi
print zero even odd have function printnumber that can be called integer parameter and prints console example calling printnumber prints console given instance class zeroevenodd that has three functions zero even and odd same instance zeroevenodd will be passed three different threads thread calls zero that should only output thread calls even that should only output even numbers thread calls odd that should only output odd numbers modify given class output series where length series must be implement zeroevenodd class zeroevenoddint initializes object number that represents numbers that should be printed void zeroprintnumber calls printnumber output one zero void evenprintnumber calls printnumber output one even number void oddprintnumber calls printnumber output one odd number example input output explanation there three threads being fired asynchronously one them calls zero other calls even and last one calls odd correct output example input output constraints
kth smallest element bst given root binary search tree and integer return kth smallest value indexed all values nodes tree example input root null output example input root nullnull output constraints number nodes tree nodeval follow up if bst modified often ie can do insert and delete operations and need find kth smallest frequently how would optimize
sort even and odd indices independently given indexed integer array nums rearrange values nums according following rules sort values odd indices nums nonincreasing order example if nums before this step becomes after values odd indices and sorted nonincreasing order sort values even indices nums nondecreasing order example if nums before this step becomes after values even indices and sorted nondecreasing order return array formed after rearranging values nums example input nums output explanation first sort values present odd indices and nonincreasing order so nums changes from next sort values present even indices and nondecreasing order so nums changes from thus array formed after rearranging values example input nums output explanation since there exactly one odd index and one even index no rearrangement values takes place resultant array formed which same as initial array constraints numslength numsi
moving stones until consecutive there three stones different positions xaxis given three integers and positions stones one move pick up stone endpoint ie either lowest or highest position stone and move unoccupied position between those endpoints formally lets say stones currently positions and pick up stone either position or position and move that stone integer position and game ends when cannot make any more moves ie stones three consecutive positions return integer array answer length where answer minimum number moves can play and answer maximum number moves can play example input output explanation move stone from or move stone from example input output explanation cannot make any moves example input output explanation move stone from or move stone from constraints and have different values
create maximum number given two integer arrays nums and nums lengths and respectively nums and nums represent digits two numbers also given integer create maximum number length from digits two numbers relative order digits from same array must be preserved return array digits representing answer example input nums nums output example input nums nums output example input nums nums output constraints numslength numslength numsi numsi
movie rating sql schema table movies column name type movieid int title varchar movieid primary key this table title name movie table users column name type userid int name varchar userid primary key this table table movierating column name type movieid int userid int rating int createdat date movieid userid primary key this table this table contains rating movie user their review createdat users review date write sql query find name user who has rated greatest number movies case tie return lexicographically smaller user name find movie name highest average rating february case tie return lexicographically smaller movie name query result format following example example input movies table movieid title avengers frozen joker users table userid name daniel monica maria james movierating table movieid userid rating createdat output results daniel frozen explanation daniel and monica have rated movies avengers frozen and joker but daniel smaller lexicographically frozen and joker have rating average february but frozen smaller lexicographically
find longest balanced substring binary string given binary string consisting only zeroes and ones substring considered balanced if all zeroes before ones and number zeroes equal number ones inside substring notice that empty substring considered balanced substring return length longest balanced substring substring contiguous sequence characters within string example input output explanation longest balanced substring which has length example input output explanation longest balanced substring which has length example input output explanation there no balanced substring except empty substring so answer constraints slength si
best time buy and sell stock iii given array prices where pricesi price given stock ith day find maximum profit can achieve may complete most two transactions note may not engage multiple transactions simultaneously ie must sell stock before buy again example input prices output explanation buy day price and sell day price profit then buy day price and sell day price profit example input prices output explanation buy day price and sell day price profit note that cannot buy day buy day and sell them later as engaging multiple transactions same time must sell before buying again example input prices output explanation this case no transaction done ie max profit constraints priceslength pricesi
kth smallest prime fraction given sorted integer array arr containing and prime numbers where all integers arr unique also given integer every and where arrlength consider fraction arri arrj return kth smallest fraction considered return your answer as array integers size where answer arri and answer arrj example input arr output explanation fractions be considered sorted order and third fraction example input arr output constraints arrlength arri arr arri prime number all numbers arr unique and sorted strictly increasing order arrlength arrlength follow up can solve problem better than complexity
bit and bit characters have two special characters first character can be represented one bit second character can be represented two bits or given binary array bits that ends return true if last character must be onebit character example input bits output true explanation only way decode twobit character and onebit character so last character onebit character example input bits output false explanation only way decode twobit character and twobit character so last character not onebit character constraints bitslength bitsi either or
frequency tracker design data structure that keeps track values and answers some queries regarding their frequencies implement frequencytracker class frequencytracker initializes frequencytracker object empty array initially void addint number adds number data structure void deleteoneint number deletes one occurrence number from data structure data structure may not contain number and this case nothing deleted bool hasfrequencyint frequency returns true if there number data structure that occurs frequency number times otherwise returns false example input frequencytracker add add hasfrequency output null null null true explanation frequencytracker frequencytracker new frequencytracker frequencytrackeradd data structure now contains frequencytrackeradd data structure now contains frequencytrackerhasfrequency returns true because occurs twice example input frequencytracker add deleteone hasfrequency output null null null false explanation frequencytracker frequencytracker new frequencytracker frequencytrackeradd data structure now contains frequencytrackerdeleteone data structure becomes empty frequencytrackerhasfrequency returns false because data structure empty example input frequencytracker hasfrequency add hasfrequency output null false null true explanation frequencytracker frequencytracker new frequencytracker frequencytrackerhasfrequency returns false because data structure empty frequencytrackeradd data structure now contains frequencytrackerhasfrequency returns true because occurs once constraints number frequency most calls will be made add deleteone and hasfrequency total
out boundary paths there grid ball ball initially position startrow startcolumn allowed move ball one four adjacent cells grid possibly out grid crossing grid boundary can apply most maxmove moves ball given five integers maxmove startrow startcolumn return number paths move ball out grid boundary since answer can be very large return modulo example input maxmove startrow startcolumn output example input maxmove startrow startcolumn output constraints maxmove startrow startcolumn
number islands given binary grid grid which represents map land and water return number islands island surrounded water and formed connecting adjacent lands horizontally or vertically may assume all four edges grid all surrounded water example input grid output example input grid output constraints gridlength gridilength gridij or
find peak element peak element element that strictly greater than its neighbors given indexed integer array nums find peak element and return its index if array contains multiple peaks return index any peaks may imagine that nums numsn other words element always considered be strictly greater than neighbor that outside array must write algorithm that runs olog time example input nums output explanation peak element and your function should return index number example input nums output explanation your function can return either index number where peak element or index number where peak element constraints numslength numsi numsi numsi all valid
invalid tweets sql schema table tweets column name type tweetid int content varchar tweetid primary key this table this table contains all tweets social media app write sql query find ids invalid tweets tweet invalid if number characters used content tweet strictly greater than return result table any order query result format following example example input tweets table tweetid content vote biden let us make america great again output tweetid explanation tweet has length valid tweet tweet has length invalid tweet
number steps reduce number binary representation one given binary representation integer as string return number steps reduce under following rules if current number even have divide if current number odd have add guaranteed that can always reach one all test cases example input output explanation corressponds number their decimal representation step odd add and obtain step even divide and obtain step odd add and obtain step even divide and obtain step even divide and obtain step even divide and obtain example input output explanation corressponds number their decimal representation step even divide and obtain example input output constraints slength consists characters or
maximum number pairs array given indexed integer array nums one operation may do following choose two integers nums that equal remove both integers from nums forming pair operation done nums as many times as possible return indexed integer array answer size where answer number pairs that formed and answer number leftover integers nums after doing operation as many times as possible example input nums output explanation form pair nums and nums and remove them from nums now nums form pair nums and nums and remove them from nums now nums form pair nums and nums and remove them from nums now nums no more pairs can be formed total pairs have been formed and there number leftover nums example input nums output explanation form pair nums and nums and remove them from nums now nums no more pairs can be formed total pair has been formed and there numbers leftover nums example input nums output explanation no pairs can be formed and there number leftover nums constraints numslength numsi
minimum number operations move all balls each box have boxes given binary string boxes length where boxesi if ith box empty and if contains one ball one operation can move one ball from box adjacent box box adjacent box if absi note that after doing so there may be more than one ball some boxes return array answer size where answeri minimum number operations needed move all balls ith box each answeri calculated considering initial state boxes example input boxes output explanation answer each box as follows first box will have move one ball from second box first box one operation second box will have move one ball from first box second box one operation third box will have move one ball from first box third box two operations and move one ball from second box third box one operation example input boxes output constraints boxeslength boxesi either or
convert array into array conditions given integer array nums need create array from nums satisfying following conditions array should contain only elements array nums each row array contains distinct integers number rows array should be minimal return resulting array if there multiple answers return any them note that array can have different number elements each row example input nums output explanation can create array that contains following rows all elements nums used and each row array contains distinct integers so valid answer can be shown that cannot have less than rows valid array example input nums output explanation all elements array distinct so can keep all them first row array constraints numslength numsi numslength
find kbeauty number kbeauty integer num defined as number substrings num when read as string that meet following conditions has length divisor num given integers num and return kbeauty num note leading zeros allowed not divisor any value substring contiguous sequence characters string example input num output explanation following substrings num length from divisor from divisor therefore kbeauty example input num output explanation following substrings num length from divisor from not divisor from not divisor from not divisor from divisor therefore kbeauty constraints num numlength taking num as string
shortest common supersequence given two strings str and str return shortest string that has both str and str as subsequences if there multiple valid strings return any them string subsequence string if deleting some number characters from possibly results string example input str abac str cab output cabac explanation str abac subsequence cabac because can delete first str cab subsequence cabac because can delete last ac answer provided shortest such string that satisfies these properties example input str aaaaaaaa str aaaaaaaa output aaaaaaaa constraints strlength strlength str and str consist lowercase english letters
shortest path grid obstacles elimination given integer matrix grid where each cell either empty or obstacle can move up down left or right from and empty cell one step return minimum number steps walk from upper left corner lower right corner given that can eliminate most obstacles if not possible find such walk return example input grid output explanation shortest path without eliminating any obstacle shortest path one obstacle elimination position such path example input grid output explanation need eliminate least two obstacles find such walk constraints gridlength gridilength gridij either or grid gridm
move zeroes given integer array nums move all end while maintaining relative order nonzero elements note that must do this inplace without making copy array example input nums output example input nums output constraints numslength numsi follow up could minimize total number operations done
minimize maximum two arrays have two arrays arr and arr which initially empty need add positive integers them such that satisfy all following conditions arr contains uniquecnt distinct positive integers each which not divisible divisor arr contains uniquecnt distinct positive integers each which not divisible divisor no integer present both arr and arr given divisor divisor uniquecnt and uniquecnt return minimum possible maximum integer that can be present either array example input divisor divisor uniquecnt uniquecnt output explanation can distribute first natural numbers into arr and arr arr and arr can see that both arrays satisfy all conditions since maximum value return example input divisor divisor uniquecnt uniquecnt output explanation here arr and arr satisfy all conditions since maximum value return example input divisor divisor uniquecnt uniquecnt output explanation here final possible arrays can be arr and arr can be shown that not possible obtain lower maximum satisfying all conditions constraints divisor divisor uniquecnt uniquecnt uniquecnt uniquecnt
walking robot simulation ii width height grid xyplane bottomleft cell and topright cell width height grid aligned four cardinal directions north east south and west robot initially cell facing direction east robot can be instructed move specific number steps each step does following attempts move forward one cell direction facing if cell robot moving out bounds robot instead turns degrees counterclockwise and retries step after robot finishes moving number steps required stops and awaits next instruction implement robot class robotint width int height initializes width height grid robot facing east void stepint num instructs robot move forward num steps int getpos returns current cell robot as array length string getdir returns current direction robot north east south or west example input robot step step getpos getdir step step step getpos getdir output null null null east null null null west explanation robot robot new robot initialize grid and robot facing east robotstep moves two steps east and faces east robotstep moves two steps east and faces east robotgetpos return robotgetdir return east robotstep moves one step east and faces east moving next step east would be out bounds so turns and faces north then moves one step north and faces north robotstep moves one step north and faces north not west robotstep moving next step north would be out bounds so turns and faces west then moves four steps west and faces west robotgetpos return robotgetdir return west constraints width height num most calls total will be made step getpos and getdir
rings and rods there rings and each ring either red green or blue rings distributed across ten rods labeled from given string rings length that describes rings that placed onto rods every two characters rings forms colorposition pair that used describe each ring where first character ith pair denotes ith rings color second character ith pair denotes rod that ith ring placed example rgb describes rings red ring placed onto rod labeled green ring placed onto rod labeled and blue ring placed onto rod labeled return number rods that have all three colors rings them example input rings bbgrrrg output explanation rod labeled holds rings all colors red green and blue rod labeled holds rings but only has red and blue rod labeled holds only green ring thus number rods all three colors example input rings brgrrbg output explanation rod labeled holds rings all colors red green and blue rod labeled holds only red ring thus number rods all three colors example input rings output explanation only one ring given thus no rods have all three colors constraints ringslength ringsi where even either or indexed ringsi where odd digit from indexed
strong password checker ii password said be strong if satisfies all following criteria has least characters contains least one lowercase letter contains least one uppercase letter contains least one digit contains least one special character special characters characters following string does not contain same character adjacent positions ie aab violates this condition but aba does not given string password return true if strong password otherwise return false example input password iloveletcode output true explanation password meets all requirements therefore return true example input password meyouismydream output false explanation password does not contain digit and also contains same character adjacent positions therefore return false example input password ab output false explanation password does not meet length requirement therefore return false constraints passwordlength password consists letters digits and special characters
maximum subarray minproduct minproduct array equal minimum value array multiplied arrays sum example array minimum value has minproduct given array integers nums return maximum minproduct any nonempty subarray nums since answer may be large return modulo note that minproduct should be maximized before performing modulo operation testcases generated such that maximum minproduct without modulo will fit bit signed integer subarray contiguous part array example input nums output explanation maximum minproduct achieved subarray minimum value example input nums output explanation maximum minproduct achieved subarray minimum value example input nums output explanation maximum minproduct achieved subarray minimum value constraints numslength numsi
single number given nonempty array integers nums every element appears twice except one find that single one must implement solution linear runtime complexity and use only constant extra space example input nums output example input nums output example input nums output constraints numslength numsi each element array appears twice except one element which appears only once
row maximum ones given binary matrix mat find indexed position row that contains maximum count ones and number ones that row case there multiple rows that have maximum count ones row smallest row number should be selected return array containing index row and number ones example input mat output explanation both rows have same number so return index smaller row and maximum count ones so answer example input mat output explanation row indexed has maximum count ones so return its index and count so answer example input mat output explanation row indexed has maximum count ones so answer constraints matlength matilength matij either or
mean array after removing some elements given integer array arr return mean remaining integers after removing smallest and largest elements answers within actual answer will be considered accepted example input arr output explanation after erasing minimum and maximum values this array all elements equal so mean example input arr output example input arr output constraints arrlength arrlength multiple arri
using robot print lexicographically smallest string given string and robot that currently holds empty string apply one following operations until and both empty remove first character string and give robot robot will append this character string remove last character string and give robot robot will write this character paper return lexicographically smallest string that can be written paper example input zza output azz explanation let denote written string initially szza perform first operation three times tzza perform second operation three times pazz example input bac output abc explanation let denote written string perform first operation twice sc tba perform second operation twice pab sc perform first operation pab tc perform second operation pabc example input bdda output addb explanation let denote written string initially sbdda perform first operation four times tbdda perform second operation four times paddb constraints slength consists only english lowercase letters
valid arrangement pairs given indexed integer array pairs where pairsi starti endi arrangement pairs valid if every index where pairslength have endi starti return any valid arrangement pairs note inputs will be generated such that there exists valid arrangement pairs example input pairs output explanation this valid arrangement since endi always equals starti end start end start end start example input pairs output explanation this valid arrangement since endi always equals starti end start end start arrangements and also valid example input pairs output explanation this valid arrangement since endi always equals starti end start end start constraints pairslength pairsilength starti endi starti endi no two pairs exactly same there exists valid arrangement pairs
consecutive characters power string maximum length nonempty substring that contains only one unique character given string return power example input leetcode output explanation substring ee length character only example input abbcccddddeeeeedcba output explanation substring eeeee length character only constraints slength consists only lowercase english letters
sum scores built strings building string length one character time prepending each new character front string strings labeled from where string length labeled si example abaca ca aca etc score si length longest common prefix between si and sn note that sn given final string return sum score every si example input babab output explanation longest common prefix which has score ab there no common prefix so score bab longest common prefix bab which has score abab there no common prefix so score babab longest common prefix babab which has score sum scores so return example input azbazbzaz output explanation az longest common prefix az which has score azbzaz longest common prefix azb which has score azbazbzaz longest common prefix azbazbzaz which has score all other si score sum scores so return constraints slength consists lowercase english letters
sort items groups respecting dependencies there items each belonging zero or one groups where groupi group that ith item belongs and its equal if ith item belongs no group items and groups zero indexed group can have no item belonging return sorted list items such that items that belong same group next each other sorted list there some relations between these items where beforeitemsi list containing all items that should come before ith item sorted array left ith item return any solution if there more than one solution and return empty list if there no solution example input group beforeitems output example input group beforeitems output explanation this same as example except that needs be before sorted list constraints grouplength beforeitemslength groupi beforeitemsilength beforeitemsij beforeitemsij beforeitemsi does not contain duplicates elements
range frequency queries design data structure find frequency given value given subarray frequency value subarray number occurrences that value subarray implement rangefreqquery class rangefreqqueryint arr constructs instance class given indexed integer array arr int queryint left int right int value returns frequency value subarray arrleftright subarray contiguous sequence elements within array arrleftright denotes subarray that contains elements nums between indices left and right inclusive example input rangefreqquery query query output null explanation rangefreqquery rangefreqquery new rangefreqquery rangefreqqueryquery return value occurs time subarray rangefreqqueryquery return value occurs times whole array constraints arrlength arri value left right arrlength most calls will be made query
find duplicate subtrees given root binary tree return all duplicate subtrees each kind duplicate subtrees only need return root node any one them two trees duplicate if have same structure same node values example input root nullnullnull output example input root output example input root nullnull output constraints number nodes tree will be range nodeval
rectangle area ii given array axisaligned rectangles each rectanglei xi yi xi yi denotes ith rectangle where xi yi coordinates bottomleft corner and xi yi coordinates topright corner calculate total area covered all rectangles plane any area covered two or more rectangles should only be counted once return total area since answer may be too large return modulo example input rectangles output explanation total area covered all three rectangles as illustrated picture from green and red rectangles overlap from all three rectangles overlap example input rectangles output explanation answer modulo which constraints rectangleslength rectangesilength xi yi xi yi xi xi yi yi
set intersection size least two given integer array intervals where intervalsi starti endi represents all integers from starti endi inclusively containing set array nums where each interval from intervals has least two integers nums example if intervals then and containing sets return minimum possible size containing set example input intervals output explanation let nums can be shown that there cannot be any containing array size example input intervals output explanation let nums can be shown that there cannot be any containing array size example input intervals output explanation let nums can be shown that there cannot be any containing array size constraints intervalslength intervalsilength starti endi
disconnect path binary matrix most one flip given indexed binary matrix grid can move from cell row col any cells row col or row col that has value matrix disconnected if there no path from can flip value most one possibly none cell cannot flip cells and return true if possible make matrix disconnect or false otherwise note that flipping cell changes its value from or from example input grid output true explanation can change cell shown diagram above there no path from resulting grid example input grid output false explanation not possible change most one cell such that there not path from constraints gridlength gridilength gridij either or grid gridm
find all possible recipes from given supplies have information about different recipes given string array recipes and string array ingredients ith recipe has name recipesi and can create if have all needed ingredients from ingredientsi ingredients recipe may need be created from other recipes ie ingredientsi may contain string that recipes also given string array supplies containing all ingredients that initially have and have infinite supply all them return list all recipes that can create may return answer any order note that two recipes may contain each other their ingredients example input recipes bread ingredients yeastflour supplies yeastflourcorn output bread explanation can create bread since have ingredients yeast and flour example input recipes breadsandwich ingredients yeastflourbreadmeat supplies yeastflourmeat output breadsandwich explanation can create bread since have ingredients yeast and flour can create sandwich since have ingredient meat and can create ingredient bread example input recipes breadsandwichburger ingredients yeastflourbreadmeatsandwichmeatbread supplies yeastflourmeat output breadsandwichburger explanation can create bread since have ingredients yeast and flour can create sandwich since have ingredient meat and can create ingredient bread can create burger since have ingredient meat and can create ingredients bread and sandwich constraints recipeslength ingredientslength ingredientsilength supplieslength recipesilength ingredientsijlength suppliesklength recipesi ingredientsij and suppliesk consist only lowercase english letters all values recipes and supplies combined unique each ingredientsi does not contain any duplicate values
hindex ii given array integers citations where citationsi number citations researcher received their ith paper and citations sorted ascending order return researchers hindex according definition hindex wikipedia hindex defined as maximum value such that given researcher has published least papers that have each been cited least times must write algorithm that runs logarithmic time example input citations output explanation means researcher has papers total and each them had received citations respectively since researcher has papers least citations each and remaining two no more than citations each their hindex example input citations output constraints citationslength citationsi citations sorted ascending order
longest mountain array may recall that array arr mountain array if and only if arrlength there exists some index indexed arrlength such that arr arr arri arri arri arri arrarrlength given integer array arr return length longest subarray which mountain return if there no mountain subarray example input arr output explanation largest mountain which has length example input arr output explanation there no mountain constraints arrlength arri follow up can solve using only one pass can solve space
prefix and suffix search design special dictionary that searches words prefix and suffix implement wordfilter class wordfilterstring words initializes object words dictionary fstring pref string suff returns index word dictionary which has prefix pref and suffix suff if there more than one valid index return largest them if there no such word dictionary return example input wordfilter apple output null explanation wordfilter wordfilter new wordfilterapple wordfilterfa return because word index has prefix and suffix constraints wordslength wordsilength preflength sufflength wordsi pref and suff consist lowercase english letters only most calls will be made function
strictly palindromic number integer strictly palindromic if every base between and inclusive string representation integer base palindromic given integer return true if strictly palindromic and false otherwise string palindromic if reads same forward and backward example input output false explanation base base which palindromic base base which not palindromic therefore not strictly palindromic so return false note that bases and also not palindromic example input output false explanation only consider base base which not palindromic therefore return false constraints
linked list cycle given head head linked list determine if linked list has cycle there cycle linked list if there some node list that can be reached again continuously following next pointer internally pos used denote index node that tails next pointer connected note that pos not passed as parameter return true if there cycle linked list otherwise return false example input head pos output true explanation there cycle linked list where tail connects st node indexed example input head pos output true explanation there cycle linked list where tail connects th node example input head pos output false explanation there no cycle linked list constraints number nodes list range nodeval pos or valid index linkedlist follow up can solve using ie constant memory
nondecreasing array given array nums integers your task check if could become nondecreasing modifying most one element define array nondecreasing if numsi numsi holds every based such that example input nums output true explanation could modify first get nondecreasing array example input nums output false explanation cannot get nondecreasing array modifying most one element constraints numslength numsi
weakest rows matrix given binary matrix mat representing soldiers and representing civilians soldiers positioned front civilians that all will appear left all each row row weaker than row if one following true number soldiers row less than number soldiers row both rows have same number soldiers and return indices weakest rows matrix ordered from weakest strongest example input mat output explanation number soldiers each row row row row row row rows ordered from weakest strongest example input mat output explanation number soldiers each row row row row row rows ordered from weakest strongest constraints matlength matilength matrixij either or
ways split array into three subarrays split integer array good if array split into three nonempty contiguous subarrays named left mid right respectively from left right sum elements left less than or equal sum elements mid and sum elements mid less than or equal sum elements right given nums array nonnegative integers return number good ways split nums as number may be too large return modulo example input nums output explanation only good way split nums example input nums output explanation there three good ways splitting nums example input nums output explanation there no good way split nums constraints numslength numsi
path zigzag labelled binary tree infinite binary tree where every node has two children nodes labelled row order odd numbered rows ie first third fifth labelling left right while even numbered rows second fourth sixth labelling right left given label node this tree return labels path from root tree node that label example input label output example input label output constraints label
reveal cards increasing order given integer array deck there deck cards where every card has unique integer integer ith card decki can order deck any order want initially all cards start face down unrevealed one deck will do following steps repeatedly until all cards revealed take top card deck reveal and take out deck if there still cards deck then put next top card deck bottom deck if there still unrevealed cards go back step otherwise stop return ordering deck that would reveal cards increasing order note that first entry answer considered be top deck example input deck output explanation get deck order this order does not matter and reorder after reordering deck starts as where top deck reveal and move bottom deck now reveal and move bottom deck now reveal and move bottom deck now reveal and move bottom deck now reveal and move bottom deck now reveal and move bottom deck now reveal since all cards revealed increasing order answer correct example input deck output constraints decklength decki all values deck unique
largest number given list nonnegative integers nums arrange them such that form largest number and return since result may be very large so need return string instead integer example input nums output example input nums output constraints numslength numsi
maximum or given indexed integer array nums length and integer operation can choose element and multiply return maximum possible value nums nums numsn that can be obtained after applying operation nums most times note that denotes bitwise or between two integers and example input nums output explanation if apply operation index our new array nums will be equal thus return bitwise or and which example input nums output explanation if apply operation twice index yield new array thus return constraints numslength numsi
find minimum rotated sorted array suppose array length sorted ascending order rotated between and times example array nums might become if rotated times if rotated times notice that rotating array time results array given sorted rotated array nums unique elements return minimum element this array must write algorithm that runs olog time example input nums output explanation original array rotated times example input nums output explanation original array and rotated times example input nums output explanation original array and rotated times constraints numslength numsi all integers nums unique nums sorted and rotated between and times
valid anagram given two strings and return true if anagram and false otherwise anagram word or phrase formed rearranging letters different word or phrase typically using all original letters exactly once example input anagram nagaram output true example input rat car output false constraints slength tlength and consist lowercase english letters follow up what if inputs contain unicode characters how would adapt your solution such case
maximum enemy forts that can be captured given indexed integer array forts length representing positions several forts fortsi can be or where represents there no fort ith position indicates there enemy fort ith position indicates fort ith position under your command now have decided move your army from one your forts position empty position such that army travels over enemy forts only formally all where minij maxij fortsk while moving army all enemy forts that come way captured return maximum number enemy forts that can be captured case impossible move your army or do not have any fort under your command return example input forts output explanation moving army from position position captures enemy forts and moving army from position position captures enemy forts since maximum number enemy forts that can be captured return example input forts output explanation since no enemy fort can be captured returned constraints fortslength fortsi
ipo suppose leetcode will start its ipo soon order sell good price its shares venture capital leetcode would like work some projects increase its capital before ipo since has limited resources can only finish most distinct projects before ipo help leetcode design best way maximize its total capital after finishing most distinct projects given projects where ith project has pure profit profitsi and minimum capital capitali needed start initially have capital when finish project will obtain its pure profit and profit will be added your total capital pick list most distinct projects from given projects maximize your final capital and return final maximized capital answer guaranteed fit bit signed integer example input profits capital output explanation since your initial capital can only start project indexed after finishing will obtain profit and your capital becomes capital can either start project indexed or project indexed since can choose most projects need finish project indexed get maximum capital therefore output final maximized capital which example input profits capital output constraints profitslength capitallength profitsi capitali
number operations make network connected there computers numbered from connected ethernet cables connections forming network where connectionsi ai bi represents connection between computers ai and bi any computer can reach any other computer directly or indirectly through network given initial computer network connections can extract certain cables between two directly connected computers and place them between any pair disconnected computers make them directly connected return minimum number times need do this order make all computers connected if not possible return example input connections output explanation remove cable between computer and and place between computers and example input connections output example input connections output explanation there not enough cables constraints connectionslength minn connectionsilength ai bi ai bi there no repeated connections no two computers connected more than one cable
shuffle array given array nums consisting elements form xxxnyyyn return array form xyxyxnyn example input nums output explanation since then answer example input nums output example input nums output constraints numslength numsi
count and say countandsay sequence sequence digit strings defined recursive formula countandsay countandsayn way would say digit string from countandsayn which then converted into different digit string determine how say digit string split into minimal number substrings such that each substring contains exactly one unique digit then each substring say number digits then say digit finally concatenate every said digit example saying and conversion digit string given positive integer return nth term countandsay sequence example input output explanation this base case example input output explanation countandsay countandsay say one countandsay say two countandsay say one one constraints
escape large maze there million million grid xyplane and coordinates each grid square start source sx sy square and want reach target tx ty square there also array blocked squares where each blockedi xi yi represents blocked square coordinates xi yi each move can walk one square north east south or west if square not array blocked squares also not allowed walk outside grid return true if and only if possible reach target square from source square through sequence valid moves example input blocked source target output false explanation target square inaccessible starting from source square because cannot move cannot move north or east because those squares blocked cannot move south or west because cannot go outside grid example input blocked source target output true explanation because there no blocked cells possible reach target square constraints blockedlength blockedilength xi yi sourcelength targetlength sx sy tx ty source target guaranteed that source and target not blocked
power heroes given indexed integer array nums representing strength some heroes power group heroes defined as follows let ik be indices heroes group then power this group maxnumsi numsi numsik minnumsi numsi numsik return sum power all nonempty groups heroes possible since sum could be very large return modulo example input nums output explanation st group has power nd group has power rd group has power th group has power th group has power th group has power th group has power sum powers all groups example input nums output explanation total groups possible and power each group will be therefore sum powers all groups constraints numslength numsi
path crossing given string path where pathi or each representing moving one unit north south east or west respectively start origin plane and walk path specified path return true if path crosses itself any point that if any time location have previously visited return false otherwise example input path nes output false explanation notice that path doesnt cross any point more than once example input path nesww output true explanation notice that path visits origin twice constraints pathlength pathi either or
guess number higher or lower playing guess game game as follows pick number from have guess which number picked every time guess wrong will tell whether number picked higher or lower than your guess call predefined api int guessint num which returns three possible results your guess higher than number picked ie num pick your guess lower than number picked ie num pick your guess equal number picked ie num pick return number that picked example input pick output example input pick output example input pick output constraints pick
replace elements greatest element right side given array arr replace every element that array greatest element among elements its right and replace last element after doing so return array example input arr output explanation index greatest element right index index index greatest element right index index index greatest element right index index index greatest element right index index index greatest element right index index index there no elements right index so put example input arr output explanation there no elements right index constraints arrlength arri
shortest distance character given string and character that occurs return array integers answer where answerlength slength and answeri distance from index closest occurrence character distance between two indices and absi where abs absolute value function example input loveleetcode output explanation character appears indices and indexed closest occurrence index index so distance abs closest occurrence index index so distance abs index there tie between index and index but distance still same abs abs closest occurrence index index so distance abs example input aaab output constraints slength si and lowercase english letters guaranteed that occurs least once
number equivalent domino pairs given list dominoes dominoesi equivalent dominoesj if and only if either and or and that one domino can be rotated be equal another domino return number pairs which dominoeslength and dominoesi equivalent dominoesj example input dominoes output example input dominoes output constraints dominoeslength dominoesilength dominoesij
logical or two binary grids represented as quadtrees binary matrix matrix which all elements either or given quadtree and quadtree quadtree represents binary matrix and quadtree represents another binary matrix return quadtree representing binary matrix which result logical bitwise or two binary matrixes represented quadtree and quadtree notice that can assign value node true or false when isleaf false and both accepted answer quadtree tree data structure which each internal node has exactly four children besides each node has two attributes val true if node represents grid or false if node represents grid isleaf true if node leaf node tree or false if node has four children class node public boolean val public boolean isleaf public node topleft public node topright public node bottomleft public node bottomright can construct quadtree from twodimensional area using following steps if current grid has same value ie all or all set isleaf true and set val value grid and set four children null and stop if current grid has different values set isleaf false and set val any value and divide current grid into four subgrids as shown photo recurse each children proper subgrid if want know more about quadtree can refer wiki quadtree format inputoutput represents serialized format quadtree using level order traversal where null signifies path terminator where no node exists below very similar serialization binary tree only difference that node represented as list isleaf val if value isleaf or val true represent as list isleaf val and if value isleaf or val false represent as example input quadtree quadtree nullnullnullnull output explanation quadtree and quadtree shown above can see binary matrix which represented each quadtree if apply logical bitwise or two binary matrices get binary matrix below which represented result quadtree notice that binary matrices shown only illustration dont have construct binary matrix get result tree example input quadtree quadtree output explanation each tree represents binary matrix size each matrix contains only zero resulting matrix size also zero constraints quadtree and quadtree both valid quadtrees each representing grid where
reverse vowels string given string reverse only all vowels string and return vowels and and can appear both lower and upper cases more than once example input hello output holle example input leetcode output leotcede constraints slength consist printable ascii characters
maximum binary string after change given binary string binary consisting only or can apply each following operations any number times operation if number contains substring can replace example operation if number contains substring can replace example return maximum binary string can obtain after any number operations binary string greater than binary string if xs decimal representation greater than ys decimal representation example input binary output explanation valid transformation sequence can be example input binary output explanation cannot be transformed any further constraints binarylength binary consist and
array wrapper create class arraywrapper that accepts array integers its constructor this class should have two features when two instances this class added together operator resulting value sum all elements both arrays when string function called instance will return comma separated string surrounded brackets example example input nums operation add output explanation const obj new arraywrapper const obj new arraywrapper obj obj example input nums operation string output explanation const obj new arraywrapper stringobj example input nums operation add output explanation const obj new arraywrapper const obj new arraywrapper obj obj constraints numslength numsi note nums array passed constructor
knight dialer chess knight has unique movement may move two squares vertically and one square horizontally or two squares horizontally and one square vertically both forming shape possible movements chess knight shown this diagaram chess knight can move as indicated chess diagram below have chess knight and phone pad as shown below knight can only stand numeric cell ie blue cell given integer return how many distinct phone numbers length can dial allowed place knight any numeric cell initially and then should perform jumps dial number length all jumps should be valid knight jumps as answer may be very large return answer modulo example input output explanation need dial number length so placing knight over any numeric cell cells sufficient example input output explanation all valid number can dial example input output explanation please take care mod constraints
maximum sum bst binary tree given binary tree root return maximum sum all keys any subtree which also binary search tree bst assume bst defined as follows left subtree node contains only nodes keys less than nodes key right subtree node contains only nodes keys greater than nodes key both left and right subtrees must also be binary search trees example input root nullnullnullnullnullnull output explanation maximum sum valid binary search tree obtained root node key equal example input root null output explanation maximum sum valid binary search tree obtained single root node key equal example input root output explanation all values negatives return empty bst constraints number nodes tree range nodeval
add two integers given two integers num and num return sum two integers example input num num output explanation num num and their sum so returned example input num num output explanation num num so returned constraints num num
remove duplicates from sorted array given integer array nums sorted nondecreasing order remove duplicates inplace such that each unique element appears only once relative order elements should be kept same then return number unique elements nums consider number unique elements nums be get accepted need do following things change array nums such that first elements nums contain unique elements order present nums initially remaining elements nums not important as well as size nums return custom judge judge will test your solution following code int nums input array int expectednums expected answer correct length int removeduplicatesnums calls your implementation assert expectednumslength int assert numsi expectednumsi if all assertions pass then your solution will be accepted example input nums output nums explanation your function should return first two elements nums being and respectively does not matter what leave beyond returned hence underscores example input nums output nums explanation your function should return first five elements nums being and respectively does not matter what leave beyond returned hence underscores constraints numslength numsi nums sorted nondecreasing order
integer replacement given positive integer can apply one following operations if even replace if odd replace either or return minimum number operations needed become example input output explanation example input output explanation or example input output constraints
number after double reversal reversing integer means reverse all its digits example reversing gives reversing gives as leading zeros not retained given integer num reverse num get reversed then reverse reversed get reversed return true if reversed equals num otherwise return false example input num output true explanation reverse num get then reverse get which equals num example input num output false explanation reverse num get then reverse get which does not equal num example input num output true explanation reverse num get then reverse get which equals num constraints num
maximum number points cost given integer matrix points indexed starting points want maximize number points can get from matrix gain points must pick one cell each row picking cell coordinates will add pointsrc your score however will lose points if pick cell too far from cell that picked previous row every two adjacent rows and where picking cells coordinates and will subtract absc from your score return maximum number points can achieve absx defined as example input points output explanation blue cells denote optimal cells pick which have coordinates and add your score however must subtract abs abs from your score your final score example input points output explanation blue cells denote optimal cells pick which have coordinates and add your score however must subtract abs abs from your score your final score constraints pointslength pointsrlength pointsrc
remove subfolders from filesystem given list folders folder return folders after removing all subfolders those folders may return answer any order if folderi located within another folderj called subfolder format path one or more concatenated strings form followed one or more lowercase english letters example leetcode and leetcodeproblems valid paths while empty string and not example input folder aabcdcdecf output acdcf explanation folders ab subfolder and cde inside folder cd our filesystem example input folder aabcabd output explanation folders abc and abd will be removed because subfolders example input folder abcabcaabd output abcabcaabd constraints folderlength folderilength folderi contains only lowercase letters and folderi always starts character each folder name unique
reverse words string given input string reverse order words word defined as sequence nonspace characters words will be separated least one space return string words reverse order concatenated single space note that may contain leading or trailing spaces or multiple spaces between two words returned string should only have single space separating words do not include any extra spaces example input sky blue output blue sky example input hello world output world hello explanation your reversed string should not contain leading or trailing spaces example input good example output example good explanation need reduce multiple spaces between two words single space reversed string constraints slength contains english letters uppercase and lowercase digits and spaces there least one word followup if string data type mutable your language can solve inplace extra space
magical string magical string consists only and and obeys following rules string magical because concatenating number contiguous occurrences characters and generates string itself first few elements  if group consecutive and will be and occurrences or each group can see that occurrence sequence itself given integer return number first number magical string example input output explanation first elements magical string and contains three so return example input output constraints
maximum sum hourglass given integer matrix grid define hourglass as part matrix following form return maximum sum elements hourglass note that hourglass cannot be rotated and must be entirely contained within matrix example input grid output explanation cells shown above represent hourglass maximum sum example input grid output explanation there only one hourglass matrix sum constraints gridlength gridilength gridij
binary gap given positive integer find and return longest distance between any two adjacent binary representation if there no two adjacent return two adjacent if there only separating them possibly no distance between two absolute difference between their bit positions example two have distance example input output explanation binary first adjacent pair distance second adjacent pair distance answer largest these two distances which note that not valid pair since there separating two underlined example input output explanation binary there not any adjacent pairs binary representation so return example input output explanation binary constraints
diagonal traverse given matrix mat return array all elements array diagonal order example input mat output example input mat output constraints matlength matilength matij
minimum garden perimeter collect enough apples garden represented as infinite grid there apple tree planted every integer coordinate apple tree planted integer coordinate has apples growing will buy axisaligned square plot land that centered given integer neededapples return minimum perimeter plot such that least neededapples apples inside or perimeter that plot value defined as if if example input neededapples output explanation square plot side length does not contain any apples however square plot side length has apples inside as depicted image above perimeter example input neededapples output example input neededapples output constraints neededapples
maximum product length two palindromic subsequences given string find two disjoint palindromic subsequences such that product their lengths maximized two subsequences disjoint if do not both pick character same index return maximum possible product lengths two palindromic subsequences subsequence string that can be derived from another string deleting some or no characters without changing order remaining characters string palindromic if reads same forward and backward example input leetcodecom output explanation optimal solution choose ete st subsequence and cdc nd subsequence product their lengths example input bb output explanation optimal solution choose first character st subsequence and second character nd subsequence product their lengths example input accbcaxxcxx output explanation optimal solution choose accca st subsequence and xxcxx nd subsequence product their lengths constraints slength consists lowercase english letters only
check if good array given array nums positive integers your task select some subset nums multiply each element integer and add all these numbers array said be good if can obtain sum from array any possible subset and multiplicand return true if array good otherwise return false example input nums output true explanation pick numbers and example input nums output true explanation pick numbers and example input nums output false constraints numslength numsi
positions large groups string lowercase letters these letters form consecutive groups same character example string like abbxxxxzyy has groups bb xxxx and yy group identified interval start end where start and end denote start and end indices inclusive group above example xxxx has interval group considered large if has or more characters return intervals every large group sorted increasing order start index example input abbxxxxzzy output explanation xxxx only large group start index and end index example input abc output explanation have groups and none which large groups example input abcdddeeeeaabbbcd output explanation large groups ddd eeee and bbb constraints slength contains lowercase english letters only
maximum product three numbers given integer array nums find three numbers whose product maximum and return maximum product example input nums output example input nums output example input nums output constraints numslength numsi
ransom note given two strings ransomnote and magazine return true if ransomnote can be constructed using letters from magazine and false otherwise each letter magazine can only be used once ransomnote example input ransomnote magazine output false example input ransomnote aa magazine ab output false example input ransomnote aa magazine aab output true constraints ransomnotelength magazinelength ransomnote and magazine consist lowercase english letters
decode xored permutation there integer array perm that permutation first positive integers where always odd encoded into another integer array encoded length such that encodedi permi xor permi example if perm then encoded given encoded array return original array perm guaranteed that answer exists and unique example input encoded output explanation if perm then encoded xor xor example input encoded output constraints odd encodedlength
curry given function fn return curried version that function curried function function that accepts fewer or equal number parameters as original function and returns either another curried function or same value original function would have returned practical terms if called original function like sum would call curried version like csum csum csum or csum all these methods calling curried function should return same value as original example input fn function suma return inputs output explanation code being executed const curriedsum curryfn curriedsum curriedsum should return same value as sum example input fn function suma return inputs output explanation curriedsum should return same value as sum example input fn function suma return inputs output explanation should be able pass parameters any way including all once or none all curriedsum should return same value as sum example input fn function life return inputs output explanation currying function that accepts zero parameters should effectively do nothing curriedlife constraints inputslength inputsij fnlength inputsflatlength fnlength function parameters explicitly defined
delete duplicate folders system due bug there many duplicate folders file system given array paths where pathsi array representing absolute path ith folder file system example one two three represents path onetwothree two folders not necessarily same level identical if contain same nonempty set identical subfolders and underlying subfolder structure folders do not need be root level be identical if two or more folders identical then mark folders as well as all their subfolders example folders and file structure below identical as well as their subfolders should all be marked ax axy az bx bxy bz however if file structure also included path bw then folders and would not be identical note that ax and bx would still be considered identical even added folder once all identical folders and their subfolders have been marked file system will delete all them file system only runs deletion once so any folders that become identical after initial deletion not deleted return array ans containing paths remaining folders after deleting all marked folders paths may be returned any order example input paths acdabcbda output dda explanation file structure as shown folders and and their subfolders marked deletion because both contain empty folder named example input paths acabcbabxabxywwy output ccbaab explanation file structure as shown folders abx and and their subfolders marked deletion because both contain empty folder named note that folders and identical after deletion but not deleted because not marked beforehand example input paths abcdca output ccdaab explanation all folders unique file system note that returned array can be different order as order does not matter constraints pathslength pathsilength pathsijlength sumpathsijlength pathij consists lowercase english letters no two paths lead same folder any folder not root level its parent folder will also be input
decode slanted ciphertext string originaltext encoded using slanted transposition cipher string encodedtext help matrix having fixed number rows rows originaltext placed first topleft bottomright manner blue cells filled first followed red cells then yellow cells and so until reach end originaltext arrow indicates order which cells filled all empty cells filled number columns chosen such that rightmost column will not be empty after filling originaltext encodedtext then formed appending all characters matrix rowwise fashion characters blue cells appended first encodedtext then red cells and so and finally yellow cells arrow indicates order which cells accessed example if originaltext cipher and rows then encode following manner blue arrows depict how originaltext placed matrix and red arrows denote order which encodedtext formed above example encodedtext ch ie pr given encoded string encodedtext and number rows rows return original string originaltext note originaltext does not have any trailing spaces test cases generated such that there only one possible originaltext example input encodedtext ch ie pr rows output cipher explanation this same example described problem description example input encodedtext iveo eed te olc rows output love leetcode explanation figure above denotes matrix that used encode originaltext blue arrows show how can find originaltext from encodedtext example input encodedtext coding rows output coding explanation since there only row both originaltext and encodedtext same constraints encodedtextlength encodedtext consists lowercase english letters and only encodedtext valid encoding some originaltext that does not have trailing spaces rows testcases generated such that there only one possible originaltext
minimum hours training win competition entering competition and given two positive integers initialenergy and initialexperience denoting your initial energy and initial experience respectively also given two indexed integer arrays energy and experience both length will face opponents order energy and experience ith opponent denoted energyi and experiencei respectively when face opponent need have both strictly greater experience and energy defeat them and move next opponent if available defeating ith opponent increases your experience experiencei but decreases your energy energyi before starting competition can train some number hours after each hour training can either choose increase your initial experience one or increase your initial energy one return minimum number training hours required defeat all opponents example input initialenergy initialexperience energy experience output explanation can increase your energy after hours training and your experience after hours training face opponents following order have more energy and experience than th opponent so win your energy becomes and your experience becomes have more energy and experience than st opponent so win your energy becomes and your experience becomes have more energy and experience than nd opponent so win your energy becomes and your experience becomes have more energy and experience than rd opponent so win your energy becomes and your experience becomes did total hours training before competition so return can be proven that no smaller answer exists example input initialenergy initialexperience energy experience output explanation do not need any additional energy or experience win competition so return constraints energylength experiencelength initialenergy initialexperience energyi experiencei
create target array given order given two arrays integers nums and index your task create target array under following rules initially target array empty from left right read numsi and indexi insert index indexi value numsi target array repeat previous step until there no elements read nums and index return target array guaranteed that insertion operations will be valid example input nums index output explanation nums index target example input nums index output explanation nums index target example input nums index output constraints numslength indexlength numslength indexlength numsi indexi
jewels and stones youre given strings jewels representing types stones that jewels and stones representing stones have each character stones type stone have want know how many stones have also jewels letters case sensitive so considered different type stone from example input jewels aa stones aaabbbb output example input jewels stones zz output constraints jewelslength stoneslength jewels and stones consist only english letters all characters jewels unique
middle linked list given head singly linked list return middle node linked list if there two middle nodes return second middle node example input head output explanation middle node list node example input head output explanation since list has two middle nodes values and return second one constraints number nodes list range nodeval
most frequent even element given integer array nums return most frequent even element if there tie return smallest one if there no such element return example input nums output explanation even elements and these and appear most return smallest one which example input nums output explanation even element appears most example input nums output explanation there no even element constraints numslength numsi
perfect number perfect number positive integer that equal sum its positive divisors excluding number itself divisor integer integer that can divide evenly given integer return true if perfect number otherwise return false example input num output true explanation and all divisors example input num output false constraints num
check if there valid path grid given grid each cell grid represents street street gridij can be which means street connecting left cell and right cell which means street connecting upper cell and lower cell which means street connecting left cell and lower cell which means street connecting right cell and lower cell which means street connecting left cell and upper cell which means street connecting right cell and upper cell will initially start street upperleft cell valid path grid path that starts from upper left cell and ends bottomright cell path should only follow streets notice that not allowed change any street return true if there valid path grid or false otherwise example input grid output true explanation as shown can start cell and visit all cells grid reach example input grid output false explanation as shown street cell not connected any street any other cell and will get stuck cell example input grid output false explanation will get stuck cell and cannot reach cell constraints gridlength gridilength gridij
course schedule iv there total numcourses courses have take labeled from numcourses given array prerequisites where prerequisitesi ai bi indicates that must take course ai first if want take course bi example pair indicates that have take course before can take course prerequisites can also be indirect if course prerequisite course and course prerequisite course then course prerequisite course also given array queries where queriesj uj vj jth query should answer whether course uj prerequisite course vj or not return boolean array answer where answerj answer jth query example input numcourses prerequisites queries output falsetrue explanation pair indicates that have take course before can take course course not prerequisite course but opposite true example input numcourses prerequisites queries output falsefalse explanation there no prerequisites and each course independent example input numcourses prerequisites queries output truetrue constraints numcourses prerequisiteslength numcourses numcourses prerequisitesilength ai bi ai bi all pairs ai bi unique prerequisites graph has no cycles querieslength ui vi ui vi
parsing boolean expression boolean expression expression that evaluates either true or false can be one following shapes that evaluates true that evaluates false subexpr that evaluates logical not inner expression subexpr subexpr subexpr subexprn that evaluates logical and inner expressions subexpr subexpr subexprn where subexpr subexpr subexprn that evaluates logical or inner expressions subexpr subexpr subexprn where given string expression that represents boolean expression return evaluation that expression guaranteed that given expression valid and follows given rules example input expression output false explanation first evaluate expression now then evaluate expression now finally return false example input expression ffft output true explanation evaluation false or false or false or true true example input expression ft output true explanation first evaluate ft false and true false expression now then evaluate not false true return true constraints expressionlength expressioni one following characters and
reverse prefix word given indexed string word and character ch reverse segment word that starts index and ends index first occurrence ch inclusive if character ch does not exist word do nothing example if word abcdefd and ch then should reverse segment that starts and ends inclusive resulting string will be dcbaefd return resulting string example input word abcdefd ch output dcbaefd explanation first occurrence index reverse part word from inclusive resulting string dcbaefd example input word xyxzxe ch output zxyxxe explanation first and only occurrence index reverse part word from inclusive resulting string zxyxxe example input word abcd ch output abcd explanation does not exist word should not do any reverse operation resulting string abcd constraints wordlength word consists lowercase english letters ch lowercase english letter
intersection two arrays given two integer arrays nums and nums return array their intersection each element result must be unique and may return result any order example input nums nums output example input nums nums output explanation also accepted constraints numslength numslength numsi numsi
stickers spell word given different types stickers each sticker has lowercase english word would like spell out given string target cutting individual letters from your collection stickers and rearranging them can use each sticker more than once if want and have infinite quantities each sticker return minimum number stickers that need spell out target if task impossible return note all test cases all words chosen randomly from most common us english words and target chosen as concatenation two random words example input stickers withexamplescience target thehat output explanation can use stickers and example sticker after cutting and rearrange letters those stickers can form target thehat also this minimum number stickers necessary form target string example input stickers noticepossible target basicbasic output explanation cannot form target basicbasic from cutting letters from given stickers constraints stickerslength stickersilength targetlength stickersi and target consist lowercase english letters
circular permutation binary representation given integers and start your task return any permutation such that start pi and pi differ only one bit their binary representation and pn must also differ only one bit their binary representation example input start output explanation binary representation permutation all adjacent element differ one bit another valid permutation example input start output explanation binary representation permutation constraints start
largest number after digit swaps parity given positive integer num may swap any two digits num that have same parity ie both odd digits or both even digits return largest possible value num after any number swaps example input num output explanation swap digit digit this results number swap digit digit this results number note that there may be other sequences swaps but can be shown that largest possible number also note that may not swap digit digit since different parities example input num output explanation swap digit digit this results number swap first digit digit this results number note that there may be other sequences swaps but can be shown that largest possible number constraints num
house robber iii thief has found himself new place his thievery again there only one entrance this area called root besides root each house has one and only one parent house after tour smart thief realized that all houses this place form binary tree will automatically contact police if two directlylinked houses broken into same night given root binary tree return maximum amount money thief can rob without alerting police example input root nullnull output explanation maximum amount money thief can rob example input root null output explanation maximum amount money thief can rob constraints number nodes tree range nodeval
append characters string make subsequence given two strings and consisting only lowercase english letters return minimum number characters that need be appended end so that becomes subsequence subsequence string that can be derived from another string deleting some or no characters without changing order remaining characters example input coaching coding output explanation append characters ding end so that coachingding now subsequence coachingding can be shown that appending any characters end will never make subsequence example input abcde output explanation already subsequence abcde example input abcde output explanation append characters abcde end so that zabcde now subsequence zabcde can be shown that appending any characters end will never make subsequence constraints slength tlength and consist only lowercase english letters
maximum number nonoverlapping palindrome substrings given string and positive integer select set nonoverlapping substrings from string that satisfy following conditions length each substring least each substring palindrome return maximum number substrings optimal selection substring contiguous sequence characters within string example input abaccdbbd output explanation can select substrings underlined abaccdbbd both aba and dbbd palindromes and have length least can be shown that cannot find selection more than two valid substrings example input adbcda output explanation there no palindrome substring length least string constraints slength consists lowercase english letters
insufficient nodes root leaf paths given root binary tree and integer limit delete all insufficient nodes tree simultaneously and return root resulting binary tree node insufficient if every root leaf path intersecting this node has sum strictly less than limit leaf node no children example input root limit output nullnullnull example input root nullnullnull limit output nullnullnullnull example input root nullnull limit output null constraints number nodes tree range nodeval limit
bag tokens have initial power power initial score and bag tokens where tokensi value ith token indexed your goal maximize your total score potentially playing each token one two ways if your current power least tokensi may play ith token face up losing tokensi power and gaining score if your current score least may play ith token face down gaining tokensi power and losing score each token may be played most once and any order do not have play all tokens return largest possible score can achieve after playing any number tokens example input tokens power output explanation playing only token bag impossible because either have too little power or too little score example input tokens power output explanation play th token face up your power becomes and score becomes there no need play st token since cannot play face up add your score example input tokens power output explanation play tokens this order get score play th token face up your power becomes and score becomes play rd token face down your power becomes and score becomes play st token face up your power becomes and score becomes play nd token face up your power becomes and score becomes constraints tokenslength tokensi power
next greater element next greater element some element array first greater element that right same array given two distinct indexed integer arrays nums and nums where nums subset nums each numslength find index such that numsi numsj and determine next greater element numsj nums if there no next greater element then answer this query return array ans length numslength such that ansi next greater element as described above example input nums nums output explanation next greater element each value nums as follows underlined nums there no next greater element so answer underlined nums next greater element underlined nums there no next greater element so answer example input nums nums output explanation next greater element each value nums as follows underlined nums next greater element underlined nums there no next greater element so answer constraints numslength numslength numsi numsi all integers nums and nums unique all integers nums also appear nums follow up could find onumslength numslength solution
tag validator given string representing code snippet implement tag validator parse code and return whether valid code snippet valid if all following rules hold code must be wrapped valid closed tag otherwise code invalid closed tag not necessarily valid has exactly following format tagnametagcontenttagname among them tagname start tag and tagname end tag tagname start and end tags should be same closed tag valid if and only if tagname and tagcontent valid valid tagname only contain uppercase letters and has length range otherwise tagname invalid valid tagcontent may contain other valid closed tags cdata and any characters see note except unmatched unmatched start and end tag and unmatched or closed tags invalid tagname otherwise tagcontent invalid start tag unmatched if no end tag exists same tagname and vice versa however also need consider issue unbalanced when tags nested unmatched if cannot find subsequent and when find or all subsequent characters until next should be parsed as tagname not necessarily valid cdata has following format cdatacdatacontent range cdatacontent defined as characters between cdata and first subsequent cdatacontent may contain any characters function cdata forbid validator parse cdatacontent so even has some characters that can be parsed as tag no matter valid or invalid should treat as regular characters example input code divthis first line cdatadivdiv output true explanation code wrapped closed tag div and div tagname valid tagcontent consists some characters and cdata although cdatacontent has unmatched start tag invalid tagname should be considered as plain text not parsed as tag so tagcontent valid and then code valid thus return true example input code div cdata cdatadivdiv output true explanation first separate code into starttagtagcontentendtag starttag div endtag div tagcontent could also be separated into textcdatatext text cdata cdata cdatadiv where cdatacontent div text reason why starttag not div because rule reason why cdata not cdatadiv because rule example input code output false explanation unbalanced if closed then must be unmatched and vice versa constraints codelength code consists english letters digits and
optimal division given integer array nums adjacent integers nums will perform float division example nums will evaluate expression however can add any number parenthesis any position change priority operations want add these parentheses such value expression after evaluation maximum return corresponding expression that has maximum value string format note your expression should not contain redundant parenthesis example input nums output explanation however bold parenthesis redundant since do not influence operation priority so should return other cases example input nums output explanation can be shown that after trying all possibilities cannot get expression evaluation greater than constraints numslength numsi there only one optimal division given input
valid parenthesis string given string containing only three types characters and return true if valid following rules define valid string any left parenthesis must have corresponding right parenthesis any right parenthesis must have corresponding left parenthesis left parenthesis must go before corresponding right parenthesis could be treated as single right parenthesis or single left parenthesis or empty string example input output true example input output true example input output true constraints slength si or
shuffle string given string and integer array indices same length string will be shuffled such that character ith position moves indicesi shuffled string return shuffled string example input codeleet indices output leetcode explanation as shown codeleet becomes leetcode after shuffling example input abc indices output abc explanation after shuffling each character remains its position constraints slength indiceslength consists only lowercase english letters indicesi all values indices unique
minimum jumps reach home certain bugs home xaxis position help them get there from position bug jumps according following rules can jump exactly positions forward right can jump exactly positions backward left cannot jump backward twice row cannot jump any forbidden positions bug may jump forward beyond its home but cannot jump positions numbered negative integers given array integers forbidden where forbiddeni means that bug cannot jump position forbiddeni and integers and return minimum number jumps needed bug reach its home if there no possible sequence jumps that lands bug position return example input forbidden output explanation jumps forward will get bug home example input forbidden output example input forbidden output explanation one jump forward then one jump backward will get bug home constraints forbiddenlength forbiddeni all elements forbidden distinct position not forbidden
hand straights alice has some number cards and wants rearrange cards into groups so that each group size groupsize and consists groupsize consecutive cards given integer array hand where handi value written ith card and integer groupsize return true if can rearrange cards or false otherwise example input hand groupsize output true explanation alices hand can be rearranged as example input hand groupsize output false explanation alices hand can not be rearranged into groups constraints handlength handi groupsize handlength note this question same as httpsleetcodecomproblemsdividearrayinsetsofkconsecutivenumbers
odd even linked list given head singly linked list group all nodes odd indices together followed nodes even indices and return reordered list first node considered odd and second node even and so note that relative order inside both even and odd groups should remain as input must solve problem extra space complexity and time complexity example input head output example input head output constraints number nodes linked list range nodeval
largest rectangle histogram given array integers heights representing histograms bar height where width each bar return area largest rectangle histogram example input heights output explanation above histogram where width each bar largest rectangle shown red area which has area units example input heights output constraints heightslength heightsi
longest subarray maximum bitwise and given integer array nums size consider nonempty subarray from nums that has maximum possible bitwise and other words let be maximum value bitwise and any subarray nums then only subarrays bitwise and equal should be considered return length longest such subarray bitwise and array bitwise and all numbers subarray contiguous sequence elements within array example input nums output explanation maximum possible bitwise and subarray longest subarray that value so return example input nums output explanation maximum possible bitwise and subarray longest subarray that value so return constraints numslength numsi
count total number colored cells there exists infinitely large twodimensional grid uncolored unit cells given positive integer indicating that must do following routine minutes first minute color any arbitrary unit cell blue every minute thereafter color blue every uncolored cell that touches blue cell below pictorial representation state grid after minutes and return number colored cells end minutes example input output explanation after minute there only blue cell so return example input output explanation after minutes there colored cells boundary and center so return constraints
binary tree maximum path sum path binary tree sequence nodes where each pair adjacent nodes sequence has edge connecting them node can only appear sequence most once note that path does not need pass through root path sum path sum nodes values path given root binary tree return maximum path sum any nonempty path example input root output explanation optimal path path sum example input root nullnull output explanation optimal path path sum constraints number nodes tree range nodeval
sum absolute differences sorted array given integer array nums sorted nondecreasing order build and return integer array result same length as nums such that resulti equal summation absolute differences between numsi and all other elements array other words resulti equal sumnumsinumsj where numslength and indexed example input nums output explanation assuming arrays indexed then result result result example input nums output constraints numslength numsi numsi
maximum score from performing multiplication operations given two indexed integer arrays nums and multipliers size and respectively where begin score want perform exactly operations ith operation indexed will choose one integer from either start or end array nums add multipliersi your score note that multipliers corresponds first operation multipliers second operation and so remove from nums return maximum score after performing operations example input nums multipliers output explanation optimal solution as follows choose from end adding score choose from end adding score choose from end adding score total score example input nums multipliers output explanation optimal solution as follows choose from start adding score choose from start adding score choose from start adding score choose from end adding score choose from end adding score total score constraints numslength multiplierslength numsi multipliersi
next greater element iv given indexed array nonnegative integers nums each integer nums must find its respective second greater integer second greater integer numsi numsj such that numsj numsi there exists exactly one index such that numsk numsi and if there no such numsj second greater integer considered be example array second greater integer and that and return integer array answer where answeri second greater integer numsi example input nums output explanation th index first integer greater than and second integer greater than right st index first and second integer greater than right nd index first and second integer greater than right rd index there no integer greater than its right so second greater integer considered be th index there no integer greater than its right so second greater integer considered be thus return example input nums output explanation return since neither integer has any integer greater than constraints numslength numsi
construct binary tree from preorder and postorder traversal given two integer arrays preorder and postorder where preorder preorder traversal binary tree distinct values and postorder postorder traversal same tree reconstruct and return binary tree if there exist multiple answers can return any them example input preorder postorder output example input preorder postorder output constraints preorderlength preorderi preorderlength all values preorder unique postorderlength preorderlength postorderi postorderlength all values postorder unique guaranteed that preorder and postorder preorder traversal and postorder traversal same binary tree
design add and search words data structure design data structure that supports adding new words and finding if string matches any previously added string implement worddictionary class worddictionary initializes object void addwordword adds word data structure can be matched later bool searchword returns true if there any string data structure that matches word or false otherwise word may contain dots where dots can be matched any letter example input worddictionaryaddwordaddwordaddwordsearchsearchsearchsearch baddadmadpadbadadb output nullnullnullnullfalsetruetruetrue explanation worddictionary worddictionary new worddictionary worddictionaryaddwordbad worddictionaryaddworddad worddictionaryaddwordmad worddictionarysearchpad return false worddictionarysearchbad return true worddictionarysearchad return true worddictionarysearchb return true constraints wordlength word addword consists lowercase english letters word search consist or lowercase english letters there will be most dots word search queries most calls will be made addword and search
minimum falling path sum ii given integer matrix grid return minimum sum falling path nonzero shifts falling path nonzero shifts choice exactly one element from each row grid such that no two elements chosen adjacent rows same column example input grid output explanation possible falling paths falling path smallest sum so answer example input grid output constraints gridlength gridilength gridij
delete characters make fancy string fancy string string where no three consecutive characters equal given string delete minimum possible number characters from make fancy return final string after deletion can be shown that answer will always be unique example input leeetcode output leetcode explanation remove from first group es create leetcode no three consecutive characters equal so return leetcode example input aaabaaaa output aabaa explanation remove from first group as create aabaaaa remove two as from second group as create aabaa no three consecutive characters equal so return aabaa example input aab output aab explanation no three consecutive characters equal so return aab constraints slength consists only lowercase english letters
maximize palindrome length from subsequences given two strings word and word want construct string following manner choose some nonempty subsequence subsequence from word choose some nonempty subsequence subsequence from word concatenate subsequences subsequence subsequence make string return length longest palindrome that can be constructed described manner if no palindromes can be constructed return subsequence string string that can be made deleting some possibly none characters from without changing order remaining characters palindrome string that reads same forward as well as backward example input word cacb word cbba output explanation choose ab from word and cba from word make abcba which palindrome example input word ab word ab output explanation choose ab from word and from word make aba which palindrome example input word aa word bb output explanation cannot construct palindrome from described method so return constraints wordlength wordlength word and word consist lowercase english letters
detect squares given stream points xy plane design algorithm that adds new points from stream into data structure duplicate points allowed and should be treated as different points given query point counts number ways choose three points from data structure such that three points and query point form axisaligned square positive area axisaligned square square whose edges all same length and either parallel or perpendicular xaxis and yaxis implement detectsquares class detectsquares initializes object empty data structure void addint point adds new point point data structure int countint point counts number ways form axisaligned squares point point as described above example input detectsquares add add add count count add count output null null null null null explanation detectsquares detectsquares new detectsquares detectsquaresadd detectsquaresadd detectsquaresadd detectsquarescount return can choose first second and third points detectsquarescount return query point cannot form square any points data structure detectsquaresadd adding duplicate points allowed detectsquarescount return can choose first second and third points first third and fourth points constraints pointlength most calls total will be made add and count
smallest range ii given integer array nums and integer each index where numslength change numsi be either numsi or numsi score nums difference between maximum and minimum elements nums return minimum score nums after changing values each index example input nums output explanation score maxnums minnums example input nums output explanation change nums be score maxnums minnums example input nums output explanation change nums be score maxnums minnums constraints numslength numsi
count elements strictly smaller and greater elements given integer array nums return number elements that have both strictly smaller and strictly greater element appear nums example input nums output explanation element has element strictly smaller than and element strictly greater than element has element strictly smaller than and element strictly greater than total there elements having both strictly smaller and strictly greater element appear nums example input nums output explanation element has element strictly smaller than and element strictly greater than since there two elements value total there elements having both strictly smaller and strictly greater element appear nums constraints numslength numsi
minimum falling path sum given array integers matrix return minimum sum any falling path through matrix falling path starts any element first row and chooses element next row that either directly below or diagonally leftright specifically next element from position row col will be row col row col or row col example input matrix output explanation there two falling paths minimum sum as shown example input matrix output explanation falling path minimum sum shown constraints matrixlength matrixilength matrixij
simplified fractions given integer return list all simplified fractions between and exclusive such that denominator lessthanorequalto can return answer any order example input output explanation only unique fraction denominator lessthanorequalto example input output example input output explanation not simplified fraction because can be simplified constraints
sudoku solver write program solve sudoku puzzle filling empty cells sudoku solution must satisfy all following rules each digits must occur exactly once each row each digits must occur exactly once each column each digits must occur exactly once each subboxes grid character indicates empty cells example input board output explanation input board shown above and only valid solution shown below constraints boardlength boardilength boardij digit or guaranteed that input board has only one solution
maximum earnings from taxi there points road driving your taxi points road labeled from direction going and want drive from point point make money picking up passengers cannot change direction taxi passengers represented indexed integer array rides where ridesi starti endi tipi denotes ith passenger requesting ride from point starti point endi who willing give tipi dollar tip each passenger pick up earn endi starti tipi dollars may only drive most one passenger time given and rides return maximum number dollars can earn picking up passengers optimally note may drop off passenger and pick up different passenger same point example input rides output explanation can pick up passenger earn dollars example input rides output explanation will pick up following passengers drive passenger from point point profit dollars drive passenger from point point profit dollars drive passenger from point point profit dollars earn dollars total constraints rideslength ridesilength starti endi tipi
relative sort array given two arrays arr and arr elements arr distinct and all elements arr also arr sort elements arr such that relative ordering items arr same as arr elements that do not appear arr should be placed end arr ascending order example input arr arr output example input arr arr output constraints arrlength arrlength arri arri all elements arr distinct each arri arr
set matrix zeroes given integer matrix matrix if element set its entire row and column must do place example input matrix output example input matrix output constraints matrixlength matrixlength matrixij follow up straightforward solution using omn space probably bad idea simple improvement uses om space but still not best solution could devise constant space solution
island perimeter given row col grid representing map where gridij represents land and gridij represents water grid cells connected horizontallyvertically not diagonally grid completely surrounded water and there exactly one island ie one or more connected land cells island doesnt have lakes meaning water inside isnt connected water around island one cell square side length grid rectangular width and height dont exceed determine perimeter island example input grid output explanation perimeter yellow stripes image above example input grid output example input grid output constraints row gridlength col gridilength row col gridij or there exactly one island grid
preimage size factorial zeroes function let fx be number zeroes end recall that and convention example because has no zeroes end while because has two zeroes end given integer return number nonnegative integers have property that fx example input output explanation and end zeroes example input output explanation there no such that ends zeroes example input output constraints
most profitable path tree there undirected tree nodes labeled from rooted node given integer array edges length where edgesi ai bi indicates that there edge between nodes ai and bi tree every node there gate also given array even integers amount where amounti represents price needed open gate node if amounti negative or cash reward obtained opening gate node otherwise game goes as follows initially alice node and bob node bob every second alice and bob each move adjacent node alice moves towards some leaf node while bob moves towards node every node along their path alice and bob either spend money open gate that node or accept reward note that if gate already open no price will be required nor will there be any cash reward if alice and bob reach node simultaneously share pricereward opening gate there other words if price open gate then both alice and bob pay each similarly if reward gate both them receive each if alice reaches leaf node stops moving similarly if bob reaches node stops moving note that these events independent each other return maximum net income alice can have if travels towards optimal leaf node example input edges bob amount output explanation above diagram represents given tree game goes as follows alice initially node bob node open gates their respective nodes alices net income now both alice and bob move node since reach here simultaneously open gate together and share reward alices net income becomes alice moves node since bob already opened its gate alices income remains unchanged bob moves node and stops moving alice moves node and opens gate there her net income becomes now neither alice nor bob can make any further moves and game ends not possible alice get higher net income example input edges bob amount output explanation alice follows path whereas bob follows path thus alice opens gate node only hence her net income constraints edgeslength edgesilength ai bi ai bi edges represents valid tree bob amountlength amounti even integer range
number good ways split string given string split called good if can split into two nonempty strings sleft and sright where their concatenation equal ie sleft sright and number distinct letters sleft and sright same return number good splits can make example input aacaba output explanation there ways split aacaba and them good acaba left string and right string contains and different letters respectively aa caba left string and right string contains and different letters respectively aac aba left string and right string contains and different letters respectively good split aaca ba left string and right string contains and different letters respectively good split aacab left string and right string contains and different letters respectively example input abcd output explanation split string as follows ab cd constraints slength consists only lowercase english letters
max chunks make sorted given integer array arr length that represents permutation integers range split arr into some number chunks ie partitions and individually sort each chunk after concatenating them result should equal sorted array return largest number chunks can make sort array example input arr output explanation splitting into two or more chunks will not return required result example splitting into will result which isnt sorted example input arr output explanation can split into two chunks such as however splitting into highest number chunks possible constraints arrlength arri all elements arr unique
find all duplicates array given integer array nums length where all integers nums range and each integer appears once or twice return array all integers that appears twice must write algorithm that runs time and uses only constant extra space example input nums output example input nums output example input nums output constraints numslength numsi each element nums appears once or twice
longer contiguous segments ones than zeros given binary string return true if longest contiguous segment strictly longer than longest contiguous segment or return false otherwise example longest continuous segment has length and longest continuous segment has length note that if there no then longest continuous segment considered have length same applies if there no example input output true explanation longest contiguous segment has length longest contiguous segment has length segment longer so return true example input output false explanation longest contiguous segment has length longest contiguous segment has length segment not longer so return false example input output false explanation longest contiguous segment has length longest contiguous segment has length segment not longer so return false constraints slength si either or
restore array program supposed print array integers program forgot print whitespaces and array printed as string digits and all know that all integers array range and there no leading zeros array given string and integer return number possible arrays that can be printed as using mentioned program since answer may be very large return modulo example input output explanation only possible array example input output explanation there cannot be array that printed this way and has all integer and example input output explanation possible arrays constraints slength consists only digits and does not contain leading zeros
count range sum given integer array nums and two integers lower and upper return number range sums that lie lower upper inclusive range sum si defined as sum elements nums between indices and inclusive where example input nums lower upper output explanation three ranges and and their respective sums example input nums lower upper output constraints numslength numsi lower upper answer guaranteed fit bit integer
can eat your favorite candy your favorite day given indexed array positive integers candiescount where candiescounti represents number candies ith type have also given array queries where queriesi favoritetypei favoritedayi dailycapi play game following rules start eating candies day cannot eat any candy type unless have eaten all candies type must eat least one candy per day until have eaten all candies construct boolean array answer such that answerlength querieslength and answeri true if can eat candy type favoritetypei day favoritedayi without eating more than dailycapi candies any day and false otherwise note that can eat different types candy same day provided that follow rule return constructed array answer example input candiescount queries output truefalsetrue explanation if eat candies type day and candies type day will eat candy type day can eat most candies each day if eat candies every day will eat candies type day and candies type and type day day can only eat candies type and type so cannot eat candy type day if eat candy each day will eat candy type day example input candiescount queries output falsetruetruefalsefalse constraints candiescountlength candiescounti querieslength queriesilength favoritetypei candiescountlength favoritedayi dailycapi
number restricted paths from first last node there undirected weighted connected graph given positive integer which denotes that graph has nodes labeled from and array edges where each edgesi ui vi weighti denotes that there edge between nodes ui and vi weight equal weighti path from node start node end sequence nodes zk such that start and zk end and there edge between zi and zi where distance path sum weights edges path let distancetolastnodex denote shortest distance path between node and node restricted path path that also satisfies that distancetolastnodezi distancetolastnodezi where return number restricted paths from node node since that number may be too large return modulo example input edges output explanation each circle contains node number black and its distancetolastnode value blue three restricted paths example input edges output explanation each circle contains node number black and its distancetolastnode value blue only restricted path constraints edgeslength edgesilength ui vi ui vi weighti there most one edge between any two nodes there least one path between any two nodes
minimum operations make all array elements equal given array nums consisting positive integers also given integer array queries size ith query want make all elements nums equal queriesi can perform following operation array any number times increase or decrease element array return array answer size where answeri minimum number operations make all elements nums equal queriesi note that after each query array reset its original state example input nums queries output explanation first query can do following operations decrease nums times so that nums decrease nums times so that nums decrease nums times so that nums so total number operations first query second query can do following operations increase nums times so that nums increase nums times so that nums decrease nums time so that nums decrease nums times so that nums so total number operations second query example input nums queries output explanation can increase each value array total number operations will be constraints numslength querieslength numsi queriesi
alphabet board path alphabet board start position corresponding character board here board abcde fghij klmno pqrst uvwxy as shown diagram below may make following moves moves our position up one row if position exists board moves our position down one row if position exists board moves our position left one column if position exists board moves our position right one column if position exists board adds character boardrc our current position answer here only positions that exist board positions letters them return sequence moves that makes our answer equal target minimum number moves may return any path that does so example input target leet output ddruurrrddd example input target code output rrddrruulr constraints targetlength target consists only english lowercase letters
count lattice points inside circle given integer array circles where circlesi xi yi ri represents center xi yi and radius ri ith circle drawn grid return number lattice points that present inside least one circle note lattice point point integer coordinates points that lie circumference circle also considered be inside example input circles output explanation figure above shows given circle lattice points present inside circle and and shown green other points such as and which shown red not considered inside circle hence number lattice points present inside least one circle example input circles output explanation figure above shows given circles there exactly lattice points which present inside least one circle some them and constraints circleslength circlesilength xi yi ri minxi yi
stepbystep directions from binary tree node another given root binary tree nodes each node uniquely assigned value from also given integer startvalue representing value start node and different integer destvalue representing value destination node find shortest path starting from node and ending node generate stepbystep directions such path as string consisting only uppercase letters and each letter indicates specific direction means go from node its left child node means go from node its right child node means go from node its parent node return stepbystep directions shortest path from node node example input root null startvalue destvalue output uurl explanation shortest path example input root startvalue destvalue output explanation shortest path constraints number nodes tree nodeval all values tree unique startvalue destvalue startvalue destvalue
number music playlists your music player contains different songs want listen goal songs not necessarily different during your trip avoid boredom will create playlist so that every song played least once song can only be played again only if other songs have been played given goal and return number possible playlists that can create since answer can be very large return modulo example input goal output explanation there possible playlists and example input goal output explanation there possible playlists and example input goal output explanation there possible playlists and constraints goal
maximum population year given integer array logs where each logsi birthi deathi indicates birth and death years ith person population some year number people alive during that year ith person counted year xs population if inclusive range birthi deathi note that person not counted year that die return earliest year maximum population example input logs output explanation maximum population and earliest year this population example input logs output explanation maximum population and had happened years and earlier year between them constraints logslength birthi deathi
count subarrays fixed bounds given integer array nums and two integers mink and maxk fixedbound subarray nums subarray that satisfies following conditions minimum value subarray equal mink maximum value subarray equal maxk return number fixedbound subarrays subarray contiguous part array example input nums mink maxk output explanation fixedbound subarrays and example input nums mink maxk output explanation every subarray nums fixedbound subarray there possible subarrays constraints numslength numsi mink maxk
find winner circular game there friends that playing game friends sitting circle and numbered from clockwise order more formally moving clockwise from ith friend brings ith friend and moving clockwise from nth friend brings st friend rules game as follows start st friend count next friends clockwise direction including friend started counting wraps around circle and may count some friends more than once last friend counted leaves circle and loses game if there still more than one friend circle go back step starting from friend immediately clockwise friend who just lost and repeat else last friend circle wins game given number friends and integer return winner game example input output explanation here steps game start friend count friends clockwise which friends and friend leaves circle next start friend count friends clockwise which friends and friend leaves circle next start friend count friends clockwise which friends and friend leaves circle next start friend count friends clockwise which friends and friend leaves circle only friend left so winner example input output explanation friends leave this order winner friend constraints follow up could solve this problem linear time constant space
count subtrees max distance between cities there cities numbered from given array edges size where edgesi ui vi represents bidirectional edge between cities ui and vi there exists unique path between each pair cities other words cities form tree subtree subset cities where every city reachable from every other city subset where path between each pair passes through only cities from subset two subtrees different if there city one subtree that not present other each from find number subtrees which maximum distance between any two cities subtree equal return array size where dth element indexed number subtrees which maximum distance between any two cities equal notice that distance between two cities number edges path between them example input edges output explanation subtrees subsets and have max distance subtrees subsets and have max distance no subtree has two nodes where max distance between them example input edges output example input edges output constraints edgeslength edgesilength ui vi all pairs ui vi distinct
beautiful array array nums length beautiful if nums permutation integers range every there no index where numsk numsi numsj given integer return any beautiful array nums length there will be least one valid answer given example input output example input output constraints
trapping rain water given nonnegative integers representing elevation map where width each bar compute how much water can trap after raining example input height output explanation above elevation map black section represented array this case units rain water blue section being trapped example input height output constraints heightlength heighti
defanging ip address given valid ipv ip address return defanged version that ip address defanged ip address replaces every period example input address output example input address output constraints given address valid ipv address
reverse bits reverse bits given bits unsigned integer note note that some languages such as java there no unsigned integer type this case both input and output will be given as signed integer type should not affect your implementation as integers internal binary representation same whether signed or unsigned java compiler represents signed integers using complement notation therefore example above input represents signed integer and output represents signed integer example input output explanation input binary string represents unsigned integer so return which its binary representation example input output explanation input binary string represents unsigned integer so return which its binary representation constraints input must be binary string length follow up if this function called many times how would optimize
seat reservation manager design system that manages reservation state seats that numbered from implement seatmanager class seatmanagerint initializes seatmanager object that will manage seats numbered from all seats initially available int reserve fetches smallestnumbered unreserved seat reserves and returns its number void unreserveint seatnumber unreserves seat given seatnumber example input seatmanager reserve reserve unreserve reserve reserve reserve reserve unreserve output null null null explanation seatmanager seatmanager new seatmanager initializes seatmanager seats seatmanagerreserve all seats available so return lowest numbered seat which seatmanagerreserve available seats so return lowest them which seatmanagerunreserve unreserve seat so now available seats seatmanagerreserve available seats so return lowest them which seatmanagerreserve available seats so return lowest them which seatmanagerreserve available seats so return lowest them which seatmanagerreserve only available seat seat so return seatmanagerunreserve unreserve seat so now available seats constraints seatnumber each call reserve guaranteed that there will be least one unreserved seat each call unreserve guaranteed that seatnumber will be reserved most calls total will be made reserve and unreserve
can make palindrome from substring given string and array queries where queriesi lefti righti ki may rearrange substring sleftirighti each query and then choose up ki them replace any lowercase english letter if substring possible be palindrome string after operations above result query true otherwise result false return boolean array answer where answeri result ith query queriesi note that each letter counted individually replacement so if example sleftirighti aaa and ki can only replace two letters also note that no query modifies initial string example input abcda queries output truefalsefalsetruetrue explanation queries substring palidrome queries substring bc not palidrome queries substring abcd not palidrome after replacing only character queries substring abcd could be changed abba which palidrome also this can be changed baab first rearrange bacd then replace cd ab queries substring abcda could be changed abcba which palidrome example input lyb queries output falsetrue constraints slength querieslength lefti righti slength ki slength consists lowercase english letters
grumpy bookstore owner there bookstore owner that has store open minutes every minute some number customers enter store given integer array customers length where customersi number customer that enters store start ith minute and all those customers leave after end that minute some minutes bookstore owner grumpy given binary array grumpy where grumpyi if bookstore owner grumpy during ith minute and otherwise when bookstore owner grumpy customers that minute not satisfied otherwise satisfied bookstore owner knows secret technique keep themselves not grumpy minutes consecutive minutes but can only use once return maximum number customers that can be satisfied throughout day example input customers grumpy minutes output explanation bookstore owner keeps themselves not grumpy last minutes maximum number customers that can be satisfied example input customers grumpy minutes output constraints customerslength grumpylength minutes customersi grumpyi either or
generate string characters that have odd counts given integer return string characters such that each character such string occurs odd number times returned string must contain only lowercase english letters if there multiples valid strings return any them example input output pppz explanation pppz valid string since character occurs three times and character occurs once note that there many other valid strings such as ohhh and love example input output xy explanation xy valid string since characters and occur once note that there many other valid strings such as ag and ur example input output holasss constraints
minimum number consecutive bit flips given binary array nums and integer kbit flip choosing subarray length from nums and simultaneously changing every subarray and every subarray return minimum number kbit flips required so that there no array if not possible return subarray contiguous part array example input nums output explanation flip nums then flip nums example input nums output explanation no matter how flip subarrays size cannot make array become example input nums output explanation flip numsnumsnums nums becomes flip numsnumsnums nums becomes flip numsnumsnums nums becomes constraints numslength numslength
maximum number balls box working ball factory where have balls numbered from lowlimit up highlimit inclusive ie highlimit lowlimit and infinite number boxes numbered from infinity your job this factory put each ball box number equal sum digits balls number example ball number will be put box number and ball number will be put box number given two integers lowlimit and highlimit return number balls box most balls example input lowlimit highlimit output explanation box number ball count box has most number balls balls example input lowlimit highlimit output explanation box number ball count boxes and have most number balls balls each example input lowlimit highlimit output explanation box number ball count box has most number balls balls constraints lowlimit highlimit
duplicate emails sql schema table person column name type id int email varchar id primary key column this table each row this table contains email emails will not contain uppercase letters write sql query report all duplicate emails note that its guaranteed that email field not null return result table any order query result format following example example input person table id email abcom cdcom abcom output email abcom explanation abcom repeated two times
maximum product word lengths given string array words return maximum value lengthwordi lengthwordj where two words do not share common letters if no such two words exist return example input words abcwbazfoobarxtfnabcdef output explanation two words can be abcw xtfn example input words aababcdcdbcdabcd output explanation two words can be ab cd example input words aaaaaaaaaa output explanation no such pair words constraints wordslength wordsilength wordsi consists only lowercase english letters
gcd sort array given integer array nums and can perform following operation any number times nums swap positions two elements numsi and numsj if gcdnumsi numsj where gcdnumsi numsj greatest common divisor numsi and numsj return true if possible sort nums nondecreasing order using above swap method or false otherwise example input nums output true explanation can sort performing following operations swap and because gcd nums swap and because gcd nums example input nums output false explanation impossible sort array because cannot be swapped any other element example input nums output true can sort performing following operations swap and because gcd nums swap and because gcd nums swap and because gcd nums constraints numslength numsi
split two strings make palindrome given two strings and same length choose index and split both strings same index splitting into two strings aprefix and asuffix where aprefix asuffix and splitting into two strings bprefix and bsuffix where bprefix bsuffix check if aprefix bsuffix or bprefix asuffix forms palindrome when split string into sprefix and ssuffix either ssuffix or sprefix allowed be empty example if abc then abc bc ab and abc valid splits return true if possible form palindrome string otherwise return false notice that denotes concatenation strings and example input output true explaination if either or palindromes answer true since can split following way aprefix asuffix bprefix bsuffix then aprefix bsuffix which palindrome example input xbdef xecab output false example input ulacfd jizalu output true explaination split them index aprefix ula asuffix cfd bprefix jiz bsuffix alu then aprefix bsuffix ula alu ulaalu which palindrome constraints alength blength alength blength and consist lowercase english letters
minimum score after removals tree there undirected connected tree nodes labeled from and edges given indexed integer array nums length where numsi represents value ith node also given integer array edges length where edgesi ai bi indicates that there edge between nodes ai and bi tree remove two distinct edges tree form three connected components pair removed edges following steps defined get xor all values nodes each three components respectively difference between largest xor value and smallest xor value score pair example say three components have node values and three xor values and largest xor value and smallest xor value score then return minimum score any possible pair edge removals given tree example input nums edges output explanation diagram above shows way make pair removals st component has nodes values its xor value nd component has node value its xor value rd component has node value its xor value score difference between largest and smallest xor value which can be shown that no other pair removals will obtain smaller score than example input nums edges output explanation diagram above shows way make pair removals st component has nodes values its xor value nd component has nodes values its xor value rd component has nodes values its xor value score difference between largest and smallest xor value which cannot obtain smaller score than constraints numslength numsi edgeslength edgesilength ai bi ai bi edges represents valid tree
stone game ix alice and bob continue their games stones there row stones and each stone has associated value given integer array stones where stonesi value ith stone alice and bob take turns alice starting first each turn player may remove any stone from stones player who removes stone loses if sum values all removed stones divisible bob will win automatically if there no remaining stones even if alices turn assuming both players play optimally return true if alice wins and false if bob wins example input stones output true explanation game will be played as follows turn alice can remove either stone turn bob removes remaining stone sum removed stones and divisible therefore bob loses and alice wins game example input stones output false explanation alice will remove only stone and sum values removed stones since all stones removed and sum values not divisible bob wins game example input stones output false explanation bob will always win one possible way bob win shown below turn alice can remove second stone value sum removed stones turn bob removes fifth stone value sum removed stones turn alices removes fourth stone value sum removed stones turn bob removes third stone value sum removed stones turn alice removes first stone value sum removed stones alice loses game because sum removed stones divisible bob wins game constraints stoneslength stonesi
letter tile possibilities have tiles where each tile has one letter tilesi printed return number possible nonempty sequences letters can make using letters printed those tiles example input tiles aab output explanation possible sequences aa ab ba aab aba baa example input tiles aaabbc output example input tiles output constraints tileslength tiles consists uppercase english letters
subsequence minimum score given two strings and allowed remove any number characters from string score string if no characters removed from string otherwise let left be minimum index among all removed characters let right be maximum index among all removed characters then score string right left return minimum possible score make subsequence subsequence string new string that formed from original string deleting some can be none characters without disturbing relative positions remaining characters ie ace subsequence abcde while aec not example input abacaba bzaa output explanation this example remove character index indexed string becomes baa which subsequence string abacaba and score can be proven that minimum score that can achieve example input cde xyz output explanation this example remove characters and indices and indexed string becomes which subsequence string cde and score can be proven that minimum score that can achieve constraints slength tlength and consist only lowercase english letters
building boxes have cubic storeroom where width length and height room all equal units asked place boxes this room where each box cube unit side length there however some rules placing boxes can place boxes anywhere floor if box placed top box then each side four vertical sides box must either be adjacent another box or wall given integer return minimum possible number boxes touching floor example input output explanation figure above placement three boxes these boxes placed corner room where corner left side example input output explanation figure above placement four boxes these boxes placed corner room where corner left side example input output explanation figure above placement ten boxes these boxes placed corner room where corner back side constraints
car fleet there cars going same destination along onelane road destination target miles away given two integer array position and speed both length where positioni position ith car and speedi speed ith car miles per hour car can never pass another car ahead but can catch up and drive bumper bumper same speed faster car will slow down match slower cars speed distance between these two cars ignored ie assumed have same position car fleet some nonempty set cars driving same position and same speed note that single car also car fleet if car catches up car fleet right destination point will still be considered as one car fleet return number car fleets that will arrive destination example input target position speed output explanation cars starting speed and speed become fleet meeting each other car starting does not catch up any other car so fleet itself cars starting speed and speed become fleet meeting each other fleet moves speed until reaches target note that no other cars meet these fleets before destination so answer example input target position speed output explanation there only one car hence there only one fleet example input target position speed output explanation cars starting speed and speed become fleet meeting each other fleet moves speed then fleet speed and car starting speed become one fleet meeting each other fleet moves speed until reaches target constraints positionlength speedlength target positioni target all values position unique speedi
decompress runlength encoded list given list nums integers representing list compressed runlength encoding consider each adjacent pair elements freq val numsi numsi each such pair there freq elements value val concatenated sublist concatenate all sublists from left right generate decompressed list return decompressed list example input nums output explanation first pair means have freq and val so generate array second pair means have freq and val so generate end concatenation example input nums output constraints numslength numslength numsi
kth distinct string array distinct string string that present only once array given array strings arr and integer return kth distinct string present arr if there fewer than distinct strings return empty string note that strings considered order which appear array example input arr dbcbca output explanation only distinct strings arr and appears st so st distinct string appears nd so nd distinct string since returned example input arr aaaaaa output aaa explanation all strings arr distinct so st string aaa returned example input arr aba output explanation only distinct string since there fewer than distinct strings return empty string constraints arrlength arrilength arri consists lowercase english letters
lexicographically smallest equivalent string given two strings same length and and string basestr say si and si equivalent characters example if abc and cde then have and equivalent characters follow usual rules any equivalence relation reflexivity symmetry implies transitivity and implies example given equivalency information from abc and cde acd and aab equivalent strings basestr eed and aab lexicographically smallest equivalent string basestr return lexicographically smallest equivalent string basestr using equivalency information from and example input parker morris basestr parser output makkek explanation based equivalency information and can group their characters as mp ao krs ei characters each group equivalent and sorted lexicographical order so answer makkek example input hello world basestr hold output hdld explanation based equivalency information and can group their characters as hw deo lr so only second letter basestr changed answer hdld example input leetcode programs basestr sourcecode output aauaaaaada explanation group equivalent characters and as aoersc lp gt and dm thus all letters basestr except and transformed answer aauaaaaada constraints slength slength basestr slength slength and basestr consist lowercase english letters
minimum operations make array equal ii given two integer arrays nums and nums equal length and integer can perform following operation nums choose two indexes and and increment numsi and decrement numsj other words numsi numsi and numsj numsj nums said be equal nums if all indices such that numsi numsi return minimum number operations required make nums equal nums if impossible make them equal return example input nums nums output explanation operations can transform nums nums st operation after applying operation nums nd operation after applying operation nums one can prove that impossible make arrays equal fewer operations example input nums nums output explanation can be proved that impossible make two arrays equal constraints numslength numslength numsi numsj
minimum ascii delete sum two strings given two strings and return lowest ascii sum deleted characters make two strings equal example input sea eat output explanation deleting from sea adds ascii value sum deleting from eat adds sum end both strings equal and minimum sum possible achieve this example input delete leet output explanation deleting dee from delete turn string into let adds sum deleting from leet adds sum end both strings equal let and answer if instead turned both strings into lee or eet would get answers or which higher constraints slength slength and consist lowercase english letters
search insert position given sorted array distinct integers and target value return index if target found if not return index where would be if inserted order must write algorithm olog runtime complexity example input nums target output example input nums target output example input nums target output constraints numslength numsi nums contains distinct values sorted ascending order target
minimum time remove all cars containing illegal goods given indexed binary string which represents sequence train cars si denotes that ith car does not contain illegal goods and si denotes that ith car does contain illegal goods as train conductor would like get rid all cars containing illegal goods can do any following three operations any number times remove train car from left end ie remove which takes unit time remove train car from right end ie remove sslength which takes unit time remove train car from anywhere sequence which takes units time return minimum time remove all cars containing illegal goods note that empty sequence cars considered have no cars containing illegal goods example input output explanation one way remove all cars containing illegal goods from sequence remove car from left end times time taken remove car from right end time taken remove car containing illegal goods found middle time taken this obtains total time alternative way remove car from left end times time taken remove car from right end times time taken this also obtains total time minimum time taken remove all cars containing illegal goods there no other ways remove them less time example input output explanation one way remove all cars containing illegal goods from sequence remove car from left end times time taken this obtains total time another way remove all cars containing illegal goods from sequence remove car containing illegal goods found middle time taken this obtains total time another way remove all cars containing illegal goods from sequence remove car from right end times time taken this obtains total time minimum time taken remove all cars containing illegal goods there no other ways remove them less time constraints slength si either or
check whether two strings almost equivalent two strings word and word considered almost equivalent if differences between frequencies each letter from between word and word most given two strings word and word each length return true if word and word almost equivalent or false otherwise frequency letter number times occurs string example input word aaaa word bccb output false explanation there as aaaa but as bccb difference which more than allowed example input word abcdeef word abaaacc output true explanation differences between frequencies each letter word and word most appears time word and times word difference appears time word and time word difference appears time word and times word difference appears time word and times word difference appears times word and times word difference appears time word and times word difference example input word cccddabba word babababab output true explanation differences between frequencies each letter word and word most appears times word and times word difference appears times word and times word difference appears times word and times word difference appears times word and times word difference constraints wordlength wordlength word and word consist only lowercase english letters
number even and odd bits given positive integer let even denote number even indices binary representation indexed value let odd denote number odd indices binary representation indexed value return integer array answer where answer even odd example input output explanation binary representation contains th and th indices there even and odd indices example input output explanation binary representation contains st index there even and odd indices constraints
string compression given array characters chars compress using following algorithm begin empty string each group consecutive repeating characters chars if groups length append character otherwise append character followed groups length compressed string should not be returned separately but instead be stored input character array chars note that group lengths that or longer will be split into multiple characters chars after done modifying input array return new length array must write algorithm that uses only constant extra space example input chars aabbccc output return and first characters input array should be abc explanation groups aa bb and ccc this compresses abc example input chars output return and first character input array should be explanation only group which remains uncompressed since its single character example input chars abbbbbbbbbbbb output return and first characters input array should be ab explanation groups and bbbbbbbbbbbb this compresses ab constraints charslength charsi lowercase english letter uppercase english letter digit or symbol
top frequent words given array strings words and integer return most frequent strings return answer sorted frequency from highest lowest sort words same frequency their lexicographical order example input words iloveleetcodeilovecoding output ilove explanation and love two most frequent words note that comes before love due lower alphabetical order example input words thedayissunnythethethesunnyisis output theissunnyday explanation sunny and day four most frequent words number occurrence being and respectively constraints wordslength wordsilength wordsi consists lowercase english letters range number unique wordsi followup could solve logk time and extra space
product sales analysis iii sql schema table sales column name type saleid int productid int year int quantity int price int saleid year primary key this table productid foreign key product table each row this table shows sale product productid certain year note that price per unit table product column name type productid int productname varchar productid primary key this table each row this table indicates product name each product write sql query that selects product id year quantity and price first year every product sold return resulting table any order query result format following example example input sales table saleid productid year quantity price product table productid productname nokia apple samsung output productid firstyear quantity price
sum mutated array closest target given integer array arr and target value target return integer value such that when change all integers larger than value given array be equal value sum array gets as close as possible absolute difference target case tie return minimum such integer notice that answer not neccesarilly number from arr example input arr target output explanation when using arr converts which sums and thats optimal answer example input arr target output example input arr target output constraints arrlength arri target
find minimum time finish all jobs given integer array jobs where jobsi amount time takes complete ith job there workers that can assign jobs each job should be assigned exactly one worker working time worker sum time takes complete all jobs assigned them your goal devise optimal assignment such that maximum working time any worker minimized return minimum possible maximum working time any assignment example input jobs output explanation assigning each person one job maximum time example input jobs output explanation assign jobs following way worker working time worker working time maximum working time constraints jobslength jobsi
maximize grid happiness given four integers introvertscount and extrovertscount have grid and there two types people introverts and extroverts there introvertscount introverts and extrovertscount extroverts should decide how many people want live grid and assign each them one grid cell note that do not have have all people living grid happiness each person calculated as follows introverts start happiness and lose happiness each neighbor introvert or extrovert extroverts start happiness and gain happiness each neighbor introvert or extrovert neighbors live directly adjacent cells north east south and west persons cell grid happiness sum each persons happiness return maximum possible grid happiness example input introvertscount extrovertscount output explanation assume grid indexed coordinates row column can put introvert cell and put extroverts cells and introvert happiness starting happiness neighbors extrovert happiness starting happiness neighbor extrovert happiness starting happiness neighbor grid happiness above figure shows grid this example each persons happiness introvert stays light green cell while extroverts live light purple cells example input introvertscount extrovertscount output explanation place two introverts and and extrovert introvert happiness starting happiness neighbor extrovert happiness starting happiness neighbors introvert happiness starting happiness neighbor grid happiness example input introvertscount extrovertscount output constraints introvertscount extrovertscount minm
find substring maximum cost given string string chars distinct characters and integer array vals same length as chars cost substring sum values each character substring cost empty string considered value character defined following way if character not string chars then its value its corresponding position indexed alphabet example value value and so value otherwise assuming index where character occurs string chars then its value valsi return maximum cost among all substrings string example input adaa chars vals output explanation value characters and and respectively substring maximum cost aa and its cost can be proven that maximum cost example input abc chars abc vals output explanation value characters and and respectively substring maximum cost empty substring and its cost can be proven that maximum cost constraints slength consist lowercase english letters charslength chars consist distinct lowercase english letters valslength charslength valsi
maximum ascending subarray sum given array positive integers nums return maximum possible sum ascending subarray nums subarray defined as contiguous sequence numbers array subarray numsl numsl numsr numsr ascending if all where numsi numsi note that subarray size ascending example input nums output explanation ascending subarray maximum sum example input nums output explanation ascending subarray maximum sum example input nums output explanation ascending subarray maximum sum constraints numslength numsi
maximum score from removing substrings given string and two integers and can perform two types operations any number times remove substring ab and gain points example when removing ab from cabxbae becomes cxbae remove substring ba and gain points example when removing ba from cabxbae becomes cabxe return maximum points can gain after applying above operations example input cdbcbbaaabab output explanation remove ba underlined cdbcbbaaabab now cdbcbbaaab and points added score remove ab underlined cdbcbbaaab now cdbcbbaa and points added score remove ba underlined cdbcbbaa now cdbcba and points added score remove ba underlined cdbcba now cdbc and points added score total score example input aabbaaxybbaabb output constraints slength consists lowercase english letters
root equals sum children given root binary tree that consists exactly nodes root its left child and its right child return true if value root equal sum values its two children or false otherwise example input root output true explanation values root its left child and its right child and respectively equal so return true example input root output false explanation values root its left child and its right child and respectively not equal so return false constraints tree consists only root its left child and its right child nodeval
fizz buzz multithreaded have four functions printfizz that prints word fizz console printbuzz that prints word buzz console printfizzbuzz that prints word fizzbuzz console and printnumber that prints given integer console given instance class fizzbuzz that has four functions fizz buzz fizzbuzz and number same instance fizzbuzz will be passed four different threads thread calls fizz that should output word fizz thread calls buzz that should output word buzz thread calls fizzbuzz that should output word fizzbuzz thread calls number that should only output integers modify given class output series fizz buzz where ith token indexed series fizzbuzz if divisible and fizz if divisible and not buzz if divisible and not or if not divisible or implement fizzbuzz class fizzbuzzint initializes object number that represents length sequence that should be printed void fizzprintfizz calls printfizz output fizz void buzzprintbuzz calls printbuzz output buzz void fizzbuzzprintfizzbuzz calls printfizzbuzz output fizzbuzz void numberprintnumber calls printnumber output numbers example input output fizzbuzzfizzfizzbuzzfizzfizzbuzz example input output fizzbuzz constraints
find subarrays equal sum given indexed integer array nums determine whether there exist two subarrays length equal sum note that two subarrays must begin different indices return true if these subarrays exist and false otherwise subarray contiguous nonempty sequence elements within array example input nums output true explanation subarrays elements and have same sum example input nums output false explanation no two subarrays size have same sum example input nums output true explanation subarrays numsnums and numsnums have same sum note that even though subarrays have same content two subarrays considered different because different positions original array constraints numslength numsi
minimize difference between target and chosen elements given integer matrix mat and integer target choose one integer from each row matrix such that absolute difference between target and sum chosen elements minimized return minimum absolute difference absolute difference between two numbers and absolute value example input mat target output explanation one possible choice choose from first row choose from second row choose from third row sum chosen elements which equals target so absolute difference example input mat target output explanation best possible choice choose from first row choose from second row choose from third row sum chosen elements and absolute difference example input mat target output explanation best choice choose from first row absolute difference constraints matlength matilength matij target
sum subsequence widths width sequence difference between maximum and minimum elements sequence given array integers nums return sum widths all nonempty subsequences nums since answer may be very large return modulo subsequence sequence that can be derived from array deleting some or no elements without changing order remaining elements example subsequence array example input nums output explanation subsequences corresponding widths sum these widths example input nums output constraints numslength numsi
determine if string halves alike given string even length split this string into two halves equal lengths and let be first half and be second half two strings alike if have same number vowels notice that contains uppercase and lowercase letters return true if and alike otherwise return false example input book output true explanation bo and ok has vowel and has vowel therefore alike example input textbook output false explanation text and book has vowel whereas has therefore not alike notice that vowel counted twice constraints slength slength even consists uppercase and lowercase letters
evaluate reverse polish notation given array strings tokens that represents arithmetic expression reverse polish notation evaluate expression return integer that represents value expression note that valid operators and each operand may be integer or another expression division between two integers always truncates toward zero there will not be any division zero input represents valid arithmetic expression reverse polish notation answer and all intermediate calculations can be represented bit integer example input tokens output explanation example input tokens output explanation example input tokens output explanation constraints tokenslength tokensi either operator or or integer range
minimum cost make least one valid path grid given grid each cell grid has sign pointing next cell should visit if currently this cell sign gridij can be which means go cell right ie go from gridij gridij which means go cell left ie go from gridij gridij which means go lower cell ie go from gridij gridi which means go upper cell ie go from gridij gridi notice that there could be some signs cells grid that point outside grid will initially start upper left cell valid path grid path that starts from upper left cell and ends bottomright cell following signs grid valid path does not have be shortest can modify sign cell cost can modify sign cell one time only return minimum cost make grid have least one valid path example input grid output explanation will start point path as follows change arrow down cost change arrow down cost change arrow down cost total cost example input grid output explanation can follow path from example input grid output constraints gridlength gridilength gridij
number ways cutting pizza given rectangular pizza represented as rows cols matrix containing following characters apple and empty cell and given integer have cut pizza into pieces using cuts each cut choose direction vertical or horizontal then choose cut position cell boundary and cut pizza into two pieces if cut pizza vertically give left part pizza person if cut pizza horizontally give upper part pizza person give last piece pizza last person return number ways cutting pizza such that each piece contains least one apple since answer can be huge number return this modulo example input pizza aaaa output explanation figure above shows three ways cut pizza note that pieces must contain least one apple example input pizza aaa output example input pizza aa output constraints rows cols rows pizzalength cols pizzailength pizza consists characters and only
check if string prefix array given string and array strings words determine whether prefix string words string prefix string words if can be made concatenating first strings words some positive no larger than wordslength return true if prefix string words or false otherwise example input iloveleetcode words iloveleetcodeapples output true explanation can be made concatenating love and leetcode together example input iloveleetcode words applesiloveleetcode output false explanation impossible make using prefix arr constraints wordslength wordsilength slength wordsi and consist only lowercase english letters
sum number and its reverse given nonnegative integer num return true if num can be expressed as sum any nonnegative integer and its reverse or false otherwise example input num output true explanation so return true example input num output false explanation cannot be expressed as sum nonnegative integer and its reverse so return false example input num output true explanation so return true note that when number reversed there may be leading zeros constraints num
sum even numbers after queries given integer array nums and array queries where queriesi vali indexi each query first apply numsindexi numsindexi vali then print sum even values nums return integer array answer where answeri answer ith query example input nums queries output explanation beginning array after adding nums array and sum even values after adding nums array and sum even values after adding nums array and sum even values after adding nums array and sum even values example input nums queries output constraints numslength numsi querieslength vali indexi numslength
maximum value coins from piles there piles coins table each pile consists positive number coins assorted denominations one move can choose any coin top any pile remove and add your wallet given list piles where pilesi list integers denoting composition ith pile from top bottom and positive integer return maximum total value coins can have your wallet if choose exactly coins optimally example input piles output explanation above diagram shows different ways can choose coins maximum total can obtain example input piles output explanation maximum total can be obtained if choose all coins from last pile constraints pileslength pilesij sumpilesilength
kth ancestor tree node given tree nodes numbered from form parent array parent where parenti parent ith node root tree node find kth ancestor given node kth ancestor tree node kth node path from that node root node implement treeancestor class treeancestorint int parent initializes object number nodes tree and parent array int getkthancestorint node int return kth ancestor given node node if there no such ancestor return example input treeancestor getkthancestor getkthancestor getkthancestor output null explanation treeancestor treeancestor new treeancestor treeancestorgetkthancestor returns which parent treeancestorgetkthancestor returns which grandparent treeancestorgetkthancestor returns because there no such ancestor constraints parentlength parent parenti all node there will be most queries
minimum cost tree from leaf values given array arr positive integers consider all binary trees such that each node has either or children values arr correspond values each leaf inorder traversal tree value each nonleaf node equal product largest leaf value its left and right subtree respectively among all possible binary trees considered return smallest possible sum values each nonleaf node guaranteed this sum fits into bit integer node leaf if and only if has zero children example input arr output explanation there two possible trees shown first has nonleaf node sum and second has nonleaf node sum example input arr output constraints arrlength arri guaranteed that answer fits into bit signed integer ie less than
keys and rooms there rooms labeled from and all rooms locked except room your goal visit all rooms however cannot enter locked room without having its key when visit room may find set distinct keys each key has number denoting which room unlocks and can take all them unlock other rooms given array rooms where roomsi set keys that can obtain if visited room return true if can visit all rooms or false otherwise example input rooms output true explanation visit room and pick up key then visit room and pick up key then visit room and pick up key then visit room since able visit every room return true example input rooms output false explanation can not enter room number since only key that unlocks that room constraints roomslength roomsilength sumroomsilength roomsij all values roomsi unique
find total time spent each employee sql schema table employees column name type empid int eventday date intime int outtime int empid eventday intime primary key this table table shows employees entries and exits office eventday day which this event happened intime minute which employee entered office and outtime minute which left office intime and outtime between and guaranteed that no two events same day intersect time and intime outtime write sql query calculate total time minutes spent each employee each day office note that within one day employee can enter and leave more than once time spent office single entry outtime intime return result table any order query result format following example example input employees table empid eventday intime outtime output day empid totaltime explanation employee has three events two day total and one day total employee has two events one day total and one day total
flip equivalent binary trees binary tree can define flip operation as follows choose any node and swap left and right child subtrees binary tree flip equivalent binary tree if and only if can make equal after some number flip operations given roots two binary trees root and root return true if two trees flip equivalent or false otherwise example input root nullnullnull root nullnullnullnullnull output true explanation flipped nodes values and example input root root output true example input root root output false constraints number nodes each tree range each tree will have unique node values range
first completely painted row or column given indexed integer array arr and integer matrix mat arr and mat both contain all integers range go through each index arr starting from index and paint cell mat containing integer arri return smallest index which either row or column will be completely painted mat example input arr mat output explanation moves shown order and both first row and second column matrix become fully painted arr example input arr mat output explanation second column becomes fully painted arr constraints matlength matilength arrlength arri matrc all integers arr unique all integers mat unique
remove max number edges keep graph fully traversable alice and bob have undirected graph nodes and three types edges type can be traversed alice only type can be traversed bob only type can be traversed both alice and bob given array edges where edgesi typei ui vi represents bidirectional edge type typei between nodes ui and vi find maximum number edges can remove so that after removing edges graph can still be fully traversed both alice and bob graph fully traversed alice and bob if starting from any node can reach all other nodes return maximum number edges can remove or return if alice and bob cannot fully traverse graph example input edges output explanation if remove edges and graph will still be fully traversable alice and bob removing any additional edge will not make so so maximum number edges can remove example input edges output explanation notice that removing any edge will not make graph fully traversable alice and bob example input edges output explanation current graph alice cannot reach node from other nodes likewise bob cannot reach therefore its impossible make graph fully traversable constraints edgeslength min edgesilength typei ui vi all tuples typei ui vi distinct
minimum time complete trips given array time where timei denotes time taken ith bus complete one trip each bus can make multiple trips successively that next trip can start immediately after completing current trip also each bus operates independently that trips one bus do not influence trips any other bus also given integer totaltrips which denotes number trips all buses should make total return minimum time required all buses complete least totaltrips trips example input time totaltrips output explanation time number trips completed each bus total number trips completed time number trips completed each bus total number trips completed time number trips completed each bus total number trips completed so minimum time needed all buses complete least trips example input time totaltrips output explanation there only one bus and will complete its first trip so minimum time needed complete trip constraints timelength timei totaltrips
escape spreading fire given indexed integer array grid size which represents field each cell has one three values represents grass represents fire represents wall that and fire cannot pass through situated topleft cell and want travel safehouse bottomright cell every minute may move adjacent grass cell after your move every fire cell will spread all adjacent cells that not walls return maximum number minutes that can stay your initial position before moving while still safely reaching safehouse if this impossible return if can always reach safehouse regardless minutes stayed return note that even if fire spreads safehouse immediately after have reached will be counted as safely reaching safehouse cell adjacent another cell if former directly north east south or west latter ie their sides touching example input grid output explanation figure above shows scenario where stay initial position minutes will still be able safely reach safehouse staying more than minutes will not allow safely reach safehouse example input grid output explanation figure above shows scenario where immediately move towards safehouse fire will spread any cell move towards and impossible safely reach safehouse thus returned example input grid output explanation figure above shows initial grid notice that fire contained walls and will always be able safely reach safehouse thus returned constraints gridlength gridilength gridij either or grid gridm
repeated substring pattern given string check if can be constructed taking substring and appending multiple copies substring together example input abab output true explanation substring ab twice example input aba output false example input abcabcabcabc output true explanation substring abc four times or substring abcabc twice constraints slength consists lowercase english letters
number ways reach position after exactly steps given two positive integers startpos and endpos initially standing position startpos infinite number line one step can move either one position left or one position right given positive integer return number different ways reach position endpos starting from startpos such that perform exactly steps since answer may be very large return modulo two ways considered different if order steps made not exactly same note that number line includes negative integers example input startpos endpos output explanation can reach position from exactly steps three ways can be proven that no other way possible so return example input startpos endpos output explanation impossible reach position from position exactly steps constraints startpos endpos
first letter appear twice given string consisting lowercase english letters return first letter appear twice note letter appears twice before another letter if second occurrence before second occurrence will contain least one letter that appears twice example input abccbaacz output explanation letter appears indexes and letter appears indexes and letter appears indexes and letter appears index letter first letter appear twice because out all letters index its second occurrence smallest example input abcdd output explanation only letter that appears twice so return constraints slength consists lowercase english letters has least one repeated letter
reconstruct row binary matrix given following details matrix columns and rows matrix binary matrix which means each element matrix can be or sum elements thupper row given as upper sum elements stlower row given as lower sum elements ith columnindexed colsumi where colsum given as integer array length your task reconstruct matrix upper lower and colsum return as integer array if there more than one valid solution any them will be accepted if no valid solution exists return empty array example input upper lower colsum output explanation and also correct answers example input upper lower colsum output example input upper lower colsum output constraints colsumlength upper lower colsumlength colsumi
simple bank system have been tasked writing program popular bank that will automate all its incoming transactions transfer deposit and withdraw bank has accounts numbered from initial balance each account stored indexed integer array balance th account having initial balance balancei execute all valid transactions transaction valid if given account numbers between and and amount money withdrawn or transferred from less than or equal balance account implement bank class banklong balance initializes object indexed integer array balance boolean transferint account int account long money transfers money dollars from account numbered account account numbered account return true if transaction successful false otherwise boolean depositint account long money deposit money dollars into account numbered account return true if transaction successful false otherwise boolean withdrawint account long money withdraw money dollars from account numbered account return true if transaction successful false otherwise example input bank withdraw transfer deposit transfer withdraw output null true true true false false explanation bank bank new bank bankwithdraw return true account has balance so valid withdraw account has banktransfer return true account has balance so valid transfer account has and account has bankdeposit return true valid deposit account account has banktransfer return false current balance account so invalid transfer from bankwithdraw return false invalid because account does not exist constraints balancelength account account account balancei money most calls will be made each function transfer deposit withdraw
intervals between identical elements given indexed array integers arr interval between two elements arr defined as absolute difference between their indices more formally interval between arri and arrj return array intervals length where intervalsi sum intervals between arri and each element arr same value as arri note absolute value example input arr output explanation index another found index index another found index index two more found indices and index another found index index another found index index two more found indices and index two more found indices and example input arr output explanation index two more found indices and index there only one array so its sum intervals identical elements index two more found indices and index two more found indices and constraints arrlength arri
find array concatenation value given indexed integer array nums concatenation two numbers number formed concatenating their numerals example concatenation concatenation value nums initially equal perform this operation until nums becomes empty if there exists more than one number nums pick first element and last element nums respectively and add value their concatenation concatenation value nums then delete first and last element from nums if one element exists add its value concatenation value nums then delete return concatenation value nums example input nums output explanation before performing any operation nums and concatenation value first operation pick first element and last element their concatenation and add concatenation value so becomes equal then delete them from nums so nums becomes equal second operation pick first element and last element their concatenation and add concatenation value so becomes equal then delete them from nums so nums becomes empty since concatenation value so answer example input nums output explanation before performing any operation nums and concatenation value first operation pick first element and last element their concatenation and add concatenation value so becomes equal then delete them from nums so nums becomes equal second operation pick first element and last element their concatenation and add concatenation value so becomes equal then delete them from nums so nums becomes equal third operation nums has only one element so pick and add concatenation value so becomes equal then delete from nums so nums become empty since concatenation value so answer constraints numslength numsi
divide intervals into minimum number groups given integer array intervals where intervalsi lefti righti represents inclusive interval lefti righti have divide intervals into one or more groups such that each interval exactly one group and no two intervals that same group intersect each other return minimum number groups need make two intervals intersect if there least one common number between them example intervals and intersect example input intervals output explanation can divide intervals into following groups group group group can be proven that not possible divide intervals into fewer than groups example input intervals output explanation none intervals overlap so can put all them one group constraints intervalslength intervalsilength lefti righti
longest palindrome given string which consists lowercase or uppercase letters return length longest palindrome that can be built those letters letters case sensitive example aa not considered palindrome here example input abccccdd output explanation one longest palindrome that can be built dccaccd whose length example input output explanation longest palindrome that can be built whose length constraints slength consists lowercase andor uppercase english letters only
plus one given large integer represented as integer array digits where each digitsi ith digit integer digits ordered from most significant least significant lefttoright order large integer does not contain any leading increment large integer one and return resulting array digits example input digits output explanation array represents integer incrementing one gives thus result should be example input digits output explanation array represents integer incrementing one gives thus result should be example input digits output explanation array represents integer incrementing one gives thus result should be constraints digitslength digitsi digits does not contain any leading
stone game vii alice and bob take turns playing game alice starting first there stones arranged row each players turn can remove either leftmost stone or rightmost stone from row and receive points equal sum remaining stones values row winner one higher score when there no stones left remove bob found that will always lose this game poor bob always loses so decided minimize scores difference alices goal maximize difference score given array integers stones where stonesi represents value ith stone from left return difference alice and bobs score if both play optimally example input stones output explanation alice removes and gets points alice bob stones bob removes and gets points alice bob stones alice removes and gets points alice bob stones bob removes and gets points alice bob stones alice removes and gets points alice bob stones score difference example input stones output constraints stoneslength stonesi
maximize minimum powered city given indexed integer array stations length where stationsi represents number power stations ith city each power station can provide power every city fixed range other words if range denoted then power station city can provide power all cities such that and note that denotes absolute value example and power city total number power stations being provided power from government has sanctioned building more power stations each which can be built any city and have same range as preexisting ones given two integers and return maximum possible minimum power city if additional power stations built optimally note that can build power stations multiple cities example input stations output explanation one optimal ways install both power stations city so stations will become city provided power stations city provided power stations city provided power stations city provided power stations city provided power stations so minimum power city since not possible obtain larger power return example input stations output explanation can be proved that cannot make minimum power city greater than constraints stationslength stationsi
design cancellable function sometimes have long running task and may wish cancel before completes help this goal write function cancellable that accepts generator object and returns array two values cancel function and promise may assume generator function will only yield promises your functions responsibility pass values resolved promise back generator if promise rejects your function should throw that error back generator if cancel callback called before generator done your function should throw error back generator that error should be string cancelled not error object if error caught returned promise should resolve next value that yielded or returned otherwise promise should reject thrown error no more code should be executed when generator done promise your function returned should resolve value generator returned if however generator throws error returned promise should reject error example how your code would be used function tasks const val yield new promiseresolve resolve yield new promiseresolve settimeoutresolve return val calculation shouldnt be done const cancel promise cancellabletasks settimeoutcancel promisecatchconsolelog logs cancelled tms if instead cancel not called or called after tms promise would have resolved example input generatorfunction function return cancelledat output resolved explanation const generator generatorfunction const cancel promise cancellablegenerator settimeoutcancel promisethenconsolelog resolves tms generator immediately yields and finishes because that returned promise immediately resolves note that cancelling finished generator does nothing example input generatorfunction function const msg yield new promiseres reshello throw error msg cancelledat null output rejected error hello explanation promise yielded function handles this waiting resolve and then passes resolved value back generator then error thrown which has effect causing promise reject same thrown error example input generatorfunction function yield new promiseres settimeoutres return success cancelledat output rejected cancelled explanation while function waiting yielded promise resolve cancel called this causes error message be sent back generator since this error uncaught returned promise rejected this error example input generatorfunction function let result yield new promiseres settimeoutres result yield new promiseres res yield new promiseres settimeoutres result yield new promiseres res return result cancelledat null output resolved explanation promises yielded two those promises have their values added result after ms generator finishes value and that value resolved returned promise example input generatorfunction function let result try yield new promiseres settimeoutres result yield new promiseres res yield new promiseres settimeoutres result yield new promiseres res catche return result return result cancelledat output resolved explanation first two yielded promises resolve and cause result increment however tms generator cancelled error sent generator caught and result returned and finally resolved returned promise example input generatorfunction function try yield new promiseresolve reject rejectpromise rejected catche let yield new promiseresolve resolve let yield new promiseresolve resolve return cancelledat null output resolved explanation first yielded promise immediately rejects this error caught because generator hasnt been cancelled execution continues as usual ends up resolving constraints cancelledat null or cancelledat generatorfunction returns generator object
minimum cost tickets have planned some train traveling one year advance days year which will travel given as integer array days each day integer from train tickets sold three different ways day pass sold costs dollars day pass sold costs dollars and day pass sold costs dollars passes allow that many days consecutive travel example if get day pass day then can travel days and return minimum number dollars need travel every day given list days example input days costs output explanation example here one way buy passes that lets travel your travel plan day bought day pass costs which covered day day bought day pass costs which covered days day bought day pass costs which covered day total spent and covered all days your travel example input days costs output explanation example here one way buy passes that lets travel your travel plan day bought day pass costs which covered days day bought day pass costs which covered day total spent and covered all days your travel constraints dayslength daysi days strictly increasing order costslength costsi
maximum length pair chain given array pairs pairs where pairsi lefti righti and lefti righti pair follows pair if chain pairs can be formed this fashion return length longest chain which can be formed do not need use up all given intervals can select pairs any order example input pairs output explanation longest chain example input pairs output explanation longest chain constraints pairslength lefti righti
find common characters given string array words return array all characters that show up all strings within words including duplicates may return answer any order example input words bellalabelroller output ell example input words coollockcook output co constraints wordslength wordsilength wordsi consists lowercase english letters
redistribute characters make all strings equal given array strings words indexed one operation pick two distinct indices and where wordsi nonempty string and move any character from wordsi any position wordsj return true if can make every string words equal using any number operations and false otherwise example input words abcaabcbc output true explanation move first words front words make words abc and words abc all strings now equal abc so return true example input words aba output false explanation impossible make all strings equal using operation constraints wordslength wordsilength wordsi consists lowercase english letters
maximum profit operating centennial wheel operator centennial wheel that has four gondolas and each gondola has room up four people have ability rotate gondolas counterclockwise which costs runningcost dollars given array customers length where customersi number new customers arriving just before ith rotation indexed this means must rotate wheel times before customersi customers arrive cannot make customers wait if there room gondola each customer pays boardingcost dollars when board gondola closest ground and will exit once that gondola reaches ground again can stop wheel any time including before serving all customers if decide stop serving customers all subsequent rotations free order get all customers down safely note that if there currently more than four customers waiting wheel only four will board gondola and rest will wait next rotation return minimum number rotations need perform maximize your profit if there no scenario where profit positive return example input customers boardingcost runningcost output explanation numbers written gondolas number people currently there customers arrive board and wait next gondola wheel rotates current profit customers arrive waiting board wheel and other wait wheel rotates current profit final customers board gondola wheel rotates current profit highest profit after rotating wheel times example input customers boardingcost runningcost output explanation customers arrive board and wait next gondola wheel rotates current profit customers arrive board and wait originally waiting newly waiting wheel rotates current profit final customers arrive board and wait wheel rotates current profit board and wait wheel rotates current profit board and wait wheel rotates current profit board and waits wheel rotates current profit boards wheel rotates current profit highest profit after rotating wheel times example input customers boardingcost runningcost output explanation customers arrive board and wait wheel rotates current profit customers arrive board and wait wheel rotates current profit customers arrive board and wait wheel rotates current profit customers arrive board and waits wheel rotates current profit customer arrives board and wait wheel rotates current profit profit never positive so return constraints customerslength customersi boardingcost runningcost
maximum units truck assigned put some amount boxes onto one truck given array boxtypes where boxtypesi numberofboxesi numberofunitsperboxi numberofboxesi number boxes type numberofunitsperboxi number units each box type also given integer trucksize which maximum number boxes that can be put truck can choose any boxes put truck as long as number boxes does not exceed trucksize return maximum total number units that can be put truck example input boxtypes trucksize output explanation there box first type that contains units boxes second type that contain units each boxes third type that contain unit each can take all boxes first and second types and one box third type total number units will be example input boxtypes trucksize output constraints boxtypeslength numberofboxesi numberofunitsperboxi trucksize
partition array into disjoint intervals given integer array nums partition into two contiguous subarrays left and right so that every element left less than or equal every element right left and right nonempty left has smallest possible size return length left after such partitioning test cases generated such that partitioning exists example input nums output explanation left right example input nums output explanation left right constraints numslength numsi there least one valid answer given input
solving questions brainpower given indexed integer array questions where questionsi pointsi brainpoweri array describes questions exam where have process questions order ie starting from question and make decision whether solve or skip each question solving question will earn pointsi points but will be unable solve each next brainpoweri questions if skip question get make decision next question example given questions if question solved will earn points but will be unable solve questions and if instead question skipped and question solved will earn points but will be unable solve questions and return maximum points can earn exam example input questions output explanation maximum points can be earned solving questions and solve question earn points will be unable solve next questions unable solve questions and solve question earn points total points earned there no other way earn or more points example input questions output explanation maximum points can be earned solving questions and skip question solve question earn points will be unable solve next questions unable solve questions and solve question earn points total points earned there no other way earn or more points constraints questionslength questionsilength pointsi brainpoweri
sum distances given indexed integer array nums there exists array arr length numslength where arri sum over all such that numsj numsi and if there no such set arri be return array arr example input nums output explanation when nums nums and nums nums therefore arr when arr because there no other index value when nums nums and nums nums therefore arr when nums nums and nums nums therefore arr when arr because there no other index value example input nums output explanation since each element nums distinct arri all constraints numslength numsi
nary tree level order traversal given nary tree return level order traversal its nodes values narytree input serialization represented their level order traversal each group children separated null value see examples example input root nullnull output example input root nullnullnullnullnullnullnullnullnullnullnull output constraints height nary tree less than or equal total number nodes between
construct lexicographically largest valid sequence given integer find sequence that satisfies all following integer occurs once sequence each integer between and occurs twice sequence every integer between and distance between two occurrences exactly distance between two numbers sequence ai and aj absolute difference their indices return lexicographically largest sequence guaranteed that under given constraints there always solution sequence lexicographically larger than sequence same length if first position where and differ sequence has number greater than corresponding number example lexicographically larger than because first position differ third number and greater than example input output explanation also valid sequence but lexicographically largest valid sequence example input output constraints
differences between two objects write function that accepts two deeply nested objects or arrays obj and obj and returns new object representing their differences function should compare properties two objects and identify any changes returned object should only contains keys where value different from obj obj each changed key value should be represented as array obj value obj value keys that exist one object but not other should not be included returned object when comparing two arrays indices arrays considered be their keys end result should be deeply nested object where each leaf value difference array may assume that both objects output jsonparse example input obj obj output explanation there no modifications made obj new keys and appear obj but keys that added or removed should be ignored example input obj null obj output null explanation keys and all had changes applied chnaged from changed from had change applied child object za changed from null example input obj obj output explanation obj and obj keys and have different assigned values ignored because value unchanged key there nested array arrays treated like objects where indices keys there two alterations array and and unchanged and thus not included and removed and thus not included example input obj obj output explanation key exists both objects since two associated values have different types placed difference array example input obj false obj false output explanation apart from different ordering keys two objects identical so empty object returned constraints jsonstringifyobjlength jsonstringifyobjlength
count sub islands given two binary matrices grid and grid containing only representing water and representing land island group connected directionally horizontal or vertical any cells outside grid considered water cells island grid considered subisland if there island grid that contains all cells that make up this island grid return number islands grid that considered subislands example input grid grid output explanation picture above grid left grid and grid right grid colored red grid those considered be part subisland there three subislands example input grid grid output explanation picture above grid left grid and grid right grid colored red grid those considered be part subisland there two subislands constraints gridlength gridlength gridilength gridilength gridij and gridij either or
minimum sideway jumps there lane road length that consists points labeled from frog starts point second lane and wants jump point however there could be obstacles along way given array obstacles length where each obstaclesi ranging from describes obstacle lane obstaclesi point if obstaclesi there no obstacles point there will be most one obstacle lanes each point example if obstacles then there obstacle lane point frog can only travel from point point same lane if there not obstacle lane point avoid obstacles frog can also perform side jump jump another lane even if not adjacent same point if there no obstacle new lane example frog can jump from lane point lane point return minimum number side jumps frog needs reach any lane point starting from lane point note there will be no obstacles points and example input obstacles output explanation optimal solution shown arrows above there side jumps red arrows note that frog can jump over obstacles only when making side jumps as shown point example input obstacles output explanation there no obstacles lane no side jumps required example input obstacles output explanation optimal solution shown arrows above there side jumps constraints obstacleslength obstaclesi obstacles obstaclesn
most visited sector circular track given integer and integer array rounds have circular track which consists sectors labeled from marathon will be held this track marathon consists rounds ith round starts sector roundsi and ends sector roundsi example round starts sector rounds and ends sector rounds return array most visited sectors sorted ascending order notice that circulate track ascending order sector numbers counterclockwise direction see first example example input rounds output explanation marathon starts sector order visited sectors as follows end round end round end round and marathon can see that both sectors and visited twice and most visited sectors sectors and visited only once example input rounds output example input rounds output constraints roundslength roundsi roundsi roundsi
min cost climbing stairs given integer array cost where costi cost ith step staircase once pay cost can either climb one or two steps can either start from step index or step index return minimum cost reach top floor example input cost output explanation will start index pay and climb two steps reach top total cost example input cost output explanation will start index pay and climb two steps reach index pay and climb two steps reach index pay and climb two steps reach index pay and climb one step reach index pay and climb two steps reach index pay and climb one step reach top total cost constraints costlength costi
number different subsequences gcds given array nums that consists positive integers gcd sequence numbers defined as greatest integer that divides all numbers sequence evenly example gcd sequence subsequence array sequence that can be formed removing some elements possibly none array example subsequence return number different gcds among all nonempty subsequences nums example input nums output explanation figure shows all nonempty subsequences and their gcds different gcds and example input nums output constraints numslength numsi
transpose file given text file filetxt transpose its content may assume that each row has same number columns and each field separated character example if filetxt has following content name age alice ryan output following name alice ryan age
maximum length concatenated string unique characters given array strings arr string formed concatenation subsequence arr that has unique characters return maximum possible length subsequence array that can be derived from another array deleting some or no elements without changing order remaining elements example input arr unique output explanation all valid concatenations un iq ue uniq un iq ique iq ue maximum length example input arr characters output explanation possible longest valid concatenations chaers cha ers and acters act ers example input arr abcdefghijklmnopqrstuvwxyz output explanation only string arr has all characters constraints arrlength arrilength arri contains only lowercase english letters
count complete tree nodes given root complete binary tree return number nodes tree according wikipedia every level except possibly last completely filled complete binary tree and all nodes last level as far left as possible can have between and nodes inclusive last level design algorithm that runs less than time complexity example input root output example input root output example input root output constraints number nodes tree range nodeval tree guaranteed be complete
maximum number integers choose from range given integer array banned and two integers and maxsum choosing some number integers following below rules chosen integers have be range each integer can be chosen most once chosen integers should not be array banned sum chosen integers should not exceed maxsum return maximum number integers can choose following mentioned rules example input banned maxsum output explanation can choose integers and and from range both did not appear banned and their sum which did not exceed maxsum example input banned maxsum output explanation cannot choose any integer while following mentioned conditions example input banned maxsum output explanation can choose integers and from range all did not appear banned and their sum which did not exceed maxsum constraints bannedlength bannedi maxsum
count ways build rooms ant colony ant tasked adding new rooms numbered your colony given expansion plan as indexed integer array length prevroom where prevroomi indicates that must build room prevroomi before building room and these two rooms must be connected directly room already built so prevroom expansion plan given such that once all rooms built every room will be reachable from room can only build one room time and can travel freely between rooms have already built only if connected can choose build any room as long as its previous room already built return number different orders can build all rooms since answer may be large return modulo example input prevroom output explanation there only one way build additional rooms example input prevroom output explanation ways constraints prevroomlength prevroom prevroomi all every room reachable from room once all rooms built
even odd tree binary tree named evenodd if meets following conditions root binary tree level index its children level index their children level index etc every evenindexed level all nodes level have odd integer values strictly increasing order from left right every oddindexed level all nodes level have even integer values strictly decreasing order from left right given root binary tree return true if binary tree evenodd otherwise return false example input root nullnullnull output true explanation node values each level level level level level since levels and all odd and increasing and levels and all even and decreasing tree evenodd example input root output false explanation node values each level level level level node values level must be strictly increasing order so tree not evenodd example input root output false explanation node values level should be even integers constraints number nodes tree range nodeval
shortest path alternating colors given integer number nodes directed graph where nodes labeled from each edge red or blue this graph and there could be selfedges and parallel edges given two arrays rededges and blueedges where rededgesi ai bi indicates that there directed red edge from node ai node bi graph and blueedgesj uj vj indicates that there directed blue edge from node uj node vj graph return array answer length where each answerx length shortest path from node node such that edge colors alternate along path or if such path does not exist example input rededges blueedges output example input rededges blueedges output constraints rededgeslength blueedgeslength rededgesilength blueedgesjlength ai bi uj vj
longest ideal subsequence given string consisting lowercase letters and integer call string ideal if following conditions satisfied subsequence string absolute difference alphabet order every two adjacent letters less than or equal return length longest ideal string subsequence string that can be derived from another string deleting some or no characters without changing order remaining characters note that alphabet order not cyclic example absolute difference alphabet order and not example input acfgbd output explanation longest ideal string acbd length this string so returned note that acfgbd not ideal because and have difference alphabet order example input abcd output explanation longest ideal string abcd length this string so returned constraints slength consists lowercase english letters
contiguous array given binary array nums return maximum length contiguous subarray equal number and example input nums output explanation longest contiguous subarray equal number and example input nums output explanation or longest contiguous subarray equal number and constraints numslength numsi either or
max sum pair equal sum digits given indexed array nums consisting positive integers can choose two indices and such that and sum digits number numsi equal that numsj return maximum value numsi numsj that can obtain over all possible indices and that satisfy conditions example input nums output explanation pairs that satisfy conditions both numbers have sum digits equal and their sum both numbers have sum digits equal and their sum so maximum sum that can obtain example input nums output explanation there no two numbers that satisfy conditions so return constraints numslength numsi
number good leaf nodes pairs given root binary tree and integer distance pair two different leaf nodes binary tree said be good if length shortest path between them less than or equal distance return number good leaf node pairs tree example input root null distance output explanation leaf nodes tree and and length shortest path between them this only good pair example input root distance output explanation good pairs and shortest path pair not good because length ther shortest path between them example input root nullnullnullnullnullnull distance output explanation only good pair constraints number nodes tree range nodeval distance
graph bipartite there undirected graph nodes where each node numbered between and given array graph where graphu array nodes that node adjacent more formally each graphu there undirected edge between node and node graph has following properties there no selfedges graphu does not contain there no parallel edges graphu does not contain duplicate values if graphu then graphv graph undirected graph may not be connected meaning there may be two nodes and such that there no path between them graph bipartite if nodes can be partitioned into two independent sets and such that every edge graph connects node set and node set return true if and only if bipartite example input graph output false explanation there no way partition nodes into two independent sets such that every edge connects node one and node other example input graph output true explanation can partition nodes into two sets and constraints graphlength graphulength graphui graphu does not contain all values graphu unique if graphu contains then graphv contains
find longest substring containing vowels even counts given string return size longest substring containing each vowel even number times that and must appear even number times example input eleetminicoworoep output explanation longest substring leetminicowor which contains two each vowels and and zero vowels and example input leetcodeisgreat output explanation longest substring leetc which contains two es example input bcbcbc output explanation this case given string bcbcbc longest because all vowels and appear zero times constraints slength contains only lowercase english letters
convert number hexadecimal given integer num return string representing its hexadecimal representation negative integers twos complement method used all letters answer string should be lowercase characters and there should not be any leading zeros answer except zero itself note not allowed use any builtin library method directly solve this problem example input num output example input num output ffffffff constraints num
cycle length queries tree given integer there complete binary tree nodes root that tree node value and every node value val range has two children where left node has value val and right node has value val also given integer array queries length where queriesi ai bi each query solve following problem add edge between nodes values ai and bi find length cycle graph remove added edge between nodes values ai and bi note that cycle path that starts and ends same node and each edge path visited only once length cycle number edges visited cycle there could be multiple edges between two nodes tree after adding edge query return array answer length where answeri answer ith query example input queries output explanation diagrams above show tree nodes nodes colored red describe nodes cycle after adding edge after adding edge between nodes and graph contains cycle nodes thus answer first query delete added edge and process next query after adding edge between nodes and graph contains cycle nodes thus answer second query delete added edge and process next query after adding edge between nodes and graph contains cycle nodes thus answer third query delete added edge example input queries output explanation diagram above shows tree nodes nodes colored red describe nodes cycle after adding edge after adding edge between nodes and graph contains cycle nodes thus answer first query delete added edge constraints querieslength queriesilength ai bi ai bi
string matching array given array string words return all strings words that substring another word can return answer any order substring contiguous sequence characters within string example input words massasherosuperhero output ashero explanation as substring mass and hero substring superhero heroas also valid answer example input words leetcodeetcode output etcode explanation et code substring leetcode example input words bluegreenbu output explanation no string words substring another string constraints wordslength wordsilength wordsi contains only lowercase english letters all strings words unique
matchsticks square given integer array matchsticks where matchsticksi length ith matchstick want use all matchsticks make one square should not break any stick but can link them up and each matchstick must be used exactly one time return true if can make this square and false otherwise example input matchsticks output true explanation can form square length one side square came two sticks length example input matchsticks output false explanation cannot find way form square all matchsticks constraints matchstickslength matchsticksi
count numbers unique digits given integer return count all numbers unique digits where example input output explanation answer should be total numbers range excluding example input output constraints
tiling rectangle fewest squares given rectangle size return minimum number integersided squares that tile rectangle example input output explanation squares necessary cover rectangle squares square example input output example input output constraints
minimum insertions balance parentheses string given parentheses string containing only characters and parentheses string balanced if any left parenthesis must have corresponding two consecutive right parenthesis left parenthesis must go before corresponding two consecutive right parenthesis other words treat as opening parenthesis and as closing parenthesis example and balanced and not balanced can insert characters and any position string balance if needed return minimum number insertions needed make balanced example input output explanation second has two matching but first has only matching need add one more end string be which balanced example input output explanation string already balanced example input output explanation add match first add match last constraints slength consists and only
most frequent number following key array given indexed integer array nums also given integer key which present nums every unique integer target nums count number times target immediately follows occurrence key nums other words count number indices such that numslength numsi key and numsi target return target maximum count test cases will be generated such that target maximum count unique example input nums key output explanation target there occurrences indices and which follow occurrence key no other integers follow occurrence key so return example input nums key output explanation target there occurrences indices and which follow occurrence key target there only one occurrence index which follows occurrence key target has maximum number occurrences following occurrence key so return constraints numslength numsi test cases will be generated such that answer unique
convert sorted array binary search tree given integer array nums where elements sorted ascending order convert heightbalanced binary search tree example input nums output null explanation nullnull also accepted example input nums output explanation null and both heightbalanced bsts constraints numslength numsi nums sorted strictly increasing order
number recent calls have recentcounter class which counts number recent requests within certain time frame implement recentcounter class recentcounter initializes counter zero recent requests int pingint adds new request time where represents some time milliseconds and returns number requests that has happened past milliseconds including new request specifically return number requests that have happened inclusive range guaranteed that every call ping uses strictly larger value than previous call example input recentcounter ping ping ping ping output null explanation recentcounter recentcounter new recentcounter recentcounterping requests range return recentcounterping requests range return recentcounterping requests range return recentcounterping requests range return constraints each test case will call ping strictly increasing values most calls will be made ping
number bits write function that takes binary representation unsigned integer and returns number bits has also known as hamming weight note note that some languages such as java there no unsigned integer type this case input will be given as signed integer type should not affect your implementation as integers internal binary representation same whether signed or unsigned java compiler represents signed integers using complement notation therefore example input represents signed integer example input output explanation input binary string has total three bits example input output explanation input binary string has total one bit example input output explanation input binary string has total thirty one bits constraints input must be binary string length follow up if this function called many times how would optimize
jump game iii given array nonnegative integers arr initially positioned start index array when index can jump arri or arri check if can reach any index value notice that can not jump outside array any time example input arr start output true explanation all possible ways reach index value index index index index index index index index index example input arr start output true explanation one possible way reach index value index index index index example input arr start output false explanation there no way reach index value constraints arrlength arri arrlength start arrlength
count good nodes binary tree given binary tree root node tree named good if path from root there no nodes value greater than return number good nodes binary tree example input root null output explanation nodes blue good root node always good node node maximum value path starting from root node maximum value path node maximum value path example input root null output explanation node not good because higher than example input root output explanation root considered as good constraints number nodes binary tree range each nodes value between
maximal score after applying operations given indexed integer array nums and integer have starting score one operation choose index such that numslength increase your score numsi and replace numsi ceilnumsi return maximum possible score can attain after applying exactly operations ceiling function ceilval least integer greater than or equal val example input nums output explanation apply operation each array element exactly once final score example input nums output explanation can do following operations operation select so nums becomes your score increases operation select so nums becomes your score increases operation select so nums becomes your score increases final score constraints numslength numsi
maximum average pass ratio there school that has classes students and each class will be having final exam given integer array classes where classesi passi totali know beforehand that ith class there totali total students but only passi number students will pass exam also given integer extrastudents there another extrastudents brilliant students that guaranteed pass exam any class assigned want assign each extrastudents students class way that maximizes average pass ratio across all classes pass ratio class equal number students class that will pass exam divided total number students class average pass ratio sum pass ratios all classes divided number classes return maximum possible average pass ratio after assigning extrastudents students answers within actual answer will be accepted example input classes extrastudents output explanation can assign two extra students first class average pass ratio will be equal example input classes extrastudents output constraints classeslength classesilength passi totali extrastudents
binary search tree iterator implement bstiterator class that represents iterator over inorder traversal binary search tree bst bstiteratortreenode root initializes object bstiterator class root bst given as part constructor pointer should be initialized nonexistent number smaller than any element bst boolean hasnext returns true if there exists number traversal right pointer otherwise returns false int next moves pointer right then returns number pointer notice that initializing pointer nonexistent smallest number first call next will return smallest element bst may assume that next calls will always be valid that there will be least next number inorder traversal when next called example input bstiterator next next hasnext next hasnext next hasnext next hasnext null null output null true true true false explanation bstiterator bstiterator new bstiterator null null bstiteratornext return bstiteratornext return bstiteratorhasnext return true bstiteratornext return bstiteratorhasnext return true bstiteratornext return bstiteratorhasnext return true bstiteratornext return bstiteratorhasnext return false constraints number nodes tree range nodeval most calls will be made hasnext and next follow up could implement next and hasnext run average time and use oh memory where height tree
modify graph edge weights given undirected weighted connected graph containing nodes labeled from and integer array edges where edgesi ai bi wi indicates that there edge between nodes ai and bi weight wi some edges have weight wi while others have positive weight wi your task modify all edges weight assigning them positive integer values range so that shortest distance between nodes source and destination becomes equal integer target if there multiple modifications that make shortest distance between source and destination equal target any them will be considered correct return array containing all edges even unmodified ones any order if possible make shortest distance from source destination equal target or empty array if its impossible note not allowed modify weights edges initial positive weights example input edges source destination target output explanation graph above shows possible modification edges making distance from equal example input edges source destination target output explanation graph above contains initial edges not possible make distance from equal modifying edge weight so empty array returned example input edges source destination target output explanation graph above shows modified graph having shortest distance from as constraints edgeslength edgesilength ai bi wi or wi ai bi source destination source destination target graph connected and there no selfloops or repeated edges
minimum nonzero product array elements given positive integer consider array nums indexed that consists integers inclusive range their binary representations allowed do following operation any number times choose two elements and from nums choose bit and swap its corresponding bit corresponding bit refers bit that same position other integer example if and after swapping nd bit from right have and find minimum nonzero product nums after performing above operation any number times return this product modulo note answer should be minimum product before modulo operation done example input output explanation nums there only one element so product equals that element example input output explanation nums any swap would either make product or stay same thus array product already minimized example input output explanation nums first operation can swap leftmost bit second and fifth elements resulting array second operation can swap middle bit third and fourth elements resulting array array product which minimum possible product constraints
make costs paths equal binary tree given integer representing number nodes perfect binary tree consisting nodes numbered from root tree node and each node tree has two children where left child node and right child each node tree also has cost represented given indexed integer array cost size where costi cost node allowed increment cost any node any number times return minimum number increments need make cost paths from root each leaf node equal note perfect binary tree tree where each node except leaf nodes has exactly children cost path sum costs nodes path example input cost output explanation can do following increments increase cost node one time increase cost node three times increase cost node two times each path from root leaf will have total cost total increments did can be shown that this minimum answer can achieve example input cost output explanation two paths already have equal total costs so no increments needed constraints power costlength costi
event emitter design eventemitter class this interface similar but some differences one found nodejs or event target interface dom eventemitter should allow subscribing events and emitting them your eventemitter class should have following two methods subscribe this method takes two arguments name event as string and callback function this callback function will later be called when event emitted event should be able have multiple listeners same event when emitting event multiple callbacks each should be called order which subscribed array results should be returned can assume no callbacks passed subscribe referentially identical subscribe method should also return object unsubscribe method that enables user unsubscribe when called callback should be removed from list subscriptions and undefined should be returned emit this method takes two arguments name event as string and optional array arguments that will be passed callbacks if there no callbacks subscribed given event return empty array otherwise return array results all callback calls order subscribed example input actions eventemitter emit subscribe subscribe emit values firstevent function cb return firstevent function cb return firstevent output emittedsubscribedsubscribedemitted explanation const emitter new eventemitter emitteremitfirstevent no callback subscribed yet emittersubscribefirstevent function cb return emittersubscribefirstevent function cb return emitteremitfirstevent returns output cb and cb example input actions eventemitter subscribe emit emit values firstevent function cbargs return argsjoin firstevent firstevent output subscribedemittedemitted explanation note that emit method should be able accept optional array arguents const emitter new eventemitter emittersubscribefirstevent function cbargs return argsjoin emitteremitfirstevent emitteremitfirstevent example input actions eventemitter subscribe emit unsubscribe emit values firstevent args argsjoin firstevent firstevent output subscribedemittedunsubscribedemitted explanation const emitter new eventemitter const sub emittersubscribefirstevent args argsjoin emitteremitfirstevent subunsubscribe undefined emitteremitfirstevent there no subscriptions constraints actionslength valueslength actionslength all test cases valid eg dont need handle scenarios when unsubscribing from nonexisting subscription there only different actions eventemitter emit subscribe and unsubscribe eventemitter action doesnt take any arguments emit action takes between either or arguments first argument name event want emit and nd argument passed callback functions subscribe action takes arguments where first one event name and second callback function unsubscribe action takes one argument which indexed order subscription made before
minimum total cost make arrays unequal given two indexed integer arrays nums and nums equal length one operation can swap values any two indices nums cost this operation sum indices find minimum total cost performing given operation any number times such that numsi numsi all after performing all operations return minimum total cost such that nums and nums satisfy above condition case not possible return example input nums nums output explanation one ways can perform operations swap values indices and incurring cost now nums swap values indices and incurring cost now nums swap values indices and incurring cost now nums can see that each index numsi numsi cost required here note that there other ways swap values but can be proven that not possible obtain cost less than example input nums nums output explanation one ways can perform operations swap values indices and incurring cost now nums swap values indices and incurring cost now nums total cost needed here which minimum possible example input nums nums output explanation can be shown that not possible satisfy given conditions irrespective number operations perform hence return constraints numslength numslength numsi numsi
design stack increment operation design stack that supports increment operations its elements implement customstack class customstackint maxsize initializes object maxsize which maximum number elements stack void pushint adds top stack if stack has not reached maxsize int pop pops and returns top stack or if stack empty void incint int val increments bottom elements stack val if there less than elements stack increment all elements stack example input customstackpushpushpoppushpushpushincrementincrementpoppoppoppop output nullnullnullnullnullnullnullnull explanation customstack stk new customstack stack empty stkpush stack becomes stkpush stack becomes stkpop return return top stack stack becomes stkpush stack becomes stkpush stack becomes stkpush stack still do not add another elements as size stkincrement stack becomes stkincrement stack becomes stkpop return return top stack stack becomes stkpop return return top stack stack becomes stkpop return return top stack stack becomes stkpop return stack empty return constraints maxsize val most calls will be made each method increment push and pop each separately
check distances between same letters given indexed string consisting only lowercase english letters where each letter appears exactly twice also given indexed integer array distance length each letter alphabet numbered from ie wellspaced string number letters between two occurrences ith letter distancei if ith letter does not appear then distancei can be ignored return true if wellspaced string otherwise return false example input abaccb distance output true explanation appears indices and so satisfies distance appears indices and so satisfies distance appears indices and so satisfies distance note that distance but since does not appear can be ignored return true because wellspaced string example input aa distance output false explanation appears indices and so there zero letters between them because distance not wellspaced string constraints slength consists only lowercase english letters each letter appears exactly twice distancelength distancei
difference between ones and zeros row and column given indexed binary matrix grid indexed difference matrix diff created following procedure let number ones ith row be onesrowi let number ones jth column be onescolj let number zeros ith row be zerosrowi let number zeros jth column be zeroscolj diffij onesrowi onescolj zerosrowi zeroscolj return difference matrix diff example input grid output explanation diff onesrow onescol zerosrow zeroscol diff onesrow onescol zerosrow zeroscol diff onesrow onescol zerosrow zeroscol diff onesrow onescol zerosrow zeroscol diff onesrow onescol zerosrow zeroscol diff onesrow onescol zerosrow zeroscol diff onesrow onescol zerosrow zeroscol diff onesrow onescol zerosrow zeroscol diff onesrow onescol zerosrow zeroscol example input grid output explanation diff onesrow onescol zerosrow zeroscol diff onesrow onescol zerosrow zeroscol diff onesrow onescol zerosrow zeroscol diff onesrow onescol zerosrow zeroscol diff onesrow onescol zerosrow zeroscol diff onesrow onescol zerosrow zeroscol constraints gridlength gridilength gridij either or
validate ip address given string queryip return ipv if ip valid ipv address ipv if ip valid ipv address or neither if ip not correct ip any type valid ipv address ip form xxxx where xi and xi cannot contain leading zeros example and valid ipv addresses while and invalid ipv addresses valid ipv address ip form xxxxxxxx where xilength xi hexadecimal string which may contain digits lowercase english letter and uppercase english letters leading zeros allowed xi example dbaae and dbaae valid ipv addresses while dbaaej and dbaae invalid ipv addresses example input queryip output ipv explanation this valid ipv address return ipv example input queryip dbaae output ipv explanation this valid ipv address return ipv example input queryip output neither explanation this neither ipv address nor ipv address constraints queryip consists only english letters digits and characters and
largest substring between two equal characters given string return length longest substring between two equal characters excluding two characters if there no such substring return substring contiguous sequence characters within string example input aa output explanation optimal substring here empty substring between two as example input abca output explanation optimal substring here bc example input cbzxy output explanation there no characters that appear twice constraints slength contains only lowercase english letters
loud and rich there group people labeled from where each person has different amount money and different level quietness given array richer where richeri ai bi indicates that ai has more money than bi and integer array quiet where quieti quietness ith person all given data richer logically correct ie data will not lead situation where richer than and richer than same time return integer array answer where answerx if least quiet person that person smallest value quiety among all people who definitely have equal or more money than person example input richer quiet output explanation answer person has more money than which has more money than which has more money than only person who quieter has lower quietx person but not clear if have more money than person answer among all people that definitely have equal or more money than person which could be persons or person who quietest has lower quietx person other answers can be filled out similar reasoning example input richer quiet output constraints quietlength quieti all values quiet unique richerlength ai bi ai bi all pairs richer unique observations richer all logically consistent
sum left leaves given root binary tree return sum all left leaves leaf node no children left leaf leaf that left child another node example input root nullnull output explanation there two left leaves binary tree values and respectively example input root output constraints number nodes tree range nodeval
binary tree pruning given root binary tree return same tree where every subtree given tree not containing has been removed subtree node node node plus every node that descendant node example input root null output nullnull explanation only red nodes satisfy property every subtree not containing diagram right represents answer example input root output nullnull example input root output null constraints number nodes tree range nodeval either or
matrix cells distance order given four integers row cols rcenter and ccenter there rows cols matrix and cell coordinates rcenter ccenter return coordinates all cells matrix sorted their distance from rcenter ccenter from smallest distance largest distance may return answer any order that satisfies this condition distance between two cells and example input rows cols rcenter ccenter output explanation distances from other cells example input rows cols rcenter ccenter output explanation distances from other cells answer would also be accepted as correct example input rows cols rcenter ccenter output explanation distances from other cells there other answers that would also be accepted as correct such as constraints rows cols rcenter rows ccenter cols
sum subarray minimums given array integers arr find sum minb where ranges over every contiguous subarray arr since answer may be large return answer modulo example input arr output explanation subarrays minimums sum example input arr output constraints arrlength arri
add binary given two binary strings and return their sum as binary string example input output example input output constraints alength blength and consist only or characters each string does not contain leading zeros except zero itself
reducing dishes chef has collected data satisfaction level his dishes chef can cook any dish unit time liketime coefficient dish defined as time taken cook that dish including previous dishes multiplied its satisfaction level ie timei satisfactioni return maximum sum liketime coefficient that chef can obtain after dishes preparation dishes can be prepared any order and chef can discard some dishes get this maximum value example input satisfaction output explanation after removing second and last dish maximum total liketime coefficient will be equal each dish prepared one unit time example input satisfaction output explanation dishes can be prepared any order example input satisfaction output explanation people do not like dishes no dish prepared constraints satisfactionlength satisfactioni
summary ranges given sorted unique integer array nums range ab set all integers from inclusive return smallest sorted list ranges that cover all numbers array exactly that each element nums covered exactly one ranges and there no integer such that one ranges but not nums each range ab list should be output as ab if if example input nums output explanation ranges example input nums output explanation ranges constraints numslength numsi all values nums unique nums sorted ascending order
sum matrix given indexed integer array nums initially your score perform following operations until matrix becomes empty from each row matrix select largest number and remove case tie does not matter which number chosen identify highest number amongst all those removed step add that number your score return final score example input nums output explanation first operation remove and then add our score next remove and add our score lastly remove and add our score thus our final score example input nums output explanation remove and add answer return constraints numslength numsilength numsij
find minimum number fibonacci numbers whose sum given integer return minimum number fibonacci numbers whose sum equal same fibonacci number can be used multiple times fibonacci numbers defined as fn fn fn guaranteed that given constraints can always find such fibonacci numbers that sum up example input output explanation fibonacci numbers can use example input output explanation can use example input output explanation can use constraints
ugly number ugly number positive integer whose prime factors limited and given integer return true if ugly number example input output true explanation example input output true explanation has no prime factors therefore all its prime factors limited and example input output false explanation not ugly since includes prime factor constraints
maximum product two elements array given array integers nums will choose two different indices and that array return maximum value numsinumsj example input nums output explanation if choose indices and indexed from will get maximum value that numsnums example input nums output explanation choosing indices and indexed from will get maximum value example input nums output constraints numslength numsi
pacific atlantic water flow there rectangular island that borders both pacific ocean and atlantic ocean pacific ocean touches islands left and top edges and atlantic ocean touches islands right and bottom edges island partitioned into grid square cells given integer matrix heights where heightsrc represents height above sea level cell coordinate island receives lot rain and rain water can flow neighboring cells directly north south east and west if neighboring cells height less than or equal current cells height water can flow from any cell adjacent ocean into ocean return list grid coordinates result where resulti ri ci denotes that rain water can flow from cell ri ci both pacific and atlantic oceans example input heights output explanation following cells can flow pacific and atlantic oceans as shown below pacific ocean atlantic ocean pacific ocean atlantic ocean pacific ocean atlantic ocean pacific ocean atlantic ocean pacific ocean atlantic ocean pacific ocean atlantic ocean pacific ocean atlantic ocean note that there other possible paths these cells flow pacific and atlantic oceans example input heights output explanation water can flow from only cell pacific and atlantic oceans constraints heightslength heightsrlength heightsrc
insert interval given array nonoverlapping intervals intervals where intervalsi starti endi represent start and end ith interval and intervals sorted ascending order starti also given interval newinterval start end that represents start and end another interval insert newinterval into intervals such that intervals still sorted ascending order starti and intervals still does not have any overlapping intervals merge overlapping intervals if necessary return intervals after insertion example input intervals newinterval output example input intervals newinterval output explanation because new interval overlaps constraints intervalslength intervalsilength starti endi intervals sorted starti ascending order newintervallength start end
split minimum sum given positive integer num split into two nonnegative integers num and num such that concatenation num and num permutation num other words sum number occurrences each digit num and num equal number occurrences that digit num num and num can contain leading zeros return minimum possible sum num and num notes guaranteed that num does not contain any leading zeros order occurrence digits num and num may differ from order occurrence num example input num output explanation can split so that num and num giving sum can prove that indeed minimal possible sum example input num output explanation can split so that num and num which would give optimal sum constraints num
incremental memory leak given two integers memory and memory representing available memory bits two memory sticks there currently faulty program running that consumes increasing amount memory every second ith second starting from bits memory allocated stick more available memory or from first memory stick if both have same available memory if neither stick has least bits available memory program crashes return array containing crashtime memorycrash memorycrash where crashtime time seconds when program crashed and memorycrash and memorycrash available bits memory first and second sticks respectively example input memory memory output explanation memory allocated as follows st second bit memory allocated stick first stick now has bit available memory nd second bits memory allocated stick second stick now has bits available memory rd second program crashes sticks have and bits available respectively example input memory memory output explanation memory allocated as follows st second bit memory allocated stick second stick now has bit available memory nd second bits memory allocated stick second stick now has bits available memory rd second bits memory allocated stick first stick now has bits available memory th second bits memory allocated stick second stick now has bits available memory th second bits memory allocated stick first stick now has bits available memory th second program crashes sticks have and bits available respectively constraints memory memory
majority element ii given integer array size find all elements that appear more than times example input nums output example input nums output example input nums output constraints numslength numsi follow up could solve problem linear time and space
apply discount prices sentence string singlespace separated words where each word can contain digits lowercase letters and dollar sign word represents price if sequence digits preceded dollar sign example and represent prices while and do not given string sentence representing sentence and integer discount each word representing price apply discount discount price and update word sentence all updated prices should be represented exactly two decimal places return string representing modified sentence note that all prices will contain most digits example input sentence there and candies shop discount output there and candies shop explanation words which represent prices and discount yields so replaced discount yields since need have exactly decimal places after price replace example input sentence discount output explanation applying discount any price will result words representing prices and each them replaced constraints sentencelength sentence consists lowercase english letters digits and sentence does not have leading or trailing spaces all words sentence separated single space all prices will be positive numbers without leading zeros all prices will have most digits discount
invalid transactions transaction possibly invalid if amount exceeds or if occurs within and including minutes another transaction same name different city given array strings transaction where transactionsi consists commaseparated values representing name time minutes amount and city transaction return list transactions that possibly invalid may return answer any order example input transactions alicemtvalicebeijing output alicemtvalicebeijing explanation first transaction invalid because second transaction occurs within difference minutes have same name and different city similarly second one invalid too example input transactions alicemtvalicemtv output alicemtv example input transactions alicemtvbobmtv output bobmtv constraints transactionslength each transactionsi takes form nametimeamountcity each name and city consist lowercase english letters and have lengths between and each time consist digits and represent integer between and each amount consist digits and represent integer between and
allow one function call given function fn return new function that identical original function except that ensures fn called most once first time returned function called should return same result as fn every subsequent time called should return undefined example input fn abc calls output callsvalue explanation const oncefn oncefn oncefn oncefn undefined fn not called example input fn abc calls output callsvalue explanation const oncefn oncefn oncefn oncefn undefined fn not called oncefn undefined fn not called constraints callslength callsilength jsonstringifycallslength
describe painting there long and thin painting that can be represented number line painting painted multiple overlapping segments where each segment painted unique color given integer array segments where segmentsi starti endi colori represents halfclosed segment starti endi colori as color colors overlapping segments painting mixed when painted when two or more colors mix form new color that can be represented as set mixed colors example if colors and mixed then resulting mixed color sake simplicity should only output sum elements set rather than full set want describe painting minimum number nonoverlapping halfclosed segments these mixed colors these segments can be represented array painting where paintingj leftj rightj mixj describes halfclosed segment leftj rightj mixed color sum mixj example painting created segments can be described painting because colored sum from both first and second segments colored from only second segment return array painting describing finished painting excluding any parts that not painted may return segments any order halfclosed segment section number line between points and including point and not including point example input segments output explanation painting can be described as follows colored sum from first and third segments colored sum from second and third segments example input segments output explanation painting can be described as follows colored from first segment colored sum from first and second segments colored from second segment colored from third segment example input segments output explanation painting can be described as follows colored sum from first and second segments colored sum from third and fourth segments note that returning single segment incorrect because mixed color sets different constraints segmentslength segmentsilength starti endi colori each colori distinct
mice and cheese there two mice and different types cheese each type cheese should be eaten exactly one mouse point cheese index indexed rewardi if first mouse eats rewardi if second mouse eats given positive integer array reward positive integer array reward and nonnegative integer return maximum points mice can achieve if first mouse eats exactly types cheese example input reward reward output explanation this example first mouse eats nd indexed and rd types cheese and second mouse eats th and st types cheese total points can be proven that maximum total points that mice can achieve example input reward reward output explanation this example first mouse eats th indexed and st types cheese and second mouse does not eat any cheese total points can be proven that maximum total points that mice can achieve constraints rewardlength rewardlength rewardi rewardi
minimum bit flips convert number bit flip number choosing bit binary representation and flipping from either or example binary representation and may choose any bit including any leading zeros not shown and flip can flip first bit from right get flip second bit from right get flip fifth bit from right leading zero get etc given two integers start and goal return minimum number bit flips convert start goal example input start goal output explanation binary representation and and respectively can convert steps flip first bit from right flip third bit from right flip fourth bit from right can be shown cannot convert less than steps hence return example input start goal output explanation binary representation and and respectively can convert steps flip first bit from right flip second bit from right flip third bit from right can be shown cannot convert less than steps hence return constraints start goal
minimum number flips convert binary matrix zero matrix given binary matrix mat one step can choose one cell and flip and all four neighbors if exist flip changing and pair cells called neighbors if share one edge return minimum number steps required convert mat zero matrix or if cannot binary matrix matrix all cells equal or only zero matrix matrix all cells equal example input mat output explanation one possible solution flip then and finally as shown example input mat output explanation given matrix zero matrix do not need change example input mat output explanation given matrix cannot be zero matrix constraints matlength matilength matij either or
flatten deeply nested array given multidimensional array arr and depth return flattened version that array multidimensional array recursive data structure that contains integers or other multidimensional arrays flattened array version that array some or all subarrays removed and replaced actual elements that subarray this flattening operation should only be done if current depth nesting less than depth elements first array considered be please solve without builtin arrayflat method example input arr output explanation passing depth will always result original array this because smallest possible depth subarray not less than thus no subarray should be flattened example input arr output explanation subarrays starting and all flattened this because their depth less than however remains unflattened because its depth example input arr output explanation maximum depth any subarray thus all them flattened constraints count numbers arr count subarrays arr maxdepth each number
count odd numbers interval range given two nonnegative integers low and high return count odd numbers between low and high inclusive example input low high output explanation odd numbers between and example input low high output explanation odd numbers between and constraints low high
find all numbers disappeared array given array nums integers where numsi range return array all integers range that do not appear nums example input nums output example input nums output constraints numslength numsi follow up could do without extra space and runtime may assume returned list does not count as extra space
operations tree given tree nodes numbered from form parent array parent where parenti parent ith node root tree node so parent since has no parent want design data structure that allows users lock unlock and upgrade nodes tree data structure should support following functions lock locks given node given user and prevents other users from locking same node may only lock node using this function if node unlocked unlock unlocks given node given user may only unlock node using this function if currently locked same user upgrade locks given node given user and unlocks all its descendants regardless who locked may only upgrade node if all conditions true node unlocked has least one locked descendant any user and does not have any locked ancestors implement lockingtree class lockingtreeint parent initializes data structure parent array lockint num int user returns true if possible user id user lock node num or false otherwise if possible node num will become locked user id user unlockint num int user returns true if possible user id user unlock node num or false otherwise if possible node num will become unlocked upgradeint num int user returns true if possible user id user upgrade node num or false otherwise if possible node num will be upgraded example input lockingtree lock unlock unlock lock upgrade lock output null true false true true true false explanation lockingtree lockingtree new lockingtree lockingtreelock return true because node unlocked node will now be locked user lockingtreeunlock return false because user cannot unlock node locked user lockingtreeunlock return true because node previously locked user node will now be unlocked lockingtreelock return true because node unlocked node will now be locked user lockingtreeupgrade return true because node unlocked and has least one locked descendant node node will now be locked user and node will now be unlocked lockingtreelock return false because node already locked constraints parentlength parenti parent num user parent represents valid tree most calls total will be made lock unlock and upgrade
reverse pairs given integer array nums return number reverse pairs array reverse pair pair where numslength and numsi numsj example input nums output explanation reverse pairs nums nums nums nums example input nums output explanation reverse pairs nums nums nums nums nums nums constraints numslength numsi
best team no conflicts manager basketball team upcoming tournament want choose team highest overall score score team sum scores all players team however basketball team not allowed have conflicts conflict exists if younger player has strictly higher score than older player conflict does not occur between players same age given two lists scores and ages where each scoresi and agesi represents score and age ith player respectively return highest overall score all possible basketball teams example input scores ages output explanation can choose all players example input scores ages output explanation best choose last players notice that allowed choose multiple people same age example input scores ages output explanation best choose first players constraints scoreslength ageslength scoreslength ageslength scoresi agesi
unique binary search trees given integer return number structurally unique bsts binary search trees which has exactly nodes unique values from example input output example input output constraints
find pivot integer given positive integer find pivot integer such that sum all elements between and inclusively equals sum all elements between and inclusively return pivot integer if no such integer exists return guaranteed that there will be most one pivot index given input example input output explanation pivot integer since example input output explanation pivot integer since example input output explanation can be proved that no such integer exist constraints
maximum product length two palindromic substrings given indexed string and tasked finding two nonintersecting palindromic substrings odd length such that product their lengths maximized more formally want choose four integers such that slength and both substrings sij and skl palindromes and have odd lengths sij denotes substring from index index inclusive return maximum possible product lengths two nonintersecting palindromic substrings palindrome string that same forward and backward substring contiguous sequence characters string example input ababbb output explanation substrings aba and bbb palindromes odd length product example input zaaaxbbby output explanation substrings aaa and bbb palindromes odd length product constraints slength consists lowercase english letters
maximum number eaten apples there special kind apple tree that grows apples every day days ith day tree grows applesi apples that will rot after daysi days that day daysi apples will be rotten and cannot be eaten some days apple tree does not grow any apples which denoted applesi and daysi decided eat most one apple day keep doctors away note that can keep eating after first days given two integer arrays days and apples length return maximum number apples can eat example input apples days output explanation can eat apples first day eat apple that grew first day second day eat apple that grew second day third day eat apple that grew second day after this day apples that grew third day rot fourth seventh days eat apples that grew fourth day example input apples days output explanation can eat apples first third day eat apples that grew first day do nothing fouth and fifth days sixth and seventh days eat apples that grew sixth day constraints appleslength dayslength applesi daysi daysi if and only if applesi
redundant connection this problem tree undirected graph that connected and has no cycles given graph that started as tree nodes labeled from one additional edge added added edge has two different vertices chosen from and not edge that already existed graph represented as array edges length where edgesi ai bi indicates that there edge between nodes ai and bi graph return edge that can be removed so that resulting graph tree nodes if there multiple answers return answer that occurs last input example input edges output example input edges output constraints edgeslength edgesilength ai bi edgeslength ai bi there no repeated edges given graph connected
find palindrome fixed length given integer array queries and positive integer intlength return array answer where answeri either queriesith smallest positive palindrome length intlength or if no such palindrome exists palindrome number that reads same backwards and forwards palindromes cannot have leading zeros example input queries intlength output explanation first few palindromes length th palindrome length example input queries intlength output explanation first six palindromes length and constraints querieslength queriesi intlength
max consecutive ones given binary array nums return maximum number consecutive array example input nums output explanation first two digits or last three digits consecutive maximum number consecutive example input nums output constraints numslength numsi either or
minimum amount time fill cups have water dispenser that can dispense cold warm and hot water every second can either fill up cups different types water or cup any type water given indexed integer array amount length where amount amount and amount denote number cold warm and hot water cups need fill respectively return minimum number seconds needed fill up all cups example input amount output explanation one way fill up cups second fill up cold cup and warm cup second fill up warm cup and hot cup second fill up warm cup and hot cup second fill up warm cup can be proven that minimum number seconds needed example input amount output explanation one way fill up cups second fill up cold cup and hot cup second fill up cold cup and warm cup second fill up cold cup and warm cup second fill up warm cup and hot cup second fill up cold cup and hot cup second fill up cold cup and warm cup second fill up hot cup example input amount output explanation every second fill up cold cup constraints amountlength amounti
palindrome pairs given indexed array unique strings words palindrome pair pair integers such that wordslength and wordsi wordsj concatenation two strings palindrome return array all palindrome pairs words example input words abcddcballsssssll output explanation palindromes abcddcbadcbaabcdsllsllssssll example input words battabcat output explanation palindromes battabtabbat example input words output explanation palindromes aa constraints wordslength wordsilength wordsi consists lowercase english letters
maximum profit job scheduling have jobs where every job scheduled be done from starttimei endtimei obtaining profit profiti youre given starttime endtime and profit arrays return maximum profit can take such that there no two jobs subset overlapping time range if choose job that ends time will be able start another job that starts time example input starttime endtime profit output explanation subset chosen first and fourth job time range get profit example input starttime endtime profit output explanation subset chosen first fourth and fifth job profit obtained example input starttime endtime profit output constraints starttimelength endtimelength profitlength starttimei endtimei profiti
split array into fibonacci sequence given string digits num such as can split into fibonaccilike sequence formally fibonaccilike sequence list nonnegative integers such that fi that each integer fits bit signed integer type flength and fi fi fi all flength note that when splitting string into pieces each piece must not have extra leading zeroes except if piece number itself return any fibonaccilike sequence split from num or return if cannot be done example input num output explanation output would also be accepted example input num output explanation task impossible example input num output explanation leading zeroes not allowed so not valid constraints numlength num contains only digits
count asterisks given string where every two consecutive vertical bars grouped into pair other words st and nd make pair rd and th make pair and so forth return number excluding between each pair note that each will belong exactly one pair example input leetcode output explanation considered characters underlined leetcode characters between first and second excluded from answer also characters between third and fourth excluded from answer there asterisks considered therefore return example input iamprogrammer output explanation this example there no asterisks therefore return example input youarebeautiful output explanation considered characters underlined youarebeautiful there asterisks considered therefore return constraints slength consists lowercase english letters vertical bars and asterisks contains even number vertical bars
minimum swaps group all together ii swap defined as taking two distinct positions array and swapping values them circular array defined as array where consider first element and last element be adjacent given binary circular array nums return minimum number swaps required group all present array together any location example input nums output explanation here few ways group all together using swap using swap using swaps using circular property array there no way group all together swaps thus minimum number swaps required example input nums output explanation here few ways group all together using swaps using circular property array using swaps there no way group all together or swaps thus minimum number swaps required example input nums output explanation all already grouped together due circular property array thus minimum number swaps required constraints numslength numsi either or
minimum absolute difference given array distinct integers arr find all pairs elements minimum absolute difference any two elements return list pairs ascending orderwith respect pairs each pair follows from arr equals minimum absolute difference any two elements arr example input arr output explanation minimum absolute difference list all pairs difference equal ascending order example input arr output example input arr output constraints arrlength arri
merge intervals given array intervals where intervalsi starti endi merge all overlapping intervals and return array nonoverlapping intervals that cover all intervals input example input intervals output explanation since intervals and overlap merge them into example input intervals output explanation intervals and considered overlapping constraints intervalslength intervalsilength starti endi
add arrayform integer arrayform integer num array representing its digits left right order example num array form given num arrayform integer and integer return arrayform integer num example input num output explanation example input num output explanation example input num output explanation constraints numlength numi num does not contain any leading zeros except zero itself
count equal and divisible pairs array given indexed integer array nums length and integer return number pairs where such that numsi numsj and divisible example input nums output explanation there pairs that meet all requirements nums nums and which divisible nums nums and which divisible nums nums and which divisible nums nums and which divisible example input nums output explanation since no value nums repeated there no pairs ij that meet all requirements constraints numslength numsi
equal row and column pairs given indexed integer matrix grid return number pairs ri cj such that row ri and column cj equal row and column pair considered equal if contain same elements same order ie equal array example input grid output explanation there equal row and column pair row column example input grid output explanation there equal row and column pairs row column row column row column constraints gridlength gridilength gridij
shortest path get all keys given grid grid where empty cell wall starting point lowercase letters represent keys uppercase letters represent locks start starting point and one move consists walking one space one four cardinal directions cannot walk outside grid or walk into wall if walk over key can pick up and cannot walk over lock unless have its corresponding key some there exactly one lowercase and one uppercase letter first letters english alphabet grid this means that there exactly one key each lock and one lock each key and also that letters used represent keys and locks chosen same order as english alphabet return lowest number moves acquire all keys if impossible return example input grid abab output explanation note that goal obtain all keys not open all locks example input grid aabb output example input grid aa output constraints gridlength gridilength gridij either english letter or number keys grid range each key grid unique each key grid has matching lock
count number vowel strings range given indexed array string words and two integers left and right string called vowel string if starts vowel character and ends vowel character where vowel characters and return number vowel strings wordsi where belongs inclusive range left right example input words areamyu left right output explanation vowel string because starts and ends amy not vowel string because does not end vowel vowel string because starts and ends number vowel strings mentioned range example input words heyaeomuoooartro left right output explanation aeo vowel string because starts and ends mu not vowel string because does not start vowel ooo vowel string because starts and ends artro vowel string because starts and ends number vowel strings mentioned range constraints wordslength wordsilength wordsi consists only lowercase english letters left right wordslength
repeated dna sequences dna sequence composed series nucleotides abbreviated as and example acgaattccg dna sequence when studying dna useful identify repeated sequences within dna given string that represents dna sequence return all letterlong sequences substrings that occur more than once dna molecule may return answer any order example input aaaaacccccaaaaaccccccaaaaagggttt output aaaaaccccccccccaaaaa example input aaaaaaaaaaaaa output aaaaaaaaaa constraints slength si either or
check if point reachable there exists infinitely large grid currently point and need reach point targetx targety using finite number steps one step can move from point any one following points given two integers targetx and targety representing xcoordinate and ycoordinate your final position return true if can reach point from using some number steps and false otherwise example input targetx targety output false explanation impossible reach from using any sequence moves so false returned example input targetx targety output true explanation can follow path constraints targetx targety
number employees which report each employee sql schema table employees column name type employeeid int name varchar reportsto int age int employeeid primary key this table this table contains information about employees and id manager report some employees do not report anyone reportsto null this problem will consider manager employee who has least other employee reporting them write sql query report ids and names all managers number employees who report directly them and average age reports rounded nearest integer return result table ordered employeeid query result format following example example input employees table employeeid name reportsto age hercy null alice bob winston null output employeeid name reportscount averageage hercy explanation hercy has people report directly him alice and bob their average age which after rounding nearest integer
subrectangle queries implement class subrectanglequeries which receives rows cols rectangle as matrix integers constructor and supports two methods updatesubrectangleint row int col int row int col int newvalue updates all values newvalue subrectangle whose upper left coordinate rowcol and bottom right coordinate rowcol getvalueint row int col returns current value coordinate rowcol from rectangle example input subrectanglequeriesgetvalueupdatesubrectanglegetvaluegetvalueupdatesubrectanglegetvaluegetvalue output nullnullnull explanation subrectanglequeries subrectanglequeries new subrectanglequeries initial rectangle looks like subrectanglequeriesgetvalue return subrectanglequeriesupdatesubrectangle after this update rectangle looks like subrectanglequeriesgetvalue return subrectanglequeriesgetvalue return subrectanglequeriesupdatesubrectangle after this update rectangle looks like subrectanglequeriesgetvalue return subrectanglequeriesgetvalue return example input subrectanglequeriesgetvalueupdatesubrectanglegetvaluegetvalueupdatesubrectanglegetvalue output nullnullnull explanation subrectanglequeries subrectanglequeries new subrectanglequeries subrectanglequeriesgetvalue return subrectanglequeriesupdatesubrectangle subrectanglequeriesgetvalue return subrectanglequeriesgetvalue return subrectanglequeriesupdatesubrectangle subrectanglequeriesgetvalue return constraints there will be most operations considering both methods updatesubrectangle and getvalue rows cols rows rectanglelength cols rectangleilength row row rows col col cols newvalue rectangleij row rows col cols
partition labels given string want partition string into as many parts as possible so that each letter appears most one part note that partition done so that after concatenating all parts order resultant string should be return list integers representing size these parts example input ababcbacadefegdehijhklij output explanation partition ababcbaca defegde hijhklij this partition so that each letter appears most one part partition like ababcbacadefegde hijhklij incorrect because splits into less parts example input eccbbbbdec output constraints slength consists lowercase english letters
count different palindromic subsequences given string return number different nonempty palindromic subsequences since answer may be very large return modulo subsequence string obtained deleting zero or more characters from string sequence palindromic if equal sequence reversed two sequences and different if there some which ai bi example input bccb output explanation different nonempty palindromic subsequences bb cc bcb bccb note that bcb counted only once even though occurs twice example input abcdabcdabcdabcdabcdabcdabcdabcddcbadcbadcbadcbadcbadcbadcbadcba output explanation there different nonempty palindromic subsequences which modulo constraints slength si either or
time needed rearrange binary string given binary string one second all occurrences simultaneously replaced this process repeats until no occurrences exist return number seconds needed complete this process example input output explanation after one second becomes after another second becomes after third second becomes after fourth second becomes no occurrence exists any longer and process needed seconds complete so return example input output explanation no occurrence exists and processes needed seconds complete so return constraints slength si either or follow up can solve this problem time complexity
get watched videos your friends there people each person has unique id between and given arrays watchedvideos and friends where watchedvideosi and friendsi contain list watched videos and list friends respectively person id level videos all watched videos your friends level videos all watched videos friends your friends and so general level videos all watched videos people shortest path exactly equal given your id and level videos return list videos ordered their frequencies increasing videos same frequency order them alphabetically from least greatest example input watchedvideos abcbcd friends id level output bc explanation have id green color figure and your friends yellow color figure person id watchedvideos person id watchedvideos bc frequencies watchedvideos your friends example input watchedvideos abcbcd friends id level output explanation have id green color figure and only friend your friends person id yellow color figure constraints watchedvideoslength friendslength watchedvideosilength watchedvideosijlength friendsilength friendsij id level if friendsi contains then friendsj contains
make string great given string lower and upper case english letters good string string which doesnt have two adjacent characters si and si where slength si lowercase letter and si same letter but uppercase or viceversa make string good can choose two adjacent characters that make string bad and remove them can keep doing this until string becomes good return string after making good answer guaranteed be unique under given constraints notice that empty string also good example input leeeetcode output leetcode explanation first step either choose or both will result leeeetcode be reduced leetcode example input abbacc output explanation have many possible scenarios and all lead same answer example abbacc aacc cc abbacc abba aa example input output constraints slength contains only lower and upper case english letters
array objects matrix write function that converts array objects arr into matrix arr array objects or arrays each item array can be deeply nested child arrays and child objects can also contain numbers strings booleans and null values first row should be column names if there no nesting column names unique keys within objects if there nesting column names respective paths object separated each remaining rows corresponds object arr each value matrix corresponds value object if given object doesnt contain value given column cell should contain empty string colums matrix should be lexographically ascending order example input arr output explanation there two unique column names two objects and corresponds coresponds example input arr output explanation there unique column names first object has values associated and second object has values associated and third object has no keys so just row empty strings example input arr output ab ac ad explanation this example objects nested keys represent full path each value separated periods there three paths ab ac ad example input arr null true output null true explanation arrays also considered objects their keys being their indices each array has one element so keys and example input arr output explanation there no keys so every row empty array constraints arrlength unique keys
string integer atoi implement myatoistring function which converts string bit signed integer similar ccs atoi function algorithm myatoistring as follows read and ignore any leading whitespace check if next character if not already end string or read this character if either this determines if final result negative or positive respectively assume result positive if neither present read next characters until next nondigit character or end input reached rest string ignored convert these digits into integer ie if no digits read then integer change sign as necessary from step if integer out bit signed integer range then clamp integer so that remains range specifically integers less than should be clamped and integers greater than should be clamped return integer as final result note only space character considered whitespace character do not ignore any characters other than leading whitespace or rest string after digits example input output explanation underlined characters what read caret current reader position step no characters read because there no leading whitespace step no characters read because there neither nor step read parsed integer since range final result example input output explanation step leading whitespace read and ignored step read so result should be negative step read parsed integer since range final result example input words output explanation step words no characters read because there no leading whitespace step words no characters read because there neither nor step words read reading stops because next character nondigit parsed integer since range final result constraints slength consists english letters lowercase and uppercase digits and
number ways arrive destination city that consists intersections numbered from bidirectional roads between some intersections inputs generated such that can reach any intersection from any other intersection and that there most one road between any two intersections given integer and integer array roads where roadsi ui vi timei means that there road between intersections ui and vi that takes timei minutes travel want know how many ways can travel from intersection intersection shortest amount time return number ways can arrive your destination shortest amount time since answer may be large return modulo example input roads output explanation shortest amount time takes go from intersection intersection minutes four ways get there minutes example input roads output explanation there only one way go from intersection intersection and takes minutes constraints roadslength roadsilength ui vi timei ui vi there most one road connecting any two intersections can reach any intersection from any other intersection
market analysis sql schema table users column name type userid int joindate date favoritebrand varchar userid primary key this table this table has info users online shopping website where users can sell and buy items table orders column name type orderid int orderdate date itemid int buyerid int sellerid int orderid primary key this table itemid foreign key items table buyerid and sellerid foreign keys users table table items column name type itemid int itembrand varchar itemid primary key this table write sql query find each user join date and number orders made as buyer return result table any order query result format following example example input users table userid joindate favoritebrand lenovo samsung lg hp orders table orderid orderdate itemid buyerid sellerid items table itemid itembrand samsung lenovo lg hp output buyerid joindate ordersin
lexicographically smallest palindrome given string consisting lowercase english letters and allowed perform operations one operation can replace character another lowercase english letter your task make palindrome minimum number operations possible if there multiple palindromes that can be made using minimum number operations make lexicographically smallest one string lexicographically smaller than string same length if first position where and differ string has letter that appears earlier alphabet than corresponding letter return resulting palindrome string example input egcfe output efcfe explanation minimum number operations make egcfe palindrome and lexicographically smallest palindrome string can get modifying one character efcfe changing example input abcd output abba explanation minimum number operations make abcd palindrome and lexicographically smallest palindrome string can get modifying two characters abba example input seven output neven explanation minimum number operations make seven palindrome and lexicographically smallest palindrome string can get modifying one character neven constraints slength consists only lowercase english letters
partition array such that maximum difference given integer array nums and integer may partition nums into one or more subsequences such that each element nums appears exactly one subsequences return minimum number subsequences needed such that difference between maximum and minimum values each subsequence most subsequence sequence that can be derived from another sequence deleting some or no elements without changing order remaining elements example input nums output explanation can partition nums into two subsequences and difference between maximum and minimum value first subsequence difference between maximum and minimum value second subsequence since two subsequences created return can be shown that minimum number subsequences needed example input nums output explanation can partition nums into two subsequences and difference between maximum and minimum value first subsequence difference between maximum and minimum value second subsequence since two subsequences created return note that another optimal solution partition nums into two subsequences and example input nums output explanation can partition nums into three subsequences and difference between maximum and minimum value first subsequences difference between maximum and minimum value second subsequences difference between maximum and minimum value third subsequences since three subsequences created return can be shown that minimum number subsequences needed constraints numslength numsi
spiral matrix iv given two integers and which represent dimensions matrix also given head linked list integers generate matrix that contains integers linked list presented spiral order clockwise starting from topleft matrix if there remaining empty spaces fill them return generated matrix example input head output explanation diagram above shows how values printed matrix note that remaining spaces matrix filled example input head output explanation diagram above shows how values printed from left right matrix last space matrix set constraints number nodes list range nodeval
make ksubarray sums equal given indexed integer array arr and integer array arr circular other words first element array next element last element and last element array previous element first element can do following operation any number times pick any element from arr and increase or decrease return minimum number operations such that sum each subarray length equal subarray contiguous part array example input arr output explanation can do one operation index make its value equal array after operation subarray starts index and its sum subarray starts index and its sum subarray starts index and its sum subarray starts index and its sum example input arr output explanation can do three operations index make its value equal and two operations index make its value equal array after operations subarray starts index and its sum subarray starts index and its sum subarray starts index and its sum subarray starts index and its sum constraints arrlength arri
fraction addition and subtraction given string expression representing expression fraction addition and subtraction return calculation result string format final result should be irreducible fraction if your final result integer change format fraction that has denominator so this case should be converted example input expression output example input expression output example input expression output constraints input string only contains and so does output each fraction input and output has format numeratordenominator if first input fraction or output positive then will be omitted input only contains valid irreducible fractions where numerator and denominator each fraction will always be range if denominator means this fraction actually integer fraction format defined above number given fractions will be range numerator and denominator final result guaranteed be valid and range bit int
total hamming distance hamming distance between two integers number positions which corresponding bits different given integer array nums return sum hamming distances between all pairs integers nums example input nums output explanation binary representation and just showing four bits relevant this case answer will be hammingdistance hammingdistance hammingdistance example input nums output constraints numslength numsi answer given input will fit bit integer
binary tree cameras given root binary tree install cameras tree nodes where each camera node can monitor its parent itself and its immediate children return minimum number cameras needed monitor all nodes tree example input root null output explanation one camera enough monitor all nodes if placed as shown example input root nullnullnullnull output explanation least two cameras needed monitor all nodes tree above image shows one valid configurations camera placement constraints number nodes tree range nodeval
maximum absolute sum any subarray given integer array nums absolute sum subarray numsl numsl numsr numsr absnumsl numsl numsr numsr return maximum absolute sum any possibly empty subarray nums note that absx defined as follows if negative integer then absx if nonnegative integer then absx example input nums output explanation subarray has absolute sum abs abs example input nums output explanation subarray has absolute sum abs abs constraints numslength numsi
cat and mouse ii game played cat and mouse named cat and mouse environment represented grid size rows cols where each element wall floor player cat mouse or food players represented characters ccatmmouse floors represented character and can be walked walls represented character and cannot be walked food represented character and can be walked there only one each character and grid mouse and cat play according following rules mouse moves first then take turns move during each turn cat and mouse can jump one four directions left right up down cannot jump over wall nor outside grid catjump mousejump maximum lengths cat and mouse can jump time respectively cat and mouse can jump less than maximum length staying same position allowed mouse can jump over cat game can end ways if cat occupies same position as mouse cat wins if cat reaches food first cat wins if mouse reaches food first mouse wins if mouse cannot get food within turns cat wins given rows cols matrix grid and two integers catjump and mousejump return true if mouse can win game if both cat and mouse play optimally otherwise return false example input grid fcm catjump mousejump output true explanation cat cannot catch mouse its turn nor can get food before mouse example input grid mcf catjump mousejump output true example input grid mcf catjump mousejump output false constraints rows gridlength cols gridilength rows cols gridij consist only characters and there only one each character and grid catjump mousejump
number squareful arrays array squareful if sum every pair adjacent elements perfect square given integer array nums return number permutations nums that squareful two permutations perm and perm different if there some index such that permi permi example input nums output explanation and valid permutations example input nums output constraints numslength numsi
radius subarray averages given indexed array nums integers and integer kradius average subarray nums centered some index radius average all elements nums between indices and inclusive if there less than elements before or after index then kradius average build and return array avgs length where avgsi kradius average subarray centered index average elements sum elements divided using integer division integer division truncates toward zero which means losing its fractional part example average four elements and which truncates example input nums output explanation avg avg and avg because there less than elements before each index sum subarray centered index radius using integer division avg subarray centered index avg subarray centered index avg avg avg and avg because there less than elements after each index example input nums output explanation sum subarray centered index radius avg example input nums output explanation avg because there less than elements before and after index constraints numslength numsi
maximum binary tree given integer array nums no duplicates maximum binary tree can be built recursively from nums using following algorithm create root node whose value maximum value nums recursively build left subtree subarray prefix left maximum value recursively build right subtree subarray suffix right maximum value return maximum binary tree built from nums example input nums output nullnullnull explanation recursive calls as follow largest value left prefix and right suffix largest value left prefix and right suffix empty array so no child largest value left prefix and right suffix empty array so no child only one element so child node value largest value left prefix and right suffix only one element so child node value empty array so no child example input nums output nullnull constraints numslength numsi all integers nums unique
construct string from binary tree given root binary tree construct string consisting parenthesis and integers from binary tree preorder traversal way and return omit all empty parenthesis pairs that do not affect onetoone mapping relationship between string and original binary tree example input root output explanation originally needs be but need omit all unnecessary empty parenthesis pairs and will be example input root null output explanation almost same as first example except cannot omit first parenthesis pair break onetoone mapping relationship between input and output constraints number nodes tree range nodeval
most profit assigning work have jobs and workers given three arrays difficulty profit and worker where difficultyi and profiti difficulty and profit ith job and workerj ability jth worker ie jth worker can only complete job difficulty most workerj every worker can be assigned most one job but one job can be completed multiple times example if three workers attempt same job that pays then total profit will be if worker cannot complete any job their profit return maximum profit can achieve after assigning workers jobs example input difficulty profit worker output explanation workers assigned jobs difficulty and get profit separately example input difficulty profit worker output constraints difficultylength profitlength workerlength difficultyi profiti workeri
reconstruct itinerary given list airline tickets where ticketsi fromi toi represent departure and arrival airports one flight reconstruct itinerary order and return all tickets belong man who departs from jfk thus itinerary must begin jfk if there multiple valid itineraries should return itinerary that has smallest lexical order when read as single string example itinerary jfk lga has smaller lexical order than jfk lgb may assume all tickets form least one valid itinerary must use all tickets once and only once example input tickets muclhrjfkmucsfosjclhrsfo output jfkmuclhrsfosjc example input tickets jfksfojfkatlsfoatlatljfkatlsfo output jfkatljfksfoatlsfo explanation another possible reconstruction jfksfoatljfkatlsfo but larger lexical order constraints ticketslength ticketsilength fromilength toilength fromi and toi consist uppercase english letters fromi toi
